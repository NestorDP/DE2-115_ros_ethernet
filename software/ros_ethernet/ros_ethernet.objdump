
ros_ethernet.elf:     file format elf32-littlenios2
ros_ethernet.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000250

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001a478 memsz 0x0001a478 flags r-x
    LOAD off    0x0001b498 vaddr 0x0801a498 paddr 0x0801c570 align 2**12
         filesz 0x000020d8 memsz 0x000020d8 flags rw-
    LOAD off    0x0001d648 vaddr 0x0801e648 paddr 0x0801e648 align 2**12
         filesz 0x00000000 memsz 0x00800bcc flags rw-
    LOAD off    0x0001e000 vaddr 0x10001000 paddr 0x0881f214 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019c00  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000648  08019e50  08019e50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000020d8  0801a498  0801c570  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00800c76  0801e648  0801e648  0001d648  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0881f214  0881f214  0001e080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  10001000  0881f214  0001e000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .onchip_memory 00000000  10002000  10002000  0001e080  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001e080  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001310  00000000  00000000  0001e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0003066e  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000c31b  00000000  00000000  0004fa26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000107ad  00000000  00000000  0005bd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004298  00000000  00000000  0006c4f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006453  00000000  00000000  00070788  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00018626  00000000  00000000  00076bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0008f204  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000019d8  00000000  00000000  0008f218  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00097252  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00097255  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00097258  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00097259  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0009725a  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0009725e  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00097262  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  00097266  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  0009726a  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  0009726e  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000006  00000000  00000000  00097272  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000002e  00000000  00000000  00097278  2**0
                  CONTENTS, READONLY
 31 .jdi          00004268  00000000  00000000  000972a6  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000a711b  00000000  00000000  0009b50e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000250 l    d  .text	00000000 .text
08019e50 l    d  .rodata	00000000 .rodata
0801a498 l    d  .rwdata	00000000 .rwdata
0801e648 l    d  .bss	00000000 .bss
0881f214 l    d  .sdram	00000000 .sdram
10001000 l    d  .descriptor_memory	00000000 .descriptor_memory
10002000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ros_ethernet_bsp//obj/HAL/src/crt0.o
08000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/Source/portable/GCC/NiosII/port_asm.o
08000020 l       .exceptions	00000000 save_context
0800009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
080000ac l       .exceptions	00000000 hw_irq_test
08000150 l       .exceptions	00000000 soft_exceptions
080000c0 l       .exceptions	00000000 hw_irq_handler
080000d4 l       .exceptions	00000000 restore_context
0800016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 BlockQ.c
0801e648 l     O .bss	00000006 sBlockingConsumerCount
0801e64e l     O .bss	00000006 sBlockingProducerCount
0800059c l     F .text	000000a0 vBlockingQueueConsumer
08000510 l     F .text	0000008c vBlockingQueueProducer
0801e654 l     O .bss	00000006 sLastBlockingConsumerCount.2740
0801e65a l     O .bss	00000006 sLastBlockingProducerCount.2741
00000000 l    df *ABS*	00000000 GenQTest.c
0801e660 l     O .bss	00000004 xErrorDetected
0801e664 l     O .bss	00000004 ulLoopCounter
0801e668 l     O .bss	00000004 ulLoopCounter2
0801e66c l     O .bss	00000004 ulGuardedVariable
0801e670 l     O .bss	00000004 xHighPriorityMutexTask
0801e674 l     O .bss	00000004 xMediumPriorityMutexTask
0801e678 l     O .bss	00000004 xBlockWasAborted
08000864 l     F .text	00000468 prvSendFrontAndBackTest
08000fb0 l     F .text	0000005c prvLowPriorityMutexTask
0800100c l     F .text	0000002c prvMediumPriorityMutexTask
08001038 l     F .text	0000007c prvHighPriorityMutexTask
08000ccc l     F .text	0000018c prvTakeTwoMutexesReturnInDifferentOrder
08000e58 l     F .text	00000158 prvTakeTwoMutexesReturnInSameOrder
0801e67c l     O .bss	00000004 ulLastLoopCounter.2773
0801e680 l     O .bss	00000004 ulLastLoopCounter2.2774
00000000 l    df *ABS*	00000000 PollQ.c
0801e684 l     O .bss	00000004 xPollingConsumerCount
0801e688 l     O .bss	00000004 xPollingProducerCount
0801e68c l     O .bss	00000004 xPolledQueue.2707
08001250 l     F .text	000000b0 vPolledQueueConsumer
080011ac l     F .text	000000a4 vPolledQueueProducer
00000000 l    df *ABS*	00000000 QPeek.c
0801e690 l     O .bss	00000004 xErrorDetected
0801e694 l     O .bss	00000004 ulLoopCounter
080016d0 l     F .text	00000164 prvLowPriorityPeekTask
08001648 l     F .text	00000088 prvMediumPriorityPeekTask
08001588 l     F .text	000000c0 prvHighPriorityPeekTask
08001434 l     F .text	00000154 prvHighestPriorityPeekTask
0801e698 l     O .bss	00000004 ulLastLoopCounter.2743
00000000 l    df *ABS*	00000000 blocktim.c
0801e6a8 l     O .bss	00000004 xTestQueue
0801e6ac l     O .bss	00000004 xSecondary
0801e6b0 l     O .bss	00000004 xPrimaryCycles
0801e6b4 l     O .bss	00000004 xSecondaryCycles
0801e6b8 l     O .bss	00000004 xErrorOccurred
0801e6bc l     O .bss	00000004 xRunIndicator
08001910 l     F .text	00000418 vPrimaryBlockTimeTestTask
08001d28 l     F .text	0000012c vSecondaryBlockTimeTestTask
08001e54 l     F .text	0000011c prvBasicDelayTests
0801e6c0 l     O .bss	00000004 xLastPrimaryCycleCount.2356
0801e6c4 l     O .bss	00000004 xLastSecondaryCycleCount.2357
00000000 l    df *ABS*	00000000 comtest.c
0801e6c8 l     O .bss	00000004 xPort
0801e6cc l     O .bss	00000004 uxBaseLED
0801e6d0 l     O .bss	00000004 uxRxLoops
08002074 l     F .text	000000b4 vComTxTask
08002128 l     F .text	00000118 vComRxTask
00000000 l    df *ABS*	00000000 countsem.c
0801e6d4 l     O .bss	00000004 xErrorDetected
0801e80c l     O .bss	00000018 xParameters
08002508 l     F .text	000000a8 prvCountingSemaphoreTask
08002380 l     F .text	000000c0 prvDecrementSemaphoreCount
08002440 l     F .text	000000c8 prvIncrementSemaphoreCount
0801e6d8 l     O .bss	00000004 uxLastCount0.2321
0801e6dc l     O .bss	00000004 uxLastCount1.2322
00000000 l    df *ABS*	00000000 death.c
0801e6e0 l     O .bss	00000002 usCreationCount
0801e6e4 l     O .bss	00000004 uxTasksRunningAtStart
0801c518 l     O .rwdata	00000004 uxMaxNumberOfExtraTasksRunning
0800271c l     F .text	000000a8 vCreateTasks
08002690 l     F .text	0000008c vSuicidalTask
0801c51c l     O .rwdata	00000002 usLastCreationCount.2611
0801e6e8 l     O .bss	00000004 uxTasksRunningNow.2613
00000000 l    df *ABS*	00000000 dynamic.c
0801e6f0 l     O .bss	00000004 xContinuousIncrementHandle
0801e6f4 l     O .bss	00000004 xLimitedIncrementHandle
0801e6f8 l     O .bss	00000004 ulCounter
0801e6fc l     O .bss	00000002 usCheckVariable
0801e700 l     O .bss	00000004 xSuspendedQueueSendError
0801e704 l     O .bss	00000004 xSuspendedQueueReceiveError
0801e708 l     O .bss	00000004 ulExpectedValue
080029a4 l     F .text	00000060 vContinuousIncrementTask
08002950 l     F .text	00000054 vLimitedIncrementTask
08002a04 l     F .text	000000dc vCounterControlTask
08002ae0 l     F .text	0000005c vQueueSendWhenSuspendedTask
08002b3c l     F .text	00000084 vQueueReceiveWhenSuspendedTask
0801e70c l     O .bss	00000004 ulValueToSend.2744
0801e710 l     O .bss	00000002 usLastTaskCheck.2757
0801e714 l     O .bss	00000004 ulLastExpectedValue.2758
00000000 l    df *ABS*	00000000 flash.c
0801e71c l     O .bss	00000004 uxFlashTaskNumber
08002cb4 l     F .text	00000090 vLEDFlashTask
00000000 l    df *ABS*	00000000 integer.c
0801e720 l     O .bss	00000004 xTaskCheck
08002dc8 l     F .text	0000009c vCompeteingIntMathTask
00000000 l    df *ABS*	00000000 recmutex.c
0801e724 l     O .bss	00000004 xMutex
0801e728 l     O .bss	00000004 xErrorOccurred
0801e72c l     O .bss	00000004 xControllingIsSuspended
0801e730 l     O .bss	00000004 xBlockingIsSuspended
0801e734 l     O .bss	00000004 uxControllingCycles
0801e738 l     O .bss	00000004 uxBlockingCycles
0801e73c l     O .bss	00000004 uxPollingCycles
0801e740 l     O .bss	00000004 xControllingTaskHandle
0801e744 l     O .bss	00000004 xBlockingTaskHandle
08002f98 l     F .text	000000fc prvRecursiveMutexControllingTask
08003094 l     F .text	000000a8 prvRecursiveMutexBlockingTask
0800313c l     F .text	000000b4 prvRecursiveMutexPollingTask
0801e748 l     O .bss	00000004 uxLastControllingCycles.2320
0801e74c l     O .bss	00000004 uxLastBlockingCycles.2321
0801e750 l     O .bss	00000004 uxLastPollingCycles.2322
00000000 l    df *ABS*	00000000 semtest.c
0801e754 l     O .bss	00000008 sCheckVariables
0801e75c l     O .bss	00000002 sNextCheckVariable
08003464 l     F .text	00000184 prvSemaphoreTest
0801e75e l     O .bss	00000008 sLastCheckVariables.2730
00000000 l    df *ABS*	00000000 ParTest.c
0801e768 l     O .bss	00000004 ulLedStates
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
08003bd0 l     F .text	000000a4 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
0801e824 l     O .bss	00800000 ucHeap
0801c520 l     O .rwdata	00000002 heapSTRUCT_SIZE
0801e76c l     O .bss	00000008 xStart
0801e774 l     O .bss	00000008 xEnd
0801c524 l     O .rwdata	00000004 xFreeBytesRemaining
0801e77c l     O .bss	00000004 xHeapHasBeenInitialised.2596
080041e8 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
08004430 l     F .text	00000084 prvInitialiseNewQueue
080044b4 l     F .text	00000060 prvInitialiseMutex
0800528c l     F .text	0000018c prvCopyDataToQueue
08005640 l     F .text	00000058 prvIsQueueFull
080054b4 l     F .text	000000f4 prvUnlockQueue
08005418 l     F .text	0000009c prvCopyDataFromQueue
080055a8 l     F .text	00000050 prvIsQueueEmpty
0800523c l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
0881e824 l     O .bss	00000064 pxReadyTasksLists
0881e888 l     O .bss	00000014 xDelayedTaskList1
0881e89c l     O .bss	00000014 xDelayedTaskList2
0801e784 l     O .bss	00000004 pxDelayedTaskList
0801e788 l     O .bss	00000004 pxOverflowDelayedTaskList
0881e8b0 l     O .bss	00000014 xPendingReadyList
0881e8c4 l     O .bss	00000014 xTasksWaitingTermination
0801e78c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0881e8d8 l     O .bss	00000014 xSuspendedTaskList
0801e790 l     O .bss	00000004 uxCurrentNumberOfTasks
0801e794 l     O .bss	00000004 xTickCount
0801e798 l     O .bss	00000004 uxTopReadyPriority
0801e79c l     O .bss	00000004 xSchedulerRunning
0801e7a0 l     O .bss	00000004 uxPendedTicks
0801e7a4 l     O .bss	00000004 xYieldPending
0801e7a8 l     O .bss	00000004 xNumOfOverflows
0801e7ac l     O .bss	00000004 uxTaskNumber
0801e7b0 l     O .bss	00000004 xNextTaskUnblockTime
0801e7b4 l     O .bss	00000004 xIdleTaskHandle
0801e7b8 l     O .bss	00000004 uxSchedulerSuspended
080057d0 l     F .text	000001e4 prvInitialiseNewTask
080059b4 l     F .text	00000108 prvAddNewTaskToReadyList
08006c94 l     F .text	000000c0 prvInitialiseTaskLists
08006e98 l     F .text	00000044 prvDeleteTCB
08006edc l     F .text	00000054 prvResetNextTaskUnblockTime
08007b3c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
08006050 l     F .text	0000006c prvTaskIsTaskSuspended
08006c78 l     F .text	0000001c prvIdleTask
08006d54 l     F .text	00000080 prvCheckTasksWaitingTermination
08006dd4 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 serial.c
0801e7bc l     O .bss	00000004 xRxedChars
0801e7c0 l     O .bss	00000004 xCharsForTx
08007e94 l     F .text	00000074 vUARTInterruptHandler
08007f08 l     F .text	000000a4 vUARTReceiveHandler
08007fac l     F .text	000000a0 vUARTTransmitHandler
00000000 l    df *ABS*	00000000 hello_world.c
080080f0 l     F .text	00000078 prvPrintTask1
08008168 l     F .text	00000034 prvPrintTask2
0800842c l     F .text	00000054 prvEMACHandlerTask
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0801a898 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
08009b2c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801a18a l     O .rodata	00000010 zeroes.4404
0800c23c l     F .text	000000bc __sbprintf
0801a19a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0800c500 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800e058 l     F .text	00000008 __fp_unlock
0800e06c l     F .text	0000019c __sinit.part.1
0800e208 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0801b0e4 l     O .rwdata	00000020 lc_ctype_charset
0801b0c4 l     O .rwdata	00000020 lc_message_charset
0801b104 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0801a1c8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08010ad4 l     F .text	000000fc __sprint_r.part.0
0801a2ec l     O .rodata	00000010 zeroes.4349
08012110 l     F .text	000000bc __sbprintf
0801a2fc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08015d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08015e6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08015e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0801613c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08016224 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08016310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
080164ec l     F .text	0000003c alt_get_errno
08016528 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
080169d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801c55c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08016c4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08016d88 l     F .text	00000034 alt_dev_reg
0801b2e4 l     O .rwdata	00001060 jtag
0801c344 l     O .rwdata	00000030 sgdma_rx
0801c374 l     O .rwdata	00000030 sgdma_tx
0801c3a4 l     O .rwdata	000000c4 uart
0801c468 l     O .rwdata	0000002c Button_Pio
0801c494 l     O .rwdata	0000002c IO_Pio
0801c4c0 l     O .rwdata	0000002c LED_Pio
0801c4ec l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080170f8 l     F .text	0000020c altera_avalon_jtag_uart_irq
08017304 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0801793c l     F .text	0000003c alt_get_errno
0801856c l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080186d0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
08018980 l     F .text	0000009c altera_avalon_uart_irq
08018a1c l     F .text	000000e4 altera_avalon_uart_rxirq
08018b00 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
08018c9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
08018eb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08019210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801962c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08010248 g     F .text	00000074 _mprec_log10
0800028c g     F .text	00000284 vStartBlockingQueueTasks
08010334 g     F .text	0000008c __any_on
0800ef38 g     F .text	00000054 _isatty_r
0801a1d4 g     O .rodata	00000028 __mprec_tinytens
08016428 g     F .text	0000007c alt_main
08009a58 g     F .text	000000c0 _puts_r
080083a4 g     F .text	00000088 rx_ethernet_isr
0881f114 g     O .bss	00000100 alt_irq
0800f068 g     F .text	00000060 _lseek_r
080000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
080068b0 g     F .text	00000064 vTaskPlaceOnUnorderedEventList
080041a8 g     F .text	00000020 xPortGetFreeHeapSize
0801c570 g       *ABS*	00000000 __flash_rwdata_start
0800e408 g     F .text	000000ac __sflags
08014730 g     F .text	00000088 .hidden __eqdf2
0881f214 g       *ABS*	00000000 __alt_heap_start
08005cf0 g     F .text	00000058 uxTaskPriorityGet
08001834 g     F .text	00000044 xAreQueuePeekTasksStillRunning
08009a1c g     F .text	0000003c printf
08017a9c g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0801270c g     F .text	0000009c _wcrtomb_r
08009e48 g     F .text	0000005c __sseek
0800e3b8 g     F .text	00000010 __sinit
080125b4 g     F .text	00000140 __swbuf_r
0800ef8c g     F .text	0000007c _setlocale_r
0800e210 g     F .text	00000078 __sfmoreglue
080164c8 g     F .text	00000024 __malloc_unlock
080010b4 g     F .text	00000060 xAreGenericQueueTasksStillRunning
080181b4 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
0800f1ac g     F .text	0000015c memmove
08001f70 g     F .text	00000068 xAreBlockTimeTestTasksStillRunning
0800731c g     F .text	00000054 vTaskEnterCritical
0800e3a0 g     F .text	00000018 _cleanup
080048a8 g     F .text	000000e8 xQueueGenericSendFromISR
0800655c g     F .text	00000040 pcTaskGetName
0800f308 g     F .text	000000a8 _Balloc
080147b8 g     F .text	000000dc .hidden __gtdf2
08019930 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08004570 g     F .text	00000090 xQueueGiveMutexRecursive
08002ee0 g     F .text	000000b8 vStartRecursiveMutexTasks
0801e780 g     O .bss	00000004 pxCurrentTCB
08017d04 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008be8 g     F .text	0000005c _fstat_r
0801e7d8 g     O .bss	00000004 errno
08009dc4 g     F .text	00000008 __seofread
0801e7fc g     O .bss	00000004 alt_argv
08024518 g       *ABS*	00000000 _gp
08005d94 g     F .text	000001c0 vTaskPrioritySet
08006b34 g     F .text	0000003c vTaskInternalSetTimeOutState
0801b164 g     O .rwdata	00000180 alt_fd_list
08002240 g     F .text	0000003c xAreComTestTasksStillRunning
08003b78 g     F .text	00000038 xPortStartScheduler
08006310 g     F .text	00000048 vTaskEndScheduler
080193b0 g     F .text	00000090 alt_find_dev
0800971c g     F .text	00000148 memcpy
08006860 g     F .text	00000050 vTaskPlaceOnEventList
08006a14 g     F .text	000000d4 vTaskRemoveFromUnorderedEventList
080031f0 g     F .text	0000009c xAreRecursiveMutexTasksStillRunning
0800e060 g     F .text	0000000c _cleanup_r
08015b70 g     F .text	000000dc .hidden __floatsidf
0801e69c g     O .bss	00000004 xHighPriorityTask
08019710 g     F .text	0000007c alt_io_redirect
08014894 g     F .text	000000f4 .hidden __ltdf2
080050b8 g     F .text	0000007c xQueuePeekFromISR
08019e50 g       *ABS*	00000000 __DTOR_END__
08009b18 g     F .text	00000014 puts
080040dc g     F .text	000000cc vPortFree
08010984 g     F .text	00000074 __fpclassifyd
080101a4 g     F .text	000000a4 __ratio
080120f4 g     F .text	0000001c __vfiprintf_internal
08004c14 g     F .text	00000210 xQueueSemaphoreTake
08017dfc g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
080174fc g     F .text	0000021c altera_avalon_jtag_uart_read
080099ec g     F .text	00000030 _printf_r
08008578 g     F .text	00000064 .hidden __udivsi3
08002c40 g     F .text	00000074 vStartLEDFlashTasks
08016178 g     F .text	000000ac isatty
0801a224 g     O .rodata	000000c8 __mprec_tens
0801e6a0 g     O .bss	00000004 xMediumPriorityTask
08006e38 g     F .text	00000060 uxTaskGetStackHighWaterMark
0800f008 g     F .text	0000000c __locale_charset
08003874 g     F .text	0000008c vListInsertEnd
0801e7e4 g     O .bss	00000004 __malloc_top_pad
0801c538 g     O .rwdata	00000004 __mb_cur_max
0800284c g     F .text	00000104 vStartDynamicPriorityTasks
0800f038 g     F .text	0000000c _localeconv_r
0800f73c g     F .text	0000003c __i2b
0800e8e8 g     F .text	000004c8 __sfvwrite_r
08007cdc g     F .text	00000024 vSerialClose
08017f34 g     F .text	0000005c alt_avalon_sgdma_stop
08009d1c g     F .text	00000054 _sbrk_r
08006194 g     F .text	000000ec xTaskResumeFromISR
080103c0 g     F .text	00000060 _read_r
08003848 g     F .text	0000002c vListInitialiseItem
080191c8 g     F .text	00000028 alt_dcache_flush
08003774 g     F .text	0000006c vParTestToggleLED
0801c550 g     O .rwdata	00000004 alt_max_fd
08003c74 g     F .text	00000044 vPortSysTickHandler
080122a8 g     F .text	000000f0 _fclose_r
08004a6c g     F .text	000001a8 xQueueReceive
0800e028 g     F .text	00000030 fflush
0801e7e0 g     O .bss	00000004 __malloc_max_sbrked_mem
08005d48 g     F .text	0000004c uxTaskPriorityGetFromISR
08003cb8 g     F .text	00000170 alt_irq_register
080036d4 g     F .text	000000a0 vParTestSetLED
080134b4 g     F .text	000008ac .hidden __adddf3
0800ff4c g     F .text	0000010c __b2d
08012ef0 g     F .text	000005c4 .hidden __umoddi3
0801634c g     F .text	000000dc lseek
0801c528 g     O .rwdata	00000004 _global_impure_ptr
08010420 g     F .text	00000564 _realloc_r
0881f214 g       *ABS*	00000000 __bss_end
08003e28 g     F .text	000000e0 alt_iic_isr_register
08017978 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0800063c g     F .text	00000128 xAreBlockingQueuesStillRunning
08019828 g     F .text	00000108 alt_tick
10001060 g     O .descriptor_memory	00000020 rx_descriptor_end
080128f4 g     F .text	000005fc .hidden __udivdi3
08012510 g     F .text	00000024 _fputwc_r
0801a1fc g     O .rodata	00000028 __mprec_bigtens
0800f520 g     F .text	00000104 __s2b
08015c4c g     F .text	000000a8 .hidden __floatunsidf
0800fc8c g     F .text	00000060 __mcmp
08003f08 g     F .text	000001d4 pvPortMalloc
080188d4 g     F .text	000000ac altera_avalon_uart_init
08001300 g     F .text	00000048 xArePollingQueuesStillRunning
0800e3d8 g     F .text	00000018 __fp_lock_all
080160f0 g     F .text	0000004c alt_ic_irq_enabled
08005200 g     F .text	0000003c vQueueDelete
08003bb0 g     F .text	00000020 vPortEndScheduler
080037e0 g     F .text	00000068 vListInitialise
0801978c g     F .text	0000009c alt_alarm_stop
10001000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0801e7f4 g     O .bss	00000004 alt_irq_active
08008788 g     F .text	00000444 _fseeko_r
0801a498 g     O .rwdata	00000400 tx_frame
0800017c g     F .exceptions	000000d4 alt_irq_handler
0801b13c g     O .rwdata	00000028 alt_dev_null
080064e8 g     F .text	00000028 xTaskGetTickCount
080046f4 g     F .text	000001b4 xQueueGenericSend
08017f90 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
080191f0 g     F .text	00000020 alt_dcache_flush_all
0800f624 g     F .text	00000068 __hi0bits
08000764 g     F .text	00000100 vStartGenericQueueTasks
08015af0 g     F .text	00000080 .hidden __fixdfsi
080025b0 g     F .text	0000008c xAreCountingSemaphoreTasksStillRunning
080070b8 g     F .text	00000108 xTaskPriorityDisinherit
10001040 g     O .descriptor_memory	00000020 rx_descriptor
0801c570 g       *ABS*	00000000 __ram_rwdata_end
10002000 g       *ABS*	00000000 __alt_mem_onchip_memory
0801c548 g     O .rwdata	00000008 alt_dev_list
08016c88 g     F .text	00000100 write
080180d4 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
08019a1c g     F .text	000000a0 _putc_r
08006914 g     F .text	00000100 xTaskRemoveFromEventList
0801a498 g       *ABS*	00000000 __ram_rodata_end
08015ed4 g     F .text	000000b8 fstat
0800819c g     F .text	00000208 xNetworkInterfaceInitialise
08014894 g     F .text	000000f4 .hidden __ledf2
08004e24 g     F .text	000001b0 xQueuePeek
08007e08 g     F .text	0000008c vSerialPutString
0800fa04 g     F .text	00000140 __pow5mult
08007d74 g     F .text	00000094 xSerialPutChar
08010be8 g     F .text	0000150c ___vfiprintf_internal_r
0801e7f0 g     O .bss	00000004 __nlocale_changed
080085dc g     F .text	00000058 .hidden __umodsi3
08017d7c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
08017e88 g     F .text	00000054 alt_avalon_sgdma_register_callback
0881f214 g       *ABS*	00000000 end
08005abc g     F .text	000000e8 vTaskDelete
08008bcc g     F .text	0000001c fseeko
080027c4 g     F .text	00000088 xIsCreateTaskStillRunning
08018ef0 g     F .text	000001ac altera_avalon_uart_write
0800876c g     F .text	0000001c fseek
08017038 g     F .text	000000c0 altera_avalon_jtag_uart_init
08007414 g     F .text	00000038 pvTaskIncrementMutexHeldCount
08019e50 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08018154 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
08018748 g     F .text	0000007c alt_avalon_timer_sc_init
08018824 g     F .text	00000060 altera_avalon_uart_write_fd
08015cf4 g     F .text	00000064 .hidden __clzsi2
08018884 g     F .text	00000050 altera_avalon_uart_close_fd
08017718 g     F .text	00000224 altera_avalon_jtag_uart_write
08017bac g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0800e3c8 g     F .text	00000004 __sfp_lock_acquire
0800f0c8 g     F .text	000000e4 memchr
08009f44 g     F .text	000022dc ___vfprintf_internal_r
08006b70 g     F .text	000000e0 xTaskCheckForTimeOut
08017ca4 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
0800e5d8 g     F .text	00000310 _free_r
08016770 g     F .text	0000022c alt_printf
08006f58 g     F .text	00000160 xTaskPriorityInherit
0800f014 g     F .text	00000010 __locale_mb_cur_max
08019c9c g     F .text	00000180 __call_exitprocs
08001fd8 g     F .text	0000009c vAltStartComTestTasks
0801e7ec g     O .bss	00000004 __mlocale_changed
0800744c g     F .text	000000b0 ulTaskNotifyTake
0801c530 g     O .rwdata	00000004 __malloc_sbrk_base
08000250 g     F .text	0000003c _start
0801e804 g     O .bss	00000004 _alt_tick_rate
08006358 g     F .text	0000002c vTaskSuspendAll
0801e7cc g     O .bss	00000004 sgdma_tx_dev
08017ff4 g     F .text	00000054 alt_avalon_sgdma_open
08006510 g     F .text	0000002c xTaskGetTickCountFromISR
0800fb44 g     F .text	00000148 __lshift
0801e808 g     O .bss	00000004 _alt_nticks
0801e7d0 g     O .bss	00000004 text_length
08016a14 g     F .text	00000104 read
08016df4 g     F .text	000000e0 alt_sys_init
080039d8 g     F .text	00000098 uxListRemove
0800998c g     F .text	00000060 _open_r
08019b84 g     F .text	00000118 __register_exitproc
0801e7c8 g     O .bss	00000004 xEMACRxEventSemaphore
0800f778 g     F .text	0000028c __multiply
080173a4 g     F .text	00000068 altera_avalon_jtag_uart_close
08008634 g     F .text	00000028 .hidden __mulsi3
0801a498 g       *ABS*	00000000 __ram_rwdata_start
08019e50 g       *ABS*	00000000 __ram_rodata_start
0881f0ec g     O .bss	00000028 __malloc_current_mallinfo
08007ac4 g     F .text	00000078 xTaskNotifyStateClear
080060bc g     F .text	000000d8 vTaskResume
08010058 g     F .text	0000014c __d2b
08006768 g     F .text	000000f8 vTaskSwitchContext
08016ed4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08019548 g     F .text	000000c4 alt_get_fd
0800c4ac g     F .text	00000054 _close_r
080074fc g     F .text	000000f4 xTaskNotifyWait
080199a0 g     F .text	0000007c memcmp
08016f94 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0881f214 g       *ABS*	00000000 __alt_stack_base
08016fe4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08008c44 g     F .text	000000dc _fwrite_r
0800c358 g     F .text	00000154 __swsetup_r
08005f54 g     F .text	000000fc vTaskSuspend
08013d60 g     F .text	000009d0 .hidden __divdf3
0800e288 g     F .text	00000118 __sfp
080102bc g     F .text	00000078 __copybits
0800653c g     F .text	00000020 uxTaskGetNumberOfTasks
0801acbc g     O .rwdata	00000408 __malloc_av_
0800e3d4 g     F .text	00000004 __sinit_lock_release
08014988 g     F .text	0000086c .hidden __muldf3
08009d70 g     F .text	00000054 __sread
08019440 g     F .text	00000108 alt_find_file
0801924c g     F .text	000000a4 alt_dev_llist_insert
080164a4 g     F .text	00000024 __malloc_lock
08016b9c g     F .text	000000b0 sbrk
08004600 g     F .text	0000009c xQueueTakeMutexRecursive
08017edc g     F .text	00000058 alt_avalon_sgdma_start
0800dfcc g     F .text	0000005c _fflush_r
0801e6a4 g     O .bss	00000004 xHighestPriorityTask
080121cc g     F .text	000000dc _calloc_r
080075f0 g     F .text	000001b8 xTaskGenericNotify
08008750 g     F .text	00000018 fopen
0801e648 g       *ABS*	00000000 __bss_start
08009864 g     F .text	00000128 memset
0800804c g     F .text	000000a4 main
0801e800 g     O .bss	00000004 alt_envp
08001878 g     F .text	00000098 vCreateBlockTimeTasks
0801e7dc g     O .bss	00000004 __malloc_max_total_mem
08016f34 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080126f4 g     F .text	00000018 __swbuf
08003900 g     F .text	000000d8 vListInsert
0801c560 g     O .rwdata	00000008 alt_sgdma_list
08009ea4 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08012398 g     F .text	00000014 fclose
0800c728 g     F .text	00001688 _dtoa_r
08008f10 g     F .text	0000080c _malloc_r
08012868 g     F .text	00000030 __ascii_wctomb
0801c554 g     O .rwdata	00000004 alt_errno
10001000 g     O .descriptor_memory	00000020 tx_descriptor
08005ba4 g     F .text	000000f0 vTaskDelayUntil
0881e8ec g     O .bss	00000800 rx_frame
080035e8 g     F .text	000000b8 xAreSemaphoreTasksStillRunning
0800edb0 g     F .text	000000c4 _fwalk
08004fd4 g     F .text	000000e4 xQueueReceiveFromISR
08006f30 g     F .text	00000028 xTaskGetCurrentTaskHandle
08019abc g     F .text	000000c8 putc
08008480 g     F .text	00000084 .hidden __divsi3
08004388 g     F .text	000000a8 xQueueGenericCreate
0800e4b4 g     F .text	00000124 _malloc_trim_r
08019e50 g       *ABS*	00000000 __CTOR_END__
080109f8 g     F .text	000000dc strcmp
0800469c g     F .text	00000058 xQueueCreateCountingSemaphore
08019e50 g       *ABS*	00000000 __flash_rodata_start
08019e50 g       *ABS*	00000000 __DTOR_LIST__
0801e6ec g     O .bss	00000004 xCreatedTask
080077a8 g     F .text	000001f0 xTaskGenericNotifyFromISR
08014730 g     F .text	00000088 .hidden __nedf2
08016dbc g     F .text	00000038 alt_irq_init
08002d44 g     F .text	00000084 vStartIntegerMathTasks
08016b18 g     F .text	00000084 alt_release_fd
08006384 g     F .text	00000164 xTaskResumeAll
08005174 g     F .text	00000054 uxQueueSpacesAvailable
0801a30c g     O .rodata	00000100 .hidden __clz_tab
08006280 g     F .text	00000090 vTaskStartScheduler
0801e7e8 g     O .bss	00000004 _PathLocale
08019954 g     F .text	00000014 atexit
0800c2f8 g     F .text	00000060 _write_r
08003a70 g     F .text	00000028 prvReadGp
0800f044 g     F .text	00000018 setlocale
08005698 g     F .text	00000050 xQueueIsQueueFullFromISR
08001348 g     F .text	000000ec vStartQueuePeekTasks
0801c52c g     O .rwdata	00000004 _impure_ptr
0801e7f8 g     O .bss	00000004 alt_argc
0800ddb0 g     F .text	0000021c __sflush_r
08007d00 g     F .text	00000074 xSerialGetChar
08019350 g     F .text	00000060 _do_dtors
0800f030 g     F .text	00000008 __locale_cjk_lang
08008768 g     F .text	00000004 _fseek_r
08009b48 g     F .text	000001d4 __srefill_r
08002e64 g     F .text	0000007c xAreIntegerMathsTaskStillRunning
08001114 g     F .text	00000098 vStartPolledQueueTasks
0800227c g     F .text	00000104 vStartCountingSemaphoreTasks
0800fee8 g     F .text	00000064 __ulp
080036a0 g     F .text	00000034 vParTestInitialise
0800e3f0 g     F .text	00000018 __fp_unlock_all
08006c50 g     F .text	00000028 vTaskMissedYield
0801c540 g     O .rwdata	00000008 alt_fs_list
08005134 g     F .text	00000040 uxQueueMessagesWaiting
0800659c g     F .text	000001cc xTaskIncrementTick
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800f05c g     F .text	0000000c localeconv
08015f8c g     F .text	00000050 alt_ic_isr_register
08008d20 g     F .text	00000034 fwrite
0800425c g     F .text	0000012c xQueueGenericReset
0801c570 g       *ABS*	00000000 _edata
0800263c g     F .text	00000054 vCreateSuicidalTasks
080187c4 g     F .text	00000060 altera_avalon_uart_read_fd
0881f214 g       *ABS*	00000000 _end
080123ac g     F .text	00000164 __fputwc
08000250 g       *ABS*	00000000 __ram_exceptions_end
0801740c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080056e8 g     F .text	000000e8 xTaskCreate
0801e7c4 g     O .bss	00000004 uartControl
080041c8 g     F .text	00000020 vPortInitialiseBlocks
08016064 g     F .text	0000008c alt_ic_irq_disable
10001020 g     O .descriptor_memory	00000020 tx_descriptor_end
08018048 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
08009dcc g     F .text	0000007c __swrite
0801c534 g     O .rwdata	00000004 __malloc_trim_threshold
0800f024 g     F .text	0000000c __locale_msgcharset
08019968 g     F .text	00000038 exit
0800ee74 g     F .text	000000c4 _fwalk_reent
0800fcec g     F .text	000001fc __mdiff
08008504 g     F .text	00000074 .hidden __modsi3
08005c94 g     F .text	0000005c vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0800e3cc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080071c0 g     F .text	0000015c vTaskPriorityDisinheritAfterTimeout
0801e7d4 g     O .bss	00000004 sgdma_rx_dev
0801e718 g     O .bss	00000004 xSuspendedTestQueue
08018c48 g     F .text	00000054 altera_avalon_uart_close
0800865c g     F .text	000000f4 _fopen_r
08019e1c g     F .text	00000034 _exit
0801909c g     F .text	0000012c alt_alarm_start
08008d54 g     F .text	000001bc __smakebuf_r
08007370 g     F .text	00000060 vTaskExitCritical
08002bc0 g     F .text	00000080 xAreDynamicPriorityTasksStillRunning
08009eac g     F .text	00000098 strlen
08003a98 g     F .text	000000e0 pxPortInitialiseStack
08016614 g     F .text	0000015c open
080147b8 g     F .text	000000dc .hidden __gedf2
0801699c g     F .text	0000003c alt_putchar
0801c53c g     O .rwdata	00000004 __wctomb
08010bd0 g     F .text	00000018 __sprint_r
0801960c g     F .text	00000020 alt_icache_flush_all
08006ae8 g     F .text	0000004c vTaskSetTimeOutState
0801c558 g     O .rwdata	00000004 alt_priority_mask
08015fdc g     F .text	00000088 alt_ic_irq_enable
0800c220 g     F .text	0000001c __vfprintf_internal
08018cd8 g     F .text	000001dc altera_avalon_uart_read
08012898 g     F .text	0000005c _wctomb_r
080051c8 g     F .text	00000038 uxQueueMessagesWaitingFromISR
080055f8 g     F .text	00000048 xQueueIsQueueEmptyFromISR
08017c20 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
080151f4 g     F .text	000008fc .hidden __subdf3
0800328c g     F .text	000001d8 vStartSemaphoreTasks
0800f68c g     F .text	000000b0 __lo0bits
0801c568 g     O .rwdata	00000008 alt_alarm_list
080192f0 g     F .text	00000060 _do_ctors
080073d0 g     F .text	00000044 uxTaskResetEventItemValue
080127a8 g     F .text	000000c0 wcrtomb
08004514 g     F .text	0000005c xQueueCreateMutex
08015d94 g     F .text	000000d8 close
08007c24 g     F .text	000000b8 xSerialPortInitMinimal
08007998 g     F .text	0000012c vTaskNotifyGiveFromISR
0801628c g     F .text	00000084 alt_load
08018628 g     F .text	000000a8 alt_avalon_sgdma_init
08004990 g     F .text	000000dc xQueueGiveFromISR
08012534 g     F .text	00000080 fputwc
0800e3d0 g     F .text	00000004 __sinit_lock_acquire
0800f3d8 g     F .text	00000148 __multadd
0800f3b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08409414 	ori	at,at,592
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 8000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 8000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 8000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 800002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 8000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 8000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 8000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 800003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 8000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 8000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 8000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 800004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 8000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 800006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 8000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 8000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 8000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 800007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 8000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 8000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 8000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 800008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 8000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 8000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 8000098:	df001c15 	stw	fp,112(sp)

0800009c <save_sp_to_pxCurrentTCB>:
 800009c:	060200b4 	movhi	et,2050

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 80000a0:	c639e004 	addi	et,et,-6272
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 80000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 80000a8:	c6c00015 	stw	sp,0(et)

080000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 80000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 80000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 80000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 80000b8:	10002526 	beq	r2,zero,8000150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 80000bc:	20002426 	beq	r4,zero,8000150 <soft_exceptions>

080000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 80000c0:	800017c0 	call	800017c <alt_irq_handler>

080000c4 <restore_sp_from_pxCurrentTCB>:
 80000c4:	060200b4 	movhi	et,2050

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 80000c8:	c639e004 	addi	et,et,-6272
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 80000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 80000d0:	c6c00017 	ldw	sp,0(et)

080000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 80000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 80000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 80000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 80000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 80000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 80000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 80000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 80000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 80000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 80000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 80000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 8000100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 8000104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 8000108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 800010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 8000110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 8000114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 8000118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 800011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 8000120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 8000124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 8000128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 800012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 8000130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 8000134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 8000138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 800013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 8000140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 8000144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 8000148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 800014c:	ef80083a 	eret

08000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 8000150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 8000154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 8000158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 800015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 8000160:	c0000226 	beq	et,zero,800016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 8000164:	003da03a 	break	0
  	br		restore_context			# its something else
 8000168:	003fda06 	br	80000d4 <restore_context>

0800016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 800016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 8000170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 8000174:	80067680 	call	8006768 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 8000178:	003fd206 	br	80000c4 <restore_sp_from_pxCurrentTCB>

0800017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 800017c:	defff904 	addi	sp,sp,-28
 8000180:	dfc00615 	stw	ra,24(sp)
 8000184:	df000515 	stw	fp,20(sp)
 8000188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800018c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000190:	0005313a 	rdctl	r2,ipending
 8000194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800019c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 80001a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 80001a4:	00800044 	movi	r2,1
 80001a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 80001ac:	e0fffb17 	ldw	r3,-20(fp)
 80001b0:	e0bffc17 	ldw	r2,-16(fp)
 80001b4:	1884703a 	and	r2,r3,r2
 80001b8:	10001426 	beq	r2,zero,800020c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 80001bc:	008220b4 	movhi	r2,2178
 80001c0:	10bc4504 	addi	r2,r2,-3820
 80001c4:	e0fffd17 	ldw	r3,-12(fp)
 80001c8:	180690fa 	slli	r3,r3,3
 80001cc:	10c5883a 	add	r2,r2,r3
 80001d0:	10c00017 	ldw	r3,0(r2)
 80001d4:	008220b4 	movhi	r2,2178
 80001d8:	10bc4504 	addi	r2,r2,-3820
 80001dc:	e13ffd17 	ldw	r4,-12(fp)
 80001e0:	200890fa 	slli	r4,r4,3
 80001e4:	1105883a 	add	r2,r2,r4
 80001e8:	10800104 	addi	r2,r2,4
 80001ec:	10800017 	ldw	r2,0(r2)
 80001f0:	1009883a 	mov	r4,r2
 80001f4:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 80001f8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80001fc:	0005313a 	rdctl	r2,ipending
 8000200:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000204:	e0bfff17 	ldw	r2,-4(fp)
 8000208:	00000706 	br	8000228 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800020c:	e0bffc17 	ldw	r2,-16(fp)
 8000210:	1085883a 	add	r2,r2,r2
 8000214:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000218:	e0bffd17 	ldw	r2,-12(fp)
 800021c:	10800044 	addi	r2,r2,1
 8000220:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000224:	003fe106 	br	80001ac <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 8000228:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800022c:	e0bffb17 	ldw	r2,-20(fp)
 8000230:	103fdb1e 	bne	r2,zero,80001a0 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000234:	0001883a 	nop
}
 8000238:	0001883a 	nop
 800023c:	e037883a 	mov	sp,fp
 8000240:	dfc00117 	ldw	ra,4(sp)
 8000244:	df000017 	ldw	fp,0(sp)
 8000248:	dec00204 	addi	sp,sp,8
 800024c:	f800283a 	ret

Disassembly of section .text:

08000250 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000250:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000258:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800025c:	d6914614 	ori	gp,gp,17688
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000260:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000264:	10b99214 	ori	r2,r2,58952

    movhi r3, %hi(__bss_end)
 8000268:	00c22074 	movhi	r3,2177
    ori r3, r3, %lo(__bss_end)
 800026c:	18fc8514 	ori	r3,r3,61972

    beq r2, r3, 1f
 8000270:	10c00326 	beq	r2,r3,8000280 <_start+0x30>

0:
    stw zero, (r2)
 8000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800027c:	10fffd36 	bltu	r2,r3,8000274 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000280:	801628c0 	call	801628c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000284:	80164280 	call	8016428 <alt_main>

08000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000288:	003fff06 	br	8000288 <alt_after_alt_main>

0800028c <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
 800028c:	defff104 	addi	sp,sp,-60
 8000290:	dfc00e15 	stw	ra,56(sp)
 8000294:	df000d15 	stw	fp,52(sp)
 8000298:	df000d04 	addi	fp,sp,52
 800029c:	e13fff15 	stw	r4,-4(fp)
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 80002a0:	00800044 	movi	r2,1
 80002a4:	e0bff515 	stw	r2,-44(fp)
 80002a8:	00800144 	movi	r2,5
 80002ac:	e0bff615 	stw	r2,-40(fp)
const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 80002b0:	0080fa04 	movi	r2,1000
 80002b4:	e0bff715 	stw	r2,-36(fp)
const TickType_t xDontBlock = ( TickType_t ) 0;
 80002b8:	e03ff815 	stw	zero,-32(fp)

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80002bc:	01000304 	movi	r4,12
 80002c0:	8003f080 	call	8003f08 <pvPortMalloc>
 80002c4:	e0bff915 	stw	r2,-28(fp)

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 80002c8:	000d883a 	mov	r6,zero
 80002cc:	01400084 	movi	r5,2
 80002d0:	e13ff517 	ldw	r4,-44(fp)
 80002d4:	80043880 	call	8004388 <xQueueGenericCreate>
 80002d8:	1007883a 	mov	r3,r2
 80002dc:	e0bff917 	ldw	r2,-28(fp)
 80002e0:	10c00015 	stw	r3,0(r2)

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 80002e4:	e0bff917 	ldw	r2,-28(fp)
 80002e8:	e0fff717 	ldw	r3,-36(fp)
 80002ec:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 80002f0:	e0bff917 	ldw	r2,-28(fp)
 80002f4:	d0e84c04 	addi	r3,gp,-24272
 80002f8:	10c00215 	stw	r3,8(r2)

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80002fc:	01000304 	movi	r4,12
 8000300:	8003f080 	call	8003f08 <pvPortMalloc>
 8000304:	e0bffa15 	stw	r2,-24(fp)

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 8000308:	e0bff917 	ldw	r2,-28(fp)
 800030c:	10c00017 	ldw	r3,0(r2)
 8000310:	e0bffa17 	ldw	r2,-24(fp)
 8000314:	10c00015 	stw	r3,0(r2)

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 8000318:	e0bffa17 	ldw	r2,-24(fp)
 800031c:	e0fff817 	ldw	r3,-32(fp)
 8000320:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 8000324:	e0bffa17 	ldw	r2,-24(fp)
 8000328:	d0e84d84 	addi	r3,gp,-24266
 800032c:	10c00215 	stw	r3,8(r2)


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 8000330:	d8000115 	stw	zero,4(sp)
 8000334:	e0bfff17 	ldw	r2,-4(fp)
 8000338:	d8800015 	stw	r2,0(sp)
 800033c:	e1fff917 	ldw	r7,-28(fp)
 8000340:	01810004 	movi	r6,1024
 8000344:	014200b4 	movhi	r5,2050
 8000348:	29679404 	addi	r5,r5,-25008
 800034c:	01020034 	movhi	r4,2048
 8000350:	21016704 	addi	r4,r4,1436
 8000354:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 8000358:	d8000115 	stw	zero,4(sp)
 800035c:	d8000015 	stw	zero,0(sp)
 8000360:	e1fffa17 	ldw	r7,-24(fp)
 8000364:	01810004 	movi	r6,1024
 8000368:	014200b4 	movhi	r5,2050
 800036c:	29679604 	addi	r5,r5,-25000
 8000370:	01020034 	movhi	r4,2048
 8000374:	21014404 	addi	r4,r4,1296
 8000378:	80056e80 	call	80056e8 <xTaskCreate>


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800037c:	01000304 	movi	r4,12
 8000380:	8003f080 	call	8003f08 <pvPortMalloc>
 8000384:	e0bffb15 	stw	r2,-20(fp)
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 8000388:	000d883a 	mov	r6,zero
 800038c:	01400084 	movi	r5,2
 8000390:	e13ff517 	ldw	r4,-44(fp)
 8000394:	80043880 	call	8004388 <xQueueGenericCreate>
 8000398:	1007883a 	mov	r3,r2
 800039c:	e0bffb17 	ldw	r2,-20(fp)
 80003a0:	10c00015 	stw	r3,0(r2)
	pxQueueParameters3->xBlockTime = xDontBlock;
 80003a4:	e0bffb17 	ldw	r2,-20(fp)
 80003a8:	e0fff817 	ldw	r3,-32(fp)
 80003ac:	10c00115 	stw	r3,4(r2)
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 80003b0:	e0bffb17 	ldw	r2,-20(fp)
 80003b4:	d0e84e04 	addi	r3,gp,-24264
 80003b8:	10c00215 	stw	r3,8(r2)

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80003bc:	01000304 	movi	r4,12
 80003c0:	8003f080 	call	8003f08 <pvPortMalloc>
 80003c4:	e0bffc15 	stw	r2,-16(fp)
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 80003c8:	e0bffb17 	ldw	r2,-20(fp)
 80003cc:	10c00017 	ldw	r3,0(r2)
 80003d0:	e0bffc17 	ldw	r2,-16(fp)
 80003d4:	10c00015 	stw	r3,0(r2)
	pxQueueParameters4->xBlockTime = xBlockTime;
 80003d8:	e0bffc17 	ldw	r2,-16(fp)
 80003dc:	e0fff717 	ldw	r3,-36(fp)
 80003e0:	10c00115 	stw	r3,4(r2)
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 80003e4:	e0bffc17 	ldw	r2,-16(fp)
 80003e8:	d0e84c84 	addi	r3,gp,-24270
 80003ec:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 80003f0:	d8000115 	stw	zero,4(sp)
 80003f4:	d8000015 	stw	zero,0(sp)
 80003f8:	e1fffb17 	ldw	r7,-20(fp)
 80003fc:	01810004 	movi	r6,1024
 8000400:	014200b4 	movhi	r5,2050
 8000404:	29679804 	addi	r5,r5,-24992
 8000408:	01020034 	movhi	r4,2048
 800040c:	21016704 	addi	r4,r4,1436
 8000410:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 8000414:	d8000115 	stw	zero,4(sp)
 8000418:	e0bfff17 	ldw	r2,-4(fp)
 800041c:	d8800015 	stw	r2,0(sp)
 8000420:	e1fffc17 	ldw	r7,-16(fp)
 8000424:	01810004 	movi	r6,1024
 8000428:	014200b4 	movhi	r5,2050
 800042c:	29679a04 	addi	r5,r5,-24984
 8000430:	01020034 	movhi	r4,2048
 8000434:	21014404 	addi	r4,r4,1296
 8000438:	80056e80 	call	80056e8 <xTaskCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800043c:	01000304 	movi	r4,12
 8000440:	8003f080 	call	8003f08 <pvPortMalloc>
 8000444:	e0bffd15 	stw	r2,-12(fp)
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 8000448:	000d883a 	mov	r6,zero
 800044c:	01400084 	movi	r5,2
 8000450:	e13ff617 	ldw	r4,-40(fp)
 8000454:	80043880 	call	8004388 <xQueueGenericCreate>
 8000458:	1007883a 	mov	r3,r2
 800045c:	e0bffd17 	ldw	r2,-12(fp)
 8000460:	10c00015 	stw	r3,0(r2)
	pxQueueParameters5->xBlockTime = xBlockTime;
 8000464:	e0bffd17 	ldw	r2,-12(fp)
 8000468:	e0fff717 	ldw	r3,-36(fp)
 800046c:	10c00115 	stw	r3,4(r2)
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 8000470:	e0bffd17 	ldw	r2,-12(fp)
 8000474:	d0e84e84 	addi	r3,gp,-24262
 8000478:	10c00215 	stw	r3,8(r2)

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800047c:	01000304 	movi	r4,12
 8000480:	8003f080 	call	8003f08 <pvPortMalloc>
 8000484:	e0bffe15 	stw	r2,-8(fp)
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 8000488:	e0bffd17 	ldw	r2,-12(fp)
 800048c:	10c00017 	ldw	r3,0(r2)
 8000490:	e0bffe17 	ldw	r2,-8(fp)
 8000494:	10c00015 	stw	r3,0(r2)
	pxQueueParameters6->xBlockTime = xBlockTime;
 8000498:	e0bffe17 	ldw	r2,-8(fp)
 800049c:	e0fff717 	ldw	r3,-36(fp)
 80004a0:	10c00115 	stw	r3,4(r2)
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 80004a4:	e0bffe17 	ldw	r2,-8(fp)
 80004a8:	d0e84d04 	addi	r3,gp,-24268
 80004ac:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 80004b0:	d8000115 	stw	zero,4(sp)
 80004b4:	d8000015 	stw	zero,0(sp)
 80004b8:	e1fffd17 	ldw	r7,-12(fp)
 80004bc:	01810004 	movi	r6,1024
 80004c0:	014200b4 	movhi	r5,2050
 80004c4:	29679c04 	addi	r5,r5,-24976
 80004c8:	01020034 	movhi	r4,2048
 80004cc:	21014404 	addi	r4,r4,1296
 80004d0:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 80004d4:	d8000115 	stw	zero,4(sp)
 80004d8:	d8000015 	stw	zero,0(sp)
 80004dc:	e1fffe17 	ldw	r7,-8(fp)
 80004e0:	01810004 	movi	r6,1024
 80004e4:	014200b4 	movhi	r5,2050
 80004e8:	29679e04 	addi	r5,r5,-24968
 80004ec:	01020034 	movhi	r4,2048
 80004f0:	21016704 	addi	r4,r4,1436
 80004f4:	80056e80 	call	80056e8 <xTaskCreate>
}
 80004f8:	0001883a 	nop
 80004fc:	e037883a 	mov	sp,fp
 8000500:	dfc00117 	ldw	ra,4(sp)
 8000504:	df000017 	ldw	fp,0(sp)
 8000508:	dec00204 	addi	sp,sp,8
 800050c:	f800283a 	ret

08000510 <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
 8000510:	defffa04 	addi	sp,sp,-24
 8000514:	dfc00515 	stw	ra,20(sp)
 8000518:	df000415 	stw	fp,16(sp)
 800051c:	df000404 	addi	fp,sp,16
 8000520:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = 0;
 8000524:	e03ffe0d 	sth	zero,-8(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 8000528:	e03ffc0d 	sth	zero,-16(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 800052c:	e0bfff17 	ldw	r2,-4(fp)
 8000530:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 8000534:	e0bffd17 	ldw	r2,-12(fp)
 8000538:	10c00017 	ldw	r3,0(r2)
 800053c:	e0bffd17 	ldw	r2,-12(fp)
 8000540:	11000117 	ldw	r4,4(r2)
 8000544:	e0bffe04 	addi	r2,fp,-8
 8000548:	000f883a 	mov	r7,zero
 800054c:	200d883a 	mov	r6,r4
 8000550:	100b883a 	mov	r5,r2
 8000554:	1809883a 	mov	r4,r3
 8000558:	80046f40 	call	80046f4 <xQueueGenericSend>
 800055c:	10800060 	cmpeqi	r2,r2,1
 8000560:	1000031e 	bne	r2,zero,8000570 <vBlockingQueueProducer+0x60>
		{
			sErrorEverOccurred = pdTRUE;
 8000564:	00800044 	movi	r2,1
 8000568:	e0bffc0d 	sth	r2,-16(fp)
 800056c:	003ff106 	br	8000534 <vBlockingQueueProducer+0x24>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 8000570:	e0bffc0f 	ldh	r2,-16(fp)
 8000574:	1000051e 	bne	r2,zero,800058c <vBlockingQueueProducer+0x7c>
			{
				( *pxQueueParameters->psCheckVariable )++;
 8000578:	e0bffd17 	ldw	r2,-12(fp)
 800057c:	10800217 	ldw	r2,8(r2)
 8000580:	10c0000b 	ldhu	r3,0(r2)
 8000584:	18c00044 	addi	r3,r3,1
 8000588:	10c0000d 	sth	r3,0(r2)
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 800058c:	e0bffe0b 	ldhu	r2,-8(fp)
 8000590:	10800044 	addi	r2,r2,1
 8000594:	e0bffe0d 	sth	r2,-8(fp)

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 8000598:	003fe606 	br	8000534 <vBlockingQueueProducer+0x24>

0800059c <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
 800059c:	defffa04 	addi	sp,sp,-24
 80005a0:	dfc00515 	stw	ra,20(sp)
 80005a4:	df000415 	stw	fp,16(sp)
 80005a8:	df000404 	addi	fp,sp,16
 80005ac:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = 0;
 80005b0:	e03ffc0d 	sth	zero,-16(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 80005b4:	e03ffc8d 	sth	zero,-14(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 80005b8:	e0bfff17 	ldw	r2,-4(fp)
 80005bc:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 80005c0:	e0bffd17 	ldw	r2,-12(fp)
 80005c4:	10c00017 	ldw	r3,0(r2)
 80005c8:	e0bffd17 	ldw	r2,-12(fp)
 80005cc:	11000117 	ldw	r4,4(r2)
 80005d0:	e0bffe04 	addi	r2,fp,-8
 80005d4:	200d883a 	mov	r6,r4
 80005d8:	100b883a 	mov	r5,r2
 80005dc:	1809883a 	mov	r4,r3
 80005e0:	8004a6c0 	call	8004a6c <xQueueReceive>
 80005e4:	10800058 	cmpnei	r2,r2,1
 80005e8:	103ff51e 	bne	r2,zero,80005c0 <vBlockingQueueConsumer+0x24>
		{
			if( usData != usExpectedValue )
 80005ec:	e0bffe0b 	ldhu	r2,-8(fp)
 80005f0:	10ffffcc 	andi	r3,r2,65535
 80005f4:	e0bffc0b 	ldhu	r2,-16(fp)
 80005f8:	18800526 	beq	r3,r2,8000610 <vBlockingQueueConsumer+0x74>
			{
				/* Catch-up. */
				usExpectedValue = usData;
 80005fc:	e0bffe0b 	ldhu	r2,-8(fp)
 8000600:	e0bffc0d 	sth	r2,-16(fp)

				sErrorEverOccurred = pdTRUE;
 8000604:	00800044 	movi	r2,1
 8000608:	e0bffc8d 	sth	r2,-14(fp)
 800060c:	003fec06 	br	80005c0 <vBlockingQueueConsumer+0x24>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
 8000610:	e0bffc8f 	ldh	r2,-14(fp)
 8000614:	1000051e 	bne	r2,zero,800062c <vBlockingQueueConsumer+0x90>
				{
					( *pxQueueParameters->psCheckVariable )++;
 8000618:	e0bffd17 	ldw	r2,-12(fp)
 800061c:	10800217 	ldw	r2,8(r2)
 8000620:	10c0000b 	ldhu	r3,0(r2)
 8000624:	18c00044 	addi	r3,r3,1
 8000628:	10c0000d 	sth	r3,0(r2)
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
 800062c:	e0bffc0b 	ldhu	r2,-16(fp)
 8000630:	10800044 	addi	r2,r2,1
 8000634:	e0bffc0d 	sth	r2,-16(fp)
					taskYIELD();
				}
			}
			#endif
		}
	}
 8000638:	003fe106 	br	80005c0 <vBlockingQueueConsumer+0x24>

0800063c <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
 800063c:	defffd04 	addi	sp,sp,-12
 8000640:	df000215 	stw	fp,8(sp)
 8000644:	df000204 	addi	fp,sp,8
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
 8000648:	00800044 	movi	r2,1
 800064c:	e0bffe15 	stw	r2,-8(fp)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000650:	e03fff15 	stw	zero,-4(fp)
 8000654:	00003b06 	br	8000744 <xAreBlockingQueuesStillRunning+0x108>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 8000658:	e0bfff17 	ldw	r2,-4(fp)
 800065c:	1087883a 	add	r3,r2,r2
 8000660:	d0a84c04 	addi	r2,gp,-24272
 8000664:	1885883a 	add	r2,r3,r2
 8000668:	1100000b 	ldhu	r4,0(r2)
 800066c:	e0bfff17 	ldw	r2,-4(fp)
 8000670:	1087883a 	add	r3,r2,r2
 8000674:	d0a84f04 	addi	r2,gp,-24260
 8000678:	1885883a 	add	r2,r3,r2
 800067c:	1080000b 	ldhu	r2,0(r2)
 8000680:	20ffffcc 	andi	r3,r4,65535
 8000684:	18e0001c 	xori	r3,r3,32768
 8000688:	18e00004 	addi	r3,r3,-32768
 800068c:	10bfffcc 	andi	r2,r2,65535
 8000690:	10a0001c 	xori	r2,r2,32768
 8000694:	10a00004 	addi	r2,r2,-32768
 8000698:	1880011e 	bne	r3,r2,80006a0 <xAreBlockingQueuesStillRunning+0x64>
		{
			xReturn = pdFALSE;
 800069c:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 80006a0:	e0bfff17 	ldw	r2,-4(fp)
 80006a4:	1087883a 	add	r3,r2,r2
 80006a8:	d0a84c04 	addi	r2,gp,-24272
 80006ac:	1885883a 	add	r2,r3,r2
 80006b0:	10c0000b 	ldhu	r3,0(r2)
 80006b4:	e0bfff17 	ldw	r2,-4(fp)
 80006b8:	1089883a 	add	r4,r2,r2
 80006bc:	d0a84f04 	addi	r2,gp,-24260
 80006c0:	2085883a 	add	r2,r4,r2
 80006c4:	10c0000d 	sth	r3,0(r2)


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 80006c8:	e0bfff17 	ldw	r2,-4(fp)
 80006cc:	1087883a 	add	r3,r2,r2
 80006d0:	d0a84d84 	addi	r2,gp,-24266
 80006d4:	1885883a 	add	r2,r3,r2
 80006d8:	1100000b 	ldhu	r4,0(r2)
 80006dc:	e0bfff17 	ldw	r2,-4(fp)
 80006e0:	1087883a 	add	r3,r2,r2
 80006e4:	d0a85084 	addi	r2,gp,-24254
 80006e8:	1885883a 	add	r2,r3,r2
 80006ec:	1080000b 	ldhu	r2,0(r2)
 80006f0:	20ffffcc 	andi	r3,r4,65535
 80006f4:	18e0001c 	xori	r3,r3,32768
 80006f8:	18e00004 	addi	r3,r3,-32768
 80006fc:	10bfffcc 	andi	r2,r2,65535
 8000700:	10a0001c 	xori	r2,r2,32768
 8000704:	10a00004 	addi	r2,r2,-32768
 8000708:	1880011e 	bne	r3,r2,8000710 <xAreBlockingQueuesStillRunning+0xd4>
		{
			xReturn = pdFALSE;
 800070c:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 8000710:	e0bfff17 	ldw	r2,-4(fp)
 8000714:	1087883a 	add	r3,r2,r2
 8000718:	d0a84d84 	addi	r2,gp,-24266
 800071c:	1885883a 	add	r2,r3,r2
 8000720:	10c0000b 	ldhu	r3,0(r2)
 8000724:	e0bfff17 	ldw	r2,-4(fp)
 8000728:	1089883a 	add	r4,r2,r2
 800072c:	d0a85084 	addi	r2,gp,-24254
 8000730:	2085883a 	add	r2,r4,r2
 8000734:	10c0000d 	sth	r3,0(r2)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000738:	e0bfff17 	ldw	r2,-4(fp)
 800073c:	10800044 	addi	r2,r2,1
 8000740:	e0bfff15 	stw	r2,-4(fp)
 8000744:	e0bfff17 	ldw	r2,-4(fp)
 8000748:	108000d0 	cmplti	r2,r2,3
 800074c:	103fc21e 	bne	r2,zero,8000658 <xAreBlockingQueuesStillRunning+0x1c>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
 8000750:	e0bffe17 	ldw	r2,-8(fp)
}
 8000754:	e037883a 	mov	sp,fp
 8000758:	df000017 	ldw	fp,0(sp)
 800075c:	dec00104 	addi	sp,sp,4
 8000760:	f800283a 	ret

08000764 <vStartGenericQueueTasks>:
static volatile BaseType_t xBlockWasAborted = pdFALSE;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 8000764:	defff904 	addi	sp,sp,-28
 8000768:	dfc00615 	stw	ra,24(sp)
 800076c:	df000515 	stw	fp,20(sp)
 8000770:	df000504 	addi	fp,sp,20
 8000774:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 8000778:	000d883a 	mov	r6,zero
 800077c:	01400104 	movi	r5,4
 8000780:	01000144 	movi	r4,5
 8000784:	80043880 	call	8004388 <xQueueGenericCreate>
 8000788:	e0bffd15 	stw	r2,-12(fp)

	if( xQueue != NULL )
 800078c:	e0bffd17 	ldw	r2,-12(fp)
 8000790:	10000a26 	beq	r2,zero,80007bc <vStartGenericQueueTasks+0x58>
		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );

		/* Create the demo task and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvSendFrontAndBackTest, "GenQ", genqGENERIC_QUEUE_TEST_TASK_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 8000794:	d8000115 	stw	zero,4(sp)
 8000798:	e0bfff17 	ldw	r2,-4(fp)
 800079c:	d8800015 	stw	r2,0(sp)
 80007a0:	e1fffd17 	ldw	r7,-12(fp)
 80007a4:	01810004 	movi	r6,1024
 80007a8:	014200b4 	movhi	r5,2050
 80007ac:	2967a004 	addi	r5,r5,-24960
 80007b0:	01020034 	movhi	r4,2048
 80007b4:	21021904 	addi	r4,r4,2148
 80007b8:	80056e80 	call	80056e8 <xTaskCreate>
	}

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 80007bc:	01000044 	movi	r4,1
 80007c0:	80045140 	call	8004514 <xQueueCreateMutex>
 80007c4:	e0bffe15 	stw	r2,-8(fp)

	if( xMutex != NULL )
 80007c8:	e0bffe17 	ldw	r2,-8(fp)
 80007cc:	10001f26 	beq	r2,zero,800084c <vStartGenericQueueTasks+0xe8>
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );

		/* Create the mutex demo tasks and pass it the mutex just created.  We
		are passing the mutex handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvLowPriorityMutexTask, "MuLow", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 80007d0:	d8000115 	stw	zero,4(sp)
 80007d4:	d8000015 	stw	zero,0(sp)
 80007d8:	e1fffe17 	ldw	r7,-8(fp)
 80007dc:	01810004 	movi	r6,1024
 80007e0:	014200b4 	movhi	r5,2050
 80007e4:	2967a204 	addi	r5,r5,-24952
 80007e8:	01020034 	movhi	r4,2048
 80007ec:	2103ec04 	addi	r4,r4,4016
 80007f0:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 80007f4:	d0a85704 	addi	r2,gp,-24228
 80007f8:	d8800115 	stw	r2,4(sp)
 80007fc:	00800084 	movi	r2,2
 8000800:	d8800015 	stw	r2,0(sp)
 8000804:	000f883a 	mov	r7,zero
 8000808:	01810004 	movi	r6,1024
 800080c:	014200b4 	movhi	r5,2050
 8000810:	2967a404 	addi	r5,r5,-24944
 8000814:	01020034 	movhi	r4,2048
 8000818:	21040304 	addi	r4,r4,4108
 800081c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 8000820:	d0a85604 	addi	r2,gp,-24232
 8000824:	d8800115 	stw	r2,4(sp)
 8000828:	008000c4 	movi	r2,3
 800082c:	d8800015 	stw	r2,0(sp)
 8000830:	e1fffe17 	ldw	r7,-8(fp)
 8000834:	01810004 	movi	r6,1024
 8000838:	014200b4 	movhi	r5,2050
 800083c:	2967a604 	addi	r5,r5,-24936
 8000840:	01020034 	movhi	r4,2048
 8000844:	21040e04 	addi	r4,r4,4152
 8000848:	80056e80 	call	80056e8 <xTaskCreate>
		{
			xTaskCreate( prvHighPriorityMutexTask, "MuHigh2", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_MEDIUM_PRIORITY, &xSecondMediumPriorityMutexTask );
		}
		#endif /* INCLUDE_xTaskAbortDelay */
	}
}
 800084c:	0001883a 	nop
 8000850:	e037883a 	mov	sp,fp
 8000854:	dfc00117 	ldw	ra,4(sp)
 8000858:	df000017 	ldw	fp,0(sp)
 800085c:	dec00204 	addi	sp,sp,8
 8000860:	f800283a 	ret

08000864 <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 8000864:	defff904 	addi	sp,sp,-28
 8000868:	dfc00615 	stw	ra,24(sp)
 800086c:	df000515 	stw	fp,20(sp)
 8000870:	df000504 	addi	fp,sp,20
 8000874:	e13fff15 	stw	r4,-4(fp)

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 8000878:	e0bfff17 	ldw	r2,-4(fp)
 800087c:	e0bffb15 	stw	r2,-20(fp)
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		ulLoopCounterSnapshot = ulLoopCounter;
 8000880:	d0a85317 	ldw	r2,-24244(gp)
 8000884:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 8000888:	e0bffe04 	addi	r2,fp,-8
 800088c:	01c00044 	movi	r7,1
 8000890:	000d883a 	mov	r6,zero
 8000894:	100b883a 	mov	r5,r2
 8000898:	e13ffb17 	ldw	r4,-20(fp)
 800089c:	80046f40 	call	80046f4 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80008a0:	e13ffb17 	ldw	r4,-20(fp)
 80008a4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80008a8:	10800060 	cmpeqi	r2,r2,1
 80008ac:	1000021e 	bne	r2,zero,80008b8 <prvSendFrontAndBackTest+0x54>
		{
			xErrorDetected = pdTRUE;
 80008b0:	00800044 	movi	r2,1
 80008b4:	d0a85215 	stw	r2,-24248(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 80008b8:	e0bffc04 	addi	r2,fp,-16
 80008bc:	000d883a 	mov	r6,zero
 80008c0:	100b883a 	mov	r5,r2
 80008c4:	e13ffb17 	ldw	r4,-20(fp)
 80008c8:	8004a6c0 	call	8004a6c <xQueueReceive>
 80008cc:	10800060 	cmpeqi	r2,r2,1
 80008d0:	1000021e 	bne	r2,zero,80008dc <prvSendFrontAndBackTest+0x78>
		{
			xErrorDetected = pdTRUE;
 80008d4:	00800044 	movi	r2,1
 80008d8:	d0a85215 	stw	r2,-24248(gp)
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 80008dc:	d0e85317 	ldw	r3,-24244(gp)
 80008e0:	e0bffc17 	ldw	r2,-16(fp)
 80008e4:	18800226 	beq	r3,r2,80008f0 <prvSendFrontAndBackTest+0x8c>
		{
			xErrorDetected = pdTRUE;
 80008e8:	00800044 	movi	r2,1
 80008ec:	d0a85215 	stw	r2,-24248(gp)
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 80008f0:	e13ffb17 	ldw	r4,-20(fp)
 80008f4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80008f8:	10000226 	beq	r2,zero,8000904 <prvSendFrontAndBackTest+0xa0>
		{
			xErrorDetected = pdTRUE;
 80008fc:	00800044 	movi	r2,1
 8000900:	d0a85215 	stw	r2,-24248(gp)
		}

		ulLoopCounterSnapshot = ulLoopCounter;
 8000904:	d0a85317 	ldw	r2,-24244(gp)
 8000908:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 800090c:	e0bffe04 	addi	r2,fp,-8
 8000910:	000f883a 	mov	r7,zero
 8000914:	000d883a 	mov	r6,zero
 8000918:	100b883a 	mov	r5,r2
 800091c:	e13ffb17 	ldw	r4,-20(fp)
 8000920:	80046f40 	call	80046f4 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8000924:	e13ffb17 	ldw	r4,-20(fp)
 8000928:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 800092c:	10800060 	cmpeqi	r2,r2,1
 8000930:	1000021e 	bne	r2,zero,800093c <prvSendFrontAndBackTest+0xd8>
		{
			xErrorDetected = pdTRUE;
 8000934:	00800044 	movi	r2,1
 8000938:	d0a85215 	stw	r2,-24248(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 800093c:	e0bffc04 	addi	r2,fp,-16
 8000940:	000d883a 	mov	r6,zero
 8000944:	100b883a 	mov	r5,r2
 8000948:	e13ffb17 	ldw	r4,-20(fp)
 800094c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8000950:	10800060 	cmpeqi	r2,r2,1
 8000954:	1000021e 	bne	r2,zero,8000960 <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
 8000958:	00800044 	movi	r2,1
 800095c:	d0a85215 	stw	r2,-24248(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000960:	e13ffb17 	ldw	r4,-20(fp)
 8000964:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000968:	10000226 	beq	r2,zero,8000974 <prvSendFrontAndBackTest+0x110>
		{
			xErrorDetected = pdTRUE;
 800096c:	00800044 	movi	r2,1
 8000970:	d0a85215 	stw	r2,-24248(gp)
		}

		/* The data sent to the queue should equal the data just received from
		the queue. */
		if( ulLoopCounter != ulData )
 8000974:	d0e85317 	ldw	r3,-24244(gp)
 8000978:	e0bffc17 	ldw	r2,-16(fp)
 800097c:	18800226 	beq	r3,r2,8000988 <prvSendFrontAndBackTest+0x124>
		{
			xErrorDetected = pdTRUE;
 8000980:	00800044 	movi	r2,1
 8000984:	d0a85215 	stw	r2,-24248(gp)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8000988:	00800084 	movi	r2,2
 800098c:	e0bffc15 	stw	r2,-16(fp)
 8000990:	00000906 	br	80009b8 <prvSendFrontAndBackTest+0x154>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000994:	e0bffc04 	addi	r2,fp,-16
 8000998:	000f883a 	mov	r7,zero
 800099c:	000d883a 	mov	r6,zero
 80009a0:	100b883a 	mov	r5,r2
 80009a4:	e13ffb17 	ldw	r4,-20(fp)
 80009a8:	80046f40 	call	80046f4 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 80009ac:	e0bffc17 	ldw	r2,-16(fp)
 80009b0:	10800044 	addi	r2,r2,1
 80009b4:	e0bffc15 	stw	r2,-16(fp)
 80009b8:	e0bffc17 	ldw	r2,-16(fp)
 80009bc:	10800170 	cmpltui	r2,r2,5
 80009c0:	103ff41e 	bne	r2,zero,8000994 <prvSendFrontAndBackTest+0x130>
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 80009c4:	e13ffb17 	ldw	r4,-20(fp)
 80009c8:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80009cc:	108000e0 	cmpeqi	r2,r2,3
 80009d0:	1000021e 	bne	r2,zero,80009dc <prvSendFrontAndBackTest+0x178>
		{
			xErrorDetected = pdTRUE;
 80009d4:	00800044 	movi	r2,1
 80009d8:	d0a85215 	stw	r2,-24248(gp)
		}
		ulData = 1;
 80009dc:	00800044 	movi	r2,1
 80009e0:	e0bffc15 	stw	r2,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 80009e4:	e0bffc04 	addi	r2,fp,-16
 80009e8:	01c00044 	movi	r7,1
 80009ec:	000d883a 	mov	r6,zero
 80009f0:	100b883a 	mov	r5,r2
 80009f4:	e13ffb17 	ldw	r4,-20(fp)
 80009f8:	80046f40 	call	80046f4 <xQueueGenericSend>
		ulData = 0;
 80009fc:	e03ffc15 	stw	zero,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000a00:	e0bffc04 	addi	r2,fp,-16
 8000a04:	01c00044 	movi	r7,1
 8000a08:	000d883a 	mov	r6,zero
 8000a0c:	100b883a 	mov	r5,r2
 8000a10:	e13ffb17 	ldw	r4,-20(fp)
 8000a14:	80046f40 	call	80046f4 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8000a18:	e13ffb17 	ldw	r4,-20(fp)
 8000a1c:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000a20:	10800160 	cmpeqi	r2,r2,5
 8000a24:	1000021e 	bne	r2,zero,8000a30 <prvSendFrontAndBackTest+0x1cc>
		{
			xErrorDetected = pdTRUE;
 8000a28:	00800044 	movi	r2,1
 8000a2c:	d0a85215 	stw	r2,-24248(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000a30:	e0bffc04 	addi	r2,fp,-16
 8000a34:	01c00044 	movi	r7,1
 8000a38:	000d883a 	mov	r6,zero
 8000a3c:	100b883a 	mov	r5,r2
 8000a40:	e13ffb17 	ldw	r4,-20(fp)
 8000a44:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000a48:	10000226 	beq	r2,zero,8000a54 <prvSendFrontAndBackTest+0x1f0>
		{
			xErrorDetected = pdTRUE;
 8000a4c:	00800044 	movi	r2,1
 8000a50:	d0a85215 	stw	r2,-24248(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000a54:	e0bffc04 	addi	r2,fp,-16
 8000a58:	000f883a 	mov	r7,zero
 8000a5c:	000d883a 	mov	r6,zero
 8000a60:	100b883a 	mov	r5,r2
 8000a64:	e13ffb17 	ldw	r4,-20(fp)
 8000a68:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000a6c:	10000226 	beq	r2,zero,8000a78 <prvSendFrontAndBackTest+0x214>
		{
			xErrorDetected = pdTRUE;
 8000a70:	00800044 	movi	r2,1
 8000a74:	d0a85215 	stw	r2,-24248(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000a78:	e03ffc15 	stw	zero,-16(fp)
 8000a7c:	00002206 	br	8000b08 <prvSendFrontAndBackTest+0x2a4>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000a80:	e0bffd04 	addi	r2,fp,-12
 8000a84:	000d883a 	mov	r6,zero
 8000a88:	100b883a 	mov	r5,r2
 8000a8c:	e13ffb17 	ldw	r4,-20(fp)
 8000a90:	8004e240 	call	8004e24 <xQueuePeek>
 8000a94:	10800060 	cmpeqi	r2,r2,1
 8000a98:	1000021e 	bne	r2,zero,8000aa4 <prvSendFrontAndBackTest+0x240>
			{
				xErrorDetected = pdTRUE;
 8000a9c:	00800044 	movi	r2,1
 8000aa0:	d0a85215 	stw	r2,-24248(gp)
			}

			if( ulData != ulData2 )
 8000aa4:	e0fffc17 	ldw	r3,-16(fp)
 8000aa8:	e0bffd17 	ldw	r2,-12(fp)
 8000aac:	18800226 	beq	r3,r2,8000ab8 <prvSendFrontAndBackTest+0x254>
			{
				xErrorDetected = pdTRUE;
 8000ab0:	00800044 	movi	r2,1
 8000ab4:	d0a85215 	stw	r2,-24248(gp)
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 8000ab8:	e0bffd17 	ldw	r2,-12(fp)
 8000abc:	0084303a 	nor	r2,zero,r2
 8000ac0:	e0bffd15 	stw	r2,-12(fp)
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000ac4:	e0bffd04 	addi	r2,fp,-12
 8000ac8:	000d883a 	mov	r6,zero
 8000acc:	100b883a 	mov	r5,r2
 8000ad0:	e13ffb17 	ldw	r4,-20(fp)
 8000ad4:	8004a6c0 	call	8004a6c <xQueueReceive>
 8000ad8:	10800060 	cmpeqi	r2,r2,1
 8000adc:	1000021e 	bne	r2,zero,8000ae8 <prvSendFrontAndBackTest+0x284>
			{
				xErrorDetected = pdTRUE;
 8000ae0:	00800044 	movi	r2,1
 8000ae4:	d0a85215 	stw	r2,-24248(gp)
			}

			if( ulData != ulData2 )
 8000ae8:	e0fffc17 	ldw	r3,-16(fp)
 8000aec:	e0bffd17 	ldw	r2,-12(fp)
 8000af0:	18800226 	beq	r3,r2,8000afc <prvSendFrontAndBackTest+0x298>
			{
				xErrorDetected = pdTRUE;
 8000af4:	00800044 	movi	r2,1
 8000af8:	d0a85215 	stw	r2,-24248(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000afc:	e0bffc17 	ldw	r2,-16(fp)
 8000b00:	10800044 	addi	r2,r2,1
 8000b04:	e0bffc15 	stw	r2,-16(fp)
 8000b08:	e0bffc17 	ldw	r2,-16(fp)
 8000b0c:	10800170 	cmpltui	r2,r2,5
 8000b10:	103fdb1e 	bne	r2,zero,8000a80 <prvSendFrontAndBackTest+0x21c>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000b14:	e13ffb17 	ldw	r4,-20(fp)
 8000b18:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000b1c:	10000226 	beq	r2,zero,8000b28 <prvSendFrontAndBackTest+0x2c4>
		{
			xErrorDetected = pdTRUE;
 8000b20:	00800044 	movi	r2,1
 8000b24:	d0a85215 	stw	r2,-24248(gp)
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 8000b28:	00800284 	movi	r2,10
 8000b2c:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8000b30:	e0bffc04 	addi	r2,fp,-16
 8000b34:	000f883a 	mov	r7,zero
 8000b38:	000d883a 	mov	r6,zero
 8000b3c:	100b883a 	mov	r5,r2
 8000b40:	e13ffb17 	ldw	r4,-20(fp)
 8000b44:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000b48:	10800060 	cmpeqi	r2,r2,1
 8000b4c:	1000021e 	bne	r2,zero,8000b58 <prvSendFrontAndBackTest+0x2f4>
		{
			xErrorDetected = pdTRUE;
 8000b50:	00800044 	movi	r2,1
 8000b54:	d0a85215 	stw	r2,-24248(gp)
		}
		ulData = 11;
 8000b58:	008002c4 	movi	r2,11
 8000b5c:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8000b60:	e0bffc04 	addi	r2,fp,-16
 8000b64:	000f883a 	mov	r7,zero
 8000b68:	000d883a 	mov	r6,zero
 8000b6c:	100b883a 	mov	r5,r2
 8000b70:	e13ffb17 	ldw	r4,-20(fp)
 8000b74:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000b78:	10800060 	cmpeqi	r2,r2,1
 8000b7c:	1000021e 	bne	r2,zero,8000b88 <prvSendFrontAndBackTest+0x324>
		{
			xErrorDetected = pdTRUE;
 8000b80:	00800044 	movi	r2,1
 8000b84:	d0a85215 	stw	r2,-24248(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 8000b88:	e13ffb17 	ldw	r4,-20(fp)
 8000b8c:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000b90:	108000a0 	cmpeqi	r2,r2,2
 8000b94:	1000021e 	bne	r2,zero,8000ba0 <prvSendFrontAndBackTest+0x33c>
		{
			xErrorDetected = pdTRUE;
 8000b98:	00800044 	movi	r2,1
 8000b9c:	d0a85215 	stw	r2,-24248(gp)
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8000ba0:	00800244 	movi	r2,9
 8000ba4:	e0bffc15 	stw	r2,-16(fp)
 8000ba8:	00000d06 	br	8000be0 <prvSendFrontAndBackTest+0x37c>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000bac:	e0bffc04 	addi	r2,fp,-16
 8000bb0:	01c00044 	movi	r7,1
 8000bb4:	000d883a 	mov	r6,zero
 8000bb8:	100b883a 	mov	r5,r2
 8000bbc:	e13ffb17 	ldw	r4,-20(fp)
 8000bc0:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000bc4:	10800060 	cmpeqi	r2,r2,1
 8000bc8:	1000021e 	bne	r2,zero,8000bd4 <prvSendFrontAndBackTest+0x370>
			{
				xErrorDetected = pdTRUE;
 8000bcc:	00800044 	movi	r2,1
 8000bd0:	d0a85215 	stw	r2,-24248(gp)
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8000bd4:	e0bffc17 	ldw	r2,-16(fp)
 8000bd8:	10bfffc4 	addi	r2,r2,-1
 8000bdc:	e0bffc15 	stw	r2,-16(fp)
 8000be0:	e0bffc17 	ldw	r2,-16(fp)
 8000be4:	108001e8 	cmpgeui	r2,r2,7
 8000be8:	103ff01e 	bne	r2,zero,8000bac <prvSendFrontAndBackTest+0x348>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8000bec:	e13ffb17 	ldw	r4,-20(fp)
 8000bf0:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000bf4:	10800160 	cmpeqi	r2,r2,5
 8000bf8:	1000021e 	bne	r2,zero,8000c04 <prvSendFrontAndBackTest+0x3a0>
		{
			xErrorDetected = pdTRUE;
 8000bfc:	00800044 	movi	r2,1
 8000c00:	d0a85215 	stw	r2,-24248(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000c04:	e0bffc04 	addi	r2,fp,-16
 8000c08:	01c00044 	movi	r7,1
 8000c0c:	000d883a 	mov	r6,zero
 8000c10:	100b883a 	mov	r5,r2
 8000c14:	e13ffb17 	ldw	r4,-20(fp)
 8000c18:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000c1c:	10000226 	beq	r2,zero,8000c28 <prvSendFrontAndBackTest+0x3c4>
		{
			xErrorDetected = pdTRUE;
 8000c20:	00800044 	movi	r2,1
 8000c24:	d0a85215 	stw	r2,-24248(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000c28:	e0bffc04 	addi	r2,fp,-16
 8000c2c:	000f883a 	mov	r7,zero
 8000c30:	000d883a 	mov	r6,zero
 8000c34:	100b883a 	mov	r5,r2
 8000c38:	e13ffb17 	ldw	r4,-20(fp)
 8000c3c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000c40:	10000226 	beq	r2,zero,8000c4c <prvSendFrontAndBackTest+0x3e8>
		{
			xErrorDetected = pdTRUE;
 8000c44:	00800044 	movi	r2,1
 8000c48:	d0a85215 	stw	r2,-24248(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8000c4c:	008001c4 	movi	r2,7
 8000c50:	e0bffc15 	stw	r2,-16(fp)
 8000c54:	00001106 	br	8000c9c <prvSendFrontAndBackTest+0x438>
		{
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000c58:	e0bffd04 	addi	r2,fp,-12
 8000c5c:	000d883a 	mov	r6,zero
 8000c60:	100b883a 	mov	r5,r2
 8000c64:	e13ffb17 	ldw	r4,-20(fp)
 8000c68:	8004a6c0 	call	8004a6c <xQueueReceive>
 8000c6c:	10800060 	cmpeqi	r2,r2,1
 8000c70:	1000021e 	bne	r2,zero,8000c7c <prvSendFrontAndBackTest+0x418>
			{
				xErrorDetected = pdTRUE;
 8000c74:	00800044 	movi	r2,1
 8000c78:	d0a85215 	stw	r2,-24248(gp)
			}

			if( ulData != ulData2 )
 8000c7c:	e0fffc17 	ldw	r3,-16(fp)
 8000c80:	e0bffd17 	ldw	r2,-12(fp)
 8000c84:	18800226 	beq	r3,r2,8000c90 <prvSendFrontAndBackTest+0x42c>
			{
				xErrorDetected = pdTRUE;
 8000c88:	00800044 	movi	r2,1
 8000c8c:	d0a85215 	stw	r2,-24248(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8000c90:	e0bffc17 	ldw	r2,-16(fp)
 8000c94:	10800044 	addi	r2,r2,1
 8000c98:	e0bffc15 	stw	r2,-16(fp)
 8000c9c:	e0bffc17 	ldw	r2,-16(fp)
 8000ca0:	10800330 	cmpltui	r2,r2,12
 8000ca4:	103fec1e 	bne	r2,zero,8000c58 <prvSendFrontAndBackTest+0x3f4>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000ca8:	e13ffb17 	ldw	r4,-20(fp)
 8000cac:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000cb0:	10000226 	beq	r2,zero,8000cbc <prvSendFrontAndBackTest+0x458>
		{
			xErrorDetected = pdTRUE;
 8000cb4:	00800044 	movi	r2,1
 8000cb8:	d0a85215 	stw	r2,-24248(gp)
		}

		/* Increment the loop counter to indicate these tasks are still
		executing. */
		ulLoopCounter++;
 8000cbc:	d0a85317 	ldw	r2,-24244(gp)
 8000cc0:	10800044 	addi	r2,r2,1
 8000cc4:	d0a85315 	stw	r2,-24244(gp)
	}
 8000cc8:	003eed06 	br	8000880 <prvSendFrontAndBackTest+0x1c>

08000ccc <prvTakeTwoMutexesReturnInDifferentOrder>:

#endif /* INCLUDE_xTaskAbortDelay == 1 */
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8000ccc:	defffc04 	addi	sp,sp,-16
 8000cd0:	dfc00315 	stw	ra,12(sp)
 8000cd4:	df000215 	stw	fp,8(sp)
 8000cd8:	df000204 	addi	fp,sp,8
 8000cdc:	e13ffe15 	stw	r4,-8(fp)
 8000ce0:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8000ce4:	000b883a 	mov	r5,zero
 8000ce8:	e13ffe17 	ldw	r4,-8(fp)
 8000cec:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000cf0:	10800060 	cmpeqi	r2,r2,1
 8000cf4:	1000021e 	bne	r2,zero,8000d00 <prvTakeTwoMutexesReturnInDifferentOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 8000cf8:	00800044 	movi	r2,1
 8000cfc:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8000d00:	d0285515 	stw	zero,-24236(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8000d04:	0009883a 	mov	r4,zero
 8000d08:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000d0c:	10000226 	beq	r2,zero,8000d18 <prvTakeTwoMutexesReturnInDifferentOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8000d10:	00800044 	movi	r2,1
 8000d14:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8000d18:	d0a85617 	ldw	r2,-24232(gp)
 8000d1c:	1009883a 	mov	r4,r2
 8000d20:	80060bc0 	call	80060bc <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000d24:	0009883a 	mov	r4,zero
 8000d28:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000d2c:	108000e0 	cmpeqi	r2,r2,3
 8000d30:	1000021e 	bne	r2,zero,8000d3c <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 8000d34:	00800044 	movi	r2,1
 8000d38:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Attempt to set the priority of this task to the test priority -
	between the idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 8000d3c:	01400044 	movi	r5,1
 8000d40:	0009883a 	mov	r4,zero
 8000d44:	8005d940 	call	8005d94 <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000d48:	0009883a 	mov	r4,zero
 8000d4c:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000d50:	108000e0 	cmpeqi	r2,r2,3
 8000d54:	1000021e 	bne	r2,zero,8000d60 <prvTakeTwoMutexesReturnInDifferentOrder+0x94>
	{
		xErrorDetected = pdTRUE;
 8000d58:	00800044 	movi	r2,1
 8000d5c:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8000d60:	d0a85717 	ldw	r2,-24228(gp)
 8000d64:	1009883a 	mov	r4,r2
 8000d68:	80060bc0 	call	80060bc <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8000d6c:	d0a85517 	ldw	r2,-24236(gp)
 8000d70:	10000226 	beq	r2,zero,8000d7c <prvTakeTwoMutexesReturnInDifferentOrder+0xb0>
	{
		xErrorDetected = pdTRUE;
 8000d74:	00800044 	movi	r2,1
 8000d78:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 8000d7c:	000b883a 	mov	r5,zero
 8000d80:	e13fff17 	ldw	r4,-4(fp)
 8000d84:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000d88:	10800060 	cmpeqi	r2,r2,1
 8000d8c:	1000021e 	bne	r2,zero,8000d98 <prvTakeTwoMutexesReturnInDifferentOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 8000d90:	00800044 	movi	r2,1
 8000d94:	d0a85215 	stw	r2,-24248(gp)
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8000d98:	000f883a 	mov	r7,zero
 8000d9c:	000d883a 	mov	r6,zero
 8000da0:	000b883a 	mov	r5,zero
 8000da4:	e13ffe17 	ldw	r4,-8(fp)
 8000da8:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000dac:	10800060 	cmpeqi	r2,r2,1
 8000db0:	1000021e 	bne	r2,zero,8000dbc <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
 8000db4:	00800044 	movi	r2,1
 8000db8:	d0a85215 	stw	r2,-24248(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8000dbc:	d0a85517 	ldw	r2,-24236(gp)
 8000dc0:	10000226 	beq	r2,zero,8000dcc <prvTakeTwoMutexesReturnInDifferentOrder+0x100>
	{
		xErrorDetected = pdTRUE;
 8000dc4:	00800044 	movi	r2,1
 8000dc8:	d0a85215 	stw	r2,-24248(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000dcc:	0009883a 	mov	r4,zero
 8000dd0:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000dd4:	108000e0 	cmpeqi	r2,r2,3
 8000dd8:	1000021e 	bne	r2,zero,8000de4 <prvTakeTwoMutexesReturnInDifferentOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 8000ddc:	00800044 	movi	r2,1
 8000de0:	d0a85215 	stw	r2,-24248(gp)
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8000de4:	000f883a 	mov	r7,zero
 8000de8:	000d883a 	mov	r6,zero
 8000dec:	000b883a 	mov	r5,zero
 8000df0:	e13fff17 	ldw	r4,-4(fp)
 8000df4:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000df8:	10800060 	cmpeqi	r2,r2,1
 8000dfc:	1000021e 	bne	r2,zero,8000e08 <prvTakeTwoMutexesReturnInDifferentOrder+0x13c>
	{
		xErrorDetected = pdTRUE;
 8000e00:	00800044 	movi	r2,1
 8000e04:	d0a85215 	stw	r2,-24248(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8000e08:	d0a85517 	ldw	r2,-24236(gp)
 8000e0c:	10800060 	cmpeqi	r2,r2,1
 8000e10:	1000021e 	bne	r2,zero,8000e1c <prvTakeTwoMutexesReturnInDifferentOrder+0x150>
	{
		xErrorDetected = pdTRUE;
 8000e14:	00800044 	movi	r2,1
 8000e18:	d0a85215 	stw	r2,-24248(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 8000e1c:	0009883a 	mov	r4,zero
 8000e20:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000e24:	10800060 	cmpeqi	r2,r2,1
 8000e28:	1000021e 	bne	r2,zero,8000e34 <prvTakeTwoMutexesReturnInDifferentOrder+0x168>
	{
		xErrorDetected = pdTRUE;
 8000e2c:	00800044 	movi	r2,1
 8000e30:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 8000e34:	000b883a 	mov	r5,zero
 8000e38:	0009883a 	mov	r4,zero
 8000e3c:	8005d940 	call	8005d94 <vTaskPrioritySet>
}
 8000e40:	0001883a 	nop
 8000e44:	e037883a 	mov	sp,fp
 8000e48:	dfc00117 	ldw	ra,4(sp)
 8000e4c:	df000017 	ldw	fp,0(sp)
 8000e50:	dec00204 	addi	sp,sp,8
 8000e54:	f800283a 	ret

08000e58 <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8000e58:	defffc04 	addi	sp,sp,-16
 8000e5c:	dfc00315 	stw	ra,12(sp)
 8000e60:	df000215 	stw	fp,8(sp)
 8000e64:	df000204 	addi	fp,sp,8
 8000e68:	e13ffe15 	stw	r4,-8(fp)
 8000e6c:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8000e70:	000b883a 	mov	r5,zero
 8000e74:	e13ffe17 	ldw	r4,-8(fp)
 8000e78:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000e7c:	10800060 	cmpeqi	r2,r2,1
 8000e80:	1000021e 	bne	r2,zero,8000e8c <prvTakeTwoMutexesReturnInSameOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 8000e84:	00800044 	movi	r2,1
 8000e88:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8000e8c:	d0285515 	stw	zero,-24236(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8000e90:	0009883a 	mov	r4,zero
 8000e94:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000e98:	10000226 	beq	r2,zero,8000ea4 <prvTakeTwoMutexesReturnInSameOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8000e9c:	00800044 	movi	r2,1
 8000ea0:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8000ea4:	d0a85617 	ldw	r2,-24232(gp)
 8000ea8:	1009883a 	mov	r4,r2
 8000eac:	80060bc0 	call	80060bc <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000eb0:	0009883a 	mov	r4,zero
 8000eb4:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000eb8:	108000e0 	cmpeqi	r2,r2,3
 8000ebc:	1000021e 	bne	r2,zero,8000ec8 <prvTakeTwoMutexesReturnInSameOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 8000ec0:	00800044 	movi	r2,1
 8000ec4:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8000ec8:	d0a85717 	ldw	r2,-24228(gp)
 8000ecc:	1009883a 	mov	r4,r2
 8000ed0:	80060bc0 	call	80060bc <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8000ed4:	d0a85517 	ldw	r2,-24236(gp)
 8000ed8:	10000226 	beq	r2,zero,8000ee4 <prvTakeTwoMutexesReturnInSameOrder+0x8c>
	{
		xErrorDetected = pdTRUE;
 8000edc:	00800044 	movi	r2,1
 8000ee0:	d0a85215 	stw	r2,-24248(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 8000ee4:	000b883a 	mov	r5,zero
 8000ee8:	e13fff17 	ldw	r4,-4(fp)
 8000eec:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000ef0:	10800060 	cmpeqi	r2,r2,1
 8000ef4:	1000021e 	bne	r2,zero,8000f00 <prvTakeTwoMutexesReturnInSameOrder+0xa8>
	{
		xErrorDetected = pdTRUE;
 8000ef8:	00800044 	movi	r2,1
 8000efc:	d0a85215 	stw	r2,-24248(gp)
	not yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8000f00:	000f883a 	mov	r7,zero
 8000f04:	000d883a 	mov	r6,zero
 8000f08:	000b883a 	mov	r5,zero
 8000f0c:	e13fff17 	ldw	r4,-4(fp)
 8000f10:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000f14:	10800060 	cmpeqi	r2,r2,1
 8000f18:	1000021e 	bne	r2,zero,8000f24 <prvTakeTwoMutexesReturnInSameOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 8000f1c:	00800044 	movi	r2,1
 8000f20:	d0a85215 	stw	r2,-24248(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8000f24:	d0a85517 	ldw	r2,-24236(gp)
 8000f28:	10000226 	beq	r2,zero,8000f34 <prvTakeTwoMutexesReturnInSameOrder+0xdc>
	{
		xErrorDetected = pdTRUE;
 8000f2c:	00800044 	movi	r2,1
 8000f30:	d0a85215 	stw	r2,-24248(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000f34:	0009883a 	mov	r4,zero
 8000f38:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000f3c:	108000e0 	cmpeqi	r2,r2,3
 8000f40:	1000021e 	bne	r2,zero,8000f4c <prvTakeTwoMutexesReturnInSameOrder+0xf4>
	{
		xErrorDetected = pdTRUE;
 8000f44:	00800044 	movi	r2,1
 8000f48:	d0a85215 	stw	r2,-24248(gp)
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8000f4c:	000f883a 	mov	r7,zero
 8000f50:	000d883a 	mov	r6,zero
 8000f54:	000b883a 	mov	r5,zero
 8000f58:	e13ffe17 	ldw	r4,-8(fp)
 8000f5c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000f60:	10800060 	cmpeqi	r2,r2,1
 8000f64:	1000021e 	bne	r2,zero,8000f70 <prvTakeTwoMutexesReturnInSameOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 8000f68:	00800044 	movi	r2,1
 8000f6c:	d0a85215 	stw	r2,-24248(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8000f70:	d0a85517 	ldw	r2,-24236(gp)
 8000f74:	10800060 	cmpeqi	r2,r2,1
 8000f78:	1000021e 	bne	r2,zero,8000f84 <prvTakeTwoMutexesReturnInSameOrder+0x12c>
	{
		xErrorDetected = pdTRUE;
 8000f7c:	00800044 	movi	r2,1
 8000f80:	d0a85215 	stw	r2,-24248(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8000f84:	0009883a 	mov	r4,zero
 8000f88:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000f8c:	10000226 	beq	r2,zero,8000f98 <prvTakeTwoMutexesReturnInSameOrder+0x140>
	{
		xErrorDetected = pdTRUE;
 8000f90:	00800044 	movi	r2,1
 8000f94:	d0a85215 	stw	r2,-24248(gp)
	}
}
 8000f98:	0001883a 	nop
 8000f9c:	e037883a 	mov	sp,fp
 8000fa0:	dfc00117 	ldw	ra,4(sp)
 8000fa4:	df000017 	ldw	fp,0(sp)
 8000fa8:	dec00204 	addi	sp,sp,8
 8000fac:	f800283a 	ret

08000fb0 <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 8000fb0:	defffb04 	addi	sp,sp,-20
 8000fb4:	dfc00415 	stw	ra,16(sp)
 8000fb8:	df000315 	stw	fp,12(sp)
 8000fbc:	df000304 	addi	fp,sp,12
 8000fc0:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 8000fc4:	e0bfff17 	ldw	r2,-4(fp)
 8000fc8:	e0bffd15 	stw	r2,-12(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 8000fcc:	01000044 	movi	r4,1
 8000fd0:	80045140 	call	8004514 <xQueueCreateMutex>
 8000fd4:	e0bffe15 	stw	r2,-8(fp)
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 8000fd8:	e17ffe17 	ldw	r5,-8(fp)
 8000fdc:	e13ffd17 	ldw	r4,-12(fp)
 8000fe0:	8000ccc0 	call	8000ccc <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8000fe4:	d0a85417 	ldw	r2,-24240(gp)
 8000fe8:	10800044 	addi	r2,r2,1
 8000fec:	d0a85415 	stw	r2,-24240(gp)
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 8000ff0:	e17ffe17 	ldw	r5,-8(fp)
 8000ff4:	e13ffd17 	ldw	r4,-12(fp)
 8000ff8:	8000e580 	call	8000e58 <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8000ffc:	d0a85417 	ldw	r2,-24240(gp)
 8001000:	10800044 	addi	r2,r2,1
 8001004:	d0a85415 	stw	r2,-24240(gp)
			priority of a high priority task only for the high priority task to
			timeout before obtaining the mutex. */
			prvHighPriorityTimeout( xMutex );
		}
		#endif
	}
 8001008:	003ff306 	br	8000fd8 <prvLowPriorityMutexTask+0x28>

0800100c <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 800100c:	defffd04 	addi	sp,sp,-12
 8001010:	dfc00215 	stw	ra,8(sp)
 8001014:	df000115 	stw	fp,4(sp)
 8001018:	df000104 	addi	fp,sp,4
 800101c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001020:	0009883a 	mov	r4,zero
 8001024:	8005f540 	call	8005f54 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 8001028:	d0a85517 	ldw	r2,-24236(gp)
 800102c:	10800044 	addi	r2,r2,1
 8001030:	d0a85515 	stw	r2,-24236(gp)
	}
 8001034:	003ffa06 	br	8001020 <prvMediumPriorityMutexTask+0x14>

08001038 <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 8001038:	defffc04 	addi	sp,sp,-16
 800103c:	dfc00315 	stw	ra,12(sp)
 8001040:	df000215 	stw	fp,8(sp)
 8001044:	df000204 	addi	fp,sp,8
 8001048:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 800104c:	e0bfff17 	ldw	r2,-4(fp)
 8001050:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001054:	0009883a 	mov	r4,zero
 8001058:	8005f540 	call	8005f54 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain the
		mutex.  It should find the mutex is not available so a block time is
		specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 800105c:	017fffc4 	movi	r5,-1
 8001060:	e13ffe17 	ldw	r4,-8(fp)
 8001064:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8001068:	10800060 	cmpeqi	r2,r2,1
 800106c:	1000071e 	bne	r2,zero,800108c <prvHighPriorityMutexTask+0x54>
		{
			/* This task would expect to obtain the mutex unless its wait for
			the mutex was aborted. */
			if( xBlockWasAborted == pdFALSE )
 8001070:	d0a85817 	ldw	r2,-24224(gp)
 8001074:	1000031e 	bne	r2,zero,8001084 <prvHighPriorityMutexTask+0x4c>
			{
				xErrorDetected = pdTRUE;
 8001078:	00800044 	movi	r2,1
 800107c:	d0a85215 	stw	r2,-24248(gp)
 8001080:	003ff406 	br	8001054 <prvHighPriorityMutexTask+0x1c>
			}
			else
			{
				xBlockWasAborted = pdFALSE;
 8001084:	d0285815 	stw	zero,-24224(gp)
 8001088:	003ff206 	br	8001054 <prvHighPriorityMutexTask+0x1c>
		}
		else
		{
			/* When the mutex is eventually obtained it is just given back before
			returning to suspend ready for the next cycle. */
			if( xSemaphoreGive( xMutex ) != pdPASS )
 800108c:	000f883a 	mov	r7,zero
 8001090:	000d883a 	mov	r6,zero
 8001094:	000b883a 	mov	r5,zero
 8001098:	e13ffe17 	ldw	r4,-8(fp)
 800109c:	80046f40 	call	80046f4 <xQueueGenericSend>
 80010a0:	10800060 	cmpeqi	r2,r2,1
 80010a4:	103feb1e 	bne	r2,zero,8001054 <prvHighPriorityMutexTask+0x1c>
			{
				xErrorDetected = pdTRUE;
 80010a8:	00800044 	movi	r2,1
 80010ac:	d0a85215 	stw	r2,-24248(gp)
			}
		}
	}
 80010b0:	003fe806 	br	8001054 <prvHighPriorityMutexTask+0x1c>

080010b4 <xAreGenericQueueTasksStillRunning>:
/*-----------------------------------------------------------*/


/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 80010b4:	deffff04 	addi	sp,sp,-4
 80010b8:	df000015 	stw	fp,0(sp)
 80010bc:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 80010c0:	d0e85917 	ldw	r3,-24220(gp)
 80010c4:	d0a85317 	ldw	r2,-24244(gp)
 80010c8:	1880021e 	bne	r3,r2,80010d4 <xAreGenericQueueTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 80010cc:	00800044 	movi	r2,1
 80010d0:	d0a85215 	stw	r2,-24248(gp)
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 80010d4:	d0e85a17 	ldw	r3,-24216(gp)
 80010d8:	d0a85417 	ldw	r2,-24240(gp)
 80010dc:	1880021e 	bne	r3,r2,80010e8 <xAreGenericQueueTasksStillRunning+0x34>
	{
		xErrorDetected = pdTRUE;
 80010e0:	00800044 	movi	r2,1
 80010e4:	d0a85215 	stw	r2,-24248(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 80010e8:	d0a85317 	ldw	r2,-24244(gp)
 80010ec:	d0a85915 	stw	r2,-24220(gp)
	ulLastLoopCounter2 = ulLoopCounter2;
 80010f0:	d0a85417 	ldw	r2,-24240(gp)
 80010f4:	d0a85a15 	stw	r2,-24216(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 80010f8:	d0a85217 	ldw	r2,-24248(gp)
 80010fc:	1005003a 	cmpeq	r2,r2,zero
 8001100:	10803fcc 	andi	r2,r2,255
}
 8001104:	e037883a 	mov	sp,fp
 8001108:	df000017 	ldw	fp,0(sp)
 800110c:	dec00104 	addi	sp,sp,4
 8001110:	f800283a 	ret

08001114 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
 8001114:	defffb04 	addi	sp,sp,-20
 8001118:	dfc00415 	stw	ra,16(sp)
 800111c:	df000315 	stw	fp,12(sp)
 8001120:	df000304 	addi	fp,sp,12
 8001124:	e13fff15 	stw	r4,-4(fp)
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
 8001128:	000d883a 	mov	r6,zero
 800112c:	01400084 	movi	r5,2
 8001130:	01000284 	movi	r4,10
 8001134:	80043880 	call	8004388 <xQueueGenericCreate>
 8001138:	d0a85d15 	stw	r2,-24204(gp)

	if( xPolledQueue != NULL )
 800113c:	d0a85d17 	ldw	r2,-24204(gp)
 8001140:	10001426 	beq	r2,zero,8001194 <vStartPolledQueueTasks+0x80>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 8001144:	d8000115 	stw	zero,4(sp)
 8001148:	e0bfff17 	ldw	r2,-4(fp)
 800114c:	d8800015 	stw	r2,0(sp)
 8001150:	d1e85d04 	addi	r7,gp,-24204
 8001154:	01810004 	movi	r6,1024
 8001158:	014200b4 	movhi	r5,2050
 800115c:	2967a804 	addi	r5,r5,-24928
 8001160:	01020034 	movhi	r4,2048
 8001164:	21049404 	addi	r4,r4,4688
 8001168:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 800116c:	d8000115 	stw	zero,4(sp)
 8001170:	e0bfff17 	ldw	r2,-4(fp)
 8001174:	d8800015 	stw	r2,0(sp)
 8001178:	d1e85d04 	addi	r7,gp,-24204
 800117c:	01810004 	movi	r6,1024
 8001180:	014200b4 	movhi	r5,2050
 8001184:	2967aa04 	addi	r5,r5,-24920
 8001188:	01020034 	movhi	r4,2048
 800118c:	21046b04 	addi	r4,r4,4524
 8001190:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8001194:	0001883a 	nop
 8001198:	e037883a 	mov	sp,fp
 800119c:	dfc00117 	ldw	ra,4(sp)
 80011a0:	df000017 	ldw	fp,0(sp)
 80011a4:	dec00204 	addi	sp,sp,8
 80011a8:	f800283a 	ret

080011ac <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
 80011ac:	defffa04 	addi	sp,sp,-24
 80011b0:	dfc00515 	stw	ra,20(sp)
 80011b4:	df000415 	stw	fp,16(sp)
 80011b8:	df000404 	addi	fp,sp,16
 80011bc:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = ( uint16_t ) 0;
 80011c0:	e03ffe0d 	sth	zero,-8(fp)
BaseType_t xError = pdFALSE, xLoop;
 80011c4:	e03ffc15 	stw	zero,-16(fp)

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 80011c8:	e03ffd15 	stw	zero,-12(fp)
 80011cc:	00001a06 	br	8001238 <vPolledQueueProducer+0x8c>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
 80011d0:	e0bfff17 	ldw	r2,-4(fp)
 80011d4:	10800017 	ldw	r2,0(r2)
 80011d8:	e0fffe04 	addi	r3,fp,-8
 80011dc:	000f883a 	mov	r7,zero
 80011e0:	000d883a 	mov	r6,zero
 80011e4:	180b883a 	mov	r5,r3
 80011e8:	1009883a 	mov	r4,r2
 80011ec:	80046f40 	call	80046f4 <xQueueGenericSend>
 80011f0:	10800060 	cmpeqi	r2,r2,1
 80011f4:	1000031e 	bne	r2,zero,8001204 <vPolledQueueProducer+0x58>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
 80011f8:	00800044 	movi	r2,1
 80011fc:	e0bffc15 	stw	r2,-16(fp)
 8001200:	00000a06 	br	800122c <vPolledQueueProducer+0x80>
			}
			else
			{
				if( xError == pdFALSE )
 8001204:	e0bffc17 	ldw	r2,-16(fp)
 8001208:	1000051e 	bne	r2,zero,8001220 <vPolledQueueProducer+0x74>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
 800120c:	800731c0 	call	800731c <vTaskEnterCritical>
						xPollingProducerCount++;
 8001210:	d0a85c17 	ldw	r2,-24208(gp)
 8001214:	10800044 	addi	r2,r2,1
 8001218:	d0a85c15 	stw	r2,-24208(gp)
					portEXIT_CRITICAL();
 800121c:	80073700 	call	8007370 <vTaskExitCritical>
				}

				/* Update the value we are going to post next time around. */
				usValue++;
 8001220:	e0bffe0b 	ldhu	r2,-8(fp)
 8001224:	10800044 	addi	r2,r2,1
 8001228:	e0bffe0d 	sth	r2,-8(fp)
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 800122c:	e0bffd17 	ldw	r2,-12(fp)
 8001230:	10800044 	addi	r2,r2,1
 8001234:	e0bffd15 	stw	r2,-12(fp)
 8001238:	e0bffd17 	ldw	r2,-12(fp)
 800123c:	108000d0 	cmplti	r2,r2,3
 8001240:	103fe31e 	bne	r2,zero,80011d0 <vPolledQueueProducer+0x24>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
 8001244:	01003204 	movi	r4,200
 8001248:	8005c940 	call	8005c94 <vTaskDelay>
	}
 800124c:	003fde06 	br	80011c8 <vPolledQueueProducer+0x1c>

08001250 <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
 8001250:	defffa04 	addi	sp,sp,-24
 8001254:	dfc00515 	stw	ra,20(sp)
 8001258:	df000415 	stw	fp,16(sp)
 800125c:	df000404 	addi	fp,sp,16
 8001260:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 8001264:	e03ffc0d 	sth	zero,-16(fp)
BaseType_t xError = pdFALSE;
 8001268:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 800126c:	00001c06 	br	80012e0 <vPolledQueueConsumer+0x90>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 8001270:	e0bfff17 	ldw	r2,-4(fp)
 8001274:	10800017 	ldw	r2,0(r2)
 8001278:	e0fffe04 	addi	r3,fp,-8
 800127c:	000d883a 	mov	r6,zero
 8001280:	180b883a 	mov	r5,r3
 8001284:	1009883a 	mov	r4,r2
 8001288:	8004a6c0 	call	8004a6c <xQueueReceive>
 800128c:	10800058 	cmpnei	r2,r2,1
 8001290:	1000131e 	bne	r2,zero,80012e0 <vPolledQueueConsumer+0x90>
			{
				if( usData != usExpectedValue )
 8001294:	e0bffe0b 	ldhu	r2,-8(fp)
 8001298:	10ffffcc 	andi	r3,r2,65535
 800129c:	e0bffc0b 	ldhu	r2,-16(fp)
 80012a0:	18800526 	beq	r3,r2,80012b8 <vPolledQueueConsumer+0x68>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
 80012a4:	00800044 	movi	r2,1
 80012a8:	e0bffd15 	stw	r2,-12(fp)

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
 80012ac:	e0bffe0b 	ldhu	r2,-8(fp)
 80012b0:	e0bffc0d 	sth	r2,-16(fp)
 80012b4:	00000706 	br	80012d4 <vPolledQueueConsumer+0x84>
				}
				else
				{
					if( xError == pdFALSE )
 80012b8:	e0bffd17 	ldw	r2,-12(fp)
 80012bc:	1000051e 	bne	r2,zero,80012d4 <vPolledQueueConsumer+0x84>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
 80012c0:	800731c0 	call	800731c <vTaskEnterCritical>
							xPollingConsumerCount++;
 80012c4:	d0a85b17 	ldw	r2,-24212(gp)
 80012c8:	10800044 	addi	r2,r2,1
 80012cc:	d0a85b15 	stw	r2,-24212(gp)
						portEXIT_CRITICAL();
 80012d0:	80073700 	call	8007370 <vTaskExitCritical>
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
 80012d4:	e0bffc0b 	ldhu	r2,-16(fp)
 80012d8:	10800044 	addi	r2,r2,1
 80012dc:	e0bffc0d 	sth	r2,-16(fp)
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 80012e0:	e0bfff17 	ldw	r2,-4(fp)
 80012e4:	10800017 	ldw	r2,0(r2)
 80012e8:	1009883a 	mov	r4,r2
 80012ec:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80012f0:	103fdf1e 	bne	r2,zero,8001270 <vPolledQueueConsumer+0x20>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
 80012f4:	01002d04 	movi	r4,180
 80012f8:	8005c940 	call	8005c94 <vTaskDelay>
	}
 80012fc:	003fdb06 	br	800126c <vPolledQueueConsumer+0x1c>

08001300 <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
 8001300:	defffe04 	addi	sp,sp,-8
 8001304:	df000115 	stw	fp,4(sp)
 8001308:	df000104 	addi	fp,sp,4

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 800130c:	d0a85b17 	ldw	r2,-24212(gp)
 8001310:	10000226 	beq	r2,zero,800131c <xArePollingQueuesStillRunning+0x1c>
		( xPollingProducerCount == pollqINITIAL_VALUE )
 8001314:	d0a85c17 	ldw	r2,-24208(gp)

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 8001318:	1000021e 	bne	r2,zero,8001324 <xArePollingQueuesStillRunning+0x24>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
 800131c:	e03fff15 	stw	zero,-4(fp)
 8001320:	00000206 	br	800132c <xArePollingQueuesStillRunning+0x2c>
	}
	else
	{
		xReturn = pdTRUE;
 8001324:	00800044 	movi	r2,1
 8001328:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
 800132c:	d0285b15 	stw	zero,-24212(gp)
	xPollingProducerCount = pollqINITIAL_VALUE;
 8001330:	d0285c15 	stw	zero,-24208(gp)

	return xReturn;
 8001334:	e0bfff17 	ldw	r2,-4(fp)
}
 8001338:	e037883a 	mov	sp,fp
 800133c:	df000017 	ldw	fp,0(sp)
 8001340:	dec00104 	addi	sp,sp,4
 8001344:	f800283a 	ret

08001348 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
 8001348:	defffb04 	addi	sp,sp,-20
 800134c:	dfc00415 	stw	ra,16(sp)
 8001350:	df000315 	stw	fp,12(sp)
 8001354:	df000304 	addi	fp,sp,12
QueueHandle_t xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( uint32_t ) );
 8001358:	000d883a 	mov	r6,zero
 800135c:	01400104 	movi	r5,4
 8001360:	01000144 	movi	r4,5
 8001364:	80043880 	call	8004388 <xQueueGenericCreate>
 8001368:	e0bfff15 	stw	r2,-4(fp)

	if( xQueue != NULL )
 800136c:	e0bfff17 	ldw	r2,-4(fp)
 8001370:	10002a26 	beq	r2,zero,800141c <vStartQueuePeekTasks+0xd4>
		vQueueAddToRegistry( xQueue, "QPeek_Test_Queue" );

		/* Create the demo tasks and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is declared
		on the stack here. */
		xTaskCreate( prvLowPriorityPeekTask, "PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
 8001374:	d8000115 	stw	zero,4(sp)
 8001378:	d8000015 	stw	zero,0(sp)
 800137c:	e1ffff17 	ldw	r7,-4(fp)
 8001380:	01810004 	movi	r6,1024
 8001384:	014200b4 	movhi	r5,2050
 8001388:	2967ac04 	addi	r5,r5,-24912
 800138c:	01020034 	movhi	r4,2048
 8001390:	2105b404 	addi	r4,r4,5840
 8001394:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvMediumPriorityPeekTask, "PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
 8001398:	d0a86204 	addi	r2,gp,-24184
 800139c:	d8800115 	stw	r2,4(sp)
 80013a0:	00800044 	movi	r2,1
 80013a4:	d8800015 	stw	r2,0(sp)
 80013a8:	e1ffff17 	ldw	r7,-4(fp)
 80013ac:	01810004 	movi	r6,1024
 80013b0:	014200b4 	movhi	r5,2050
 80013b4:	2967ae04 	addi	r5,r5,-24904
 80013b8:	01020034 	movhi	r4,2048
 80013bc:	21059204 	addi	r4,r4,5704
 80013c0:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvHighPriorityPeekTask, "PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
 80013c4:	d0a86104 	addi	r2,gp,-24188
 80013c8:	d8800115 	stw	r2,4(sp)
 80013cc:	00800084 	movi	r2,2
 80013d0:	d8800015 	stw	r2,0(sp)
 80013d4:	e1ffff17 	ldw	r7,-4(fp)
 80013d8:	01810004 	movi	r6,1024
 80013dc:	014200b4 	movhi	r5,2050
 80013e0:	2967b004 	addi	r5,r5,-24896
 80013e4:	01020034 	movhi	r4,2048
 80013e8:	21056204 	addi	r4,r4,5512
 80013ec:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvHighestPriorityPeekTask, "PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
 80013f0:	d0a86304 	addi	r2,gp,-24180
 80013f4:	d8800115 	stw	r2,4(sp)
 80013f8:	008000c4 	movi	r2,3
 80013fc:	d8800015 	stw	r2,0(sp)
 8001400:	e1ffff17 	ldw	r7,-4(fp)
 8001404:	01810004 	movi	r6,1024
 8001408:	014200b4 	movhi	r5,2050
 800140c:	2967b204 	addi	r5,r5,-24888
 8001410:	01020034 	movhi	r4,2048
 8001414:	21050d04 	addi	r4,r4,5172
 8001418:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 800141c:	0001883a 	nop
 8001420:	e037883a 	mov	sp,fp
 8001424:	dfc00117 	ldw	ra,4(sp)
 8001428:	df000017 	ldw	fp,0(sp)
 800142c:	dec00204 	addi	sp,sp,8
 8001430:	f800283a 	ret

08001434 <prvHighestPriorityPeekTask>:
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
 8001434:	defffb04 	addi	sp,sp,-20
 8001438:	dfc00415 	stw	ra,16(sp)
 800143c:	df000315 	stw	fp,12(sp)
 8001440:	df000304 	addi	fp,sp,12
 8001444:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 8001448:	e0bfff17 	ldw	r2,-4(fp)
 800144c:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001450:	e0bffe04 	addi	r2,fp,-8
 8001454:	01bfffc4 	movi	r6,-1
 8001458:	100b883a 	mov	r5,r2
 800145c:	e13ffd17 	ldw	r4,-12(fp)
 8001460:	8004e240 	call	8004e24 <xQueuePeek>
 8001464:	10800060 	cmpeqi	r2,r2,1
 8001468:	1000021e 	bne	r2,zero,8001474 <prvHighestPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 800146c:	00800044 	movi	r2,1
 8001470:	d0a85e15 	stw	r2,-24200(gp)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
 8001474:	e0fffe17 	ldw	r3,-8(fp)
 8001478:	008448b4 	movhi	r2,4386
 800147c:	108cd104 	addi	r2,r2,13124
 8001480:	18800226 	beq	r3,r2,800148c <prvHighestPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001484:	00800044 	movi	r2,1
 8001488:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 800148c:	e13ffd17 	ldw	r4,-12(fp)
 8001490:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8001494:	10800060 	cmpeqi	r2,r2,1
 8001498:	1000021e 	bne	r2,zero,80014a4 <prvHighestPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 800149c:	00800044 	movi	r2,1
 80014a0:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
 80014a4:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80014a8:	e0bffe04 	addi	r2,fp,-8
 80014ac:	000d883a 	mov	r6,zero
 80014b0:	100b883a 	mov	r5,r2
 80014b4:	e13ffd17 	ldw	r4,-12(fp)
 80014b8:	8004a6c0 	call	8004a6c <xQueueReceive>
 80014bc:	10800060 	cmpeqi	r2,r2,1
 80014c0:	1000021e 	bne	r2,zero,80014cc <prvHighestPriorityPeekTask+0x98>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
 80014c4:	00800044 	movi	r2,1
 80014c8:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( ulValue != 0x11223344 )
 80014cc:	e0fffe17 	ldw	r3,-8(fp)
 80014d0:	008448b4 	movhi	r2,4386
 80014d4:	108cd104 	addi	r2,r2,13124
 80014d8:	18800226 	beq	r3,r2,80014e4 <prvHighestPriorityPeekTask+0xb0>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
 80014dc:	00800044 	movi	r2,1
 80014e0:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* Now we will block again as the queue is once more empty.  The low
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 80014e4:	e0bffe04 	addi	r2,fp,-8
 80014e8:	01bfffc4 	movi	r6,-1
 80014ec:	100b883a 	mov	r5,r2
 80014f0:	e13ffd17 	ldw	r4,-12(fp)
 80014f4:	8004e240 	call	8004e24 <xQueuePeek>
 80014f8:	10800060 	cmpeqi	r2,r2,1
 80014fc:	1000021e 	bne	r2,zero,8001508 <prvHighestPriorityPeekTask+0xd4>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 8001500:	00800044 	movi	r2,1
 8001504:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
 8001508:	e0fffe17 	ldw	r3,-8(fp)
 800150c:	008048f4 	movhi	r2,291
 8001510:	109159c4 	addi	r2,r2,17767
 8001514:	18800226 	beq	r3,r2,8001520 <prvHighestPriorityPeekTask+0xec>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001518:	00800044 	movi	r2,1
 800151c:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8001520:	e13ffd17 	ldw	r4,-12(fp)
 8001524:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8001528:	10800060 	cmpeqi	r2,r2,1
 800152c:	1000021e 	bne	r2,zero,8001538 <prvHighestPriorityPeekTask+0x104>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 8001530:	00800044 	movi	r2,1
 8001534:	d0a85e15 	stw	r2,-24200(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 8001538:	0009883a 	mov	r4,zero
 800153c:	8005f540 	call	8005f54 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001540:	e0bffe04 	addi	r2,fp,-8
 8001544:	01bfffc4 	movi	r6,-1
 8001548:	100b883a 	mov	r5,r2
 800154c:	e13ffd17 	ldw	r4,-12(fp)
 8001550:	8004e240 	call	8004e24 <xQueuePeek>
 8001554:	10800060 	cmpeqi	r2,r2,1
 8001558:	1000021e 	bne	r2,zero,8001564 <prvHighestPriorityPeekTask+0x130>
		{
			xErrorDetected = pdTRUE;
 800155c:	00800044 	movi	r2,1
 8001560:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( ulValue != 0xaabbaabb )
 8001564:	e0fffe17 	ldw	r3,-8(fp)
 8001568:	00aaaf34 	movhi	r2,43708
 800156c:	10aaaec4 	addi	r2,r2,-21829
 8001570:	18800226 	beq	r3,r2,800157c <prvHighestPriorityPeekTask+0x148>
		{
			xErrorDetected = pdTRUE;
 8001574:	00800044 	movi	r2,1
 8001578:	d0a85e15 	stw	r2,-24200(gp)
		}

		vTaskSuspend( NULL );
 800157c:	0009883a 	mov	r4,zero
 8001580:	8005f540 	call	8005f54 <vTaskSuspend>
	}
 8001584:	003fb206 	br	8001450 <prvHighestPriorityPeekTask+0x1c>

08001588 <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
 8001588:	defffb04 	addi	sp,sp,-20
 800158c:	dfc00415 	stw	ra,16(sp)
 8001590:	df000315 	stw	fp,12(sp)
 8001594:	df000304 	addi	fp,sp,12
 8001598:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 800159c:	e0bfff17 	ldw	r2,-4(fp)
 80015a0:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 80015a4:	e0bffe04 	addi	r2,fp,-8
 80015a8:	01bfffc4 	movi	r6,-1
 80015ac:	100b883a 	mov	r5,r2
 80015b0:	e13ffd17 	ldw	r4,-12(fp)
 80015b4:	8004e240 	call	8004e24 <xQueuePeek>
 80015b8:	10800060 	cmpeqi	r2,r2,1
 80015bc:	1000021e 	bne	r2,zero,80015c8 <prvHighPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 80015c0:	00800044 	movi	r2,1
 80015c4:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 80015c8:	e0fffe17 	ldw	r3,-8(fp)
 80015cc:	008048f4 	movhi	r2,291
 80015d0:	109159c4 	addi	r2,r2,17767
 80015d4:	18800226 	beq	r3,r2,80015e0 <prvHighPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 80015d8:	00800044 	movi	r2,1
 80015dc:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80015e0:	e13ffd17 	ldw	r4,-12(fp)
 80015e4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80015e8:	10800060 	cmpeqi	r2,r2,1
 80015ec:	1000021e 	bne	r2,zero,80015f8 <prvHighPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 80015f0:	00800044 	movi	r2,1
 80015f4:	d0a85e15 	stw	r2,-24200(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 80015f8:	0009883a 	mov	r4,zero
 80015fc:	8005f540 	call	8005f54 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001600:	e0bffe04 	addi	r2,fp,-8
 8001604:	01bfffc4 	movi	r6,-1
 8001608:	100b883a 	mov	r5,r2
 800160c:	e13ffd17 	ldw	r4,-12(fp)
 8001610:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001614:	10800060 	cmpeqi	r2,r2,1
 8001618:	1000021e 	bne	r2,zero,8001624 <prvHighPriorityPeekTask+0x9c>
		{
			xErrorDetected = pdTRUE;
 800161c:	00800044 	movi	r2,1
 8001620:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( ulValue != 0xaabbaabb )
 8001624:	e0fffe17 	ldw	r3,-8(fp)
 8001628:	00aaaf34 	movhi	r2,43708
 800162c:	10aaaec4 	addi	r2,r2,-21829
 8001630:	18800226 	beq	r3,r2,800163c <prvHighPriorityPeekTask+0xb4>
		{
			xErrorDetected = pdTRUE;
 8001634:	00800044 	movi	r2,1
 8001638:	d0a85e15 	stw	r2,-24200(gp)
		}

		vTaskSuspend( NULL );
 800163c:	0009883a 	mov	r4,zero
 8001640:	8005f540 	call	8005f54 <vTaskSuspend>
	}
 8001644:	003fd706 	br	80015a4 <prvHighPriorityPeekTask+0x1c>

08001648 <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
 8001648:	defffb04 	addi	sp,sp,-20
 800164c:	dfc00415 	stw	ra,16(sp)
 8001650:	df000315 	stw	fp,12(sp)
 8001654:	df000304 	addi	fp,sp,12
 8001658:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 800165c:	e0bfff17 	ldw	r2,-4(fp)
 8001660:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001664:	e0bffe04 	addi	r2,fp,-8
 8001668:	01bfffc4 	movi	r6,-1
 800166c:	100b883a 	mov	r5,r2
 8001670:	e13ffd17 	ldw	r4,-12(fp)
 8001674:	8004e240 	call	8004e24 <xQueuePeek>
 8001678:	10800060 	cmpeqi	r2,r2,1
 800167c:	1000021e 	bne	r2,zero,8001688 <prvMediumPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 8001680:	00800044 	movi	r2,1
 8001684:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 8001688:	e0fffe17 	ldw	r3,-8(fp)
 800168c:	008048f4 	movhi	r2,291
 8001690:	109159c4 	addi	r2,r2,17767
 8001694:	18800226 	beq	r3,r2,80016a0 <prvMediumPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001698:	00800044 	movi	r2,1
 800169c:	d0a85e15 	stw	r2,-24200(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80016a0:	e13ffd17 	ldw	r4,-12(fp)
 80016a4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80016a8:	10800060 	cmpeqi	r2,r2,1
 80016ac:	1000021e 	bne	r2,zero,80016b8 <prvMediumPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 80016b0:	00800044 	movi	r2,1
 80016b4:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
 80016b8:	d0a85f17 	ldw	r2,-24196(gp)
 80016bc:	10800044 	addi	r2,r2,1
 80016c0:	d0a85f15 	stw	r2,-24196(gp)

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	8005f540 	call	8005f54 <vTaskSuspend>
	}
 80016cc:	003fe506 	br	8001664 <prvMediumPriorityPeekTask+0x1c>

080016d0 <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
 80016d0:	defffb04 	addi	sp,sp,-20
 80016d4:	dfc00415 	stw	ra,16(sp)
 80016d8:	df000315 	stw	fp,12(sp)
 80016dc:	df000304 	addi	fp,sp,12
 80016e0:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 80016e4:	e0bfff17 	ldw	r2,-4(fp)
 80016e8:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
 80016ec:	008448b4 	movhi	r2,4386
 80016f0:	108cd104 	addi	r2,r2,13124
 80016f4:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80016f8:	e0bffe04 	addi	r2,fp,-8
 80016fc:	000f883a 	mov	r7,zero
 8001700:	000d883a 	mov	r6,zero
 8001704:	100b883a 	mov	r5,r2
 8001708:	e13ffd17 	ldw	r4,-12(fp)
 800170c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001710:	10800060 	cmpeqi	r2,r2,1
 8001714:	1000021e 	bne	r2,zero,8001720 <prvLowPriorityPeekTask+0x50>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001718:	00800044 	movi	r2,1
 800171c:	d0a85e15 	stw	r2,-24200(gp)
			taskYIELD();
		#endif

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8001720:	e13ffd17 	ldw	r4,-12(fp)
 8001724:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8001728:	10000226 	beq	r2,zero,8001734 <prvLowPriorityPeekTask+0x64>
		{
			xErrorDetected = pdTRUE;
 800172c:	00800044 	movi	r2,1
 8001730:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
 8001734:	008048f4 	movhi	r2,291
 8001738:	109159c4 	addi	r2,r2,17767
 800173c:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 8001740:	e0bffe04 	addi	r2,fp,-8
 8001744:	000f883a 	mov	r7,zero
 8001748:	000d883a 	mov	r6,zero
 800174c:	100b883a 	mov	r5,r2
 8001750:	e13ffd17 	ldw	r4,-12(fp)
 8001754:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001758:	10800060 	cmpeqi	r2,r2,1
 800175c:	1000021e 	bne	r2,zero,8001768 <prvLowPriorityPeekTask+0x98>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001760:	00800044 	movi	r2,1
 8001764:	d0a85e15 	stw	r2,-24200(gp)
			taskYIELD();
		#endif

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
 8001768:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 800176c:	e0bffe04 	addi	r2,fp,-8
 8001770:	000d883a 	mov	r6,zero
 8001774:	100b883a 	mov	r5,r2
 8001778:	e13ffd17 	ldw	r4,-12(fp)
 800177c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001780:	10800060 	cmpeqi	r2,r2,1
 8001784:	1000021e 	bne	r2,zero,8001790 <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 8001788:	00800044 	movi	r2,1
 800178c:	d0a85e15 	stw	r2,-24200(gp)
			/* We did not receive the expected value. */
		}

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 8001790:	01000284 	movi	r4,10
 8001794:	8005c940 	call	8005c94 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
 8001798:	d0a86217 	ldw	r2,-24184(gp)
 800179c:	1009883a 	mov	r4,r2
 80017a0:	80060bc0 	call	80060bc <vTaskResume>
		vTaskResume( xHighPriorityTask );
 80017a4:	d0a86117 	ldw	r2,-24188(gp)
 80017a8:	1009883a 	mov	r4,r2
 80017ac:	80060bc0 	call	80060bc <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 80017b0:	d0a86317 	ldw	r2,-24180(gp)
 80017b4:	1009883a 	mov	r4,r2
 80017b8:	80060bc0 	call	80060bc <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		ulValue = 0xaabbaabb;
 80017bc:	00aaaf34 	movhi	r2,43708
 80017c0:	10aaaec4 	addi	r2,r2,-21829
 80017c4:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80017c8:	e0bffe04 	addi	r2,fp,-8
 80017cc:	01c00044 	movi	r7,1
 80017d0:	000d883a 	mov	r6,zero
 80017d4:	100b883a 	mov	r5,r2
 80017d8:	e13ffd17 	ldw	r4,-12(fp)
 80017dc:	80046f40 	call	80046f4 <xQueueGenericSend>
 80017e0:	10800060 	cmpeqi	r2,r2,1
 80017e4:	1000021e 	bne	r2,zero,80017f0 <prvLowPriorityPeekTask+0x120>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 80017e8:	00800044 	movi	r2,1
 80017ec:	d0a85e15 	stw	r2,-24200(gp)
			taskYIELD();
		#endif

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 80017f0:	e0bffe04 	addi	r2,fp,-8
 80017f4:	000d883a 	mov	r6,zero
 80017f8:	100b883a 	mov	r5,r2
 80017fc:	e13ffd17 	ldw	r4,-12(fp)
 8001800:	8004e240 	call	8004e24 <xQueuePeek>
 8001804:	10000226 	beq	r2,zero,8001810 <prvLowPriorityPeekTask+0x140>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 8001808:	00800044 	movi	r2,1
 800180c:	d0a85e15 	stw	r2,-24200(gp)
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
 8001810:	d0a86117 	ldw	r2,-24188(gp)
 8001814:	1009883a 	mov	r4,r2
 8001818:	80060bc0 	call	80060bc <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 800181c:	d0a86317 	ldw	r2,-24180(gp)
 8001820:	1009883a 	mov	r4,r2
 8001824:	80060bc0 	call	80060bc <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 8001828:	01000284 	movi	r4,10
 800182c:	8005c940 	call	8005c94 <vTaskDelay>
	}
 8001830:	003fae06 	br	80016ec <prvLowPriorityPeekTask+0x1c>

08001834 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreQueuePeekTasksStillRunning( void )
{
 8001834:	deffff04 	addi	sp,sp,-4
 8001838:	df000015 	stw	fp,0(sp)
 800183c:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 8001840:	d0e86017 	ldw	r3,-24192(gp)
 8001844:	d0a85f17 	ldw	r2,-24196(gp)
 8001848:	1880021e 	bne	r3,r2,8001854 <xAreQueuePeekTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 800184c:	00800044 	movi	r2,1
 8001850:	d0a85e15 	stw	r2,-24200(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 8001854:	d0a85f17 	ldw	r2,-24196(gp)
 8001858:	d0a86015 	stw	r2,-24192(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 800185c:	d0a85e17 	ldw	r2,-24200(gp)
 8001860:	1005003a 	cmpeq	r2,r2,zero
 8001864:	10803fcc 	andi	r2,r2,255
}
 8001868:	e037883a 	mov	sp,fp
 800186c:	df000017 	ldw	fp,0(sp)
 8001870:	dec00104 	addi	sp,sp,4
 8001874:	f800283a 	ret

08001878 <vCreateBlockTimeTasks>:
static volatile UBaseType_t xRunIndicator;

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 8001878:	defffc04 	addi	sp,sp,-16
 800187c:	dfc00315 	stw	ra,12(sp)
 8001880:	df000215 	stw	fp,8(sp)
 8001884:	df000204 	addi	fp,sp,8
	/* Create the queue on which the two tasks block. */
	xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 8001888:	000d883a 	mov	r6,zero
 800188c:	01400104 	movi	r5,4
 8001890:	01000144 	movi	r4,5
 8001894:	80043880 	call	8004388 <xQueueGenericCreate>
 8001898:	d0a86415 	stw	r2,-24176(gp)

	if( xTestQueue != NULL )
 800189c:	d0a86417 	ldw	r2,-24176(gp)
 80018a0:	10001526 	beq	r2,zero,80018f8 <vCreateBlockTimeTasks+0x80>
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );

		/* Create the two test tasks. */
		xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 80018a4:	d8000115 	stw	zero,4(sp)
 80018a8:	00800084 	movi	r2,2
 80018ac:	d8800015 	stw	r2,0(sp)
 80018b0:	000f883a 	mov	r7,zero
 80018b4:	01810004 	movi	r6,1024
 80018b8:	014200b4 	movhi	r5,2050
 80018bc:	2967b404 	addi	r5,r5,-24880
 80018c0:	01020034 	movhi	r4,2048
 80018c4:	21064404 	addi	r4,r4,6416
 80018c8:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 80018cc:	d0a86504 	addi	r2,gp,-24172
 80018d0:	d8800115 	stw	r2,4(sp)
 80018d4:	00800044 	movi	r2,1
 80018d8:	d8800015 	stw	r2,0(sp)
 80018dc:	000f883a 	mov	r7,zero
 80018e0:	01810004 	movi	r6,1024
 80018e4:	014200b4 	movhi	r5,2050
 80018e8:	2967b604 	addi	r5,r5,-24872
 80018ec:	01020034 	movhi	r4,2048
 80018f0:	21074a04 	addi	r4,r4,7464
 80018f4:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 80018f8:	0001883a 	nop
 80018fc:	e037883a 	mov	sp,fp
 8001900:	dfc00117 	ldw	ra,4(sp)
 8001904:	df000017 	ldw	fp,0(sp)
 8001908:	dec00204 	addi	sp,sp,8
 800190c:	f800283a 	ret

08001910 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 8001910:	defff804 	addi	sp,sp,-32
 8001914:	dfc00715 	stw	ra,28(sp)
 8001918:	df000615 	stw	fp,24(sp)
 800191c:	df000604 	addi	fp,sp,24
 8001920:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0

		Basic vTaskDelay() and vTaskDelayUntil() tests. */
		prvBasicDelayTests();
 8001924:	8001e540 	call	8001e54 <prvBasicDelayTests>

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001928:	e03ffd15 	stw	zero,-12(fp)
 800192c:	00002206 	br	80019b8 <vPrimaryBlockTimeTestTask+0xa8>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001930:	e0bffd17 	ldw	r2,-12(fp)
 8001934:	00c00284 	movi	r3,10
 8001938:	1884983a 	sll	r2,r3,r2
 800193c:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 8001940:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001944:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 8001948:	d0a86417 	ldw	r2,-24176(gp)
 800194c:	e0fffe04 	addi	r3,fp,-8
 8001950:	e1bffa17 	ldw	r6,-24(fp)
 8001954:	180b883a 	mov	r5,r3
 8001958:	1009883a 	mov	r4,r2
 800195c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001960:	10000226 	beq	r2,zero,800196c <vPrimaryBlockTimeTestTask+0x5c>
			{
				xErrorOccurred = pdTRUE;
 8001964:	00800044 	movi	r2,1
 8001968:	d0a86815 	stw	r2,-24160(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 800196c:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001970:	1007883a 	mov	r3,r2
 8001974:	e0bffb17 	ldw	r2,-20(fp)
 8001978:	1885c83a 	sub	r2,r3,r2
 800197c:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 8001980:	e0fffc17 	ldw	r3,-16(fp)
 8001984:	e0bffa17 	ldw	r2,-24(fp)
 8001988:	1880022e 	bgeu	r3,r2,8001994 <vPrimaryBlockTimeTestTask+0x84>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 800198c:	00800044 	movi	r2,1
 8001990:	d0a86815 	stw	r2,-24160(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001994:	e0bffa17 	ldw	r2,-24(fp)
 8001998:	10c003c4 	addi	r3,r2,15
 800199c:	e0bffc17 	ldw	r2,-16(fp)
 80019a0:	1880022e 	bgeu	r3,r2,80019ac <vPrimaryBlockTimeTestTask+0x9c>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 80019a4:	00800044 	movi	r2,1
 80019a8:	d0a86815 	stw	r2,-24160(gp)

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019ac:	e0bffd17 	ldw	r2,-12(fp)
 80019b0:	10800044 	addi	r2,r2,1
 80019b4:	e0bffd15 	stw	r2,-12(fp)
 80019b8:	e0bffd17 	ldw	r2,-12(fp)
 80019bc:	10800150 	cmplti	r2,r2,5
 80019c0:	103fdb1e 	bne	r2,zero,8001930 <vPrimaryBlockTimeTestTask+0x20>
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019c4:	e03ffd15 	stw	zero,-12(fp)
 80019c8:	00000e06 	br	8001a04 <vPrimaryBlockTimeTestTask+0xf4>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 80019cc:	d0a86417 	ldw	r2,-24176(gp)
 80019d0:	e0fffd04 	addi	r3,fp,-12
 80019d4:	000f883a 	mov	r7,zero
 80019d8:	000d883a 	mov	r6,zero
 80019dc:	180b883a 	mov	r5,r3
 80019e0:	1009883a 	mov	r4,r2
 80019e4:	80046f40 	call	80046f4 <xQueueGenericSend>
 80019e8:	10800060 	cmpeqi	r2,r2,1
 80019ec:	1000021e 	bne	r2,zero,80019f8 <vPrimaryBlockTimeTestTask+0xe8>
			{
				xErrorOccurred = pdTRUE;
 80019f0:	00800044 	movi	r2,1
 80019f4:	d0a86815 	stw	r2,-24160(gp)
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019f8:	e0bffd17 	ldw	r2,-12(fp)
 80019fc:	10800044 	addi	r2,r2,1
 8001a00:	e0bffd15 	stw	r2,-12(fp)
 8001a04:	e0bffd17 	ldw	r2,-12(fp)
 8001a08:	10800150 	cmplti	r2,r2,5
 8001a0c:	103fef1e 	bne	r2,zero,80019cc <vPrimaryBlockTimeTestTask+0xbc>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001a10:	e03ffd15 	stw	zero,-12(fp)
 8001a14:	00002306 	br	8001aa4 <vPrimaryBlockTimeTestTask+0x194>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001a18:	e0bffd17 	ldw	r2,-12(fp)
 8001a1c:	00c00284 	movi	r3,10
 8001a20:	1884983a 	sll	r2,r3,r2
 8001a24:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 8001a28:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001a2c:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 8001a30:	d0a86417 	ldw	r2,-24176(gp)
 8001a34:	e0fffd04 	addi	r3,fp,-12
 8001a38:	000f883a 	mov	r7,zero
 8001a3c:	e1bffa17 	ldw	r6,-24(fp)
 8001a40:	180b883a 	mov	r5,r3
 8001a44:	1009883a 	mov	r4,r2
 8001a48:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001a4c:	10000226 	beq	r2,zero,8001a58 <vPrimaryBlockTimeTestTask+0x148>
			{
				xErrorOccurred = pdTRUE;
 8001a50:	00800044 	movi	r2,1
 8001a54:	d0a86815 	stw	r2,-24160(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001a58:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001a5c:	1007883a 	mov	r3,r2
 8001a60:	e0bffb17 	ldw	r2,-20(fp)
 8001a64:	1885c83a 	sub	r2,r3,r2
 8001a68:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 8001a6c:	e0fffc17 	ldw	r3,-16(fp)
 8001a70:	e0bffa17 	ldw	r2,-24(fp)
 8001a74:	1880022e 	bgeu	r3,r2,8001a80 <vPrimaryBlockTimeTestTask+0x170>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8001a78:	00800044 	movi	r2,1
 8001a7c:	d0a86815 	stw	r2,-24160(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001a80:	e0bffa17 	ldw	r2,-24(fp)
 8001a84:	10c003c4 	addi	r3,r2,15
 8001a88:	e0bffc17 	ldw	r2,-16(fp)
 8001a8c:	1880022e 	bgeu	r3,r2,8001a98 <vPrimaryBlockTimeTestTask+0x188>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 8001a90:	00800044 	movi	r2,1
 8001a94:	d0a86815 	stw	r2,-24160(gp)
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001a98:	e0bffd17 	ldw	r2,-12(fp)
 8001a9c:	10800044 	addi	r2,r2,1
 8001aa0:	e0bffd15 	stw	r2,-12(fp)
 8001aa4:	e0bffd17 	ldw	r2,-12(fp)
 8001aa8:	10800150 	cmplti	r2,r2,5
 8001aac:	103fda1e 	bne	r2,zero,8001a18 <vPrimaryBlockTimeTestTask+0x108>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 8001ab0:	d0286915 	stw	zero,-24156(gp)
		vTaskResume( xSecondary );
 8001ab4:	d0a86517 	ldw	r2,-24172(gp)
 8001ab8:	1009883a 	mov	r4,r2
 8001abc:	80060bc0 	call	80060bc <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001ac0:	00000206 	br	8001acc <vPrimaryBlockTimeTestTask+0x1bc>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 8001ac4:	01000504 	movi	r4,20
 8001ac8:	8005c940 	call	8005c94 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001acc:	d0a86917 	ldw	r2,-24156(gp)
 8001ad0:	10801558 	cmpnei	r2,r2,85
 8001ad4:	103ffb1e 	bne	r2,zero,8001ac4 <vPrimaryBlockTimeTestTask+0x1b4>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 8001ad8:	01000504 	movi	r4,20
 8001adc:	8005c940 	call	8005c94 <vTaskDelay>
		xRunIndicator = 0;
 8001ae0:	d0286915 	stw	zero,-24156(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001ae4:	e03ffd15 	stw	zero,-12(fp)
 8001ae8:	00002a06 	br	8001b94 <vPrimaryBlockTimeTestTask+0x284>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001aec:	d0a86417 	ldw	r2,-24176(gp)
 8001af0:	e0fffe04 	addi	r3,fp,-8
 8001af4:	000d883a 	mov	r6,zero
 8001af8:	180b883a 	mov	r5,r3
 8001afc:	1009883a 	mov	r4,r2
 8001b00:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001b04:	10800060 	cmpeqi	r2,r2,1
 8001b08:	1000021e 	bne	r2,zero,8001b14 <vPrimaryBlockTimeTestTask+0x204>
			{
				xErrorOccurred = pdTRUE;
 8001b0c:	00800044 	movi	r2,1
 8001b10:	d0a86815 	stw	r2,-24160(gp)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8001b14:	d0a86417 	ldw	r2,-24176(gp)
 8001b18:	e0fffd04 	addi	r3,fp,-12
 8001b1c:	000f883a 	mov	r7,zero
 8001b20:	000d883a 	mov	r6,zero
 8001b24:	180b883a 	mov	r5,r3
 8001b28:	1009883a 	mov	r4,r2
 8001b2c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001b30:	10800060 	cmpeqi	r2,r2,1
 8001b34:	1000021e 	bne	r2,zero,8001b40 <vPrimaryBlockTimeTestTask+0x230>
			{
				xErrorOccurred = pdTRUE;
 8001b38:	00800044 	movi	r2,1
 8001b3c:	d0a86815 	stw	r2,-24160(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8001b40:	d0a86917 	ldw	r2,-24156(gp)
 8001b44:	10801558 	cmpnei	r2,r2,85
 8001b48:	1000021e 	bne	r2,zero,8001b54 <vPrimaryBlockTimeTestTask+0x244>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8001b4c:	00800044 	movi	r2,1
 8001b50:	d0a86815 	stw	r2,-24160(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8001b54:	d0a86517 	ldw	r2,-24172(gp)
 8001b58:	01400104 	movi	r5,4
 8001b5c:	1009883a 	mov	r4,r2
 8001b60:	8005d940 	call	8005d94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8001b64:	d0a86917 	ldw	r2,-24156(gp)
 8001b68:	10801558 	cmpnei	r2,r2,85
 8001b6c:	1000021e 	bne	r2,zero,8001b78 <vPrimaryBlockTimeTestTask+0x268>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 8001b70:	00800044 	movi	r2,1
 8001b74:	d0a86815 	stw	r2,-24160(gp)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 8001b78:	d0a86517 	ldw	r2,-24172(gp)
 8001b7c:	01400044 	movi	r5,1
 8001b80:	1009883a 	mov	r4,r2
 8001b84:	8005d940 	call	8005d94 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001b88:	e0bffd17 	ldw	r2,-12(fp)
 8001b8c:	10800044 	addi	r2,r2,1
 8001b90:	e0bffd15 	stw	r2,-12(fp)
 8001b94:	e0bffd17 	ldw	r2,-12(fp)
 8001b98:	10800150 	cmplti	r2,r2,5
 8001b9c:	103fd31e 	bne	r2,zero,8001aec <vPrimaryBlockTimeTestTask+0x1dc>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001ba0:	00000206 	br	8001bac <vPrimaryBlockTimeTestTask+0x29c>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001ba4:	01000504 	movi	r4,20
 8001ba8:	8005c940 	call	8005c94 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001bac:	d0a86917 	ldw	r2,-24156(gp)
 8001bb0:	10801558 	cmpnei	r2,r2,85
 8001bb4:	103ffb1e 	bne	r2,zero,8001ba4 <vPrimaryBlockTimeTestTask+0x294>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001bb8:	01000504 	movi	r4,20
 8001bbc:	8005c940 	call	8005c94 <vTaskDelay>
		xRunIndicator = 0;
 8001bc0:	d0286915 	stw	zero,-24156(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001bc4:	e03ffd15 	stw	zero,-12(fp)
 8001bc8:	00000d06 	br	8001c00 <vPrimaryBlockTimeTestTask+0x2f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001bcc:	d0a86417 	ldw	r2,-24176(gp)
 8001bd0:	e0fffe04 	addi	r3,fp,-8
 8001bd4:	000d883a 	mov	r6,zero
 8001bd8:	180b883a 	mov	r5,r3
 8001bdc:	1009883a 	mov	r4,r2
 8001be0:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001be4:	10800060 	cmpeqi	r2,r2,1
 8001be8:	1000021e 	bne	r2,zero,8001bf4 <vPrimaryBlockTimeTestTask+0x2e4>
			{
				xErrorOccurred = pdTRUE;
 8001bec:	00800044 	movi	r2,1
 8001bf0:	d0a86815 	stw	r2,-24160(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001bf4:	e0bffd17 	ldw	r2,-12(fp)
 8001bf8:	10800044 	addi	r2,r2,1
 8001bfc:	e0bffd15 	stw	r2,-12(fp)
 8001c00:	e0bffd17 	ldw	r2,-12(fp)
 8001c04:	10800150 	cmplti	r2,r2,5
 8001c08:	103ff01e 	bne	r2,zero,8001bcc <vPrimaryBlockTimeTestTask+0x2bc>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 8001c0c:	d0a86517 	ldw	r2,-24172(gp)
 8001c10:	1009883a 	mov	r4,r2
 8001c14:	80060bc0 	call	80060bc <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001c18:	00000206 	br	8001c24 <vPrimaryBlockTimeTestTask+0x314>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001c1c:	01000504 	movi	r4,20
 8001c20:	8005c940 	call	8005c94 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001c24:	d0a86917 	ldw	r2,-24156(gp)
 8001c28:	10801558 	cmpnei	r2,r2,85
 8001c2c:	103ffb1e 	bne	r2,zero,8001c1c <vPrimaryBlockTimeTestTask+0x30c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001c30:	01000504 	movi	r4,20
 8001c34:	8005c940 	call	8005c94 <vTaskDelay>
		xRunIndicator = 0;
 8001c38:	d0286915 	stw	zero,-24156(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001c3c:	e03ffd15 	stw	zero,-12(fp)
 8001c40:	00002a06 	br	8001cec <vPrimaryBlockTimeTestTask+0x3dc>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8001c44:	d0a86417 	ldw	r2,-24176(gp)
 8001c48:	e0fffd04 	addi	r3,fp,-12
 8001c4c:	000f883a 	mov	r7,zero
 8001c50:	000d883a 	mov	r6,zero
 8001c54:	180b883a 	mov	r5,r3
 8001c58:	1009883a 	mov	r4,r2
 8001c5c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001c60:	10800060 	cmpeqi	r2,r2,1
 8001c64:	1000021e 	bne	r2,zero,8001c70 <vPrimaryBlockTimeTestTask+0x360>
			{
				xErrorOccurred = pdTRUE;
 8001c68:	00800044 	movi	r2,1
 8001c6c:	d0a86815 	stw	r2,-24160(gp)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001c70:	d0a86417 	ldw	r2,-24176(gp)
 8001c74:	e0fffe04 	addi	r3,fp,-8
 8001c78:	000d883a 	mov	r6,zero
 8001c7c:	180b883a 	mov	r5,r3
 8001c80:	1009883a 	mov	r4,r2
 8001c84:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001c88:	10800060 	cmpeqi	r2,r2,1
 8001c8c:	1000021e 	bne	r2,zero,8001c98 <vPrimaryBlockTimeTestTask+0x388>
			{
				xErrorOccurred = pdTRUE;
 8001c90:	00800044 	movi	r2,1
 8001c94:	d0a86815 	stw	r2,-24160(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8001c98:	d0a86917 	ldw	r2,-24156(gp)
 8001c9c:	10801558 	cmpnei	r2,r2,85
 8001ca0:	1000021e 	bne	r2,zero,8001cac <vPrimaryBlockTimeTestTask+0x39c>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8001ca4:	00800044 	movi	r2,1
 8001ca8:	d0a86815 	stw	r2,-24160(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8001cac:	d0a86517 	ldw	r2,-24172(gp)
 8001cb0:	01400104 	movi	r5,4
 8001cb4:	1009883a 	mov	r4,r2
 8001cb8:	8005d940 	call	8005d94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8001cbc:	d0a86917 	ldw	r2,-24156(gp)
 8001cc0:	10801558 	cmpnei	r2,r2,85
 8001cc4:	1000021e 	bne	r2,zero,8001cd0 <vPrimaryBlockTimeTestTask+0x3c0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 8001cc8:	00800044 	movi	r2,1
 8001ccc:	d0a86815 	stw	r2,-24160(gp)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 8001cd0:	d0a86517 	ldw	r2,-24172(gp)
 8001cd4:	01400044 	movi	r5,1
 8001cd8:	1009883a 	mov	r4,r2
 8001cdc:	8005d940 	call	8005d94 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001ce0:	e0bffd17 	ldw	r2,-12(fp)
 8001ce4:	10800044 	addi	r2,r2,1
 8001ce8:	e0bffd15 	stw	r2,-12(fp)
 8001cec:	e0bffd17 	ldw	r2,-12(fp)
 8001cf0:	10800150 	cmplti	r2,r2,5
 8001cf4:	103fd31e 	bne	r2,zero,8001c44 <vPrimaryBlockTimeTestTask+0x334>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001cf8:	00000206 	br	8001d04 <vPrimaryBlockTimeTestTask+0x3f4>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001cfc:	01000504 	movi	r4,20
 8001d00:	8005c940 	call	8005c94 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001d04:	d0a86917 	ldw	r2,-24156(gp)
 8001d08:	10801558 	cmpnei	r2,r2,85
 8001d0c:	103ffb1e 	bne	r2,zero,8001cfc <vPrimaryBlockTimeTestTask+0x3ec>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001d10:	01000504 	movi	r4,20
 8001d14:	8005c940 	call	8005c94 <vTaskDelay>

		xPrimaryCycles++;
 8001d18:	d0a86617 	ldw	r2,-24168(gp)
 8001d1c:	10800044 	addi	r2,r2,1
 8001d20:	d0a86615 	stw	r2,-24168(gp)
	}
 8001d24:	003eff06 	br	8001924 <vPrimaryBlockTimeTestTask+0x14>

08001d28 <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 8001d28:	defffa04 	addi	sp,sp,-24
 8001d2c:	dfc00515 	stw	ra,20(sp)
 8001d30:	df000415 	stw	fp,16(sp)
 8001d34:	df000404 	addi	fp,sp,16
 8001d38:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0, 1 and 2

		This task does not participate in these tests. */
		vTaskSuspend( NULL );
 8001d3c:	0009883a 	mov	r4,zero
 8001d40:	8005f540 	call	8005f54 <vTaskSuspend>
		Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8001d44:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001d48:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not sent anything to
		the queue. */
		xData = 0;
 8001d4c:	e03ffe15 	stw	zero,-8(fp)
		xRunIndicator = bktRUN_INDICATOR;
 8001d50:	00801544 	movi	r2,85
 8001d54:	d0a86915 	stw	r2,-24156(gp)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 8001d58:	d0a86417 	ldw	r2,-24176(gp)
 8001d5c:	e0fffe04 	addi	r3,fp,-8
 8001d60:	000f883a 	mov	r7,zero
 8001d64:	01802bc4 	movi	r6,175
 8001d68:	180b883a 	mov	r5,r3
 8001d6c:	1009883a 	mov	r4,r2
 8001d70:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001d74:	10000226 	beq	r2,zero,8001d80 <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
 8001d78:	00800044 	movi	r2,1
 8001d7c:	d0a86815 	stw	r2,-24160(gp)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001d80:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001d84:	1007883a 	mov	r3,r2
 8001d88:	e0bffc17 	ldw	r2,-16(fp)
 8001d8c:	1885c83a 	sub	r2,r3,r2
 8001d90:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8001d94:	e0bffd17 	ldw	r2,-12(fp)
 8001d98:	10802be8 	cmpgeui	r2,r2,175
 8001d9c:	1000021e 	bne	r2,zero,8001da8 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
 8001da0:	00800044 	movi	r2,1
 8001da4:	d0a86815 	stw	r2,-24160(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 8001da8:	e0bffd17 	ldw	r2,-12(fp)
 8001dac:	10802ff0 	cmpltui	r2,r2,191
 8001db0:	1000021e 	bne	r2,zero,8001dbc <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
 8001db4:	00800044 	movi	r2,1
 8001db8:	d0a86815 	stw	r2,-24160(gp)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 8001dbc:	00801544 	movi	r2,85
 8001dc0:	d0a86915 	stw	r2,-24156(gp)
		vTaskSuspend( NULL );
 8001dc4:	0009883a 	mov	r4,zero
 8001dc8:	8005f540 	call	8005f54 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8001dcc:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001dd0:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 8001dd4:	00801544 	movi	r2,85
 8001dd8:	d0a86915 	stw	r2,-24156(gp)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 8001ddc:	d0a86417 	ldw	r2,-24176(gp)
 8001de0:	e0fffe04 	addi	r3,fp,-8
 8001de4:	01802bc4 	movi	r6,175
 8001de8:	180b883a 	mov	r5,r3
 8001dec:	1009883a 	mov	r4,r2
 8001df0:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001df4:	10000226 	beq	r2,zero,8001e00 <vSecondaryBlockTimeTestTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 8001df8:	00800044 	movi	r2,1
 8001dfc:	d0a86815 	stw	r2,-24160(gp)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001e00:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001e04:	1007883a 	mov	r3,r2
 8001e08:	e0bffc17 	ldw	r2,-16(fp)
 8001e0c:	1885c83a 	sub	r2,r3,r2
 8001e10:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8001e14:	e0bffd17 	ldw	r2,-12(fp)
 8001e18:	10802be8 	cmpgeui	r2,r2,175
 8001e1c:	1000021e 	bne	r2,zero,8001e28 <vSecondaryBlockTimeTestTask+0x100>
		{
			xErrorOccurred = pdTRUE;
 8001e20:	00800044 	movi	r2,1
 8001e24:	d0a86815 	stw	r2,-24160(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 8001e28:	e0bffd17 	ldw	r2,-12(fp)
 8001e2c:	10802ff0 	cmpltui	r2,r2,191
 8001e30:	1000021e 	bne	r2,zero,8001e3c <vSecondaryBlockTimeTestTask+0x114>
		{
			xErrorOccurred = pdTRUE;
 8001e34:	00800044 	movi	r2,1
 8001e38:	d0a86815 	stw	r2,-24160(gp)
		}

		xRunIndicator = bktRUN_INDICATOR;
 8001e3c:	00801544 	movi	r2,85
 8001e40:	d0a86915 	stw	r2,-24156(gp)

		xSecondaryCycles++;
 8001e44:	d0a86717 	ldw	r2,-24164(gp)
 8001e48:	10800044 	addi	r2,r2,1
 8001e4c:	d0a86715 	stw	r2,-24164(gp)
	}
 8001e50:	003fba06 	br	8001d3c <vSecondaryBlockTimeTestTask+0x14>

08001e54 <prvBasicDelayTests>:
}
/*-----------------------------------------------------------*/

static void prvBasicDelayTests( void )
{
 8001e54:	defff604 	addi	sp,sp,-40
 8001e58:	dfc00915 	stw	ra,36(sp)
 8001e5c:	df000815 	stw	fp,32(sp)
 8001e60:	df000804 	addi	fp,sp,32
TickType_t xPreTime, xPostTime, x, xLastUnblockTime, xExpectedUnblockTime;
const TickType_t xPeriod = 75, xCycles = 5, xAllowableMargin = ( bktALLOWABLE_MARGIN >> 1 );
 8001e64:	008012c4 	movi	r2,75
 8001e68:	e0bff915 	stw	r2,-28(fp)
 8001e6c:	00800144 	movi	r2,5
 8001e70:	e0bffa15 	stw	r2,-24(fp)
 8001e74:	008001c4 	movi	r2,7
 8001e78:	e0bffb15 	stw	r2,-20(fp)

	/* Temporarily increase priority so the timing is more accurate, but not so
	high as to disrupt the timer tests. */
	vTaskPrioritySet( NULL, configTIMER_TASK_PRIORITY - 1 );
 8001e7c:	014000c4 	movi	r5,3
 8001e80:	0009883a 	mov	r4,zero
 8001e84:	8005d940 	call	8005d94 <vTaskPrioritySet>

	/* Crude check to too that vTaskDelay() blocks for the expected period. */
	xPreTime = xTaskGetTickCount();
 8001e88:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001e8c:	e0bffc15 	stw	r2,-16(fp)
	vTaskDelay( bktTIME_TO_BLOCK );
 8001e90:	01002bc4 	movi	r4,175
 8001e94:	8005c940 	call	8005c94 <vTaskDelay>
	xPostTime = xTaskGetTickCount();
 8001e98:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001e9c:	e0bffd15 	stw	r2,-12(fp)

	/* The priority is higher, so the allowable margin is halved when compared
	to the other tests in this file. */
	if( ( xPostTime - xPreTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8001ea0:	e0fffd17 	ldw	r3,-12(fp)
 8001ea4:	e0bffc17 	ldw	r2,-16(fp)
 8001ea8:	1885c83a 	sub	r2,r3,r2
 8001eac:	e0fffb17 	ldw	r3,-20(fp)
 8001eb0:	18c02bc4 	addi	r3,r3,175
 8001eb4:	1880022e 	bgeu	r3,r2,8001ec0 <prvBasicDelayTests+0x6c>
	{
		xErrorOccurred = pdTRUE;
 8001eb8:	00800044 	movi	r2,1
 8001ebc:	d0a86815 	stw	r2,-24160(gp)
	}

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
 8001ec0:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001ec4:	e0bffd15 	stw	r2,-12(fp)
	xLastUnblockTime = xPostTime;
 8001ec8:	e0bffd17 	ldw	r2,-12(fp)
 8001ecc:	e0bfff15 	stw	r2,-4(fp)

	for( x = 0; x < xCycles; x++ )
 8001ed0:	e03ff815 	stw	zero,-32(fp)
 8001ed4:	00001a06 	br	8001f40 <prvBasicDelayTests+0xec>
	{
		/* Calculate the next expected unblock time from the time taken before
		this loop was entered. */
		xExpectedUnblockTime = xPostTime + ( x * xPeriod );
 8001ed8:	e17ff917 	ldw	r5,-28(fp)
 8001edc:	e13ff817 	ldw	r4,-32(fp)
 8001ee0:	80086340 	call	8008634 <__mulsi3>
 8001ee4:	1007883a 	mov	r3,r2
 8001ee8:	e0bffd17 	ldw	r2,-12(fp)
 8001eec:	1885883a 	add	r2,r3,r2
 8001ef0:	e0bffe15 	stw	r2,-8(fp)

		vTaskDelayUntil( &xLastUnblockTime, xPeriod );
 8001ef4:	e0bfff04 	addi	r2,fp,-4
 8001ef8:	e17ff917 	ldw	r5,-28(fp)
 8001efc:	1009883a 	mov	r4,r2
 8001f00:	8005ba40 	call	8005ba4 <vTaskDelayUntil>

		if( ( xTaskGetTickCount() - xExpectedUnblockTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8001f04:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001f08:	1007883a 	mov	r3,r2
 8001f0c:	e0bffe17 	ldw	r2,-8(fp)
 8001f10:	1885c83a 	sub	r2,r3,r2
 8001f14:	e0fffb17 	ldw	r3,-20(fp)
 8001f18:	18c02bc4 	addi	r3,r3,175
 8001f1c:	1880022e 	bgeu	r3,r2,8001f28 <prvBasicDelayTests+0xd4>
		{
			xErrorOccurred = pdTRUE;
 8001f20:	00800044 	movi	r2,1
 8001f24:	d0a86815 	stw	r2,-24160(gp)
		}

		xPrimaryCycles++;
 8001f28:	d0a86617 	ldw	r2,-24168(gp)
 8001f2c:	10800044 	addi	r2,r2,1
 8001f30:	d0a86615 	stw	r2,-24168(gp)

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
	xLastUnblockTime = xPostTime;

	for( x = 0; x < xCycles; x++ )
 8001f34:	e0bff817 	ldw	r2,-32(fp)
 8001f38:	10800044 	addi	r2,r2,1
 8001f3c:	e0bff815 	stw	r2,-32(fp)
 8001f40:	e0fff817 	ldw	r3,-32(fp)
 8001f44:	e0bffa17 	ldw	r2,-24(fp)
 8001f48:	18bfe336 	bltu	r3,r2,8001ed8 <prvBasicDelayTests+0x84>

		xPrimaryCycles++;
	}

	/* Reset to the original task priority ready for the other tests. */
	vTaskPrioritySet( NULL, bktPRIMARY_PRIORITY );
 8001f4c:	01400084 	movi	r5,2
 8001f50:	0009883a 	mov	r4,zero
 8001f54:	8005d940 	call	8005d94 <vTaskPrioritySet>
}
 8001f58:	0001883a 	nop
 8001f5c:	e037883a 	mov	sp,fp
 8001f60:	dfc00117 	ldw	ra,4(sp)
 8001f64:	df000017 	ldw	fp,0(sp)
 8001f68:	dec00204 	addi	sp,sp,8
 8001f6c:	f800283a 	ret

08001f70 <xAreBlockTimeTestTasksStillRunning>:
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 8001f70:	defffe04 	addi	sp,sp,-8
 8001f74:	df000115 	stw	fp,4(sp)
 8001f78:	df000104 	addi	fp,sp,4
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 8001f7c:	00800044 	movi	r2,1
 8001f80:	e0bfff15 	stw	r2,-4(fp)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 8001f84:	d0e86617 	ldw	r3,-24168(gp)
 8001f88:	d0a86a17 	ldw	r2,-24152(gp)
 8001f8c:	1880011e 	bne	r3,r2,8001f94 <xAreBlockTimeTestTasksStillRunning+0x24>
	{
		xReturn = pdFAIL;
 8001f90:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 8001f94:	d0e86717 	ldw	r3,-24164(gp)
 8001f98:	d0a86b17 	ldw	r2,-24148(gp)
 8001f9c:	1880011e 	bne	r3,r2,8001fa4 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
 8001fa0:	e03fff15 	stw	zero,-4(fp)
	}

	if( xErrorOccurred == pdTRUE )
 8001fa4:	d0a86817 	ldw	r2,-24160(gp)
 8001fa8:	10800058 	cmpnei	r2,r2,1
 8001fac:	1000011e 	bne	r2,zero,8001fb4 <xAreBlockTimeTestTasksStillRunning+0x44>
	{
		xReturn = pdFAIL;
 8001fb0:	e03fff15 	stw	zero,-4(fp)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 8001fb4:	d0a86717 	ldw	r2,-24164(gp)
 8001fb8:	d0a86b15 	stw	r2,-24148(gp)
	xLastPrimaryCycleCount = xPrimaryCycles;
 8001fbc:	d0a86617 	ldw	r2,-24168(gp)
 8001fc0:	d0a86a15 	stw	r2,-24152(gp)

	return xReturn;
 8001fc4:	e0bfff17 	ldw	r2,-4(fp)
}
 8001fc8:	e037883a 	mov	sp,fp
 8001fcc:	df000017 	ldw	fp,0(sp)
 8001fd0:	dec00104 	addi	sp,sp,4
 8001fd4:	f800283a 	ret

08001fd8 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
 8001fd8:	defff904 	addi	sp,sp,-28
 8001fdc:	dfc00615 	stw	ra,24(sp)
 8001fe0:	df000515 	stw	fp,20(sp)
 8001fe4:	df000504 	addi	fp,sp,20
 8001fe8:	e13ffd15 	stw	r4,-12(fp)
 8001fec:	e17ffe15 	stw	r5,-8(fp)
 8001ff0:	e1bfff15 	stw	r6,-4(fp)
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
 8001ff4:	e0bfff17 	ldw	r2,-4(fp)
 8001ff8:	d0a86d15 	stw	r2,-24140(gp)
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 8001ffc:	01400604 	movi	r5,24
 8002000:	e13ffe17 	ldw	r4,-8(fp)
 8002004:	8007c240 	call	8007c24 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 8002008:	e0bffd17 	ldw	r2,-12(fp)
 800200c:	10bfffc4 	addi	r2,r2,-1
 8002010:	d8000115 	stw	zero,4(sp)
 8002014:	d8800015 	stw	r2,0(sp)
 8002018:	000f883a 	mov	r7,zero
 800201c:	01810004 	movi	r6,1024
 8002020:	014200b4 	movhi	r5,2050
 8002024:	2967b804 	addi	r5,r5,-24864
 8002028:	01020034 	movhi	r4,2048
 800202c:	21081d04 	addi	r4,r4,8308
 8002030:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8002034:	d8000115 	stw	zero,4(sp)
 8002038:	e0bffd17 	ldw	r2,-12(fp)
 800203c:	d8800015 	stw	r2,0(sp)
 8002040:	000f883a 	mov	r7,zero
 8002044:	01810004 	movi	r6,1024
 8002048:	014200b4 	movhi	r5,2050
 800204c:	2967ba04 	addi	r5,r5,-24856
 8002050:	01020034 	movhi	r4,2048
 8002054:	21084a04 	addi	r4,r4,8488
 8002058:	80056e80 	call	80056e8 <xTaskCreate>
}
 800205c:	0001883a 	nop
 8002060:	e037883a 	mov	sp,fp
 8002064:	dfc00117 	ldw	ra,4(sp)
 8002068:	df000017 	ldw	fp,0(sp)
 800206c:	dec00204 	addi	sp,sp,8
 8002070:	f800283a 	ret

08002074 <vComTxTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
 8002074:	defffb04 	addi	sp,sp,-20
 8002078:	dfc00415 	stw	ra,16(sp)
 800207c:	df000315 	stw	fp,12(sp)
 8002080:	df000304 	addi	fp,sp,12
 8002084:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 8002088:	00801044 	movi	r2,65
 800208c:	e0bffd05 	stb	r2,-12(fp)
 8002090:	00000e06 	br	80020cc <vComTxTask+0x58>
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 8002094:	d0a86c17 	ldw	r2,-24144(gp)
 8002098:	e0fffd07 	ldb	r3,-12(fp)
 800209c:	000d883a 	mov	r6,zero
 80020a0:	180b883a 	mov	r5,r3
 80020a4:	1009883a 	mov	r4,r2
 80020a8:	8007d740 	call	8007d74 <xSerialPutChar>
 80020ac:	10800058 	cmpnei	r2,r2,1
 80020b0:	1000031e 	bne	r2,zero,80020c0 <vComTxTask+0x4c>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 80020b4:	d0a86d17 	ldw	r2,-24140(gp)
 80020b8:	1009883a 	mov	r4,r2
 80020bc:	80037740 	call	8003774 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 80020c0:	e0bffd03 	ldbu	r2,-12(fp)
 80020c4:	10800044 	addi	r2,r2,1
 80020c8:	e0bffd05 	stb	r2,-12(fp)
 80020cc:	e0bffd07 	ldb	r2,-12(fp)
 80020d0:	10801650 	cmplti	r2,r2,89
 80020d4:	103fef1e 	bne	r2,zero,8002094 <vComTxTask+0x20>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 80020d8:	d0a86d17 	ldw	r2,-24140(gp)
 80020dc:	000b883a 	mov	r5,zero
 80020e0:	1009883a 	mov	r4,r2
 80020e4:	80036d40 	call	80036d4 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 80020e8:	80064e80 	call	80064e8 <xTaskGetTickCount>
 80020ec:	108000c4 	addi	r2,r2,3
 80020f0:	e0bffe15 	stw	r2,-8(fp)

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 80020f4:	e0bffe17 	ldw	r2,-8(fp)
 80020f8:	01402584 	movi	r5,150
 80020fc:	1009883a 	mov	r4,r2
 8002100:	80085dc0 	call	80085dc <__umodsi3>
 8002104:	e0bffe15 	stw	r2,-8(fp)

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 8002108:	e0bffe17 	ldw	r2,-8(fp)
 800210c:	10800ca8 	cmpgeui	r2,r2,50
 8002110:	1000021e 	bne	r2,zero,800211c <vComTxTask+0xa8>
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
 8002114:	00800c84 	movi	r2,50
 8002118:	e0bffe15 	stw	r2,-8(fp)
		}

		vTaskDelay( xTimeToWait );
 800211c:	e13ffe17 	ldw	r4,-8(fp)
 8002120:	8005c940 	call	8005c94 <vTaskDelay>
	}
 8002124:	003fd806 	br	8002088 <vComTxTask+0x14>

08002128 <vComRxTask>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
 8002128:	defff904 	addi	sp,sp,-28
 800212c:	dfc00615 	stw	ra,24(sp)
 8002130:	df000515 	stw	fp,20(sp)
 8002134:	df000504 	addi	fp,sp,20
 8002138:	e13fff15 	stw	r4,-4(fp)
signed char cExpectedByte, cByteRxed;
BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
 800213c:	e03ffc15 	stw	zero,-16(fp)
 8002140:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 8002144:	00801044 	movi	r2,65
 8002148:	e0bffb05 	stb	r2,-20(fp)
 800214c:	00001806 	br	80021b0 <vComRxTask+0x88>
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
 8002150:	d0a86c17 	ldw	r2,-24144(gp)
 8002154:	e0fffe04 	addi	r3,fp,-8
 8002158:	01bfffd4 	movui	r6,65535
 800215c:	180b883a 	mov	r5,r3
 8002160:	1009883a 	mov	r4,r2
 8002164:	8007d000 	call	8007d00 <xSerialGetChar>
 8002168:	10000e26 	beq	r2,zero,80021a4 <vComRxTask+0x7c>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
 800216c:	e0bffe03 	ldbu	r2,-8(fp)
 8002170:	10c03fcc 	andi	r3,r2,255
 8002174:	18c0201c 	xori	r3,r3,128
 8002178:	18ffe004 	addi	r3,r3,-128
 800217c:	e0bffb07 	ldb	r2,-20(fp)
 8002180:	1880051e 	bne	r3,r2,8002198 <vComRxTask+0x70>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
 8002184:	d0a86d17 	ldw	r2,-24140(gp)
 8002188:	10800044 	addi	r2,r2,1
 800218c:	1009883a 	mov	r4,r2
 8002190:	80037740 	call	8003774 <vParTestToggleLED>
 8002194:	00000306 	br	80021a4 <vComRxTask+0x7c>
				}
				else
				{
					xResyncRequired = pdTRUE;
 8002198:	00800044 	movi	r2,1
 800219c:	e0bffc15 	stw	r2,-16(fp)
					break; /*lint !e960 Non-switch break allowed. */
 80021a0:	00000606 	br	80021bc <vComRxTask+0x94>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 80021a4:	e0bffb03 	ldbu	r2,-20(fp)
 80021a8:	10800044 	addi	r2,r2,1
 80021ac:	e0bffb05 	stb	r2,-20(fp)
 80021b0:	e0bffb07 	ldb	r2,-20(fp)
 80021b4:	10801650 	cmplti	r2,r2,89
 80021b8:	103fe51e 	bne	r2,zero,8002150 <vComRxTask+0x28>
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
 80021bc:	d0a86d17 	ldw	r2,-24140(gp)
 80021c0:	10800044 	addi	r2,r2,1
 80021c4:	000b883a 	mov	r5,zero
 80021c8:	1009883a 	mov	r4,r2
 80021cc:	80036d40 	call	80036d4 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
 80021d0:	e0bffc17 	ldw	r2,-16(fp)
 80021d4:	10800058 	cmpnei	r2,r2,1
 80021d8:	1000121e 	bne	r2,zero,8002224 <vComRxTask+0xfc>
		{
			while( cByteRxed != comLAST_BYTE )
 80021dc:	00000606 	br	80021f8 <vComRxTask+0xd0>
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
 80021e0:	d0a86c17 	ldw	r2,-24144(gp)
 80021e4:	e0fffe04 	addi	r3,fp,-8
 80021e8:	01bfffd4 	movui	r6,65535
 80021ec:	180b883a 	mov	r5,r3
 80021f0:	1009883a 	mov	r4,r2
 80021f4:	8007d000 	call	8007d00 <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
 80021f8:	e0bffe03 	ldbu	r2,-8(fp)
 80021fc:	10803fcc 	andi	r2,r2,255
 8002200:	1080201c 	xori	r2,r2,128
 8002204:	10bfe004 	addi	r2,r2,-128
 8002208:	10801618 	cmpnei	r2,r2,88
 800220c:	103ff41e 	bne	r2,zero,80021e0 <vComRxTask+0xb8>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
 8002210:	e0bffd17 	ldw	r2,-12(fp)
 8002214:	10800044 	addi	r2,r2,1
 8002218:	e0bffd15 	stw	r2,-12(fp)

			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
 800221c:	e03ffc15 	stw	zero,-16(fp)
 8002220:	003fc806 	br	8002144 <vComRxTask+0x1c>
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 8002224:	e0bffd17 	ldw	r2,-12(fp)
 8002228:	10800088 	cmpgei	r2,r2,2
 800222c:	103fc51e 	bne	r2,zero,8002144 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
 8002230:	d0a86e17 	ldw	r2,-24136(gp)
 8002234:	10800044 	addi	r2,r2,1
 8002238:	d0a86e15 	stw	r2,-24136(gp)
			}
		}
	}
 800223c:	003fc106 	br	8002144 <vComRxTask+0x1c>

08002240 <xAreComTestTasksStillRunning>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

BaseType_t xAreComTestTasksStillRunning( void )
{
 8002240:	defffe04 	addi	sp,sp,-8
 8002244:	df000115 	stw	fp,4(sp)
 8002248:	df000104 	addi	fp,sp,4
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 800224c:	d0a86e17 	ldw	r2,-24136(gp)
 8002250:	1000021e 	bne	r2,zero,800225c <xAreComTestTasksStillRunning+0x1c>
	{
		xReturn = pdFALSE;
 8002254:	e03fff15 	stw	zero,-4(fp)
 8002258:	00000206 	br	8002264 <xAreComTestTasksStillRunning+0x24>
	}
	else
	{
		xReturn = pdTRUE;
 800225c:	00800044 	movi	r2,1
 8002260:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 8002264:	d0286e15 	stw	zero,-24136(gp)

	return xReturn;
 8002268:	e0bfff17 	ldw	r2,-4(fp)
}
 800226c:	e037883a 	mov	sp,fp
 8002270:	df000017 	ldw	fp,0(sp)
 8002274:	dec00104 	addi	sp,sp,4
 8002278:	f800283a 	ret

0800227c <vStartCountingSemaphoreTasks>:
static xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 800227c:	defffc04 	addi	sp,sp,-16
 8002280:	dfc00315 	stw	ra,12(sp)
 8002284:	df000215 	stw	fp,8(sp)
 8002288:	df000204 	addi	fp,sp,8
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 800228c:	01403204 	movi	r5,200
 8002290:	01003204 	movi	r4,200
 8002294:	800469c0 	call	800469c <xQueueCreateCountingSemaphore>
 8002298:	1007883a 	mov	r3,r2
 800229c:	008200b4 	movhi	r2,2050
 80022a0:	10ba0304 	addi	r2,r2,-6132
 80022a4:	10c00015 	stw	r3,0(r2)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 80022a8:	008200b4 	movhi	r2,2050
 80022ac:	10ba0304 	addi	r2,r2,-6132
 80022b0:	00c02a84 	movi	r3,170
 80022b4:	10c00115 	stw	r3,4(r2)
	xParameters[ 0 ].uxLoopCounter = 0;
 80022b8:	008200b4 	movhi	r2,2050
 80022bc:	10ba0304 	addi	r2,r2,-6132
 80022c0:	10000215 	stw	zero,8(r2)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 80022c4:	000b883a 	mov	r5,zero
 80022c8:	01003204 	movi	r4,200
 80022cc:	800469c0 	call	800469c <xQueueCreateCountingSemaphore>
 80022d0:	1007883a 	mov	r3,r2
 80022d4:	008200b4 	movhi	r2,2050
 80022d8:	10ba0304 	addi	r2,r2,-6132
 80022dc:	10c00315 	stw	r3,12(r2)
	xParameters[ 1 ].uxExpectedStartCount = 0;
 80022e0:	008200b4 	movhi	r2,2050
 80022e4:	10ba0304 	addi	r2,r2,-6132
 80022e8:	10000415 	stw	zero,16(r2)
	xParameters[ 1 ].uxLoopCounter = 0;
 80022ec:	008200b4 	movhi	r2,2050
 80022f0:	10ba0304 	addi	r2,r2,-6132
 80022f4:	10000515 	stw	zero,20(r2)

	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 80022f8:	008200b4 	movhi	r2,2050
 80022fc:	10ba0304 	addi	r2,r2,-6132
 8002300:	10800017 	ldw	r2,0(r2)
 8002304:	1000041e 	bne	r2,zero,8002318 <vStartCountingSemaphoreTasks+0x9c>
 8002308:	008200b4 	movhi	r2,2050
 800230c:	10ba0304 	addi	r2,r2,-6132
 8002310:	10800317 	ldw	r2,12(r2)
 8002314:	10001426 	beq	r2,zero,8002368 <vStartCountingSemaphoreTasks+0xec>
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );

		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 8002318:	d8000115 	stw	zero,4(sp)
 800231c:	d8000015 	stw	zero,0(sp)
 8002320:	01c200b4 	movhi	r7,2050
 8002324:	39fa0304 	addi	r7,r7,-6132
 8002328:	01810004 	movi	r6,1024
 800232c:	014200b4 	movhi	r5,2050
 8002330:	2967bc04 	addi	r5,r5,-24848
 8002334:	01020034 	movhi	r4,2048
 8002338:	21094204 	addi	r4,r4,9480
 800233c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );
 8002340:	d8000115 	stw	zero,4(sp)
 8002344:	d8000015 	stw	zero,0(sp)
 8002348:	01c200b4 	movhi	r7,2050
 800234c:	39fa0604 	addi	r7,r7,-6120
 8002350:	01810004 	movi	r6,1024
 8002354:	014200b4 	movhi	r5,2050
 8002358:	2967be04 	addi	r5,r5,-24840
 800235c:	01020034 	movhi	r4,2048
 8002360:	21094204 	addi	r4,r4,9480
 8002364:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8002368:	0001883a 	nop
 800236c:	e037883a 	mov	sp,fp
 8002370:	dfc00117 	ldw	ra,4(sp)
 8002374:	df000017 	ldw	fp,0(sp)
 8002378:	dec00204 	addi	sp,sp,8
 800237c:	f800283a 	ret

08002380 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 8002380:	defffb04 	addi	sp,sp,-20
 8002384:	dfc00415 	stw	ra,16(sp)
 8002388:	df000315 	stw	fp,12(sp)
 800238c:	df000304 	addi	fp,sp,12
 8002390:	e13ffe15 	stw	r4,-8(fp)
 8002394:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8002398:	000f883a 	mov	r7,zero
 800239c:	000d883a 	mov	r6,zero
 80023a0:	000b883a 	mov	r5,zero
 80023a4:	e13ffe17 	ldw	r4,-8(fp)
 80023a8:	80046f40 	call	80046f4 <xQueueGenericSend>
 80023ac:	10800058 	cmpnei	r2,r2,1
 80023b0:	1000021e 	bne	r2,zero,80023bc <prvDecrementSemaphoreCount+0x3c>
	{
		xErrorDetected = pdTRUE;
 80023b4:	00800044 	movi	r2,1
 80023b8:	d0a86f15 	stw	r2,-24132(gp)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80023bc:	e03ffd15 	stw	zero,-12(fp)
 80023c0:	00000f06 	br	8002400 <prvDecrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );

		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 80023c4:	000b883a 	mov	r5,zero
 80023c8:	e13ffe17 	ldw	r4,-8(fp)
 80023cc:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 80023d0:	10800060 	cmpeqi	r2,r2,1
 80023d4:	1000021e 	bne	r2,zero,80023e0 <prvDecrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 80023d8:	00800044 	movi	r2,1
 80023dc:	d0a86f15 	stw	r2,-24132(gp)
		}

		( *puxLoopCounter )++;
 80023e0:	e0bfff17 	ldw	r2,-4(fp)
 80023e4:	10800017 	ldw	r2,0(r2)
 80023e8:	10c00044 	addi	r3,r2,1
 80023ec:	e0bfff17 	ldw	r2,-4(fp)
 80023f0:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80023f4:	e0bffd17 	ldw	r2,-12(fp)
 80023f8:	10800044 	addi	r2,r2,1
 80023fc:	e0bffd15 	stw	r2,-12(fp)
 8002400:	e0bffd17 	ldw	r2,-12(fp)
 8002404:	10803230 	cmpltui	r2,r2,200
 8002408:	103fee1e 	bne	r2,zero,80023c4 <prvDecrementSemaphoreCount+0x44>
	#endif

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 800240c:	000b883a 	mov	r5,zero
 8002410:	e13ffe17 	ldw	r4,-8(fp)
 8002414:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8002418:	10800058 	cmpnei	r2,r2,1
 800241c:	1000021e 	bne	r2,zero,8002428 <prvDecrementSemaphoreCount+0xa8>
	{
		xErrorDetected = pdTRUE;
 8002420:	00800044 	movi	r2,1
 8002424:	d0a86f15 	stw	r2,-24132(gp)
	}
}
 8002428:	0001883a 	nop
 800242c:	e037883a 	mov	sp,fp
 8002430:	dfc00117 	ldw	ra,4(sp)
 8002434:	df000017 	ldw	fp,0(sp)
 8002438:	dec00204 	addi	sp,sp,8
 800243c:	f800283a 	ret

08002440 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 8002440:	defffb04 	addi	sp,sp,-20
 8002444:	dfc00415 	stw	ra,16(sp)
 8002448:	df000315 	stw	fp,12(sp)
 800244c:	df000304 	addi	fp,sp,12
 8002450:	e13ffe15 	stw	r4,-8(fp)
 8002454:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8002458:	000b883a 	mov	r5,zero
 800245c:	e13ffe17 	ldw	r4,-8(fp)
 8002460:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8002464:	10800058 	cmpnei	r2,r2,1
 8002468:	1000021e 	bne	r2,zero,8002474 <prvIncrementSemaphoreCount+0x34>
	{
		xErrorDetected = pdTRUE;
 800246c:	00800044 	movi	r2,1
 8002470:	d0a86f15 	stw	r2,-24132(gp)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8002474:	e03ffd15 	stw	zero,-12(fp)
 8002478:	00001106 	br	80024c0 <prvIncrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );

		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 800247c:	000f883a 	mov	r7,zero
 8002480:	000d883a 	mov	r6,zero
 8002484:	000b883a 	mov	r5,zero
 8002488:	e13ffe17 	ldw	r4,-8(fp)
 800248c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8002490:	10800060 	cmpeqi	r2,r2,1
 8002494:	1000021e 	bne	r2,zero,80024a0 <prvIncrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 8002498:	00800044 	movi	r2,1
 800249c:	d0a86f15 	stw	r2,-24132(gp)
		}

		( *puxLoopCounter )++;
 80024a0:	e0bfff17 	ldw	r2,-4(fp)
 80024a4:	10800017 	ldw	r2,0(r2)
 80024a8:	10c00044 	addi	r3,r2,1
 80024ac:	e0bfff17 	ldw	r2,-4(fp)
 80024b0:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80024b4:	e0bffd17 	ldw	r2,-12(fp)
 80024b8:	10800044 	addi	r2,r2,1
 80024bc:	e0bffd15 	stw	r2,-12(fp)
 80024c0:	e0bffd17 	ldw	r2,-12(fp)
 80024c4:	10803230 	cmpltui	r2,r2,200
 80024c8:	103fec1e 	bne	r2,zero,800247c <prvIncrementSemaphoreCount+0x3c>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 80024cc:	000f883a 	mov	r7,zero
 80024d0:	000d883a 	mov	r6,zero
 80024d4:	000b883a 	mov	r5,zero
 80024d8:	e13ffe17 	ldw	r4,-8(fp)
 80024dc:	80046f40 	call	80046f4 <xQueueGenericSend>
 80024e0:	10800058 	cmpnei	r2,r2,1
 80024e4:	1000021e 	bne	r2,zero,80024f0 <prvIncrementSemaphoreCount+0xb0>
	{
		xErrorDetected = pdTRUE;
 80024e8:	00800044 	movi	r2,1
 80024ec:	d0a86f15 	stw	r2,-24132(gp)
	}
}
 80024f0:	0001883a 	nop
 80024f4:	e037883a 	mov	sp,fp
 80024f8:	dfc00117 	ldw	ra,4(sp)
 80024fc:	df000017 	ldw	fp,0(sp)
 8002500:	dec00204 	addi	sp,sp,8
 8002504:	f800283a 	ret

08002508 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 8002508:	defffc04 	addi	sp,sp,-16
 800250c:	dfc00315 	stw	ra,12(sp)
 8002510:	df000215 	stw	fp,8(sp)
 8002514:	df000204 	addi	fp,sp,8
 8002518:	e13fff15 	stw	r4,-4(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 800251c:	e0bfff17 	ldw	r2,-4(fp)
 8002520:	e0bffe15 	stw	r2,-8(fp)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 8002524:	e0bffe17 	ldw	r2,-8(fp)
 8002528:	10800117 	ldw	r2,4(r2)
 800252c:	10802a98 	cmpnei	r2,r2,170
 8002530:	1000071e 	bne	r2,zero,8002550 <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002534:	e0bffe17 	ldw	r2,-8(fp)
 8002538:	10c00017 	ldw	r3,0(r2)
 800253c:	e0bffe17 	ldw	r2,-8(fp)
 8002540:	10800204 	addi	r2,r2,8
 8002544:	100b883a 	mov	r5,r2
 8002548:	1809883a 	mov	r4,r3
 800254c:	80023800 	call	8002380 <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 8002550:	e0bffe17 	ldw	r2,-8(fp)
 8002554:	10800017 	ldw	r2,0(r2)
 8002558:	000b883a 	mov	r5,zero
 800255c:	1009883a 	mov	r4,r2
 8002560:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8002564:	10800058 	cmpnei	r2,r2,1
 8002568:	1000021e 	bne	r2,zero,8002574 <prvCountingSemaphoreTask+0x6c>
	{
		xErrorDetected = pdTRUE;
 800256c:	00800044 	movi	r2,1
 8002570:	d0a86f15 	stw	r2,-24132(gp)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002574:	e0bffe17 	ldw	r2,-8(fp)
 8002578:	10c00017 	ldw	r3,0(r2)
 800257c:	e0bffe17 	ldw	r2,-8(fp)
 8002580:	10800204 	addi	r2,r2,8
 8002584:	100b883a 	mov	r5,r2
 8002588:	1809883a 	mov	r4,r3
 800258c:	80024400 	call	8002440 <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002590:	e0bffe17 	ldw	r2,-8(fp)
 8002594:	10c00017 	ldw	r3,0(r2)
 8002598:	e0bffe17 	ldw	r2,-8(fp)
 800259c:	10800204 	addi	r2,r2,8
 80025a0:	100b883a 	mov	r5,r2
 80025a4:	1809883a 	mov	r4,r3
 80025a8:	80023800 	call	8002380 <prvDecrementSemaphoreCount>
	}
 80025ac:	003ff106 	br	8002574 <prvCountingSemaphoreTask+0x6c>

080025b0 <xAreCountingSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
 80025b0:	defffe04 	addi	sp,sp,-8
 80025b4:	df000115 	stw	fp,4(sp)
 80025b8:	df000104 	addi	fp,sp,4
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
 80025bc:	00800044 	movi	r2,1
 80025c0:	e0bfff15 	stw	r2,-4(fp)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
 80025c4:	d0a86f17 	ldw	r2,-24132(gp)
 80025c8:	10000126 	beq	r2,zero,80025d0 <xAreCountingSemaphoreTasksStillRunning+0x20>
	{
		xReturn = pdFAIL;
 80025cc:	e03fff15 	stw	zero,-4(fp)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
 80025d0:	008200b4 	movhi	r2,2050
 80025d4:	10ba0304 	addi	r2,r2,-6132
 80025d8:	10c00217 	ldw	r3,8(r2)
 80025dc:	d0a87017 	ldw	r2,-24128(gp)
 80025e0:	1880021e 	bne	r3,r2,80025ec <xAreCountingSemaphoreTasksStillRunning+0x3c>
	{
		xReturn = pdFAIL;
 80025e4:	e03fff15 	stw	zero,-4(fp)
 80025e8:	00000406 	br	80025fc <xAreCountingSemaphoreTasksStillRunning+0x4c>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
 80025ec:	008200b4 	movhi	r2,2050
 80025f0:	10ba0304 	addi	r2,r2,-6132
 80025f4:	10800217 	ldw	r2,8(r2)
 80025f8:	d0a87015 	stw	r2,-24128(gp)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
 80025fc:	008200b4 	movhi	r2,2050
 8002600:	10ba0304 	addi	r2,r2,-6132
 8002604:	10c00517 	ldw	r3,20(r2)
 8002608:	d0a87117 	ldw	r2,-24124(gp)
 800260c:	1880021e 	bne	r3,r2,8002618 <xAreCountingSemaphoreTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
 8002610:	e03fff15 	stw	zero,-4(fp)
 8002614:	00000406 	br	8002628 <xAreCountingSemaphoreTasksStillRunning+0x78>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
 8002618:	008200b4 	movhi	r2,2050
 800261c:	10ba0304 	addi	r2,r2,-6132
 8002620:	10800517 	ldw	r2,20(r2)
 8002624:	d0a87115 	stw	r2,-24124(gp)
	}

	return xReturn;
 8002628:	e0bfff17 	ldw	r2,-4(fp)
}
 800262c:	e037883a 	mov	sp,fp
 8002630:	df000017 	ldw	fp,0(sp)
 8002634:	dec00104 	addi	sp,sp,4
 8002638:	f800283a 	ret

0800263c <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
 800263c:	defffb04 	addi	sp,sp,-20
 8002640:	dfc00415 	stw	ra,16(sp)
 8002644:	df000315 	stw	fp,12(sp)
 8002648:	df000304 	addi	fp,sp,12
 800264c:	e13fff15 	stw	r4,-4(fp)
	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) NULL, uxPriority, NULL );
 8002650:	d8000115 	stw	zero,4(sp)
 8002654:	e0bfff17 	ldw	r2,-4(fp)
 8002658:	d8800015 	stw	r2,0(sp)
 800265c:	000f883a 	mov	r7,zero
 8002660:	01810f04 	movi	r6,1084
 8002664:	014200b4 	movhi	r5,2050
 8002668:	2967c004 	addi	r5,r5,-24832
 800266c:	01020034 	movhi	r4,2048
 8002670:	2109c704 	addi	r4,r4,10012
 8002674:	80056e80 	call	80056e8 <xTaskCreate>
}
 8002678:	0001883a 	nop
 800267c:	e037883a 	mov	sp,fp
 8002680:	dfc00117 	ldw	ra,4(sp)
 8002684:	df000017 	ldw	fp,0(sp)
 8002688:	dec00204 	addi	sp,sp,8
 800268c:	f800283a 	ret

08002690 <vSuicidalTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
 8002690:	defff904 	addi	sp,sp,-28
 8002694:	dfc00615 	stw	ra,24(sp)
 8002698:	df000515 	stw	fp,20(sp)
 800269c:	df000504 	addi	fp,sp,20
 80026a0:	e13fff15 	stw	r4,-4(fp)
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 200 );
 80026a4:	00803204 	movi	r2,200
 80026a8:	e0bffc15 	stw	r2,-16(fp)

	/* Test deletion of a task's secure context, if any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	if( pvParameters != NULL )
 80026ac:	e0bfff17 	ldw	r2,-4(fp)
 80026b0:	10000426 	beq	r2,zero,80026c4 <vSuicidalTask+0x34>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 80026b4:	e0bfff17 	ldw	r2,-4(fp)
 80026b8:	10800017 	ldw	r2,0(r2)
 80026bc:	e0bffb15 	stw	r2,-20(fp)
 80026c0:	00000106 	br	80026c8 <vSuicidalTask+0x38>
	}
	else
	{
		xTaskToKill = NULL;
 80026c4:	e03ffb15 	stw	zero,-20(fp)
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
 80026c8:	00800084 	movi	r2,2
 80026cc:	e0bffd15 	stw	r2,-12(fp)
		l2 = 89;
 80026d0:	00801644 	movi	r2,89
 80026d4:	e0bffe15 	stw	r2,-8(fp)
		l2 *= l1;
 80026d8:	e0bffd17 	ldw	r2,-12(fp)
 80026dc:	e0fffe17 	ldw	r3,-8(fp)
 80026e0:	180b883a 	mov	r5,r3
 80026e4:	1009883a 	mov	r4,r2
 80026e8:	80086340 	call	8008634 <__mulsi3>
 80026ec:	e0bffe15 	stw	r2,-8(fp)
		vTaskDelay( xDelay );
 80026f0:	e13ffc17 	ldw	r4,-16(fp)
 80026f4:	8005c940 	call	8005c94 <vTaskDelay>

		if( xTaskToKill != NULL )
 80026f8:	e0bffb17 	ldw	r2,-20(fp)
 80026fc:	103ff226 	beq	r2,zero,80026c8 <vSuicidalTask+0x38>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 8002700:	0009883a 	mov	r4,zero
 8002704:	8005c940 	call	8005c94 <vTaskDelay>

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 8002708:	e13ffb17 	ldw	r4,-20(fp)
 800270c:	8005abc0 	call	8005abc <vTaskDelete>

			/* Kill ourselves. */
			vTaskDelete( NULL );
 8002710:	0009883a 	mov	r4,zero
 8002714:	8005abc0 	call	8005abc <vTaskDelete>
		}
	}
 8002718:	003feb06 	br	80026c8 <vSuicidalTask+0x38>

0800271c <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
 800271c:	defff904 	addi	sp,sp,-28
 8002720:	dfc00615 	stw	ra,24(sp)
 8002724:	df000515 	stw	fp,20(sp)
 8002728:	df000504 	addi	fp,sp,20
 800272c:	e13fff15 	stw	r4,-4(fp)
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 8002730:	0080fa04 	movi	r2,1000
 8002734:	e0bffd15 	stw	r2,-12(fp)
	/* Remove compiler warning about unused parameter. */
	( void ) pvParameters;

	/* Delay at the start to ensure tasks created by other demos have been
	created before storing the current number of tasks. */
	vTaskDelay( xDelay );
 8002738:	e13ffd17 	ldw	r4,-12(fp)
 800273c:	8005c940 	call	8005c94 <vTaskDelay>
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8002740:	800653c0 	call	800653c <uxTaskGetNumberOfTasks>
 8002744:	d0a87315 	stw	r2,-24116(gp)

	uxPriority = uxTaskPriorityGet( NULL );
 8002748:	0009883a 	mov	r4,zero
 800274c:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8002750:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 8002754:	e13ffd17 	ldw	r4,-12(fp)
 8002758:	8005c940 	call	8005c94 <vTaskDelay>

		xCreatedTask = NULL;
 800275c:	d0287515 	stw	zero,-24108(gp)

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
 8002760:	d0a87504 	addi	r2,gp,-24108
 8002764:	d8800115 	stw	r2,4(sp)
 8002768:	e0bffe17 	ldw	r2,-8(fp)
 800276c:	d8800015 	stw	r2,0(sp)
 8002770:	000f883a 	mov	r7,zero
 8002774:	01810004 	movi	r6,1024
 8002778:	014200b4 	movhi	r5,2050
 800277c:	2967c204 	addi	r5,r5,-24824
 8002780:	01020034 	movhi	r4,2048
 8002784:	2109a404 	addi	r4,r4,9872
 8002788:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
 800278c:	d8000115 	stw	zero,4(sp)
 8002790:	e0bffe17 	ldw	r2,-8(fp)
 8002794:	d8800015 	stw	r2,0(sp)
 8002798:	d1e87504 	addi	r7,gp,-24108
 800279c:	01810004 	movi	r6,1024
 80027a0:	014200b4 	movhi	r5,2050
 80027a4:	2967c404 	addi	r5,r5,-24816
 80027a8:	01020034 	movhi	r4,2048
 80027ac:	2109a404 	addi	r4,r4,9872
 80027b0:	80056e80 	call	80056e8 <xTaskCreate>

		++usCreationCount;
 80027b4:	d0a8720b 	ldhu	r2,-24120(gp)
 80027b8:	10800044 	addi	r2,r2,1
 80027bc:	d0a8720d 	sth	r2,-24120(gp)
	}
 80027c0:	003fe406 	br	8002754 <vCreateTasks+0x38>

080027c4 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
 80027c4:	defffd04 	addi	sp,sp,-12
 80027c8:	dfc00215 	stw	ra,8(sp)
 80027cc:	df000115 	stw	fp,4(sp)
 80027d0:	df000104 	addi	fp,sp,4
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
 80027d4:	00800044 	movi	r2,1
 80027d8:	e0bfff15 	stw	r2,-4(fp)
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
 80027dc:	d0e0010b 	ldhu	r3,-32764(gp)
 80027e0:	d0a8720b 	ldhu	r2,-24120(gp)
 80027e4:	18ffffcc 	andi	r3,r3,65535
 80027e8:	10bfffcc 	andi	r2,r2,65535
 80027ec:	1880021e 	bne	r3,r2,80027f8 <xIsCreateTaskStillRunning+0x34>
	{
		xReturn = pdFALSE;
 80027f0:	e03fff15 	stw	zero,-4(fp)
 80027f4:	00000206 	br	8002800 <xIsCreateTaskStillRunning+0x3c>
	}
	else
	{
		usLastCreationCount = usCreationCount;
 80027f8:	d0a8720b 	ldhu	r2,-24120(gp)
 80027fc:	d0a0010d 	sth	r2,-32764(gp)
	}

	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8002800:	800653c0 	call	800653c <uxTaskGetNumberOfTasks>
 8002804:	d0a87415 	stw	r2,-24112(gp)

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 8002808:	d0e87417 	ldw	r3,-24112(gp)
 800280c:	d0a87317 	ldw	r2,-24116(gp)
 8002810:	1880022e 	bgeu	r3,r2,800281c <xIsCreateTaskStillRunning+0x58>
	{
		xReturn = pdFALSE;
 8002814:	e03fff15 	stw	zero,-4(fp)
 8002818:	00000606 	br	8002834 <xIsCreateTaskStillRunning+0x70>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 800281c:	d0e87417 	ldw	r3,-24112(gp)
 8002820:	d0a87317 	ldw	r2,-24116(gp)
 8002824:	1885c83a 	sub	r2,r3,r2
 8002828:	00c000c4 	movi	r3,3
 800282c:	1880012e 	bgeu	r3,r2,8002834 <xIsCreateTaskStillRunning+0x70>
	{
		xReturn = pdFALSE;
 8002830:	e03fff15 	stw	zero,-4(fp)
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
 8002834:	e0bfff17 	ldw	r2,-4(fp)
}
 8002838:	e037883a 	mov	sp,fp
 800283c:	dfc00117 	ldw	ra,4(sp)
 8002840:	df000017 	ldw	fp,0(sp)
 8002844:	dec00204 	addi	sp,sp,8
 8002848:	f800283a 	ret

0800284c <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 800284c:	defffc04 	addi	sp,sp,-16
 8002850:	dfc00315 	stw	ra,12(sp)
 8002854:	df000215 	stw	fp,8(sp)
 8002858:	df000204 	addi	fp,sp,8
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 800285c:	000d883a 	mov	r6,zero
 8002860:	01400104 	movi	r5,4
 8002864:	01000044 	movi	r4,1
 8002868:	80043880 	call	8004388 <xQueueGenericCreate>
 800286c:	d0a88015 	stw	r2,-24064(gp)

	if( xSuspendedTestQueue != NULL )
 8002870:	d0a88017 	ldw	r2,-24064(gp)
 8002874:	10003026 	beq	r2,zero,8002938 <vStartDynamicPriorityTasks+0xec>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );

		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 8002878:	d0a87604 	addi	r2,gp,-24104
 800287c:	d8800115 	stw	r2,4(sp)
 8002880:	d8000015 	stw	zero,0(sp)
 8002884:	d1e87804 	addi	r7,gp,-24096
 8002888:	01810004 	movi	r6,1024
 800288c:	014200b4 	movhi	r5,2050
 8002890:	2967c604 	addi	r5,r5,-24808
 8002894:	01020034 	movhi	r4,2048
 8002898:	210a6904 	addi	r4,r4,10660
 800289c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 80028a0:	d0a87704 	addi	r2,gp,-24100
 80028a4:	d8800115 	stw	r2,4(sp)
 80028a8:	00800044 	movi	r2,1
 80028ac:	d8800015 	stw	r2,0(sp)
 80028b0:	d1e87804 	addi	r7,gp,-24096
 80028b4:	01810004 	movi	r6,1024
 80028b8:	014200b4 	movhi	r5,2050
 80028bc:	2967c804 	addi	r5,r5,-24800
 80028c0:	01020034 	movhi	r4,2048
 80028c4:	210a5404 	addi	r4,r4,10576
 80028c8:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vCounterControlTask, "C_CTRL", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 80028cc:	d8000115 	stw	zero,4(sp)
 80028d0:	d8000015 	stw	zero,0(sp)
 80028d4:	000f883a 	mov	r7,zero
 80028d8:	01810004 	movi	r6,1024
 80028dc:	014200b4 	movhi	r5,2050
 80028e0:	2967ca04 	addi	r5,r5,-24792
 80028e4:	01020034 	movhi	r4,2048
 80028e8:	210a8104 	addi	r4,r4,10756
 80028ec:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 80028f0:	d8000115 	stw	zero,4(sp)
 80028f4:	d8000015 	stw	zero,0(sp)
 80028f8:	000f883a 	mov	r7,zero
 80028fc:	01810004 	movi	r6,1024
 8002900:	014200b4 	movhi	r5,2050
 8002904:	2967cc04 	addi	r5,r5,-24784
 8002908:	01020034 	movhi	r4,2048
 800290c:	210ab804 	addi	r4,r4,10976
 8002910:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8002914:	d8000115 	stw	zero,4(sp)
 8002918:	d8000015 	stw	zero,0(sp)
 800291c:	000f883a 	mov	r7,zero
 8002920:	01810004 	movi	r6,1024
 8002924:	014200b4 	movhi	r5,2050
 8002928:	2967ce04 	addi	r5,r5,-24776
 800292c:	01020034 	movhi	r4,2048
 8002930:	210acf04 	addi	r4,r4,11068
 8002934:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8002938:	0001883a 	nop
 800293c:	e037883a 	mov	sp,fp
 8002940:	dfc00117 	ldw	ra,4(sp)
 8002944:	df000017 	ldw	fp,0(sp)
 8002948:	dec00204 	addi	sp,sp,8
 800294c:	f800283a 	ret

08002950 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
 8002950:	defffc04 	addi	sp,sp,-16
 8002954:	dfc00315 	stw	ra,12(sp)
 8002958:	df000215 	stw	fp,8(sp)
 800295c:	df000204 	addi	fp,sp,8
 8002960:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 8002964:	e0bfff17 	ldw	r2,-4(fp)
 8002968:	e0bffe15 	stw	r2,-8(fp)

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 800296c:	0009883a 	mov	r4,zero
 8002970:	8005f540 	call	8005f54 <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
 8002974:	e0bffe17 	ldw	r2,-8(fp)
 8002978:	10800017 	ldw	r2,0(r2)
 800297c:	10c00044 	addi	r3,r2,1
 8002980:	e0bffe17 	ldw	r2,-8(fp)
 8002984:	10c00015 	stw	r3,0(r2)

		if( *pulCounter >= priMAX_COUNT )
 8002988:	e0bffe17 	ldw	r2,-8(fp)
 800298c:	10800017 	ldw	r2,0(r2)
 8002990:	10803ff0 	cmpltui	r2,r2,255
 8002994:	103ff71e 	bne	r2,zero,8002974 <vLimitedIncrementTask+0x24>
		{
			vTaskSuspend( NULL );
 8002998:	0009883a 	mov	r4,zero
 800299c:	8005f540 	call	8005f54 <vTaskSuspend>
		}
	}
 80029a0:	003ff406 	br	8002974 <vLimitedIncrementTask+0x24>

080029a4 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
 80029a4:	defffb04 	addi	sp,sp,-20
 80029a8:	dfc00415 	stw	ra,16(sp)
 80029ac:	df000315 	stw	fp,12(sp)
 80029b0:	df000304 	addi	fp,sp,12
 80029b4:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 80029b8:	e0bfff17 	ldw	r2,-4(fp)
 80029bc:	e0bffd15 	stw	r2,-12(fp)

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 80029c0:	0009883a 	mov	r4,zero
 80029c4:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 80029c8:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 80029cc:	e0bffe17 	ldw	r2,-8(fp)
 80029d0:	10800044 	addi	r2,r2,1
 80029d4:	100b883a 	mov	r5,r2
 80029d8:	0009883a 	mov	r4,zero
 80029dc:	8005d940 	call	8005d94 <vTaskPrioritySet>
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
			( *pulCounter )++;
 80029e0:	e0bffd17 	ldw	r2,-12(fp)
 80029e4:	10800017 	ldw	r2,0(r2)
 80029e8:	10c00044 	addi	r3,r2,1
 80029ec:	e0bffd17 	ldw	r2,-12(fp)
 80029f0:	10c00015 	stw	r3,0(r2)
		}
		vTaskPrioritySet( NULL, uxOurPriority );
 80029f4:	e17ffe17 	ldw	r5,-8(fp)
 80029f8:	0009883a 	mov	r4,zero
 80029fc:	8005d940 	call	8005d94 <vTaskPrioritySet>
		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
	}
 8002a00:	003ff206 	br	80029cc <vContinuousIncrementTask+0x28>

08002a04 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
 8002a04:	defffb04 	addi	sp,sp,-20
 8002a08:	dfc00415 	stw	ra,16(sp)
 8002a0c:	df000315 	stw	fp,12(sp)
 8002a10:	df000304 	addi	fp,sp,12
 8002a14:	e13fff15 	stw	r4,-4(fp)
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
 8002a18:	e03ffd8d 	sth	zero,-10(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
 8002a1c:	d0287815 	stw	zero,-24096(gp)

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8002a20:	e03ffd0d 	sth	zero,-12(fp)
 8002a24:	00001406 	br	8002a78 <vCounterControlTask+0x74>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
 8002a28:	d0a87617 	ldw	r2,-24104(gp)
 8002a2c:	1009883a 	mov	r4,r2
 8002a30:	8005f540 	call	8005f54 <vTaskSuspend>
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
 8002a34:	d0a87817 	ldw	r2,-24096(gp)
 8002a38:	e0bffe15 	stw	r2,-8(fp)
			}
			vTaskResume( xContinuousIncrementHandle );
 8002a3c:	d0a87617 	ldw	r2,-24104(gp)
 8002a40:	1009883a 	mov	r4,r2
 8002a44:	80060bc0 	call	80060bc <vTaskResume>
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 8002a48:	01002004 	movi	r4,128
 8002a4c:	8005c940 	call	8005c94 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 8002a50:	80063580 	call	8006358 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 8002a54:	d0a87817 	ldw	r2,-24096(gp)
 8002a58:	e0fffe17 	ldw	r3,-8(fp)
 8002a5c:	1880021e 	bne	r3,r2,8002a68 <vCounterControlTask+0x64>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 8002a60:	00800044 	movi	r2,1
 8002a64:	e0bffd8d 	sth	r2,-10(fp)
				}
			}
			xTaskResumeAll();
 8002a68:	80063840 	call	8006384 <xTaskResumeAll>
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8002a6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8002a70:	10800044 	addi	r2,r2,1
 8002a74:	e0bffd0d 	sth	r2,-12(fp)
 8002a78:	e0bffd0f 	ldh	r2,-12(fp)
 8002a7c:	10800150 	cmplti	r2,r2,5
 8002a80:	103fe91e 	bne	r2,zero,8002a28 <vCounterControlTask+0x24>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 8002a84:	d0a87617 	ldw	r2,-24104(gp)
 8002a88:	1009883a 	mov	r4,r2
 8002a8c:	8005f540 	call	8005f54 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
 8002a90:	d0287815 	stw	zero,-24096(gp)
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
 8002a94:	d0a87717 	ldw	r2,-24100(gp)
 8002a98:	1009883a 	mov	r4,r2
 8002a9c:	80060bc0 	call	80060bc <vTaskResume>
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 8002aa0:	d0a87817 	ldw	r2,-24096(gp)
 8002aa4:	10803fe0 	cmpeqi	r2,r2,255
 8002aa8:	1000021e 	bne	r2,zero,8002ab4 <vCounterControlTask+0xb0>
		{
			sError = pdTRUE;
 8002aac:	00800044 	movi	r2,1
 8002ab0:	e0bffd8d 	sth	r2,-10(fp)
		}

		if( sError == pdFALSE )
 8002ab4:	e0bffd8f 	ldh	r2,-10(fp)
 8002ab8:	1000051e 	bne	r2,zero,8002ad0 <vCounterControlTask+0xcc>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 8002abc:	800731c0 	call	800731c <vTaskEnterCritical>
				usCheckVariable++;
 8002ac0:	d0a8790b 	ldhu	r2,-24092(gp)
 8002ac4:	10800044 	addi	r2,r2,1
 8002ac8:	d0a8790d 	sth	r2,-24092(gp)
			portEXIT_CRITICAL();
 8002acc:	80073700 	call	8007370 <vTaskExitCritical>
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 8002ad0:	d0a87617 	ldw	r2,-24104(gp)
 8002ad4:	1009883a 	mov	r4,r2
 8002ad8:	80060bc0 	call	80060bc <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
 8002adc:	003fcf06 	br	8002a1c <vCounterControlTask+0x18>

08002ae0 <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
 8002ae0:	defffd04 	addi	sp,sp,-12
 8002ae4:	dfc00215 	stw	ra,8(sp)
 8002ae8:	df000115 	stw	fp,4(sp)
 8002aec:	df000104 	addi	fp,sp,4
 8002af0:	e13fff15 	stw	r4,-4(fp)
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
 8002af4:	80063580 	call	8006358 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 8002af8:	d0a88017 	ldw	r2,-24064(gp)
 8002afc:	000f883a 	mov	r7,zero
 8002b00:	000d883a 	mov	r6,zero
 8002b04:	d1687d04 	addi	r5,gp,-24076
 8002b08:	1009883a 	mov	r4,r2
 8002b0c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8002b10:	10800060 	cmpeqi	r2,r2,1
 8002b14:	1000021e 	bne	r2,zero,8002b20 <vQueueSendWhenSuspendedTask+0x40>
			{
				xSuspendedQueueSendError = pdTRUE;
 8002b18:	00800044 	movi	r2,1
 8002b1c:	d0a87a15 	stw	r2,-24088(gp)
			}
		}
		xTaskResumeAll();
 8002b20:	80063840 	call	8006384 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 8002b24:	01002004 	movi	r4,128
 8002b28:	8005c940 	call	8005c94 <vTaskDelay>

		++ulValueToSend;
 8002b2c:	d0a87d17 	ldw	r2,-24076(gp)
 8002b30:	10800044 	addi	r2,r2,1
 8002b34:	d0a87d15 	stw	r2,-24076(gp)
	}
 8002b38:	003fee06 	br	8002af4 <vQueueSendWhenSuspendedTask+0x14>

08002b3c <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
 8002b3c:	defffb04 	addi	sp,sp,-20
 8002b40:	dfc00415 	stw	ra,16(sp)
 8002b44:	df000315 	stw	fp,12(sp)
 8002b48:	df000304 	addi	fp,sp,12
 8002b4c:	e13fff15 	stw	r4,-4(fp)
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 8002b50:	80063580 	call	8006358 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 8002b54:	80063580 	call	8006358 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 8002b58:	d0a88017 	ldw	r2,-24064(gp)
 8002b5c:	e0fffe04 	addi	r3,fp,-8
 8002b60:	000d883a 	mov	r6,zero
 8002b64:	180b883a 	mov	r5,r3
 8002b68:	1009883a 	mov	r4,r2
 8002b6c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8002b70:	e0bffd15 	stw	r2,-12(fp)
				}
				if( xTaskResumeAll() != pdFALSE )
 8002b74:	80063840 	call	8006384 <xTaskResumeAll>
 8002b78:	10000226 	beq	r2,zero,8002b84 <vQueueReceiveWhenSuspendedTask+0x48>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 8002b7c:	00800044 	movi	r2,1
 8002b80:	d0a87b15 	stw	r2,-24084(gp)
				}
			}
			xTaskResumeAll();
 8002b84:	80063840 	call	8006384 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
 8002b88:	e0bffd17 	ldw	r2,-12(fp)
 8002b8c:	103ff026 	beq	r2,zero,8002b50 <vQueueReceiveWhenSuspendedTask+0x14>

		if( ulReceivedValue != ulExpectedValue )
 8002b90:	e0fffe17 	ldw	r3,-8(fp)
 8002b94:	d0a87c17 	ldw	r2,-24080(gp)
 8002b98:	18800226 	beq	r3,r2,8002ba4 <vQueueReceiveWhenSuspendedTask+0x68>
		{
			xSuspendedQueueReceiveError = pdTRUE;
 8002b9c:	00800044 	movi	r2,1
 8002ba0:	d0a87b15 	stw	r2,-24084(gp)
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
 8002ba4:	d0a87b17 	ldw	r2,-24084(gp)
 8002ba8:	10800060 	cmpeqi	r2,r2,1
 8002bac:	103fe81e 	bne	r2,zero,8002b50 <vQueueReceiveWhenSuspendedTask+0x14>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
 8002bb0:	d0a87c17 	ldw	r2,-24080(gp)
 8002bb4:	10800044 	addi	r2,r2,1
 8002bb8:	d0a87c15 	stw	r2,-24080(gp)
		}
	}
 8002bbc:	003fe406 	br	8002b50 <vQueueReceiveWhenSuspendedTask+0x14>

08002bc0 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
 8002bc0:	defffe04 	addi	sp,sp,-8
 8002bc4:	df000115 	stw	fp,4(sp)
 8002bc8:	df000104 	addi	fp,sp,4
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
 8002bcc:	00800044 	movi	r2,1
 8002bd0:	e0bfff15 	stw	r2,-4(fp)

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 8002bd4:	d0e8790b 	ldhu	r3,-24092(gp)
 8002bd8:	d0a87e0b 	ldhu	r2,-24072(gp)
 8002bdc:	18ffffcc 	andi	r3,r3,65535
 8002be0:	10bfffcc 	andi	r2,r2,65535
 8002be4:	1880011e 	bne	r3,r2,8002bec <xAreDynamicPriorityTasksStillRunning+0x2c>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 8002be8:	e03fff15 	stw	zero,-4(fp)
	}

	if( ulExpectedValue == ulLastExpectedValue )
 8002bec:	d0e87c17 	ldw	r3,-24080(gp)
 8002bf0:	d0a87f17 	ldw	r2,-24068(gp)
 8002bf4:	1880011e 	bne	r3,r2,8002bfc <xAreDynamicPriorityTasksStillRunning+0x3c>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
 8002bf8:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueSendError == pdTRUE )
 8002bfc:	d0a87a17 	ldw	r2,-24088(gp)
 8002c00:	10800058 	cmpnei	r2,r2,1
 8002c04:	1000011e 	bne	r2,zero,8002c0c <xAreDynamicPriorityTasksStillRunning+0x4c>
	{
		xReturn = pdFALSE;
 8002c08:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 8002c0c:	d0a87b17 	ldw	r2,-24084(gp)
 8002c10:	10800058 	cmpnei	r2,r2,1
 8002c14:	1000011e 	bne	r2,zero,8002c1c <xAreDynamicPriorityTasksStillRunning+0x5c>
	{
		xReturn = pdFALSE;
 8002c18:	e03fff15 	stw	zero,-4(fp)
	}

	usLastTaskCheck = usCheckVariable;
 8002c1c:	d0a8790b 	ldhu	r2,-24092(gp)
 8002c20:	d0a87e0d 	sth	r2,-24072(gp)
	ulLastExpectedValue = ulExpectedValue;
 8002c24:	d0a87c17 	ldw	r2,-24080(gp)
 8002c28:	d0a87f15 	stw	r2,-24068(gp)

	return xReturn;
 8002c2c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002c30:	e037883a 	mov	sp,fp
 8002c34:	df000017 	ldw	fp,0(sp)
 8002c38:	dec00104 	addi	sp,sp,4
 8002c3c:	f800283a 	ret

08002c40 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 8002c40:	defffa04 	addi	sp,sp,-24
 8002c44:	dfc00515 	stw	ra,20(sp)
 8002c48:	df000415 	stw	fp,16(sp)
 8002c4c:	df000404 	addi	fp,sp,16
 8002c50:	e13fff15 	stw	r4,-4(fp)
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 8002c54:	e03ffe15 	stw	zero,-8(fp)
 8002c58:	00000d06 	br	8002c90 <vStartLEDFlashTasks+0x50>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8002c5c:	d8000115 	stw	zero,4(sp)
 8002c60:	e0bfff17 	ldw	r2,-4(fp)
 8002c64:	d8800015 	stw	r2,0(sp)
 8002c68:	000f883a 	mov	r7,zero
 8002c6c:	01810004 	movi	r6,1024
 8002c70:	014200b4 	movhi	r5,2050
 8002c74:	2967d004 	addi	r5,r5,-24768
 8002c78:	01020034 	movhi	r4,2048
 8002c7c:	210b2d04 	addi	r4,r4,11444
 8002c80:	80056e80 	call	80056e8 <xTaskCreate>
void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 8002c84:	e0bffe17 	ldw	r2,-8(fp)
 8002c88:	10800044 	addi	r2,r2,1
 8002c8c:	e0bffe15 	stw	r2,-8(fp)
 8002c90:	e0bffe17 	ldw	r2,-8(fp)
 8002c94:	108000d0 	cmplti	r2,r2,3
 8002c98:	103ff01e 	bne	r2,zero,8002c5c <vStartLEDFlashTasks+0x1c>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 8002c9c:	0001883a 	nop
 8002ca0:	e037883a 	mov	sp,fp
 8002ca4:	dfc00117 	ldw	ra,4(sp)
 8002ca8:	df000017 	ldw	fp,0(sp)
 8002cac:	dec00204 	addi	sp,sp,8
 8002cb0:	f800283a 	ret

08002cb4 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8002cb4:	defffa04 	addi	sp,sp,-24
 8002cb8:	dfc00515 	stw	ra,20(sp)
 8002cbc:	df000415 	stw	fp,16(sp)
 8002cc0:	df000404 	addi	fp,sp,16
 8002cc4:	e13fff15 	stw	r4,-4(fp)

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 8002cc8:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 8002ccc:	d0a88117 	ldw	r2,-24060(gp)
 8002cd0:	e0bffc15 	stw	r2,-16(fp)

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8002cd4:	d0a88117 	ldw	r2,-24060(gp)
 8002cd8:	10800044 	addi	r2,r2,1
 8002cdc:	d0a88115 	stw	r2,-24060(gp)
	}
	portEXIT_CRITICAL();
 8002ce0:	80073700 	call	8007370 <vTaskExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
 8002ce4:	e0bffc17 	ldw	r2,-16(fp)
 8002ce8:	10800044 	addi	r2,r2,1
 8002cec:	01405344 	movi	r5,333
 8002cf0:	1009883a 	mov	r4,r2
 8002cf4:	80086340 	call	8008634 <__mulsi3>
 8002cf8:	e0bffd15 	stw	r2,-12(fp)
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 8002cfc:	e0bffd17 	ldw	r2,-12(fp)
 8002d00:	1004d07a 	srli	r2,r2,1
 8002d04:	e0bffd15 	stw	r2,-12(fp)

	/* We need to initialise xLastFlashTime prior to the first call to
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8002d08:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8002d0c:	e0bffe15 	stw	r2,-8(fp)

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002d10:	e0bffe04 	addi	r2,fp,-8
 8002d14:	e17ffd17 	ldw	r5,-12(fp)
 8002d18:	1009883a 	mov	r4,r2
 8002d1c:	8005ba40 	call	8005ba4 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002d20:	e13ffc17 	ldw	r4,-16(fp)
 8002d24:	80037740 	call	8003774 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002d28:	e0bffe04 	addi	r2,fp,-8
 8002d2c:	e17ffd17 	ldw	r5,-12(fp)
 8002d30:	1009883a 	mov	r4,r2
 8002d34:	8005ba40 	call	8005ba4 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002d38:	e13ffc17 	ldw	r4,-16(fp)
 8002d3c:	80037740 	call	8003774 <vParTestToggleLED>
	}
 8002d40:	003ff306 	br	8002d10 <vLEDFlashTask+0x5c>

08002d44 <vStartIntegerMathTasks>:
static BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
 8002d44:	defffa04 	addi	sp,sp,-24
 8002d48:	dfc00515 	stw	ra,20(sp)
 8002d4c:	df000415 	stw	fp,16(sp)
 8002d50:	df000404 	addi	fp,sp,16
 8002d54:	e13fff15 	stw	r4,-4(fp)
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002d58:	e03ffe0d 	sth	zero,-8(fp)
 8002d5c:	00001206 	br	8002da8 <vStartIntegerMathTasks+0x64>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
 8002d60:	e0bffe0f 	ldh	r2,-8(fp)
 8002d64:	1085883a 	add	r2,r2,r2
 8002d68:	1087883a 	add	r3,r2,r2
 8002d6c:	d0a88204 	addi	r2,gp,-24056
 8002d70:	1887883a 	add	r3,r3,r2
 8002d74:	d8000115 	stw	zero,4(sp)
 8002d78:	e0bfff17 	ldw	r2,-4(fp)
 8002d7c:	d8800015 	stw	r2,0(sp)
 8002d80:	180f883a 	mov	r7,r3
 8002d84:	01810004 	movi	r6,1024
 8002d88:	014200b4 	movhi	r5,2050
 8002d8c:	2967d204 	addi	r5,r5,-24760
 8002d90:	01020034 	movhi	r4,2048
 8002d94:	210b7204 	addi	r4,r4,11720
 8002d98:	80056e80 	call	80056e8 <xTaskCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002d9c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002da0:	10800044 	addi	r2,r2,1
 8002da4:	e0bffe0d 	sth	r2,-8(fp)
 8002da8:	e0bffe0f 	ldh	r2,-8(fp)
 8002dac:	00bfec0e 	bge	zero,r2,8002d60 <vStartIntegerMathTasks+0x1c>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 8002db0:	0001883a 	nop
 8002db4:	e037883a 	mov	sp,fp
 8002db8:	dfc00117 	ldw	ra,4(sp)
 8002dbc:	df000017 	ldw	fp,0(sp)
 8002dc0:	dec00204 	addi	sp,sp,8
 8002dc4:	f800283a 	ret

08002dc8 <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
 8002dc8:	defffa04 	addi	sp,sp,-24
 8002dcc:	dfc00515 	stw	ra,20(sp)
 8002dd0:	df000415 	stw	fp,16(sp)
 8002dd4:	df000404 	addi	fp,sp,16
 8002dd8:	e13fff15 	stw	r4,-4(fp)
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
 8002ddc:	e03ffc0d 	sth	zero,-16(fp)
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 8002de0:	e0bfff17 	ldw	r2,-4(fp)
 8002de4:	e0bffd15 	stw	r2,-12(fp)
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
 8002de8:	00801ec4 	movi	r2,123
 8002dec:	e0bffe15 	stw	r2,-8(fp)
		lValue += intgCONST2;
 8002df0:	e0fffe17 	ldw	r3,-8(fp)
 8002df4:	00800134 	movhi	r2,4
 8002df8:	10a511c4 	addi	r2,r2,-27577
 8002dfc:	1885883a 	add	r2,r3,r2
 8002e00:	e0bffe15 	stw	r2,-8(fp)
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
 8002e04:	e0bffe17 	ldw	r2,-8(fp)
 8002e08:	017fff44 	movi	r5,-3
 8002e0c:	1009883a 	mov	r4,r2
 8002e10:	80086340 	call	8008634 <__mulsi3>
 8002e14:	e0bffe15 	stw	r2,-8(fp)
		lValue /= intgCONST4;
 8002e18:	e0bffe17 	ldw	r2,-8(fp)
 8002e1c:	014001c4 	movi	r5,7
 8002e20:	1009883a 	mov	r4,r2
 8002e24:	80084800 	call	8008480 <__divsi3>
 8002e28:	e0bffe15 	stw	r2,-8(fp)

		/* If the calculation is found to be incorrect we stop setting the
		TaskHasExecuted variable so the check task can see an error has
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
 8002e2c:	e0fffe17 	ldw	r3,-8(fp)
 8002e30:	00bfffb4 	movhi	r2,65534
 8002e34:	109dc6c4 	addi	r2,r2,30491
 8002e38:	18800226 	beq	r3,r2,8002e44 <vCompeteingIntMathTask+0x7c>
		{
			sError = pdTRUE;
 8002e3c:	00800044 	movi	r2,1
 8002e40:	e0bffc0d 	sth	r2,-16(fp)
		}

		if( sError == pdFALSE )
 8002e44:	e0bffc0f 	ldh	r2,-16(fp)
 8002e48:	103fe71e 	bne	r2,zero,8002de8 <vCompeteingIntMathTask+0x20>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
 8002e4c:	800731c0 	call	800731c <vTaskEnterCritical>
				*pxTaskHasExecuted = pdTRUE;
 8002e50:	e0bffd17 	ldw	r2,-12(fp)
 8002e54:	00c00044 	movi	r3,1
 8002e58:	10c00015 	stw	r3,0(r2)
			portEXIT_CRITICAL();
 8002e5c:	80073700 	call	8007370 <vTaskExitCritical>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 8002e60:	003fe106 	br	8002de8 <vCompeteingIntMathTask+0x20>

08002e64 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
 8002e64:	defffd04 	addi	sp,sp,-12
 8002e68:	df000215 	stw	fp,8(sp)
 8002e6c:	df000204 	addi	fp,sp,8
BaseType_t xReturn = pdTRUE;
 8002e70:	00800044 	movi	r2,1
 8002e74:	e0bffe15 	stw	r2,-8(fp)
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002e78:	e03fff0d 	sth	zero,-4(fp)
 8002e7c:	00001106 	br	8002ec4 <xAreIntegerMathsTaskStillRunning+0x60>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
 8002e80:	e0bfff0f 	ldh	r2,-4(fp)
 8002e84:	1085883a 	add	r2,r2,r2
 8002e88:	1087883a 	add	r3,r2,r2
 8002e8c:	d0a88204 	addi	r2,gp,-24056
 8002e90:	1885883a 	add	r2,r3,r2
 8002e94:	10800017 	ldw	r2,0(r2)
 8002e98:	1000011e 	bne	r2,zero,8002ea0 <xAreIntegerMathsTaskStillRunning+0x3c>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 8002e9c:	e03ffe15 	stw	zero,-8(fp)
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
 8002ea0:	e0bfff0f 	ldh	r2,-4(fp)
 8002ea4:	1085883a 	add	r2,r2,r2
 8002ea8:	1087883a 	add	r3,r2,r2
 8002eac:	d0a88204 	addi	r2,gp,-24056
 8002eb0:	1885883a 	add	r2,r3,r2
 8002eb4:	10000015 	stw	zero,0(r2)
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002eb8:	e0bfff0b 	ldhu	r2,-4(fp)
 8002ebc:	10800044 	addi	r2,r2,1
 8002ec0:	e0bfff0d 	sth	r2,-4(fp)
 8002ec4:	e0bfff0f 	ldh	r2,-4(fp)
 8002ec8:	00bfed0e 	bge	zero,r2,8002e80 <xAreIntegerMathsTaskStillRunning+0x1c>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
 8002ecc:	e0bffe17 	ldw	r2,-8(fp)
}
 8002ed0:	e037883a 	mov	sp,fp
 8002ed4:	df000017 	ldw	fp,0(sp)
 8002ed8:	dec00104 	addi	sp,sp,4
 8002edc:	f800283a 	ret

08002ee0 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 8002ee0:	defffc04 	addi	sp,sp,-16
 8002ee4:	dfc00315 	stw	ra,12(sp)
 8002ee8:	df000215 	stw	fp,8(sp)
 8002eec:	df000204 	addi	fp,sp,8
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 8002ef0:	01000104 	movi	r4,4
 8002ef4:	80045140 	call	8004514 <xQueueCreateMutex>
 8002ef8:	d0a88315 	stw	r2,-24052(gp)

	if( xMutex != NULL )
 8002efc:	d0a88317 	ldw	r2,-24052(gp)
 8002f00:	10001f26 	beq	r2,zero,8002f80 <vStartRecursiveMutexTasks+0xa0>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );

		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 8002f04:	d0a88a04 	addi	r2,gp,-24024
 8002f08:	d8800115 	stw	r2,4(sp)
 8002f0c:	00800084 	movi	r2,2
 8002f10:	d8800015 	stw	r2,0(sp)
 8002f14:	000f883a 	mov	r7,zero
 8002f18:	01810004 	movi	r6,1024
 8002f1c:	014200b4 	movhi	r5,2050
 8002f20:	2967d404 	addi	r5,r5,-24752
 8002f24:	01020034 	movhi	r4,2048
 8002f28:	210be604 	addi	r4,r4,12184
 8002f2c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 8002f30:	d0a88b04 	addi	r2,gp,-24020
 8002f34:	d8800115 	stw	r2,4(sp)
 8002f38:	00800044 	movi	r2,1
 8002f3c:	d8800015 	stw	r2,0(sp)
 8002f40:	000f883a 	mov	r7,zero
 8002f44:	01810004 	movi	r6,1024
 8002f48:	014200b4 	movhi	r5,2050
 8002f4c:	2967d604 	addi	r5,r5,-24744
 8002f50:	01020034 	movhi	r4,2048
 8002f54:	210c2504 	addi	r4,r4,12436
 8002f58:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 8002f5c:	d8000115 	stw	zero,4(sp)
 8002f60:	d8000015 	stw	zero,0(sp)
 8002f64:	000f883a 	mov	r7,zero
 8002f68:	01810004 	movi	r6,1024
 8002f6c:	014200b4 	movhi	r5,2050
 8002f70:	2967d804 	addi	r5,r5,-24736
 8002f74:	01020034 	movhi	r4,2048
 8002f78:	210c4f04 	addi	r4,r4,12604
 8002f7c:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8002f80:	0001883a 	nop
 8002f84:	e037883a 	mov	sp,fp
 8002f88:	dfc00117 	ldw	ra,4(sp)
 8002f8c:	df000017 	ldw	fp,0(sp)
 8002f90:	dec00204 	addi	sp,sp,8
 8002f94:	f800283a 	ret

08002f98 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 8002f98:	defffc04 	addi	sp,sp,-16
 8002f9c:	dfc00315 	stw	ra,12(sp)
 8002fa0:	df000215 	stw	fp,8(sp)
 8002fa4:	df000204 	addi	fp,sp,8
 8002fa8:	e13fff15 	stw	r4,-4(fp)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8002fac:	d0a88317 	ldw	r2,-24052(gp)
 8002fb0:	1009883a 	mov	r4,r2
 8002fb4:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 8002fb8:	10800058 	cmpnei	r2,r2,1
 8002fbc:	1000021e 	bne	r2,zero,8002fc8 <prvRecursiveMutexControllingTask+0x30>
		{
			xErrorOccurred = pdTRUE;
 8002fc0:	00800044 	movi	r2,1
 8002fc4:	d0a88415 	stw	r2,-24048(gp)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8002fc8:	e03ffe15 	stw	zero,-8(fp)
 8002fcc:	00000d06 	br	8003004 <prvRecursiveMutexControllingTask+0x6c>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmu15ms_DELAY ) != pdPASS )
 8002fd0:	d0a88317 	ldw	r2,-24052(gp)
 8002fd4:	014003c4 	movi	r5,15
 8002fd8:	1009883a 	mov	r4,r2
 8002fdc:	80046000 	call	8004600 <xQueueTakeMutexRecursive>
 8002fe0:	10800060 	cmpeqi	r2,r2,1
 8002fe4:	1000021e 	bne	r2,zero,8002ff0 <prvRecursiveMutexControllingTask+0x58>
			{
				xErrorOccurred = pdTRUE;
 8002fe8:	00800044 	movi	r2,1
 8002fec:	d0a88415 	stw	r2,-24048(gp)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 8002ff0:	01000504 	movi	r4,20
 8002ff4:	8005c940 	call	8005c94 <vTaskDelay>
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8002ff8:	e0bffe17 	ldw	r2,-8(fp)
 8002ffc:	10800044 	addi	r2,r2,1
 8003000:	e0bffe15 	stw	r2,-8(fp)
 8003004:	e0bffe17 	ldw	r2,-8(fp)
 8003008:	108002b0 	cmpltui	r2,r2,10
 800300c:	103ff01e 	bne	r2,zero,8002fd0 <prvRecursiveMutexControllingTask+0x38>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8003010:	e03ffe15 	stw	zero,-8(fp)
 8003014:	00000c06 	br	8003048 <prvRecursiveMutexControllingTask+0xb0>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 8003018:	01000504 	movi	r4,20
 800301c:	8005c940 	call	8005c94 <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 8003020:	d0a88317 	ldw	r2,-24052(gp)
 8003024:	1009883a 	mov	r4,r2
 8003028:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 800302c:	10800060 	cmpeqi	r2,r2,1
 8003030:	1000021e 	bne	r2,zero,800303c <prvRecursiveMutexControllingTask+0xa4>
			{
				xErrorOccurred = pdTRUE;
 8003034:	00800044 	movi	r2,1
 8003038:	d0a88415 	stw	r2,-24048(gp)
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 800303c:	e0bffe17 	ldw	r2,-8(fp)
 8003040:	10800044 	addi	r2,r2,1
 8003044:	e0bffe15 	stw	r2,-8(fp)
 8003048:	e0bffe17 	ldw	r2,-8(fp)
 800304c:	108002b0 	cmpltui	r2,r2,10
 8003050:	103ff11e 	bne	r2,zero,8003018 <prvRecursiveMutexControllingTask+0x80>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8003054:	d0a88317 	ldw	r2,-24052(gp)
 8003058:	1009883a 	mov	r4,r2
 800305c:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 8003060:	10800058 	cmpnei	r2,r2,1
 8003064:	1000021e 	bne	r2,zero,8003070 <prvRecursiveMutexControllingTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 8003068:	00800044 	movi	r2,1
 800306c:	d0a88415 	stw	r2,-24048(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 8003070:	d0a88717 	ldw	r2,-24036(gp)
 8003074:	10800044 	addi	r2,r2,1
 8003078:	d0a88715 	stw	r2,-24036(gp)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 800307c:	00800044 	movi	r2,1
 8003080:	d0a88515 	stw	r2,-24044(gp)
		vTaskSuspend( NULL );
 8003084:	0009883a 	mov	r4,zero
 8003088:	8005f540 	call	8005f54 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 800308c:	d0288515 	stw	zero,-24044(gp)
	}
 8003090:	003fc606 	br	8002fac <prvRecursiveMutexControllingTask+0x14>

08003094 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 8003094:	defffd04 	addi	sp,sp,-12
 8003098:	dfc00215 	stw	ra,8(sp)
 800309c:	df000115 	stw	fp,4(sp)
 80030a0:	df000104 	addi	fp,sp,4
 80030a4:	e13fff15 	stw	r4,-4(fp)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 80030a8:	d0a88317 	ldw	r2,-24052(gp)
 80030ac:	017fff84 	movi	r5,-2
 80030b0:	1009883a 	mov	r4,r2
 80030b4:	80046000 	call	8004600 <xQueueTakeMutexRecursive>
 80030b8:	10800058 	cmpnei	r2,r2,1
 80030bc:	1000131e 	bne	r2,zero,800310c <prvRecursiveMutexBlockingTask+0x78>
		{
			if( xControllingIsSuspended != pdTRUE )
 80030c0:	d0a88517 	ldw	r2,-24044(gp)
 80030c4:	10800060 	cmpeqi	r2,r2,1
 80030c8:	1000031e 	bne	r2,zero,80030d8 <prvRecursiveMutexBlockingTask+0x44>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 80030cc:	00800044 	movi	r2,1
 80030d0:	d0a88415 	stw	r2,-24048(gp)
 80030d4:	00000f06 	br	8003114 <prvRecursiveMutexBlockingTask+0x80>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 80030d8:	d0a88317 	ldw	r2,-24052(gp)
 80030dc:	1009883a 	mov	r4,r2
 80030e0:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 80030e4:	10800060 	cmpeqi	r2,r2,1
 80030e8:	1000021e 	bne	r2,zero,80030f4 <prvRecursiveMutexBlockingTask+0x60>
				{
					xErrorOccurred = pdTRUE;
 80030ec:	00800044 	movi	r2,1
 80030f0:	d0a88415 	stw	r2,-24048(gp)
				}

				xBlockingIsSuspended = pdTRUE;
 80030f4:	00800044 	movi	r2,1
 80030f8:	d0a88615 	stw	r2,-24040(gp)
				vTaskSuspend( NULL );
 80030fc:	0009883a 	mov	r4,zero
 8003100:	8005f540 	call	8005f54 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 8003104:	d0288615 	stw	zero,-24040(gp)
 8003108:	00000206 	br	8003114 <prvRecursiveMutexBlockingTask+0x80>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 800310c:	00800044 	movi	r2,1
 8003110:	d0a88415 	stw	r2,-24048(gp)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 8003114:	d0a88817 	ldw	r2,-24032(gp)
 8003118:	10c00044 	addi	r3,r2,1
 800311c:	d0a88717 	ldw	r2,-24036(gp)
 8003120:	18800226 	beq	r3,r2,800312c <prvRecursiveMutexBlockingTask+0x98>
		{
			xErrorOccurred = pdTRUE;
 8003124:	00800044 	movi	r2,1
 8003128:	d0a88415 	stw	r2,-24048(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 800312c:	d0a88817 	ldw	r2,-24032(gp)
 8003130:	10800044 	addi	r2,r2,1
 8003134:	d0a88815 	stw	r2,-24032(gp)
	}
 8003138:	003fdb06 	br	80030a8 <prvRecursiveMutexBlockingTask+0x14>

0800313c <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 800313c:	defffd04 	addi	sp,sp,-12
 8003140:	dfc00215 	stw	ra,8(sp)
 8003144:	df000115 	stw	fp,4(sp)
 8003148:	df000104 	addi	fp,sp,4
 800314c:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  It should only be obtained when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 8003150:	d0a88317 	ldw	r2,-24052(gp)
 8003154:	000b883a 	mov	r5,zero
 8003158:	1009883a 	mov	r4,r2
 800315c:	80046000 	call	8004600 <xQueueTakeMutexRecursive>
 8003160:	10800058 	cmpnei	r2,r2,1
 8003164:	103ffa1e 	bne	r2,zero,8003150 <prvRecursiveMutexPollingTask+0x14>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 8003168:	d0a88617 	ldw	r2,-24040(gp)
 800316c:	10800058 	cmpnei	r2,r2,1
 8003170:	1000031e 	bne	r2,zero,8003180 <prvRecursiveMutexPollingTask+0x44>
 8003174:	d0a88517 	ldw	r2,-24044(gp)
 8003178:	10800060 	cmpeqi	r2,r2,1
 800317c:	1000031e 	bne	r2,zero,800318c <prvRecursiveMutexPollingTask+0x50>
			{
				xErrorOccurred = pdTRUE;
 8003180:	00800044 	movi	r2,1
 8003184:	d0a88415 	stw	r2,-24048(gp)
 8003188:	00001806 	br	80031ec <prvRecursiveMutexPollingTask+0xb0>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 800318c:	d0a88917 	ldw	r2,-24028(gp)
 8003190:	10800044 	addi	r2,r2,1
 8003194:	d0a88915 	stw	r2,-24028(gp)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 8003198:	d0a88b17 	ldw	r2,-24020(gp)
 800319c:	1009883a 	mov	r4,r2
 80031a0:	80060bc0 	call	80060bc <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
 80031a4:	d0a88a17 	ldw	r2,-24024(gp)
 80031a8:	1009883a 	mov	r4,r2
 80031ac:	80060bc0 	call	80060bc <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 80031b0:	d0a88617 	ldw	r2,-24040(gp)
 80031b4:	10800060 	cmpeqi	r2,r2,1
 80031b8:	1000031e 	bne	r2,zero,80031c8 <prvRecursiveMutexPollingTask+0x8c>
 80031bc:	d0a88517 	ldw	r2,-24044(gp)
 80031c0:	10800058 	cmpnei	r2,r2,1
 80031c4:	1000021e 	bne	r2,zero,80031d0 <prvRecursiveMutexPollingTask+0x94>
				{
					xErrorOccurred = pdTRUE;
 80031c8:	00800044 	movi	r2,1
 80031cc:	d0a88415 	stw	r2,-24048(gp)
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 80031d0:	d0a88317 	ldw	r2,-24052(gp)
 80031d4:	1009883a 	mov	r4,r2
 80031d8:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 80031dc:	10800060 	cmpeqi	r2,r2,1
 80031e0:	103fdb1e 	bne	r2,zero,8003150 <prvRecursiveMutexPollingTask+0x14>
				{
					xErrorOccurred = pdTRUE;
 80031e4:	00800044 	movi	r2,1
 80031e8:	d0a88415 	stw	r2,-24048(gp)
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 80031ec:	003fd806 	br	8003150 <prvRecursiveMutexPollingTask+0x14>

080031f0 <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 80031f0:	defffe04 	addi	sp,sp,-8
 80031f4:	df000115 	stw	fp,4(sp)
 80031f8:	df000104 	addi	fp,sp,4
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 80031fc:	d0e88c17 	ldw	r3,-24016(gp)
 8003200:	d0a88717 	ldw	r2,-24036(gp)
 8003204:	1880031e 	bne	r3,r2,8003214 <xAreRecursiveMutexTasksStillRunning+0x24>
	{
		xErrorOccurred = pdTRUE;
 8003208:	00800044 	movi	r2,1
 800320c:	d0a88415 	stw	r2,-24048(gp)
 8003210:	00000206 	br	800321c <xAreRecursiveMutexTasksStillRunning+0x2c>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 8003214:	d0a88717 	ldw	r2,-24036(gp)
 8003218:	d0a88c15 	stw	r2,-24016(gp)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 800321c:	d0e88d17 	ldw	r3,-24012(gp)
 8003220:	d0a88817 	ldw	r2,-24032(gp)
 8003224:	1880031e 	bne	r3,r2,8003234 <xAreRecursiveMutexTasksStillRunning+0x44>
	{
		xErrorOccurred = pdTRUE;
 8003228:	00800044 	movi	r2,1
 800322c:	d0a88415 	stw	r2,-24048(gp)
 8003230:	00000206 	br	800323c <xAreRecursiveMutexTasksStillRunning+0x4c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 8003234:	d0a88817 	ldw	r2,-24032(gp)
 8003238:	d0a88d15 	stw	r2,-24012(gp)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 800323c:	d0e88e17 	ldw	r3,-24008(gp)
 8003240:	d0a88917 	ldw	r2,-24028(gp)
 8003244:	1880031e 	bne	r3,r2,8003254 <xAreRecursiveMutexTasksStillRunning+0x64>
	{
		xErrorOccurred = pdTRUE;
 8003248:	00800044 	movi	r2,1
 800324c:	d0a88415 	stw	r2,-24048(gp)
 8003250:	00000206 	br	800325c <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 8003254:	d0a88917 	ldw	r2,-24028(gp)
 8003258:	d0a88e15 	stw	r2,-24008(gp)
	}

	if( xErrorOccurred == pdTRUE )
 800325c:	d0a88417 	ldw	r2,-24048(gp)
 8003260:	10800058 	cmpnei	r2,r2,1
 8003264:	1000021e 	bne	r2,zero,8003270 <xAreRecursiveMutexTasksStillRunning+0x80>
	{
		xReturn = pdFAIL;
 8003268:	e03fff15 	stw	zero,-4(fp)
 800326c:	00000206 	br	8003278 <xAreRecursiveMutexTasksStillRunning+0x88>
	}
	else
	{
		xReturn = pdPASS;
 8003270:	00800044 	movi	r2,1
 8003274:	e0bfff15 	stw	r2,-4(fp)
	}

	return xReturn;
 8003278:	e0bfff17 	ldw	r2,-4(fp)
}
 800327c:	e037883a 	mov	sp,fp
 8003280:	df000017 	ldw	fp,0(sp)
 8003284:	dec00104 	addi	sp,sp,4
 8003288:	f800283a 	ret

0800328c <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
 800328c:	defff804 	addi	sp,sp,-32
 8003290:	dfc00715 	stw	ra,28(sp)
 8003294:	df000615 	stw	fp,24(sp)
 8003298:	df000604 	addi	fp,sp,24
 800329c:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 80032a0:	00801904 	movi	r2,100
 80032a4:	e0bffc15 	stw	r2,-16(fp)

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 80032a8:	01000304 	movi	r4,12
 80032ac:	8003f080 	call	8003f08 <pvPortMalloc>
 80032b0:	e0bffd15 	stw	r2,-12(fp)

	if( pxFirstSemaphoreParameters != NULL )
 80032b4:	e0bffd17 	ldw	r2,-12(fp)
 80032b8:	10002e26 	beq	r2,zero,8003374 <vStartSemaphoreTasks+0xe8>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 80032bc:	018000c4 	movi	r6,3
 80032c0:	000b883a 	mov	r5,zero
 80032c4:	01000044 	movi	r4,1
 80032c8:	80043880 	call	8004388 <xQueueGenericCreate>
 80032cc:	1007883a 	mov	r3,r2
 80032d0:	e0bffd17 	ldw	r2,-12(fp)
 80032d4:	10c00015 	stw	r3,0(r2)

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 80032d8:	e0bffd17 	ldw	r2,-12(fp)
 80032dc:	10800017 	ldw	r2,0(r2)
 80032e0:	10002426 	beq	r2,zero,8003374 <vStartSemaphoreTasks+0xe8>
		{
			xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
 80032e4:	e0bffd17 	ldw	r2,-12(fp)
 80032e8:	10800017 	ldw	r2,0(r2)
 80032ec:	000f883a 	mov	r7,zero
 80032f0:	000d883a 	mov	r6,zero
 80032f4:	000b883a 	mov	r5,zero
 80032f8:	1009883a 	mov	r4,r2
 80032fc:	80046f40 	call	80046f4 <xQueueGenericSend>

			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 8003300:	01000104 	movi	r4,4
 8003304:	8003f080 	call	8003f08 <pvPortMalloc>
 8003308:	1007883a 	mov	r3,r2
 800330c:	e0bffd17 	ldw	r2,-12(fp)
 8003310:	10c00115 	stw	r3,4(r2)

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 8003314:	e0bffd17 	ldw	r2,-12(fp)
 8003318:	10800117 	ldw	r2,4(r2)
 800331c:	00c03fc4 	movi	r3,255
 8003320:	10c00015 	stw	r3,0(r2)

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 8003324:	e0bffd17 	ldw	r2,-12(fp)
 8003328:	10000215 	stw	zero,8(r2)

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 800332c:	d8000115 	stw	zero,4(sp)
 8003330:	d8000015 	stw	zero,0(sp)
 8003334:	e1fffd17 	ldw	r7,-12(fp)
 8003338:	01810004 	movi	r6,1024
 800333c:	014200b4 	movhi	r5,2050
 8003340:	2967da04 	addi	r5,r5,-24728
 8003344:	01020034 	movhi	r4,2048
 8003348:	210d1904 	addi	r4,r4,13412
 800334c:	80056e80 	call	80056e8 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8003350:	d8000115 	stw	zero,4(sp)
 8003354:	d8000015 	stw	zero,0(sp)
 8003358:	e1fffd17 	ldw	r7,-12(fp)
 800335c:	01810004 	movi	r6,1024
 8003360:	014200b4 	movhi	r5,2050
 8003364:	2967dc04 	addi	r5,r5,-24720
 8003368:	01020034 	movhi	r4,2048
 800336c:	210d1904 	addi	r4,r4,13412
 8003370:	80056e80 	call	80056e8 <xTaskCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 8003374:	01000304 	movi	r4,12
 8003378:	8003f080 	call	8003f08 <pvPortMalloc>
 800337c:	e0bffe15 	stw	r2,-8(fp)
	if( pxSecondSemaphoreParameters != NULL )
 8003380:	e0bffe17 	ldw	r2,-8(fp)
 8003384:	10003126 	beq	r2,zero,800344c <vStartSemaphoreTasks+0x1c0>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 8003388:	018000c4 	movi	r6,3
 800338c:	000b883a 	mov	r5,zero
 8003390:	01000044 	movi	r4,1
 8003394:	80043880 	call	8004388 <xQueueGenericCreate>
 8003398:	1007883a 	mov	r3,r2
 800339c:	e0bffe17 	ldw	r2,-8(fp)
 80033a0:	10c00015 	stw	r3,0(r2)

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 80033a4:	e0bffe17 	ldw	r2,-8(fp)
 80033a8:	10800017 	ldw	r2,0(r2)
 80033ac:	10002726 	beq	r2,zero,800344c <vStartSemaphoreTasks+0x1c0>
		{
			xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
 80033b0:	e0bffe17 	ldw	r2,-8(fp)
 80033b4:	10800017 	ldw	r2,0(r2)
 80033b8:	000f883a 	mov	r7,zero
 80033bc:	000d883a 	mov	r6,zero
 80033c0:	000b883a 	mov	r5,zero
 80033c4:	1009883a 	mov	r4,r2
 80033c8:	80046f40 	call	80046f4 <xQueueGenericSend>

			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 80033cc:	01000104 	movi	r4,4
 80033d0:	8003f080 	call	8003f08 <pvPortMalloc>
 80033d4:	1007883a 	mov	r3,r2
 80033d8:	e0bffe17 	ldw	r2,-8(fp)
 80033dc:	10c00115 	stw	r3,4(r2)
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 80033e0:	e0bffe17 	ldw	r2,-8(fp)
 80033e4:	10800117 	ldw	r2,4(r2)
 80033e8:	00c3ffc4 	movi	r3,4095
 80033ec:	10c00015 	stw	r3,0(r2)
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 80033f0:	e0bffe17 	ldw	r2,-8(fp)
 80033f4:	e0fffc17 	ldw	r3,-16(fp)
 80033f8:	10c00215 	stw	r3,8(r2)

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 80033fc:	d8000115 	stw	zero,4(sp)
 8003400:	e0bfff17 	ldw	r2,-4(fp)
 8003404:	d8800015 	stw	r2,0(sp)
 8003408:	e1fffe17 	ldw	r7,-8(fp)
 800340c:	01810004 	movi	r6,1024
 8003410:	014200b4 	movhi	r5,2050
 8003414:	2967de04 	addi	r5,r5,-24712
 8003418:	01020034 	movhi	r4,2048
 800341c:	210d1904 	addi	r4,r4,13412
 8003420:	80056e80 	call	80056e8 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8003424:	d8000115 	stw	zero,4(sp)
 8003428:	e0bfff17 	ldw	r2,-4(fp)
 800342c:	d8800015 	stw	r2,0(sp)
 8003430:	e1fffe17 	ldw	r7,-8(fp)
 8003434:	01810004 	movi	r6,1024
 8003438:	014200b4 	movhi	r5,2050
 800343c:	2967e004 	addi	r5,r5,-24704
 8003440:	01020034 	movhi	r4,2048
 8003444:	210d1904 	addi	r4,r4,13412
 8003448:	80056e80 	call	80056e8 <xTaskCreate>
			be removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
			defined or is defined to be less than 1. */
			vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
		}
	}
}
 800344c:	0001883a 	nop
 8003450:	e037883a 	mov	sp,fp
 8003454:	dfc00117 	ldw	ra,4(sp)
 8003458:	df000017 	ldw	fp,0(sp)
 800345c:	dec00204 	addi	sp,sp,8
 8003460:	f800283a 	ret

08003464 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
 8003464:	defff804 	addi	sp,sp,-32
 8003468:	dfc00715 	stw	ra,28(sp)
 800346c:	df000615 	stw	fp,24(sp)
 8003470:	df000604 	addi	fp,sp,24
 8003474:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 8003478:	e03ffb0d 	sth	zero,-20(fp)

	/* See which check variable to use.  sNextCheckVariable is not semaphore
	protected! */
	portENTER_CRITICAL();
 800347c:	800731c0 	call	800731c <vTaskEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 8003480:	d0a8910b 	ldhu	r2,-23996(gp)
 8003484:	e0bffb8d 	sth	r2,-18(fp)
		sNextCheckVariable++;
 8003488:	d0a8910b 	ldhu	r2,-23996(gp)
 800348c:	10800044 	addi	r2,r2,1
 8003490:	d0a8910d 	sth	r2,-23996(gp)
	portEXIT_CRITICAL();
 8003494:	80073700 	call	8007370 <vTaskExitCritical>

	/* A structure is passed in as the parameter.  This contains the shared
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 8003498:	e0bfff17 	ldw	r2,-4(fp)
 800349c:	e0bffc15 	stw	r2,-16(fp)
	pulSharedVariable = pxParameters->pulSharedVariable;
 80034a0:	e0bffc17 	ldw	r2,-16(fp)
 80034a4:	10800117 	ldw	r2,4(r2)
 80034a8:	e0bffd15 	stw	r2,-12(fp)

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 80034ac:	e0bffc17 	ldw	r2,-16(fp)
 80034b0:	10800217 	ldw	r2,8(r2)
 80034b4:	10000326 	beq	r2,zero,80034c4 <prvSemaphoreTest+0x60>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 80034b8:	0083ffc4 	movi	r2,4095
 80034bc:	e0bffe15 	stw	r2,-8(fp)
 80034c0:	00000206 	br	80034cc <prvSemaphoreTest+0x68>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 80034c4:	00803fc4 	movi	r2,255
 80034c8:	e0bffe15 	stw	r2,-8(fp)
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 80034cc:	e0bffc17 	ldw	r2,-16(fp)
 80034d0:	10c00017 	ldw	r3,0(r2)
 80034d4:	e0bffc17 	ldw	r2,-16(fp)
 80034d8:	10800217 	ldw	r2,8(r2)
 80034dc:	100b883a 	mov	r5,r2
 80034e0:	1809883a 	mov	r4,r3
 80034e4:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 80034e8:	10800058 	cmpnei	r2,r2,1
 80034ec:	1000391e 	bne	r2,zero,80035d4 <prvSemaphoreTest+0x170>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 80034f0:	e0bffd17 	ldw	r2,-12(fp)
 80034f4:	10c00017 	ldw	r3,0(r2)
 80034f8:	e0bffe17 	ldw	r2,-8(fp)
 80034fc:	18800226 	beq	r3,r2,8003508 <prvSemaphoreTest+0xa4>
			{
				sError = pdTRUE;
 8003500:	00800044 	movi	r2,1
 8003504:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8003508:	e03ffa15 	stw	zero,-24(fp)
 800350c:	00000c06 	br	8003540 <prvSemaphoreTest+0xdc>
			{
				*pulSharedVariable = ulCounter;
 8003510:	e0bffd17 	ldw	r2,-12(fp)
 8003514:	e0fffa17 	ldw	r3,-24(fp)
 8003518:	10c00015 	stw	r3,0(r2)
				if( *pulSharedVariable != ulCounter )
 800351c:	e0bffd17 	ldw	r2,-12(fp)
 8003520:	10c00017 	ldw	r3,0(r2)
 8003524:	e0bffa17 	ldw	r2,-24(fp)
 8003528:	18800226 	beq	r3,r2,8003534 <prvSemaphoreTest+0xd0>
				{
					sError = pdTRUE;
 800352c:	00800044 	movi	r2,1
 8003530:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8003534:	e0bffa17 	ldw	r2,-24(fp)
 8003538:	10800044 	addi	r2,r2,1
 800353c:	e0bffa15 	stw	r2,-24(fp)
 8003540:	e0fffe17 	ldw	r3,-8(fp)
 8003544:	e0bffa17 	ldw	r2,-24(fp)
 8003548:	18bff12e 	bgeu	r3,r2,8003510 <prvSemaphoreTest+0xac>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 800354c:	e0bffc17 	ldw	r2,-16(fp)
 8003550:	10800017 	ldw	r2,0(r2)
 8003554:	000f883a 	mov	r7,zero
 8003558:	000d883a 	mov	r6,zero
 800355c:	000b883a 	mov	r5,zero
 8003560:	1009883a 	mov	r4,r2
 8003564:	80046f40 	call	80046f4 <xQueueGenericSend>
 8003568:	1000021e 	bne	r2,zero,8003574 <prvSemaphoreTest+0x110>
			{
				sError = pdTRUE;
 800356c:	00800044 	movi	r2,1
 8003570:	e0bffb0d 	sth	r2,-20(fp)
			}

			if( sError == pdFALSE )
 8003574:	e0bffb0f 	ldh	r2,-20(fp)
 8003578:	10000e1e 	bne	r2,zero,80035b4 <prvSemaphoreTest+0x150>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 800357c:	e0bffb8f 	ldh	r2,-18(fp)
 8003580:	10800108 	cmpgei	r2,r2,4
 8003584:	10000b1e 	bne	r2,zero,80035b4 <prvSemaphoreTest+0x150>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 8003588:	e0bffb8f 	ldh	r2,-18(fp)
 800358c:	1089883a 	add	r4,r2,r2
 8003590:	d0e88f04 	addi	r3,gp,-24004
 8003594:	20c7883a 	add	r3,r4,r3
 8003598:	18c0000b 	ldhu	r3,0(r3)
 800359c:	18c00044 	addi	r3,r3,1
 80035a0:	1809883a 	mov	r4,r3
 80035a4:	1087883a 	add	r3,r2,r2
 80035a8:	d0a88f04 	addi	r2,gp,-24004
 80035ac:	1885883a 	add	r2,r3,r2
 80035b0:	1100000d 	sth	r4,0(r2)
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 80035b4:	e0bffc17 	ldw	r2,-16(fp)
 80035b8:	10800217 	ldw	r2,8(r2)
 80035bc:	01400284 	movi	r5,10
 80035c0:	1009883a 	mov	r4,r2
 80035c4:	80086340 	call	8008634 <__mulsi3>
 80035c8:	1009883a 	mov	r4,r2
 80035cc:	8005c940 	call	8005c94 <vTaskDelay>
 80035d0:	003fbe06 	br	80034cc <prvSemaphoreTest+0x68>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 80035d4:	e0bffc17 	ldw	r2,-16(fp)
 80035d8:	10800217 	ldw	r2,8(r2)
 80035dc:	103fbb1e 	bne	r2,zero,80034cc <prvSemaphoreTest+0x68>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 80035e0:	003b683a 	trap	0
			}
		}
	}
 80035e4:	003fb906 	br	80034cc <prvSemaphoreTest+0x68>

080035e8 <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
 80035e8:	defffd04 	addi	sp,sp,-12
 80035ec:	df000215 	stw	fp,8(sp)
 80035f0:	df000204 	addi	fp,sp,8
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
 80035f4:	00800044 	movi	r2,1
 80035f8:	e0bfff15 	stw	r2,-4(fp)

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 80035fc:	e03ffe15 	stw	zero,-8(fp)
 8003600:	00001f06 	br	8003680 <xAreSemaphoreTasksStillRunning+0x98>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 8003604:	e0bffe17 	ldw	r2,-8(fp)
 8003608:	1087883a 	add	r3,r2,r2
 800360c:	d0a89184 	addi	r2,gp,-23994
 8003610:	1885883a 	add	r2,r3,r2
 8003614:	1100000b 	ldhu	r4,0(r2)
 8003618:	e0bffe17 	ldw	r2,-8(fp)
 800361c:	1087883a 	add	r3,r2,r2
 8003620:	d0a88f04 	addi	r2,gp,-24004
 8003624:	1885883a 	add	r2,r3,r2
 8003628:	1080000b 	ldhu	r2,0(r2)
 800362c:	20ffffcc 	andi	r3,r4,65535
 8003630:	18e0001c 	xori	r3,r3,32768
 8003634:	18e00004 	addi	r3,r3,-32768
 8003638:	10bfffcc 	andi	r2,r2,65535
 800363c:	10a0001c 	xori	r2,r2,32768
 8003640:	10a00004 	addi	r2,r2,-32768
 8003644:	1880011e 	bne	r3,r2,800364c <xAreSemaphoreTasksStillRunning+0x64>
		{
			xReturn = pdFALSE;
 8003648:	e03fff15 	stw	zero,-4(fp)
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 800364c:	e0bffe17 	ldw	r2,-8(fp)
 8003650:	1087883a 	add	r3,r2,r2
 8003654:	d0a88f04 	addi	r2,gp,-24004
 8003658:	1885883a 	add	r2,r3,r2
 800365c:	10c0000b 	ldhu	r3,0(r2)
 8003660:	e0bffe17 	ldw	r2,-8(fp)
 8003664:	1089883a 	add	r4,r2,r2
 8003668:	d0a89184 	addi	r2,gp,-23994
 800366c:	2085883a 	add	r2,r4,r2
 8003670:	10c0000d 	sth	r3,0(r2)
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 8003674:	e0bffe17 	ldw	r2,-8(fp)
 8003678:	10800044 	addi	r2,r2,1
 800367c:	e0bffe15 	stw	r2,-8(fp)
 8003680:	e0bffe17 	ldw	r2,-8(fp)
 8003684:	10800110 	cmplti	r2,r2,4
 8003688:	103fde1e 	bne	r2,zero,8003604 <xAreSemaphoreTasksStillRunning+0x1c>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
 800368c:	e0bfff17 	ldw	r2,-4(fp)
}
 8003690:	e037883a 	mov	sp,fp
 8003694:	df000017 	ldw	fp,0(sp)
 8003698:	dec00104 	addi	sp,sp,4
 800369c:	f800283a 	ret

080036a0 <vParTestInitialise>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestInitialise(void) {
 80036a0:	deffff04 	addi	sp,sp,-4
 80036a4:	df000015 	stw	fp,0(sp)
 80036a8:	d839883a 	mov	fp,sp
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(LED_PIO_BASE, 0xFFFFFFFF);
 80036ac:	00ffffc4 	movi	r3,-1
 80036b0:	00840034 	movhi	r2,4096
 80036b4:	10914104 	addi	r2,r2,17668
 80036b8:	10c00035 	stwio	r3,0(r2)
	ulLedStates = 0;
 80036bc:	d0289415 	stw	zero,-23984(gp)
}
 80036c0:	0001883a 	nop
 80036c4:	e037883a 	mov	sp,fp
 80036c8:	df000017 	ldw	fp,0(sp)
 80036cc:	dec00104 	addi	sp,sp,4
 80036d0:	f800283a 	ret

080036d4 <vParTestSetLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestSetLED(unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue) {
 80036d4:	defffc04 	addi	sp,sp,-16
 80036d8:	dfc00315 	stw	ra,12(sp)
 80036dc:	df000215 	stw	fp,8(sp)
 80036e0:	df000204 	addi	fp,sp,8
 80036e4:	e13ffe15 	stw	r4,-8(fp)
 80036e8:	e17fff15 	stw	r5,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 80036ec:	e0bffe17 	ldw	r2,-8(fp)
 80036f0:	10800228 	cmpgeui	r2,r2,8
 80036f4:	1000191e 	bne	r2,zero,800375c <vParTestSetLED+0x88>
		taskENTER_CRITICAL();
 80036f8:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			if (xValue > 0) {
 80036fc:	e0bfff17 	ldw	r2,-4(fp)
 8003700:	0080080e 	bge	zero,r2,8003724 <vParTestSetLED+0x50>
				ulLedStates |= 1 << uxLED;
 8003704:	00c00044 	movi	r3,1
 8003708:	e0bffe17 	ldw	r2,-8(fp)
 800370c:	1884983a 	sll	r2,r3,r2
 8003710:	1007883a 	mov	r3,r2
 8003714:	d0a89417 	ldw	r2,-23984(gp)
 8003718:	1884b03a 	or	r2,r3,r2
 800371c:	d0a89415 	stw	r2,-23984(gp)
 8003720:	00000806 	br	8003744 <vParTestSetLED+0x70>
			} else {
				ulLedStates &= ~(1 << uxLED);
 8003724:	00c00044 	movi	r3,1
 8003728:	e0bffe17 	ldw	r2,-8(fp)
 800372c:	1884983a 	sll	r2,r3,r2
 8003730:	0084303a 	nor	r2,zero,r2
 8003734:	1007883a 	mov	r3,r2
 8003738:	d0a89417 	ldw	r2,-23984(gp)
 800373c:	1884703a 	and	r2,r3,r2
 8003740:	d0a89415 	stw	r2,-23984(gp)
			}
			IOWR_ALT_UP_PARALLEL_PORT_DATA(LED_PIO_BASE, ulLedStates);
 8003744:	d0a89417 	ldw	r2,-23984(gp)
 8003748:	1007883a 	mov	r3,r2
 800374c:	00840034 	movhi	r2,4096
 8003750:	10914004 	addi	r2,r2,17664
 8003754:	10c00035 	stwio	r3,0(r2)
		}
		taskEXIT_CRITICAL();
 8003758:	80073700 	call	8007370 <vTaskExitCritical>
	}
}
 800375c:	0001883a 	nop
 8003760:	e037883a 	mov	sp,fp
 8003764:	dfc00117 	ldw	ra,4(sp)
 8003768:	df000017 	ldw	fp,0(sp)
 800376c:	dec00204 	addi	sp,sp,8
 8003770:	f800283a 	ret

08003774 <vParTestToggleLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestToggleLED(unsigned portBASE_TYPE uxLED) {
 8003774:	defffd04 	addi	sp,sp,-12
 8003778:	dfc00215 	stw	ra,8(sp)
 800377c:	df000115 	stw	fp,4(sp)
 8003780:	df000104 	addi	fp,sp,4
 8003784:	e13fff15 	stw	r4,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 8003788:	e0bfff17 	ldw	r2,-4(fp)
 800378c:	10800228 	cmpgeui	r2,r2,8
 8003790:	10000d1e 	bne	r2,zero,80037c8 <vParTestToggleLED+0x54>
		taskENTER_CRITICAL();
 8003794:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			vParTestSetLED(uxLED, !(ulLedStates & (1 << uxLED)));
 8003798:	00c00044 	movi	r3,1
 800379c:	e0bfff17 	ldw	r2,-4(fp)
 80037a0:	1884983a 	sll	r2,r3,r2
 80037a4:	1007883a 	mov	r3,r2
 80037a8:	d0a89417 	ldw	r2,-23984(gp)
 80037ac:	1884703a 	and	r2,r3,r2
 80037b0:	1005003a 	cmpeq	r2,r2,zero
 80037b4:	10803fcc 	andi	r2,r2,255
 80037b8:	100b883a 	mov	r5,r2
 80037bc:	e13fff17 	ldw	r4,-4(fp)
 80037c0:	80036d40 	call	80036d4 <vParTestSetLED>
		}
		taskEXIT_CRITICAL();
 80037c4:	80073700 	call	8007370 <vTaskExitCritical>
	}
}
 80037c8:	0001883a 	nop
 80037cc:	e037883a 	mov	sp,fp
 80037d0:	dfc00117 	ldw	ra,4(sp)
 80037d4:	df000017 	ldw	fp,0(sp)
 80037d8:	dec00204 	addi	sp,sp,8
 80037dc:	f800283a 	ret

080037e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037e0:	defffe04 	addi	sp,sp,-8
 80037e4:	df000115 	stw	fp,4(sp)
 80037e8:	df000104 	addi	fp,sp,4
 80037ec:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f0:	e0bfff17 	ldw	r2,-4(fp)
 80037f4:	10c00204 	addi	r3,r2,8
 80037f8:	e0bfff17 	ldw	r2,-4(fp)
 80037fc:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003800:	e0bfff17 	ldw	r2,-4(fp)
 8003804:	00ffffc4 	movi	r3,-1
 8003808:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380c:	e0bfff17 	ldw	r2,-4(fp)
 8003810:	10c00204 	addi	r3,r2,8
 8003814:	e0bfff17 	ldw	r2,-4(fp)
 8003818:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381c:	e0bfff17 	ldw	r2,-4(fp)
 8003820:	10c00204 	addi	r3,r2,8
 8003824:	e0bfff17 	ldw	r2,-4(fp)
 8003828:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800382c:	e0bfff17 	ldw	r2,-4(fp)
 8003830:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003834:	0001883a 	nop
 8003838:	e037883a 	mov	sp,fp
 800383c:	df000017 	ldw	fp,0(sp)
 8003840:	dec00104 	addi	sp,sp,4
 8003844:	f800283a 	ret

08003848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003848:	defffe04 	addi	sp,sp,-8
 800384c:	df000115 	stw	fp,4(sp)
 8003850:	df000104 	addi	fp,sp,4
 8003854:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003858:	e0bfff17 	ldw	r2,-4(fp)
 800385c:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003860:	0001883a 	nop
 8003864:	e037883a 	mov	sp,fp
 8003868:	df000017 	ldw	fp,0(sp)
 800386c:	dec00104 	addi	sp,sp,4
 8003870:	f800283a 	ret

08003874 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003874:	defffc04 	addi	sp,sp,-16
 8003878:	df000315 	stw	fp,12(sp)
 800387c:	df000304 	addi	fp,sp,12
 8003880:	e13ffe15 	stw	r4,-8(fp)
 8003884:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 8003888:	e0bffe17 	ldw	r2,-8(fp)
 800388c:	10800117 	ldw	r2,4(r2)
 8003890:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003894:	e0bfff17 	ldw	r2,-4(fp)
 8003898:	e0fffd17 	ldw	r3,-12(fp)
 800389c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038a0:	e0bffd17 	ldw	r2,-12(fp)
 80038a4:	10c00217 	ldw	r3,8(r2)
 80038a8:	e0bfff17 	ldw	r2,-4(fp)
 80038ac:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038b0:	e0bffd17 	ldw	r2,-12(fp)
 80038b4:	10800217 	ldw	r2,8(r2)
 80038b8:	e0ffff17 	ldw	r3,-4(fp)
 80038bc:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 80038c0:	e0bffd17 	ldw	r2,-12(fp)
 80038c4:	e0ffff17 	ldw	r3,-4(fp)
 80038c8:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038cc:	e0bfff17 	ldw	r2,-4(fp)
 80038d0:	e0fffe17 	ldw	r3,-8(fp)
 80038d4:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 80038d8:	e0bffe17 	ldw	r2,-8(fp)
 80038dc:	10800017 	ldw	r2,0(r2)
 80038e0:	10c00044 	addi	r3,r2,1
 80038e4:	e0bffe17 	ldw	r2,-8(fp)
 80038e8:	10c00015 	stw	r3,0(r2)
}
 80038ec:	0001883a 	nop
 80038f0:	e037883a 	mov	sp,fp
 80038f4:	df000017 	ldw	fp,0(sp)
 80038f8:	dec00104 	addi	sp,sp,4
 80038fc:	f800283a 	ret

08003900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003900:	defffb04 	addi	sp,sp,-20
 8003904:	df000415 	stw	fp,16(sp)
 8003908:	df000404 	addi	fp,sp,16
 800390c:	e13ffe15 	stw	r4,-8(fp)
 8003910:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003914:	e0bfff17 	ldw	r2,-4(fp)
 8003918:	10800017 	ldw	r2,0(r2)
 800391c:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003920:	e0bffd17 	ldw	r2,-12(fp)
 8003924:	10bfffd8 	cmpnei	r2,r2,-1
 8003928:	1000041e 	bne	r2,zero,800393c <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800392c:	e0bffe17 	ldw	r2,-8(fp)
 8003930:	10800417 	ldw	r2,16(r2)
 8003934:	e0bffc15 	stw	r2,-16(fp)
 8003938:	00000c06 	br	800396c <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800393c:	e0bffe17 	ldw	r2,-8(fp)
 8003940:	10800204 	addi	r2,r2,8
 8003944:	e0bffc15 	stw	r2,-16(fp)
 8003948:	00000306 	br	8003958 <vListInsert+0x58>
 800394c:	e0bffc17 	ldw	r2,-16(fp)
 8003950:	10800117 	ldw	r2,4(r2)
 8003954:	e0bffc15 	stw	r2,-16(fp)
 8003958:	e0bffc17 	ldw	r2,-16(fp)
 800395c:	10800117 	ldw	r2,4(r2)
 8003960:	10800017 	ldw	r2,0(r2)
 8003964:	e0fffd17 	ldw	r3,-12(fp)
 8003968:	18bff82e 	bgeu	r3,r2,800394c <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800396c:	e0bffc17 	ldw	r2,-16(fp)
 8003970:	10c00117 	ldw	r3,4(r2)
 8003974:	e0bfff17 	ldw	r2,-4(fp)
 8003978:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800397c:	e0bfff17 	ldw	r2,-4(fp)
 8003980:	10800117 	ldw	r2,4(r2)
 8003984:	e0ffff17 	ldw	r3,-4(fp)
 8003988:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 800398c:	e0bfff17 	ldw	r2,-4(fp)
 8003990:	e0fffc17 	ldw	r3,-16(fp)
 8003994:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 8003998:	e0bffc17 	ldw	r2,-16(fp)
 800399c:	e0ffff17 	ldw	r3,-4(fp)
 80039a0:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039a4:	e0bfff17 	ldw	r2,-4(fp)
 80039a8:	e0fffe17 	ldw	r3,-8(fp)
 80039ac:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 80039b0:	e0bffe17 	ldw	r2,-8(fp)
 80039b4:	10800017 	ldw	r2,0(r2)
 80039b8:	10c00044 	addi	r3,r2,1
 80039bc:	e0bffe17 	ldw	r2,-8(fp)
 80039c0:	10c00015 	stw	r3,0(r2)
}
 80039c4:	0001883a 	nop
 80039c8:	e037883a 	mov	sp,fp
 80039cc:	df000017 	ldw	fp,0(sp)
 80039d0:	dec00104 	addi	sp,sp,4
 80039d4:	f800283a 	ret

080039d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039d8:	defffd04 	addi	sp,sp,-12
 80039dc:	df000215 	stw	fp,8(sp)
 80039e0:	df000204 	addi	fp,sp,8
 80039e4:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039e8:	e0bfff17 	ldw	r2,-4(fp)
 80039ec:	10800417 	ldw	r2,16(r2)
 80039f0:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039f4:	e0bfff17 	ldw	r2,-4(fp)
 80039f8:	10800117 	ldw	r2,4(r2)
 80039fc:	e0ffff17 	ldw	r3,-4(fp)
 8003a00:	18c00217 	ldw	r3,8(r3)
 8003a04:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a08:	e0bfff17 	ldw	r2,-4(fp)
 8003a0c:	10800217 	ldw	r2,8(r2)
 8003a10:	e0ffff17 	ldw	r3,-4(fp)
 8003a14:	18c00117 	ldw	r3,4(r3)
 8003a18:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a1c:	e0bffe17 	ldw	r2,-8(fp)
 8003a20:	10c00117 	ldw	r3,4(r2)
 8003a24:	e0bfff17 	ldw	r2,-4(fp)
 8003a28:	1880041e 	bne	r3,r2,8003a3c <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a2c:	e0bfff17 	ldw	r2,-4(fp)
 8003a30:	10c00217 	ldw	r3,8(r2)
 8003a34:	e0bffe17 	ldw	r2,-8(fp)
 8003a38:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a3c:	e0bfff17 	ldw	r2,-4(fp)
 8003a40:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 8003a44:	e0bffe17 	ldw	r2,-8(fp)
 8003a48:	10800017 	ldw	r2,0(r2)
 8003a4c:	10ffffc4 	addi	r3,r2,-1
 8003a50:	e0bffe17 	ldw	r2,-8(fp)
 8003a54:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 8003a58:	e0bffe17 	ldw	r2,-8(fp)
 8003a5c:	10800017 	ldw	r2,0(r2)
}
 8003a60:	e037883a 	mov	sp,fp
 8003a64:	df000017 	ldw	fp,0(sp)
 8003a68:	dec00104 	addi	sp,sp,4
 8003a6c:	f800283a 	ret

08003a70 <prvReadGp>:
#else
void vPortSysTickHandler( void * context, alt_u32 id );
#endif
/*-----------------------------------------------------------*/

void prvReadGp(unsigned long *ulValue) {
 8003a70:	defffe04 	addi	sp,sp,-8
 8003a74:	df000115 	stw	fp,4(sp)
 8003a78:	df000104 	addi	fp,sp,4
 8003a7c:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (r4) " );
 8003a80:	26800015 	stw	gp,0(r4)
}
 8003a84:	0001883a 	nop
 8003a88:	e037883a 	mov	sp,fp
 8003a8c:	df000017 	ldw	fp,0(sp)
 8003a90:	dec00104 	addi	sp,sp,4
 8003a94:	f800283a 	ret

08003a98 <pxPortInitialiseStack>:
 **     @param
 **
 */
/* ===================================================================*/
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
pdTASK_CODE pxCode, void *pvParameters) {
 8003a98:	defff904 	addi	sp,sp,-28
 8003a9c:	dfc00615 	stw	ra,24(sp)
 8003aa0:	df000515 	stw	fp,20(sp)
 8003aa4:	df000504 	addi	fp,sp,20
 8003aa8:	e13ffd15 	stw	r4,-12(fp)
 8003aac:	e17ffe15 	stw	r5,-8(fp)
 8003ab0:	e1bfff15 	stw	r6,-4(fp)
	portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
 8003ab4:	e0bffd17 	ldw	r2,-12(fp)
 8003ab8:	10bfff04 	addi	r2,r2,-4
 8003abc:	e0bffb15 	stw	r2,-20(fp)
	portSTACK_TYPE xGlobalPointer;

	prvReadGp(&xGlobalPointer);
 8003ac0:	e0bffc04 	addi	r2,fp,-16
 8003ac4:	1009883a 	mov	r4,r2
 8003ac8:	8003a700 	call	8003a70 <prvReadGp>

	/* End of stack marker. */
	*pxTopOfStack = 0xdeadbeef;
 8003acc:	e0fffd17 	ldw	r3,-12(fp)
 8003ad0:	00b7abb4 	movhi	r2,57006
 8003ad4:	10afbbc4 	addi	r2,r2,-16657
 8003ad8:	18800015 	stw	r2,0(r3)
	pxTopOfStack--;
 8003adc:	e0bffd17 	ldw	r2,-12(fp)
 8003ae0:	10bfff04 	addi	r2,r2,-4
 8003ae4:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
 8003ae8:	e0fffb17 	ldw	r3,-20(fp)
 8003aec:	e0bffd17 	ldw	r2,-12(fp)
 8003af0:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 8003af4:	e0bffd17 	ldw	r2,-12(fp)
 8003af8:	10bfff04 	addi	r2,r2,-4
 8003afc:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = xGlobalPointer;
 8003b00:	e0fffc17 	ldw	r3,-16(fp)
 8003b04:	e0bffd17 	ldw	r2,-12(fp)
 8003b08:	10c00015 	stw	r3,0(r2)

	/* Space for R23 to R16. */
	pxTopOfStack -= 9;
 8003b0c:	e0bffd17 	ldw	r2,-12(fp)
 8003b10:	10bff704 	addi	r2,r2,-36
 8003b14:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;
 8003b18:	e0fffe17 	ldw	r3,-8(fp)
 8003b1c:	e0bffd17 	ldw	r2,-12(fp)
 8003b20:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 8003b24:	e0bffd17 	ldw	r2,-12(fp)
 8003b28:	10bfff04 	addi	r2,r2,-4
 8003b2c:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = portINITIAL_ESTATUS;
 8003b30:	e0bffd17 	ldw	r2,-12(fp)
 8003b34:	00c00044 	movi	r3,1
 8003b38:	10c00015 	stw	r3,0(r2)

	/* Space for R15 to R5. */
	pxTopOfStack -= 12;
 8003b3c:	e0bffd17 	ldw	r2,-12(fp)
 8003b40:	10bff404 	addi	r2,r2,-48
 8003b44:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
 8003b48:	e0ffff17 	ldw	r3,-4(fp)
 8003b4c:	e0bffd17 	ldw	r2,-12(fp)
 8003b50:	10c00015 	stw	r3,0(r2)

	/* Space for R3 to R1, muldiv and RA. */
	pxTopOfStack -= 5;
 8003b54:	e0bffd17 	ldw	r2,-12(fp)
 8003b58:	10bffb04 	addi	r2,r2,-20
 8003b5c:	e0bffd15 	stw	r2,-12(fp)

	return pxTopOfStack;
 8003b60:	e0bffd17 	ldw	r2,-12(fp)
}
 8003b64:	e037883a 	mov	sp,fp
 8003b68:	dfc00117 	ldw	ra,4(sp)
 8003b6c:	df000017 	ldw	fp,0(sp)
 8003b70:	dec00204 	addi	sp,sp,8
 8003b74:	f800283a 	ret

08003b78 <xPortStartScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
portBASE_TYPE xPortStartScheduler(void) {
 8003b78:	defffe04 	addi	sp,sp,-8
 8003b7c:	dfc00115 	stw	ra,4(sp)
 8003b80:	df000015 	stw	fp,0(sp)
 8003b84:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	prvSetupTimerInterrupt();
 8003b88:	8003bd00 	call	8003bd0 <prvSetupTimerInterrupt>
 8003b8c:	00820034 	movhi	r2,2048

	/* Start the first task. */
	asm volatile ( " movia r2, restore_sp_from_pxCurrentTCB        \n"
 8003b90:	10803104 	addi	r2,r2,196
 8003b94:	1000683a 	jmp	r2
			" jmp r2                                          " );

	/* Should not get here! */
	return 0;
 8003b98:	0005883a 	mov	r2,zero
}
 8003b9c:	e037883a 	mov	sp,fp
 8003ba0:	dfc00117 	ldw	ra,4(sp)
 8003ba4:	df000017 	ldw	fp,0(sp)
 8003ba8:	dec00204 	addi	sp,sp,8
 8003bac:	f800283a 	ret

08003bb0 <vPortEndScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vPortEndScheduler(void) {
 8003bb0:	deffff04 	addi	sp,sp,-4
 8003bb4:	df000015 	stw	fp,0(sp)
 8003bb8:	d839883a 	mov	fp,sp

}
 8003bbc:	0001883a 	nop
 8003bc0:	e037883a 	mov	sp,fp
 8003bc4:	df000017 	ldw	fp,0(sp)
 8003bc8:	dec00104 	addi	sp,sp,4
 8003bcc:	f800283a 	ret

08003bd0 <prvSetupTimerInterrupt>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
 8003bd0:	defffd04 	addi	sp,sp,-12
 8003bd4:	dfc00215 	stw	ra,8(sp)
 8003bd8:	df000115 	stw	fp,4(sp)
 8003bdc:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
			== alt_ic_isr_register(SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID,
 8003be0:	d8000015 	stw	zero,0(sp)
 8003be4:	000f883a 	mov	r7,zero
 8003be8:	01820034 	movhi	r6,2048
 8003bec:	318f1d04 	addi	r6,r6,15476
 8003bf0:	01400044 	movi	r5,1
 8003bf4:	0009883a 	mov	r4,zero
 8003bf8:	8015f8c0 	call	8015f8c <alt_ic_isr_register>
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
 8003bfc:	10bffa98 	cmpnei	r2,r2,-22
 8003c00:	1000021e 	bne	r2,zero,8003c0c <prvSetupTimerInterrupt+0x3c>
#else
					if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
#endif
					{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 8003c04:	003da03a 	break	0
 8003c08:	00001006 	br	8003c4c <prvSetupTimerInterrupt+0x7c>
	} else {
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 8003c0c:	00c00204 	movi	r3,8
 8003c10:	00840034 	movhi	r2,4096
 8003c14:	10912904 	addi	r2,r2,17572
 8003c18:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
		IOWR_ALTERA_AVALON_TIMER_PERIODL(SYS_CLK_BASE,
 8003c1c:	00e1a814 	movui	r3,34464
 8003c20:	00840034 	movhi	r2,4096
 8003c24:	10912a04 	addi	r2,r2,17576
 8003c28:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(SYS_CLK_BASE,
 8003c2c:	00c00044 	movi	r3,1
 8003c30:	00840034 	movhi	r2,4096
 8003c34:	10912b04 	addi	r2,r2,17580
 8003c38:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 8003c3c:	00c001c4 	movi	r3,7
 8003c40:	00840034 	movhi	r2,4096
 8003c44:	10912904 	addi	r2,r2,17572
 8003c48:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 8003c4c:	00ffff84 	movi	r3,-2
 8003c50:	00840034 	movhi	r2,4096
 8003c54:	10912804 	addi	r2,r2,17568
 8003c58:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 8003c5c:	0001883a 	nop
 8003c60:	e037883a 	mov	sp,fp
 8003c64:	dfc00117 	ldw	ra,4(sp)
 8003c68:	df000017 	ldw	fp,0(sp)
 8003c6c:	dec00204 	addi	sp,sp,8
 8003c70:	f800283a 	ret

08003c74 <vPortSysTickHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void vPortSysTickHandler(void * context)
#else
void vPortSysTickHandler( void * context, alt_u32 id )
#endif
{
 8003c74:	defffd04 	addi	sp,sp,-12
 8003c78:	dfc00215 	stw	ra,8(sp)
 8003c7c:	df000115 	stw	fp,4(sp)
 8003c80:	df000104 	addi	fp,sp,4
 8003c84:	e13fff15 	stw	r4,-4(fp)
	/* Increment the Kernel Tick. */
	//vTaskIncrementTick();
	(void) xTaskIncrementTick();
 8003c88:	800659c0 	call	800659c <xTaskIncrementTick>

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
 8003c8c:	80067680 	call	8006768 <vTaskSwitchContext>
#endif

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 8003c90:	00ffff84 	movi	r3,-2
 8003c94:	00840034 	movhi	r2,4096
 8003c98:	10912804 	addi	r2,r2,17568
 8003c9c:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 8003ca0:	0001883a 	nop
 8003ca4:	e037883a 	mov	sp,fp
 8003ca8:	dfc00117 	ldw	ra,4(sp)
 8003cac:	df000017 	ldw	fp,0(sp)
 8003cb0:	dec00204 	addi	sp,sp,8
 8003cb4:	f800283a 	ret

08003cb8 <alt_irq_register>:
#ifndef ALT_ENHANCED_INTERRUPT_API_PRESENT
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
#else
int alt_irq_register(alt_u32 id, void* context, alt_isr_func handler)
#endif
{
 8003cb8:	defff104 	addi	sp,sp,-60
 8003cbc:	df000e15 	stw	fp,56(sp)
 8003cc0:	df000e04 	addi	fp,sp,56
 8003cc4:	e13ffd15 	stw	r4,-12(fp)
 8003cc8:	e17ffe15 	stw	r5,-8(fp)
 8003ccc:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;
 8003cd0:	00bffa84 	movi	r2,-22
 8003cd4:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 8003cd8:	e0bffd17 	ldw	r2,-12(fp)
 8003cdc:	10800828 	cmpgeui	r2,r2,32
 8003ce0:	10004c1e 	bne	r2,zero,8003e14 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003ce4:	0005303a 	rdctl	r2,status
 8003ce8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003cec:	e0fff617 	ldw	r3,-40(fp)
 8003cf0:	00bfff84 	movi	r2,-2
 8003cf4:	1884703a 	and	r2,r3,r2
 8003cf8:	1001703a 	wrctl	status,r2
  
  return context;
 8003cfc:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */

		status = alt_irq_disable_all();
 8003d00:	e0bff415 	stw	r2,-48(fp)

		alt_irq[id].handler = handler;
 8003d04:	008220b4 	movhi	r2,2178
 8003d08:	10bc4504 	addi	r2,r2,-3820
 8003d0c:	e0fffd17 	ldw	r3,-12(fp)
 8003d10:	180690fa 	slli	r3,r3,3
 8003d14:	10c5883a 	add	r2,r2,r3
 8003d18:	e0ffff17 	ldw	r3,-4(fp)
 8003d1c:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 8003d20:	008220b4 	movhi	r2,2178
 8003d24:	10bc4504 	addi	r2,r2,-3820
 8003d28:	e0fffd17 	ldw	r3,-12(fp)
 8003d2c:	180690fa 	slli	r3,r3,3
 8003d30:	10c5883a 	add	r2,r2,r3
 8003d34:	10800104 	addi	r2,r2,4
 8003d38:	e0fffe17 	ldw	r3,-8(fp)
 8003d3c:	10c00015 	stw	r3,0(r2)

		rc = (handler) ? alt_irq_enable(id) : alt_irq_disable(id);
 8003d40:	e0bfff17 	ldw	r2,-4(fp)
 8003d44:	10001926 	beq	r2,zero,8003dac <alt_irq_register+0xf4>
 8003d48:	e0bffd17 	ldw	r2,-12(fp)
 8003d4c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003d50:	0005303a 	rdctl	r2,status
 8003d54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003d58:	e0fff717 	ldw	r3,-36(fp)
 8003d5c:	00bfff84 	movi	r2,-2
 8003d60:	1884703a 	and	r2,r3,r2
 8003d64:	1001703a 	wrctl	status,r2
  
  return context;
 8003d68:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8003d6c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 8003d70:	00c00044 	movi	r3,1
 8003d74:	e0bff317 	ldw	r2,-52(fp)
 8003d78:	1884983a 	sll	r2,r3,r2
 8003d7c:	1007883a 	mov	r3,r2
 8003d80:	d0a8b717 	ldw	r2,-23844(gp)
 8003d84:	1884b03a 	or	r2,r3,r2
 8003d88:	d0a8b715 	stw	r2,-23844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8003d8c:	d0a8b717 	ldw	r2,-23844(gp)
 8003d90:	100170fa 	wrctl	ienable,r2
 8003d94:	e0bff817 	ldw	r2,-32(fp)
 8003d98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003d9c:	e0bff917 	ldw	r2,-28(fp)
 8003da0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8003da4:	0005883a 	mov	r2,zero
 8003da8:	00001906 	br	8003e10 <alt_irq_register+0x158>
 8003dac:	e0bffd17 	ldw	r2,-12(fp)
 8003db0:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003db4:	0005303a 	rdctl	r2,status
 8003db8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003dbc:	e0fffa17 	ldw	r3,-24(fp)
 8003dc0:	00bfff84 	movi	r2,-2
 8003dc4:	1884703a 	and	r2,r3,r2
 8003dc8:	1001703a 	wrctl	status,r2
  
  return context;
 8003dcc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8003dd0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8003dd4:	00c00044 	movi	r3,1
 8003dd8:	e0bff517 	ldw	r2,-44(fp)
 8003ddc:	1884983a 	sll	r2,r3,r2
 8003de0:	0084303a 	nor	r2,zero,r2
 8003de4:	1007883a 	mov	r3,r2
 8003de8:	d0a8b717 	ldw	r2,-23844(gp)
 8003dec:	1884703a 	and	r2,r3,r2
 8003df0:	d0a8b715 	stw	r2,-23844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8003df4:	d0a8b717 	ldw	r2,-23844(gp)
 8003df8:	100170fa 	wrctl	ienable,r2
 8003dfc:	e0bffb17 	ldw	r2,-20(fp)
 8003e00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003e04:	e0bffc17 	ldw	r2,-16(fp)
 8003e08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8003e0c:	0005883a 	mov	r2,zero
 8003e10:	e0bff215 	stw	r2,-56(fp)

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
 8003e14:	e0bff217 	ldw	r2,-56(fp)
}
 8003e18:	e037883a 	mov	sp,fp
 8003e1c:	df000017 	ldw	fp,0(sp)
 8003e20:	dec00104 	addi	sp,sp,4
 8003e24:	f800283a 	ret

08003e28 <alt_iic_isr_register>:
 * @param isr_context      Opaque pointer passed to ISR
 * @param flags
 * @return                 0 if successful, else error (-1)
 */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
		void *isr_context, void *flags) {
 8003e28:	defff604 	addi	sp,sp,-40
 8003e2c:	dfc00915 	stw	ra,36(sp)
 8003e30:	df000815 	stw	fp,32(sp)
 8003e34:	df000804 	addi	fp,sp,32
 8003e38:	e13ffc15 	stw	r4,-16(fp)
 8003e3c:	e17ffd15 	stw	r5,-12(fp)
 8003e40:	e1bffe15 	stw	r6,-8(fp)
 8003e44:	e1ffff15 	stw	r7,-4(fp)
	int rc = -EINVAL;
 8003e48:	00bffa84 	movi	r2,-22
 8003e4c:	e0bff815 	stw	r2,-32(fp)
	int id = irq; /* IRQ interpreted as the interrupt ID. */
 8003e50:	e0bffd17 	ldw	r2,-12(fp)
 8003e54:	e0bff915 	stw	r2,-28(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 8003e58:	e0bff917 	ldw	r2,-28(fp)
 8003e5c:	10800808 	cmpgei	r2,r2,32
 8003e60:	1000231e 	bne	r2,zero,8003ef0 <alt_iic_isr_register+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003e64:	0005303a 	rdctl	r2,status
 8003e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003e6c:	e0fffb17 	ldw	r3,-20(fp)
 8003e70:	00bfff84 	movi	r2,-2
 8003e74:	1884703a 	and	r2,r3,r2
 8003e78:	1001703a 	wrctl	status,r2
  
  return context;
 8003e7c:	e0bffb17 	ldw	r2,-20(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistant
		 * state.
		 */

		status = alt_irq_disable_all();
 8003e80:	e0bffa15 	stw	r2,-24(fp)

		alt_irq[id].handler = isr;
 8003e84:	008220b4 	movhi	r2,2178
 8003e88:	10bc4504 	addi	r2,r2,-3820
 8003e8c:	e0fff917 	ldw	r3,-28(fp)
 8003e90:	180690fa 	slli	r3,r3,3
 8003e94:	10c5883a 	add	r2,r2,r3
 8003e98:	e0fffe17 	ldw	r3,-8(fp)
 8003e9c:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = isr_context;
 8003ea0:	008220b4 	movhi	r2,2178
 8003ea4:	10bc4504 	addi	r2,r2,-3820
 8003ea8:	e0fff917 	ldw	r3,-28(fp)
 8003eac:	180690fa 	slli	r3,r3,3
 8003eb0:	10c5883a 	add	r2,r2,r3
 8003eb4:	10800104 	addi	r2,r2,4
 8003eb8:	e0ffff17 	ldw	r3,-4(fp)
 8003ebc:	10c00015 	stw	r3,0(r2)

		rc = (isr) ?
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8003ec0:	e0bffe17 	ldw	r2,-8(fp)
 8003ec4:	10000526 	beq	r2,zero,8003edc <alt_iic_isr_register+0xb4>
 8003ec8:	e0bff917 	ldw	r2,-28(fp)
 8003ecc:	100b883a 	mov	r5,r2
 8003ed0:	e13ffc17 	ldw	r4,-16(fp)
 8003ed4:	8015fdc0 	call	8015fdc <alt_ic_irq_enable>
 8003ed8:	00000406 	br	8003eec <alt_iic_isr_register+0xc4>
 8003edc:	e0bff917 	ldw	r2,-28(fp)
 8003ee0:	100b883a 	mov	r5,r2
 8003ee4:	e13ffc17 	ldw	r4,-16(fp)
 8003ee8:	80160640 	call	8016064 <alt_ic_irq_disable>
		status = alt_irq_disable_all();

		alt_irq[id].handler = isr;
		alt_irq[id].context = isr_context;

		rc = (isr) ?
 8003eec:	e0bff815 	stw	r2,-32(fp)
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);

		//  alt_irq_enable_all(status);
	}

	return rc;
 8003ef0:	e0bff817 	ldw	r2,-32(fp)
}
 8003ef4:	e037883a 	mov	sp,fp
 8003ef8:	dfc00117 	ldw	ra,4(sp)
 8003efc:	df000017 	ldw	fp,0(sp)
 8003f00:	dec00204 	addi	sp,sp,8
 8003f04:	f800283a 	ret

08003f08 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f08:	defff704 	addi	sp,sp,-36
 8003f0c:	dfc00815 	stw	ra,32(sp)
 8003f10:	df000715 	stw	fp,28(sp)
 8003f14:	df000704 	addi	fp,sp,28
 8003f18:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003f1c:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 8003f20:	80063580 	call	8006358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003f24:	d0a89917 	ldw	r2,-23964(gp)
 8003f28:	1000031e 	bne	r2,zero,8003f38 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 8003f2c:	80041e80 	call	80041e8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003f30:	00800044 	movi	r2,1
 8003f34:	d0a89915 	stw	r2,-23964(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8003f38:	e0bfff17 	ldw	r2,-4(fp)
 8003f3c:	10000d26 	beq	r2,zero,8003f74 <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8003f40:	00800204 	movi	r2,8
 8003f44:	10bfffcc 	andi	r2,r2,65535
 8003f48:	e0ffff17 	ldw	r3,-4(fp)
 8003f4c:	1885883a 	add	r2,r3,r2
 8003f50:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f54:	e0bfff17 	ldw	r2,-4(fp)
 8003f58:	108000cc 	andi	r2,r2,3
 8003f5c:	10000526 	beq	r2,zero,8003f74 <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f60:	e0ffff17 	ldw	r3,-4(fp)
 8003f64:	00bfff04 	movi	r2,-4
 8003f68:	1884703a 	and	r2,r3,r2
 8003f6c:	10800104 	addi	r2,r2,4
 8003f70:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8003f74:	e0bfff17 	ldw	r2,-4(fp)
 8003f78:	10005126 	beq	r2,zero,80040c0 <pvPortMalloc+0x1b8>
 8003f7c:	e0ffff17 	ldw	r3,-4(fp)
 8003f80:	00802034 	movhi	r2,128
 8003f84:	10bffec4 	addi	r2,r2,-5
 8003f88:	10c04d36 	bltu	r2,r3,80040c0 <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8003f8c:	d0a89504 	addi	r2,gp,-23980
 8003f90:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 8003f94:	d0a89517 	ldw	r2,-23980(gp)
 8003f98:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f9c:	00000506 	br	8003fb4 <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 8003fa0:	e0bff917 	ldw	r2,-28(fp)
 8003fa4:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 8003fa8:	e0bff917 	ldw	r2,-28(fp)
 8003fac:	10800017 	ldw	r2,0(r2)
 8003fb0:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb4:	e0bff917 	ldw	r2,-28(fp)
 8003fb8:	10c00117 	ldw	r3,4(r2)
 8003fbc:	e0bfff17 	ldw	r2,-4(fp)
 8003fc0:	1880032e 	bgeu	r3,r2,8003fd0 <pvPortMalloc+0xc8>
 8003fc4:	e0bff917 	ldw	r2,-28(fp)
 8003fc8:	10800017 	ldw	r2,0(r2)
 8003fcc:	103ff41e 	bne	r2,zero,8003fa0 <pvPortMalloc+0x98>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8003fd0:	e0fff917 	ldw	r3,-28(fp)
 8003fd4:	d0a89704 	addi	r2,gp,-23972
 8003fd8:	18803926 	beq	r3,r2,80040c0 <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003fdc:	e0bffa17 	ldw	r2,-24(fp)
 8003fe0:	10c00017 	ldw	r3,0(r2)
 8003fe4:	00800204 	movi	r2,8
 8003fe8:	10bfffcc 	andi	r2,r2,65535
 8003fec:	1885883a 	add	r2,r3,r2
 8003ff0:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ff4:	e0bff917 	ldw	r2,-28(fp)
 8003ff8:	10c00017 	ldw	r3,0(r2)
 8003ffc:	e0bffa17 	ldw	r2,-24(fp)
 8004000:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004004:	e0bff917 	ldw	r2,-28(fp)
 8004008:	10c00117 	ldw	r3,4(r2)
 800400c:	e0bfff17 	ldw	r2,-4(fp)
 8004010:	1887c83a 	sub	r3,r3,r2
 8004014:	00800204 	movi	r2,8
 8004018:	10bfffcc 	andi	r2,r2,65535
 800401c:	1085883a 	add	r2,r2,r2
 8004020:	10c0222e 	bgeu	r2,r3,80040ac <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004024:	e0fff917 	ldw	r3,-28(fp)
 8004028:	e0bfff17 	ldw	r2,-4(fp)
 800402c:	1885883a 	add	r2,r3,r2
 8004030:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004034:	e0bff917 	ldw	r2,-28(fp)
 8004038:	10c00117 	ldw	r3,4(r2)
 800403c:	e0bfff17 	ldw	r2,-4(fp)
 8004040:	1887c83a 	sub	r3,r3,r2
 8004044:	e0bffd17 	ldw	r2,-12(fp)
 8004048:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 800404c:	e0bff917 	ldw	r2,-28(fp)
 8004050:	e0ffff17 	ldw	r3,-4(fp)
 8004054:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8004058:	e0bffd17 	ldw	r2,-12(fp)
 800405c:	10800117 	ldw	r2,4(r2)
 8004060:	e0bffe15 	stw	r2,-8(fp)
 8004064:	d0a89504 	addi	r2,gp,-23980
 8004068:	e0bffc15 	stw	r2,-16(fp)
 800406c:	00000306 	br	800407c <pvPortMalloc+0x174>
 8004070:	e0bffc17 	ldw	r2,-16(fp)
 8004074:	10800017 	ldw	r2,0(r2)
 8004078:	e0bffc15 	stw	r2,-16(fp)
 800407c:	e0bffc17 	ldw	r2,-16(fp)
 8004080:	10800017 	ldw	r2,0(r2)
 8004084:	10c00117 	ldw	r3,4(r2)
 8004088:	e0bffe17 	ldw	r2,-8(fp)
 800408c:	18bff836 	bltu	r3,r2,8004070 <pvPortMalloc+0x168>
 8004090:	e0bffc17 	ldw	r2,-16(fp)
 8004094:	10c00017 	ldw	r3,0(r2)
 8004098:	e0bffd17 	ldw	r2,-12(fp)
 800409c:	10c00015 	stw	r3,0(r2)
 80040a0:	e0bffc17 	ldw	r2,-16(fp)
 80040a4:	e0fffd17 	ldw	r3,-12(fp)
 80040a8:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040ac:	d0e00317 	ldw	r3,-32756(gp)
 80040b0:	e0bff917 	ldw	r2,-28(fp)
 80040b4:	10800117 	ldw	r2,4(r2)
 80040b8:	1885c83a 	sub	r2,r3,r2
 80040bc:	d0a00315 	stw	r2,-32756(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040c0:	80063840 	call	8006384 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80040c4:	e0bffb17 	ldw	r2,-20(fp)
}
 80040c8:	e037883a 	mov	sp,fp
 80040cc:	dfc00117 	ldw	ra,4(sp)
 80040d0:	df000017 	ldw	fp,0(sp)
 80040d4:	dec00204 	addi	sp,sp,8
 80040d8:	f800283a 	ret

080040dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040dc:	defff904 	addi	sp,sp,-28
 80040e0:	dfc00615 	stw	ra,24(sp)
 80040e4:	df000515 	stw	fp,20(sp)
 80040e8:	df000504 	addi	fp,sp,20
 80040ec:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 80040f0:	e0bfff17 	ldw	r2,-4(fp)
 80040f4:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 80040f8:	e0bfff17 	ldw	r2,-4(fp)
 80040fc:	10002426 	beq	r2,zero,8004190 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8004100:	00800204 	movi	r2,8
 8004104:	10bfffcc 	andi	r2,r2,65535
 8004108:	0085c83a 	sub	r2,zero,r2
 800410c:	e0fffc17 	ldw	r3,-16(fp)
 8004110:	1885883a 	add	r2,r3,r2
 8004114:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8004118:	e0bffc17 	ldw	r2,-16(fp)
 800411c:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 8004120:	80063580 	call	8006358 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004124:	e0bffd17 	ldw	r2,-12(fp)
 8004128:	10800117 	ldw	r2,4(r2)
 800412c:	e0bffe15 	stw	r2,-8(fp)
 8004130:	d0a89504 	addi	r2,gp,-23980
 8004134:	e0bffb15 	stw	r2,-20(fp)
 8004138:	00000306 	br	8004148 <vPortFree+0x6c>
 800413c:	e0bffb17 	ldw	r2,-20(fp)
 8004140:	10800017 	ldw	r2,0(r2)
 8004144:	e0bffb15 	stw	r2,-20(fp)
 8004148:	e0bffb17 	ldw	r2,-20(fp)
 800414c:	10800017 	ldw	r2,0(r2)
 8004150:	10c00117 	ldw	r3,4(r2)
 8004154:	e0bffe17 	ldw	r2,-8(fp)
 8004158:	18bff836 	bltu	r3,r2,800413c <vPortFree+0x60>
 800415c:	e0bffb17 	ldw	r2,-20(fp)
 8004160:	10c00017 	ldw	r3,0(r2)
 8004164:	e0bffd17 	ldw	r2,-12(fp)
 8004168:	10c00015 	stw	r3,0(r2)
 800416c:	e0bffb17 	ldw	r2,-20(fp)
 8004170:	e0fffd17 	ldw	r3,-12(fp)
 8004174:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 8004178:	e0bffd17 	ldw	r2,-12(fp)
 800417c:	10c00117 	ldw	r3,4(r2)
 8004180:	d0a00317 	ldw	r2,-32756(gp)
 8004184:	1885883a 	add	r2,r3,r2
 8004188:	d0a00315 	stw	r2,-32756(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800418c:	80063840 	call	8006384 <xTaskResumeAll>
	}
}
 8004190:	0001883a 	nop
 8004194:	e037883a 	mov	sp,fp
 8004198:	dfc00117 	ldw	ra,4(sp)
 800419c:	df000017 	ldw	fp,0(sp)
 80041a0:	dec00204 	addi	sp,sp,8
 80041a4:	f800283a 	ret

080041a8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80041a8:	deffff04 	addi	sp,sp,-4
 80041ac:	df000015 	stw	fp,0(sp)
 80041b0:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 80041b4:	d0a00317 	ldw	r2,-32756(gp)
}
 80041b8:	e037883a 	mov	sp,fp
 80041bc:	df000017 	ldw	fp,0(sp)
 80041c0:	dec00104 	addi	sp,sp,4
 80041c4:	f800283a 	ret

080041c8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 80041c8:	deffff04 	addi	sp,sp,-4
 80041cc:	df000015 	stw	fp,0(sp)
 80041d0:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 80041d4:	0001883a 	nop
 80041d8:	e037883a 	mov	sp,fp
 80041dc:	df000017 	ldw	fp,0(sp)
 80041e0:	dec00104 	addi	sp,sp,4
 80041e4:	f800283a 	ret

080041e8 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041e8:	defffd04 	addi	sp,sp,-12
 80041ec:	df000215 	stw	fp,8(sp)
 80041f0:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80041f4:	008200b4 	movhi	r2,2050
 80041f8:	10ba0a04 	addi	r2,r2,-6104
 80041fc:	00ffff04 	movi	r3,-4
 8004200:	10c4703a 	and	r2,r2,r3
 8004204:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004208:	e0bffe17 	ldw	r2,-8(fp)
 800420c:	d0a89515 	stw	r2,-23980(gp)
	xStart.xBlockSize = ( size_t ) 0;
 8004210:	d0289615 	stw	zero,-23976(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8004214:	00802034 	movhi	r2,128
 8004218:	10bfff04 	addi	r2,r2,-4
 800421c:	d0a89815 	stw	r2,-23968(gp)
	xEnd.pxNextFreeBlock = NULL;
 8004220:	d0289715 	stw	zero,-23972(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004224:	e0bffe17 	ldw	r2,-8(fp)
 8004228:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800422c:	e0ffff17 	ldw	r3,-4(fp)
 8004230:	00802034 	movhi	r2,128
 8004234:	10bfff04 	addi	r2,r2,-4
 8004238:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800423c:	e0bfff17 	ldw	r2,-4(fp)
 8004240:	d0e89704 	addi	r3,gp,-23972
 8004244:	10c00015 	stw	r3,0(r2)
}
 8004248:	0001883a 	nop
 800424c:	e037883a 	mov	sp,fp
 8004250:	df000017 	ldw	fp,0(sp)
 8004254:	dec00104 	addi	sp,sp,4
 8004258:	f800283a 	ret

0800425c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800425c:	defffa04 	addi	sp,sp,-24
 8004260:	dfc00515 	stw	ra,20(sp)
 8004264:	df000415 	stw	fp,16(sp)
 8004268:	dc000315 	stw	r16,12(sp)
 800426c:	df000404 	addi	fp,sp,16
 8004270:	e13ffd15 	stw	r4,-12(fp)
 8004274:	e17ffe15 	stw	r5,-8(fp)
Queue_t * const pxQueue = xQueue;
 8004278:	e0bffd17 	ldw	r2,-12(fp)
 800427c:	e0bffc15 	stw	r2,-16(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8004280:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004284:	e0bffc17 	ldw	r2,-16(fp)
 8004288:	14000017 	ldw	r16,0(r2)
 800428c:	e0bffc17 	ldw	r2,-16(fp)
 8004290:	10c00f17 	ldw	r3,60(r2)
 8004294:	e0bffc17 	ldw	r2,-16(fp)
 8004298:	10801017 	ldw	r2,64(r2)
 800429c:	100b883a 	mov	r5,r2
 80042a0:	1809883a 	mov	r4,r3
 80042a4:	80086340 	call	8008634 <__mulsi3>
 80042a8:	8087883a 	add	r3,r16,r2
 80042ac:	e0bffc17 	ldw	r2,-16(fp)
 80042b0:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b4:	e0bffc17 	ldw	r2,-16(fp)
 80042b8:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042bc:	e0bffc17 	ldw	r2,-16(fp)
 80042c0:	10c00017 	ldw	r3,0(r2)
 80042c4:	e0bffc17 	ldw	r2,-16(fp)
 80042c8:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042cc:	e0bffc17 	ldw	r2,-16(fp)
 80042d0:	14000017 	ldw	r16,0(r2)
 80042d4:	e0bffc17 	ldw	r2,-16(fp)
 80042d8:	10800f17 	ldw	r2,60(r2)
 80042dc:	10ffffc4 	addi	r3,r2,-1
 80042e0:	e0bffc17 	ldw	r2,-16(fp)
 80042e4:	10801017 	ldw	r2,64(r2)
 80042e8:	100b883a 	mov	r5,r2
 80042ec:	1809883a 	mov	r4,r3
 80042f0:	80086340 	call	8008634 <__mulsi3>
 80042f4:	8087883a 	add	r3,r16,r2
 80042f8:	e0bffc17 	ldw	r2,-16(fp)
 80042fc:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 8004300:	e0bffc17 	ldw	r2,-16(fp)
 8004304:	00ffffc4 	movi	r3,-1
 8004308:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 800430c:	e0bffc17 	ldw	r2,-16(fp)
 8004310:	00ffffc4 	movi	r3,-1
 8004314:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 8004318:	e0bffe17 	ldw	r2,-8(fp)
 800431c:	10000a1e 	bne	r2,zero,8004348 <xQueueGenericReset+0xec>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004320:	e0bffc17 	ldw	r2,-16(fp)
 8004324:	10800417 	ldw	r2,16(r2)
 8004328:	10000f26 	beq	r2,zero,8004368 <xQueueGenericReset+0x10c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800432c:	e0bffc17 	ldw	r2,-16(fp)
 8004330:	10800404 	addi	r2,r2,16
 8004334:	1009883a 	mov	r4,r2
 8004338:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 800433c:	10000a26 	beq	r2,zero,8004368 <xQueueGenericReset+0x10c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004340:	003b683a 	trap	0
 8004344:	00000806 	br	8004368 <xQueueGenericReset+0x10c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004348:	e0bffc17 	ldw	r2,-16(fp)
 800434c:	10800404 	addi	r2,r2,16
 8004350:	1009883a 	mov	r4,r2
 8004354:	80037e00 	call	80037e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004358:	e0bffc17 	ldw	r2,-16(fp)
 800435c:	10800904 	addi	r2,r2,36
 8004360:	1009883a 	mov	r4,r2
 8004364:	80037e00 	call	80037e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004368:	80073700 	call	8007370 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800436c:	00800044 	movi	r2,1
}
 8004370:	e6ffff04 	addi	sp,fp,-4
 8004374:	dfc00217 	ldw	ra,8(sp)
 8004378:	df000117 	ldw	fp,4(sp)
 800437c:	dc000017 	ldw	r16,0(sp)
 8004380:	dec00304 	addi	sp,sp,12
 8004384:	f800283a 	ret

08004388 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004388:	defff704 	addi	sp,sp,-36
 800438c:	dfc00815 	stw	ra,32(sp)
 8004390:	df000715 	stw	fp,28(sp)
 8004394:	df000704 	addi	fp,sp,28
 8004398:	e13ffd15 	stw	r4,-12(fp)
 800439c:	e17ffe15 	stw	r5,-8(fp)
 80043a0:	3005883a 	mov	r2,r6
 80043a4:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80043a8:	e0bffe17 	ldw	r2,-8(fp)
 80043ac:	1000021e 	bne	r2,zero,80043b8 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80043b0:	e03ffa15 	stw	zero,-24(fp)
 80043b4:	00000406 	br	80043c8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b8:	e17ffe17 	ldw	r5,-8(fp)
 80043bc:	e13ffd17 	ldw	r4,-12(fp)
 80043c0:	80086340 	call	8008634 <__mulsi3>
 80043c4:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043c8:	e0bffa17 	ldw	r2,-24(fp)
 80043cc:	10801204 	addi	r2,r2,72
 80043d0:	1009883a 	mov	r4,r2
 80043d4:	8003f080 	call	8003f08 <pvPortMalloc>
 80043d8:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 80043dc:	e0bffb17 	ldw	r2,-20(fp)
 80043e0:	10000d26 	beq	r2,zero,8004418 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043e4:	e0bffb17 	ldw	r2,-20(fp)
 80043e8:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ec:	e0bffc17 	ldw	r2,-16(fp)
 80043f0:	10801204 	addi	r2,r2,72
 80043f4:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f8:	e0ffff03 	ldbu	r3,-4(fp)
 80043fc:	e0bffb17 	ldw	r2,-20(fp)
 8004400:	d8800015 	stw	r2,0(sp)
 8004404:	180f883a 	mov	r7,r3
 8004408:	e1bffc17 	ldw	r6,-16(fp)
 800440c:	e17ffe17 	ldw	r5,-8(fp)
 8004410:	e13ffd17 	ldw	r4,-12(fp)
 8004414:	80044300 	call	8004430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004418:	e0bffb17 	ldw	r2,-20(fp)
	}
 800441c:	e037883a 	mov	sp,fp
 8004420:	dfc00117 	ldw	ra,4(sp)
 8004424:	df000017 	ldw	fp,0(sp)
 8004428:	dec00204 	addi	sp,sp,8
 800442c:	f800283a 	ret

08004430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004430:	defffa04 	addi	sp,sp,-24
 8004434:	dfc00515 	stw	ra,20(sp)
 8004438:	df000415 	stw	fp,16(sp)
 800443c:	df000404 	addi	fp,sp,16
 8004440:	e13ffc15 	stw	r4,-16(fp)
 8004444:	e17ffd15 	stw	r5,-12(fp)
 8004448:	e1bffe15 	stw	r6,-8(fp)
 800444c:	3805883a 	mov	r2,r7
 8004450:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004454:	e0bffd17 	ldw	r2,-12(fp)
 8004458:	1000041e 	bne	r2,zero,800446c <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800445c:	e0800217 	ldw	r2,8(fp)
 8004460:	e0c00217 	ldw	r3,8(fp)
 8004464:	10c00015 	stw	r3,0(r2)
 8004468:	00000306 	br	8004478 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800446c:	e0800217 	ldw	r2,8(fp)
 8004470:	e0fffe17 	ldw	r3,-8(fp)
 8004474:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004478:	e0800217 	ldw	r2,8(fp)
 800447c:	e0fffc17 	ldw	r3,-16(fp)
 8004480:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 8004484:	e0800217 	ldw	r2,8(fp)
 8004488:	e0fffd17 	ldw	r3,-12(fp)
 800448c:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004490:	01400044 	movi	r5,1
 8004494:	e1000217 	ldw	r4,8(fp)
 8004498:	800425c0 	call	800425c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800449c:	0001883a 	nop
 80044a0:	e037883a 	mov	sp,fp
 80044a4:	dfc00117 	ldw	ra,4(sp)
 80044a8:	df000017 	ldw	fp,0(sp)
 80044ac:	dec00204 	addi	sp,sp,8
 80044b0:	f800283a 	ret

080044b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044b4:	defffd04 	addi	sp,sp,-12
 80044b8:	dfc00215 	stw	ra,8(sp)
 80044bc:	df000115 	stw	fp,4(sp)
 80044c0:	df000104 	addi	fp,sp,4
 80044c4:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 80044c8:	e0bfff17 	ldw	r2,-4(fp)
 80044cc:	10000b26 	beq	r2,zero,80044fc <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044d0:	e0bfff17 	ldw	r2,-4(fp)
 80044d4:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044d8:	e0bfff17 	ldw	r2,-4(fp)
 80044dc:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80044e0:	e0bfff17 	ldw	r2,-4(fp)
 80044e4:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044e8:	000f883a 	mov	r7,zero
 80044ec:	000d883a 	mov	r6,zero
 80044f0:	000b883a 	mov	r5,zero
 80044f4:	e13fff17 	ldw	r4,-4(fp)
 80044f8:	80046f40 	call	80046f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044fc:	0001883a 	nop
 8004500:	e037883a 	mov	sp,fp
 8004504:	dfc00117 	ldw	ra,4(sp)
 8004508:	df000017 	ldw	fp,0(sp)
 800450c:	dec00204 	addi	sp,sp,8
 8004510:	f800283a 	ret

08004514 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004514:	defffa04 	addi	sp,sp,-24
 8004518:	dfc00515 	stw	ra,20(sp)
 800451c:	df000415 	stw	fp,16(sp)
 8004520:	df000404 	addi	fp,sp,16
 8004524:	2005883a 	mov	r2,r4
 8004528:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800452c:	00800044 	movi	r2,1
 8004530:	e0bffc15 	stw	r2,-16(fp)
 8004534:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004538:	e0bfff03 	ldbu	r2,-4(fp)
 800453c:	100d883a 	mov	r6,r2
 8004540:	e17ffd17 	ldw	r5,-12(fp)
 8004544:	e13ffc17 	ldw	r4,-16(fp)
 8004548:	80043880 	call	8004388 <xQueueGenericCreate>
 800454c:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004550:	e13ffe17 	ldw	r4,-8(fp)
 8004554:	80044b40 	call	80044b4 <prvInitialiseMutex>

		return xNewQueue;
 8004558:	e0bffe17 	ldw	r2,-8(fp)
	}
 800455c:	e037883a 	mov	sp,fp
 8004560:	dfc00117 	ldw	ra,4(sp)
 8004564:	df000017 	ldw	fp,0(sp)
 8004568:	dec00204 	addi	sp,sp,8
 800456c:	f800283a 	ret

08004570 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004570:	defffa04 	addi	sp,sp,-24
 8004574:	dfc00515 	stw	ra,20(sp)
 8004578:	df000415 	stw	fp,16(sp)
 800457c:	dc000315 	stw	r16,12(sp)
 8004580:	df000404 	addi	fp,sp,16
 8004584:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004588:	e0bffe17 	ldw	r2,-8(fp)
 800458c:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004590:	e0bffd17 	ldw	r2,-12(fp)
 8004594:	14000217 	ldw	r16,8(r2)
 8004598:	8006f300 	call	8006f30 <xTaskGetCurrentTaskHandle>
 800459c:	8080101e 	bne	r16,r2,80045e0 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80045a0:	e0bffd17 	ldw	r2,-12(fp)
 80045a4:	10800317 	ldw	r2,12(r2)
 80045a8:	10ffffc4 	addi	r3,r2,-1
 80045ac:	e0bffd17 	ldw	r2,-12(fp)
 80045b0:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80045b4:	e0bffd17 	ldw	r2,-12(fp)
 80045b8:	10800317 	ldw	r2,12(r2)
 80045bc:	1000051e 	bne	r2,zero,80045d4 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80045c0:	000f883a 	mov	r7,zero
 80045c4:	000d883a 	mov	r6,zero
 80045c8:	000b883a 	mov	r5,zero
 80045cc:	e13ffd17 	ldw	r4,-12(fp)
 80045d0:	80046f40 	call	80046f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80045d4:	00800044 	movi	r2,1
 80045d8:	e0bffc15 	stw	r2,-16(fp)
 80045dc:	00000106 	br	80045e4 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80045e0:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80045e4:	e0bffc17 	ldw	r2,-16(fp)
	}
 80045e8:	e6ffff04 	addi	sp,fp,-4
 80045ec:	dfc00217 	ldw	ra,8(sp)
 80045f0:	df000117 	ldw	fp,4(sp)
 80045f4:	dc000017 	ldw	r16,0(sp)
 80045f8:	dec00304 	addi	sp,sp,12
 80045fc:	f800283a 	ret

08004600 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004600:	defff904 	addi	sp,sp,-28
 8004604:	dfc00615 	stw	ra,24(sp)
 8004608:	df000515 	stw	fp,20(sp)
 800460c:	dc000415 	stw	r16,16(sp)
 8004610:	df000504 	addi	fp,sp,20
 8004614:	e13ffd15 	stw	r4,-12(fp)
 8004618:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800461c:	e0bffd17 	ldw	r2,-12(fp)
 8004620:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004624:	e0bffc17 	ldw	r2,-16(fp)
 8004628:	14000217 	ldw	r16,8(r2)
 800462c:	8006f300 	call	8006f30 <xTaskGetCurrentTaskHandle>
 8004630:	8080081e 	bne	r16,r2,8004654 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004634:	e0bffc17 	ldw	r2,-16(fp)
 8004638:	10800317 	ldw	r2,12(r2)
 800463c:	10c00044 	addi	r3,r2,1
 8004640:	e0bffc17 	ldw	r2,-16(fp)
 8004644:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 8004648:	00800044 	movi	r2,1
 800464c:	e0bffb15 	stw	r2,-20(fp)
 8004650:	00000b06 	br	8004680 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004654:	e17ffe17 	ldw	r5,-8(fp)
 8004658:	e13ffc17 	ldw	r4,-16(fp)
 800465c:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8004660:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004664:	e0bffb17 	ldw	r2,-20(fp)
 8004668:	10000526 	beq	r2,zero,8004680 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800466c:	e0bffc17 	ldw	r2,-16(fp)
 8004670:	10800317 	ldw	r2,12(r2)
 8004674:	10c00044 	addi	r3,r2,1
 8004678:	e0bffc17 	ldw	r2,-16(fp)
 800467c:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004680:	e0bffb17 	ldw	r2,-20(fp)
	}
 8004684:	e6ffff04 	addi	sp,fp,-4
 8004688:	dfc00217 	ldw	ra,8(sp)
 800468c:	df000117 	ldw	fp,4(sp)
 8004690:	dc000017 	ldw	r16,0(sp)
 8004694:	dec00304 	addi	sp,sp,12
 8004698:	f800283a 	ret

0800469c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800469c:	defffb04 	addi	sp,sp,-20
 80046a0:	dfc00415 	stw	ra,16(sp)
 80046a4:	df000315 	stw	fp,12(sp)
 80046a8:	df000304 	addi	fp,sp,12
 80046ac:	e13ffe15 	stw	r4,-8(fp)
 80046b0:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80046b4:	01800084 	movi	r6,2
 80046b8:	000b883a 	mov	r5,zero
 80046bc:	e13ffe17 	ldw	r4,-8(fp)
 80046c0:	80043880 	call	8004388 <xQueueGenericCreate>
 80046c4:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 80046c8:	e0bffd17 	ldw	r2,-12(fp)
 80046cc:	10000326 	beq	r2,zero,80046dc <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80046d0:	e0bffd17 	ldw	r2,-12(fp)
 80046d4:	e0ffff17 	ldw	r3,-4(fp)
 80046d8:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80046dc:	e0bffd17 	ldw	r2,-12(fp)
	}
 80046e0:	e037883a 	mov	sp,fp
 80046e4:	dfc00117 	ldw	ra,4(sp)
 80046e8:	df000017 	ldw	fp,0(sp)
 80046ec:	dec00204 	addi	sp,sp,8
 80046f0:	f800283a 	ret

080046f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046f4:	defff504 	addi	sp,sp,-44
 80046f8:	dfc00a15 	stw	ra,40(sp)
 80046fc:	df000915 	stw	fp,36(sp)
 8004700:	df000904 	addi	fp,sp,36
 8004704:	e13ffc15 	stw	r4,-16(fp)
 8004708:	e17ffd15 	stw	r5,-12(fp)
 800470c:	e1bffe15 	stw	r6,-8(fp)
 8004710:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004714:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004718:	e0bffc17 	ldw	r2,-16(fp)
 800471c:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004720:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004724:	e0bff817 	ldw	r2,-32(fp)
 8004728:	10c00e17 	ldw	r3,56(r2)
 800472c:	e0bff817 	ldw	r2,-32(fp)
 8004730:	10800f17 	ldw	r2,60(r2)
 8004734:	18800336 	bltu	r3,r2,8004744 <xQueueGenericSend+0x50>
 8004738:	e0bfff17 	ldw	r2,-4(fp)
 800473c:	10800098 	cmpnei	r2,r2,2
 8004740:	1000151e 	bne	r2,zero,8004798 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004744:	e1bfff17 	ldw	r6,-4(fp)
 8004748:	e17ffd17 	ldw	r5,-12(fp)
 800474c:	e13ff817 	ldw	r4,-32(fp)
 8004750:	800528c0 	call	800528c <prvCopyDataToQueue>
 8004754:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004758:	e0bff817 	ldw	r2,-32(fp)
 800475c:	10800917 	ldw	r2,36(r2)
 8004760:	10000726 	beq	r2,zero,8004780 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004764:	e0bff817 	ldw	r2,-32(fp)
 8004768:	10800904 	addi	r2,r2,36
 800476c:	1009883a 	mov	r4,r2
 8004770:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004774:	10000526 	beq	r2,zero,800478c <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004778:	003b683a 	trap	0
 800477c:	00000306 	br	800478c <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004780:	e0bff917 	ldw	r2,-28(fp)
 8004784:	10000126 	beq	r2,zero,800478c <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004788:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800478c:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004790:	00800044 	movi	r2,1
 8004794:	00003f06 	br	8004894 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004798:	e0bffe17 	ldw	r2,-8(fp)
 800479c:	1000031e 	bne	r2,zero,80047ac <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047a0:	80073700 	call	8007370 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047a4:	0005883a 	mov	r2,zero
 80047a8:	00003a06 	br	8004894 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ac:	e0bff717 	ldw	r2,-36(fp)
 80047b0:	1000051e 	bne	r2,zero,80047c8 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047b4:	e0bffa04 	addi	r2,fp,-24
 80047b8:	1009883a 	mov	r4,r2
 80047bc:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c0:	00800044 	movi	r2,1
 80047c4:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047c8:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047cc:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047d0:	800731c0 	call	800731c <vTaskEnterCritical>
 80047d4:	e0bff817 	ldw	r2,-32(fp)
 80047d8:	10801103 	ldbu	r2,68(r2)
 80047dc:	10803fcc 	andi	r2,r2,255
 80047e0:	1080201c 	xori	r2,r2,128
 80047e4:	10bfe004 	addi	r2,r2,-128
 80047e8:	10bfffd8 	cmpnei	r2,r2,-1
 80047ec:	1000021e 	bne	r2,zero,80047f8 <xQueueGenericSend+0x104>
 80047f0:	e0bff817 	ldw	r2,-32(fp)
 80047f4:	10001105 	stb	zero,68(r2)
 80047f8:	e0bff817 	ldw	r2,-32(fp)
 80047fc:	10801143 	ldbu	r2,69(r2)
 8004800:	10803fcc 	andi	r2,r2,255
 8004804:	1080201c 	xori	r2,r2,128
 8004808:	10bfe004 	addi	r2,r2,-128
 800480c:	10bfffd8 	cmpnei	r2,r2,-1
 8004810:	1000021e 	bne	r2,zero,800481c <xQueueGenericSend+0x128>
 8004814:	e0bff817 	ldw	r2,-32(fp)
 8004818:	10001145 	stb	zero,69(r2)
 800481c:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004820:	e0fffe04 	addi	r3,fp,-8
 8004824:	e0bffa04 	addi	r2,fp,-24
 8004828:	180b883a 	mov	r5,r3
 800482c:	1009883a 	mov	r4,r2
 8004830:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004834:	1000131e 	bne	r2,zero,8004884 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004838:	e13ff817 	ldw	r4,-32(fp)
 800483c:	80056400 	call	8005640 <prvIsQueueFull>
 8004840:	10000c26 	beq	r2,zero,8004874 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004844:	e0bff817 	ldw	r2,-32(fp)
 8004848:	10800404 	addi	r2,r2,16
 800484c:	e0fffe17 	ldw	r3,-8(fp)
 8004850:	180b883a 	mov	r5,r3
 8004854:	1009883a 	mov	r4,r2
 8004858:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800485c:	e13ff817 	ldw	r4,-32(fp)
 8004860:	80054b40 	call	80054b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004864:	80063840 	call	8006384 <xTaskResumeAll>
 8004868:	103fad1e 	bne	r2,zero,8004720 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
 800486c:	003b683a 	trap	0
 8004870:	003fab06 	br	8004720 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004874:	e13ff817 	ldw	r4,-32(fp)
 8004878:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800487c:	80063840 	call	8006384 <xTaskResumeAll>
 8004880:	003fa706 	br	8004720 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004884:	e13ff817 	ldw	r4,-32(fp)
 8004888:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800488c:	80063840 	call	8006384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004890:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 8004894:	e037883a 	mov	sp,fp
 8004898:	dfc00117 	ldw	ra,4(sp)
 800489c:	df000017 	ldw	fp,0(sp)
 80048a0:	dec00204 	addi	sp,sp,8
 80048a4:	f800283a 	ret

080048a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048a8:	defff604 	addi	sp,sp,-40
 80048ac:	dfc00915 	stw	ra,36(sp)
 80048b0:	df000815 	stw	fp,32(sp)
 80048b4:	df000804 	addi	fp,sp,32
 80048b8:	e13ffc15 	stw	r4,-16(fp)
 80048bc:	e17ffd15 	stw	r5,-12(fp)
 80048c0:	e1bffe15 	stw	r6,-8(fp)
 80048c4:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048c8:	e0bffc17 	ldw	r2,-16(fp)
 80048cc:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048d0:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048d4:	e0bff917 	ldw	r2,-28(fp)
 80048d8:	10c00e17 	ldw	r3,56(r2)
 80048dc:	e0bff917 	ldw	r2,-28(fp)
 80048e0:	10800f17 	ldw	r2,60(r2)
 80048e4:	18800336 	bltu	r3,r2,80048f4 <xQueueGenericSendFromISR+0x4c>
 80048e8:	e0bfff17 	ldw	r2,-4(fp)
 80048ec:	10800098 	cmpnei	r2,r2,2
 80048f0:	1000201e 	bne	r2,zero,8004974 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048f4:	e0bff917 	ldw	r2,-28(fp)
 80048f8:	10801143 	ldbu	r2,69(r2)
 80048fc:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004900:	e1bfff17 	ldw	r6,-4(fp)
 8004904:	e17ffd17 	ldw	r5,-12(fp)
 8004908:	e13ff917 	ldw	r4,-28(fp)
 800490c:	800528c0 	call	800528c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004910:	e0bffb07 	ldb	r2,-20(fp)
 8004914:	10bfffd8 	cmpnei	r2,r2,-1
 8004918:	10000e1e 	bne	r2,zero,8004954 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800491c:	e0bff917 	ldw	r2,-28(fp)
 8004920:	10800917 	ldw	r2,36(r2)
 8004924:	10001026 	beq	r2,zero,8004968 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004928:	e0bff917 	ldw	r2,-28(fp)
 800492c:	10800904 	addi	r2,r2,36
 8004930:	1009883a 	mov	r4,r2
 8004934:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004938:	10000b26 	beq	r2,zero,8004968 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800493c:	e0bffe17 	ldw	r2,-8(fp)
 8004940:	10000926 	beq	r2,zero,8004968 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004944:	e0bffe17 	ldw	r2,-8(fp)
 8004948:	00c00044 	movi	r3,1
 800494c:	10c00015 	stw	r3,0(r2)
 8004950:	00000506 	br	8004968 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004954:	e0bffb03 	ldbu	r2,-20(fp)
 8004958:	10800044 	addi	r2,r2,1
 800495c:	1007883a 	mov	r3,r2
 8004960:	e0bff917 	ldw	r2,-28(fp)
 8004964:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 8004968:	00800044 	movi	r2,1
 800496c:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8004970:	00000106 	br	8004978 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004974:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004978:	e0bff817 	ldw	r2,-32(fp)
}
 800497c:	e037883a 	mov	sp,fp
 8004980:	dfc00117 	ldw	ra,4(sp)
 8004984:	df000017 	ldw	fp,0(sp)
 8004988:	dec00204 	addi	sp,sp,8
 800498c:	f800283a 	ret

08004990 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004990:	defff704 	addi	sp,sp,-36
 8004994:	dfc00815 	stw	ra,32(sp)
 8004998:	df000715 	stw	fp,28(sp)
 800499c:	df000704 	addi	fp,sp,28
 80049a0:	e13ffe15 	stw	r4,-8(fp)
 80049a4:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049a8:	e0bffe17 	ldw	r2,-8(fp)
 80049ac:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049b0:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b4:	e0bffa17 	ldw	r2,-24(fp)
 80049b8:	10800e17 	ldw	r2,56(r2)
 80049bc:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049c0:	e0bffa17 	ldw	r2,-24(fp)
 80049c4:	10800f17 	ldw	r2,60(r2)
 80049c8:	e0fffc17 	ldw	r3,-16(fp)
 80049cc:	1880202e 	bgeu	r3,r2,8004a50 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049d0:	e0bffa17 	ldw	r2,-24(fp)
 80049d4:	10801143 	ldbu	r2,69(r2)
 80049d8:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049dc:	e0bffc17 	ldw	r2,-16(fp)
 80049e0:	10c00044 	addi	r3,r2,1
 80049e4:	e0bffa17 	ldw	r2,-24(fp)
 80049e8:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049ec:	e0bffd07 	ldb	r2,-12(fp)
 80049f0:	10bfffd8 	cmpnei	r2,r2,-1
 80049f4:	10000e1e 	bne	r2,zero,8004a30 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049f8:	e0bffa17 	ldw	r2,-24(fp)
 80049fc:	10800917 	ldw	r2,36(r2)
 8004a00:	10001026 	beq	r2,zero,8004a44 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a04:	e0bffa17 	ldw	r2,-24(fp)
 8004a08:	10800904 	addi	r2,r2,36
 8004a0c:	1009883a 	mov	r4,r2
 8004a10:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004a14:	10000b26 	beq	r2,zero,8004a44 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a18:	e0bfff17 	ldw	r2,-4(fp)
 8004a1c:	10000926 	beq	r2,zero,8004a44 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a20:	e0bfff17 	ldw	r2,-4(fp)
 8004a24:	00c00044 	movi	r3,1
 8004a28:	10c00015 	stw	r3,0(r2)
 8004a2c:	00000506 	br	8004a44 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a30:	e0bffd03 	ldbu	r2,-12(fp)
 8004a34:	10800044 	addi	r2,r2,1
 8004a38:	1007883a 	mov	r3,r2
 8004a3c:	e0bffa17 	ldw	r2,-24(fp)
 8004a40:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 8004a44:	00800044 	movi	r2,1
 8004a48:	e0bff915 	stw	r2,-28(fp)
 8004a4c:	00000106 	br	8004a54 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a50:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a54:	e0bff917 	ldw	r2,-28(fp)
}
 8004a58:	e037883a 	mov	sp,fp
 8004a5c:	dfc00117 	ldw	ra,4(sp)
 8004a60:	df000017 	ldw	fp,0(sp)
 8004a64:	dec00204 	addi	sp,sp,8
 8004a68:	f800283a 	ret

08004a6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a6c:	defff604 	addi	sp,sp,-40
 8004a70:	dfc00915 	stw	ra,36(sp)
 8004a74:	df000815 	stw	fp,32(sp)
 8004a78:	df000804 	addi	fp,sp,32
 8004a7c:	e13ffd15 	stw	r4,-12(fp)
 8004a80:	e17ffe15 	stw	r5,-8(fp)
 8004a84:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8004a88:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a8c:	e0bffd17 	ldw	r2,-12(fp)
 8004a90:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a94:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a98:	e0bff917 	ldw	r2,-28(fp)
 8004a9c:	10800e17 	ldw	r2,56(r2)
 8004aa0:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aa4:	e0bffa17 	ldw	r2,-24(fp)
 8004aa8:	10001326 	beq	r2,zero,8004af8 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aac:	e17ffe17 	ldw	r5,-8(fp)
 8004ab0:	e13ff917 	ldw	r4,-28(fp)
 8004ab4:	80054180 	call	8005418 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ab8:	e0bffa17 	ldw	r2,-24(fp)
 8004abc:	10ffffc4 	addi	r3,r2,-1
 8004ac0:	e0bff917 	ldw	r2,-28(fp)
 8004ac4:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac8:	e0bff917 	ldw	r2,-28(fp)
 8004acc:	10800417 	ldw	r2,16(r2)
 8004ad0:	10000626 	beq	r2,zero,8004aec <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	e0bff917 	ldw	r2,-28(fp)
 8004ad8:	10800404 	addi	r2,r2,16
 8004adc:	1009883a 	mov	r4,r2
 8004ae0:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004ae4:	10000126 	beq	r2,zero,8004aec <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ae8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aec:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004af0:	00800044 	movi	r2,1
 8004af4:	00004206 	br	8004c00 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004af8:	e0bfff17 	ldw	r2,-4(fp)
 8004afc:	1000031e 	bne	r2,zero,8004b0c <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b00:	80073700 	call	8007370 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b04:	0005883a 	mov	r2,zero
 8004b08:	00003d06 	br	8004c00 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0c:	e0bff817 	ldw	r2,-32(fp)
 8004b10:	1000051e 	bne	r2,zero,8004b28 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b14:	e0bffb04 	addi	r2,fp,-20
 8004b18:	1009883a 	mov	r4,r2
 8004b1c:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b20:	00800044 	movi	r2,1
 8004b24:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b28:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b2c:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b30:	800731c0 	call	800731c <vTaskEnterCritical>
 8004b34:	e0bff917 	ldw	r2,-28(fp)
 8004b38:	10801103 	ldbu	r2,68(r2)
 8004b3c:	10803fcc 	andi	r2,r2,255
 8004b40:	1080201c 	xori	r2,r2,128
 8004b44:	10bfe004 	addi	r2,r2,-128
 8004b48:	10bfffd8 	cmpnei	r2,r2,-1
 8004b4c:	1000021e 	bne	r2,zero,8004b58 <xQueueReceive+0xec>
 8004b50:	e0bff917 	ldw	r2,-28(fp)
 8004b54:	10001105 	stb	zero,68(r2)
 8004b58:	e0bff917 	ldw	r2,-28(fp)
 8004b5c:	10801143 	ldbu	r2,69(r2)
 8004b60:	10803fcc 	andi	r2,r2,255
 8004b64:	1080201c 	xori	r2,r2,128
 8004b68:	10bfe004 	addi	r2,r2,-128
 8004b6c:	10bfffd8 	cmpnei	r2,r2,-1
 8004b70:	1000021e 	bne	r2,zero,8004b7c <xQueueReceive+0x110>
 8004b74:	e0bff917 	ldw	r2,-28(fp)
 8004b78:	10001145 	stb	zero,69(r2)
 8004b7c:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b80:	e0ffff04 	addi	r3,fp,-4
 8004b84:	e0bffb04 	addi	r2,fp,-20
 8004b88:	180b883a 	mov	r5,r3
 8004b8c:	1009883a 	mov	r4,r2
 8004b90:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004b94:	1000131e 	bne	r2,zero,8004be4 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b98:	e13ff917 	ldw	r4,-28(fp)
 8004b9c:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004ba0:	10000c26 	beq	r2,zero,8004bd4 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ba4:	e0bff917 	ldw	r2,-28(fp)
 8004ba8:	10800904 	addi	r2,r2,36
 8004bac:	e0ffff17 	ldw	r3,-4(fp)
 8004bb0:	180b883a 	mov	r5,r3
 8004bb4:	1009883a 	mov	r4,r2
 8004bb8:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bbc:	e13ff917 	ldw	r4,-28(fp)
 8004bc0:	80054b40 	call	80054b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc4:	80063840 	call	8006384 <xTaskResumeAll>
 8004bc8:	103fb21e 	bne	r2,zero,8004a94 <xQueueReceive+0x28>
				{
					portYIELD_WITHIN_API();
 8004bcc:	003b683a 	trap	0
 8004bd0:	003fb006 	br	8004a94 <xQueueReceive+0x28>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bd4:	e13ff917 	ldw	r4,-28(fp)
 8004bd8:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bdc:	80063840 	call	8006384 <xTaskResumeAll>
 8004be0:	003fac06 	br	8004a94 <xQueueReceive+0x28>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004be4:	e13ff917 	ldw	r4,-28(fp)
 8004be8:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bec:	80063840 	call	8006384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf0:	e13ff917 	ldw	r4,-28(fp)
 8004bf4:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004bf8:	103fa626 	beq	r2,zero,8004a94 <xQueueReceive+0x28>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bfc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c00:	e037883a 	mov	sp,fp
 8004c04:	dfc00117 	ldw	ra,4(sp)
 8004c08:	df000017 	ldw	fp,0(sp)
 8004c0c:	dec00204 	addi	sp,sp,8
 8004c10:	f800283a 	ret

08004c14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c14:	defff504 	addi	sp,sp,-44
 8004c18:	dfc00a15 	stw	ra,40(sp)
 8004c1c:	df000915 	stw	fp,36(sp)
 8004c20:	df000904 	addi	fp,sp,36
 8004c24:	e13ffe15 	stw	r4,-8(fp)
 8004c28:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8004c2c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c30:	e0bffe17 	ldw	r2,-8(fp)
 8004c34:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c38:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c40:	e0bff917 	ldw	r2,-28(fp)
 8004c44:	10800e17 	ldw	r2,56(r2)
 8004c48:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c4c:	e0bffa17 	ldw	r2,-24(fp)
 8004c50:	10001726 	beq	r2,zero,8004cb0 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c54:	e0bffa17 	ldw	r2,-24(fp)
 8004c58:	10ffffc4 	addi	r3,r2,-1
 8004c5c:	e0bff917 	ldw	r2,-28(fp)
 8004c60:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c64:	e0bff917 	ldw	r2,-28(fp)
 8004c68:	10800017 	ldw	r2,0(r2)
 8004c6c:	1000041e 	bne	r2,zero,8004c80 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004c70:	80074140 	call	8007414 <pvTaskIncrementMutexHeldCount>
 8004c74:	1007883a 	mov	r3,r2
 8004c78:	e0bff917 	ldw	r2,-28(fp)
 8004c7c:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c80:	e0bff917 	ldw	r2,-28(fp)
 8004c84:	10800417 	ldw	r2,16(r2)
 8004c88:	10000626 	beq	r2,zero,8004ca4 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8c:	e0bff917 	ldw	r2,-28(fp)
 8004c90:	10800404 	addi	r2,r2,16
 8004c94:	1009883a 	mov	r4,r2
 8004c98:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004c9c:	10000126 	beq	r2,zero,8004ca4 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ca0:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ca4:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004ca8:	00800044 	movi	r2,1
 8004cac:	00005806 	br	8004e10 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb0:	e0bfff17 	ldw	r2,-4(fp)
 8004cb4:	1000031e 	bne	r2,zero,8004cc4 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004cb8:	80073700 	call	8007370 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cbc:	0005883a 	mov	r2,zero
 8004cc0:	00005306 	br	8004e10 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc4:	e0bff717 	ldw	r2,-36(fp)
 8004cc8:	1000051e 	bne	r2,zero,8004ce0 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ccc:	e0bffc04 	addi	r2,fp,-16
 8004cd0:	1009883a 	mov	r4,r2
 8004cd4:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd8:	00800044 	movi	r2,1
 8004cdc:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce0:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce4:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce8:	800731c0 	call	800731c <vTaskEnterCritical>
 8004cec:	e0bff917 	ldw	r2,-28(fp)
 8004cf0:	10801103 	ldbu	r2,68(r2)
 8004cf4:	10803fcc 	andi	r2,r2,255
 8004cf8:	1080201c 	xori	r2,r2,128
 8004cfc:	10bfe004 	addi	r2,r2,-128
 8004d00:	10bfffd8 	cmpnei	r2,r2,-1
 8004d04:	1000021e 	bne	r2,zero,8004d10 <xQueueSemaphoreTake+0xfc>
 8004d08:	e0bff917 	ldw	r2,-28(fp)
 8004d0c:	10001105 	stb	zero,68(r2)
 8004d10:	e0bff917 	ldw	r2,-28(fp)
 8004d14:	10801143 	ldbu	r2,69(r2)
 8004d18:	10803fcc 	andi	r2,r2,255
 8004d1c:	1080201c 	xori	r2,r2,128
 8004d20:	10bfe004 	addi	r2,r2,-128
 8004d24:	10bfffd8 	cmpnei	r2,r2,-1
 8004d28:	1000021e 	bne	r2,zero,8004d34 <xQueueSemaphoreTake+0x120>
 8004d2c:	e0bff917 	ldw	r2,-28(fp)
 8004d30:	10001145 	stb	zero,69(r2)
 8004d34:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d38:	e0ffff04 	addi	r3,fp,-4
 8004d3c:	e0bffc04 	addi	r2,fp,-16
 8004d40:	180b883a 	mov	r5,r3
 8004d44:	1009883a 	mov	r4,r2
 8004d48:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004d4c:	10001d1e 	bne	r2,zero,8004dc4 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d50:	e13ff917 	ldw	r4,-28(fp)
 8004d54:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004d58:	10001626 	beq	r2,zero,8004db4 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d5c:	e0bff917 	ldw	r2,-28(fp)
 8004d60:	10800017 	ldw	r2,0(r2)
 8004d64:	1000071e 	bne	r2,zero,8004d84 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 8004d68:	800731c0 	call	800731c <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d6c:	e0bff917 	ldw	r2,-28(fp)
 8004d70:	10800217 	ldw	r2,8(r2)
 8004d74:	1009883a 	mov	r4,r2
 8004d78:	8006f580 	call	8006f58 <xTaskPriorityInherit>
 8004d7c:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 8004d80:	80073700 	call	8007370 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d84:	e0bff917 	ldw	r2,-28(fp)
 8004d88:	10800904 	addi	r2,r2,36
 8004d8c:	e0ffff17 	ldw	r3,-4(fp)
 8004d90:	180b883a 	mov	r5,r3
 8004d94:	1009883a 	mov	r4,r2
 8004d98:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d9c:	e13ff917 	ldw	r4,-28(fp)
 8004da0:	80054b40 	call	80054b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004da4:	80063840 	call	8006384 <xTaskResumeAll>
 8004da8:	103fa41e 	bne	r2,zero,8004c3c <xQueueSemaphoreTake+0x28>
				{
					portYIELD_WITHIN_API();
 8004dac:	003b683a 	trap	0
 8004db0:	003fa206 	br	8004c3c <xQueueSemaphoreTake+0x28>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004db4:	e13ff917 	ldw	r4,-28(fp)
 8004db8:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dbc:	80063840 	call	8006384 <xTaskResumeAll>
 8004dc0:	003f9e06 	br	8004c3c <xQueueSemaphoreTake+0x28>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004dc4:	e13ff917 	ldw	r4,-28(fp)
 8004dc8:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dcc:	80063840 	call	8006384 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd0:	e13ff917 	ldw	r4,-28(fp)
 8004dd4:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004dd8:	103f9826 	beq	r2,zero,8004c3c <xQueueSemaphoreTake+0x28>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ddc:	e0bff817 	ldw	r2,-32(fp)
 8004de0:	10000a26 	beq	r2,zero,8004e0c <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 8004de4:	800731c0 	call	800731c <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004de8:	e13ff917 	ldw	r4,-28(fp)
 8004dec:	800523c0 	call	800523c <prvGetDisinheritPriorityAfterTimeout>
 8004df0:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004df4:	e0bff917 	ldw	r2,-28(fp)
 8004df8:	10800217 	ldw	r2,8(r2)
 8004dfc:	e17ffb17 	ldw	r5,-20(fp)
 8004e00:	1009883a 	mov	r4,r2
 8004e04:	80071c00 	call	80071c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e08:	80073700 	call	8007370 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e0c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e10:	e037883a 	mov	sp,fp
 8004e14:	dfc00117 	ldw	ra,4(sp)
 8004e18:	df000017 	ldw	fp,0(sp)
 8004e1c:	dec00204 	addi	sp,sp,8
 8004e20:	f800283a 	ret

08004e24 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e24:	defff504 	addi	sp,sp,-44
 8004e28:	dfc00a15 	stw	ra,40(sp)
 8004e2c:	df000915 	stw	fp,36(sp)
 8004e30:	df000904 	addi	fp,sp,36
 8004e34:	e13ffd15 	stw	r4,-12(fp)
 8004e38:	e17ffe15 	stw	r5,-8(fp)
 8004e3c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8004e40:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8004e44:	e0bffd17 	ldw	r2,-12(fp)
 8004e48:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e4c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e50:	e0bff817 	ldw	r2,-32(fp)
 8004e54:	10800e17 	ldw	r2,56(r2)
 8004e58:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e5c:	e0bff917 	ldw	r2,-28(fp)
 8004e60:	10001526 	beq	r2,zero,8004eb8 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8004e64:	e0bff817 	ldw	r2,-32(fp)
 8004e68:	10800317 	ldw	r2,12(r2)
 8004e6c:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e70:	e17ffe17 	ldw	r5,-8(fp)
 8004e74:	e13ff817 	ldw	r4,-32(fp)
 8004e78:	80054180 	call	8005418 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8004e7c:	e0bff817 	ldw	r2,-32(fp)
 8004e80:	e0fffa17 	ldw	r3,-24(fp)
 8004e84:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e88:	e0bff817 	ldw	r2,-32(fp)
 8004e8c:	10800917 	ldw	r2,36(r2)
 8004e90:	10000626 	beq	r2,zero,8004eac <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e94:	e0bff817 	ldw	r2,-32(fp)
 8004e98:	10800904 	addi	r2,r2,36
 8004e9c:	1009883a 	mov	r4,r2
 8004ea0:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004ea4:	10000126 	beq	r2,zero,8004eac <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eac:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004eb0:	00800044 	movi	r2,1
 8004eb4:	00004206 	br	8004fc0 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eb8:	e0bfff17 	ldw	r2,-4(fp)
 8004ebc:	1000031e 	bne	r2,zero,8004ecc <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec0:	80073700 	call	8007370 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ec4:	0005883a 	mov	r2,zero
 8004ec8:	00003d06 	br	8004fc0 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ecc:	e0bff717 	ldw	r2,-36(fp)
 8004ed0:	1000051e 	bne	r2,zero,8004ee8 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed4:	e0bffb04 	addi	r2,fp,-20
 8004ed8:	1009883a 	mov	r4,r2
 8004edc:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee0:	00800044 	movi	r2,1
 8004ee4:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ee8:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eec:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef0:	800731c0 	call	800731c <vTaskEnterCritical>
 8004ef4:	e0bff817 	ldw	r2,-32(fp)
 8004ef8:	10801103 	ldbu	r2,68(r2)
 8004efc:	10803fcc 	andi	r2,r2,255
 8004f00:	1080201c 	xori	r2,r2,128
 8004f04:	10bfe004 	addi	r2,r2,-128
 8004f08:	10bfffd8 	cmpnei	r2,r2,-1
 8004f0c:	1000021e 	bne	r2,zero,8004f18 <xQueuePeek+0xf4>
 8004f10:	e0bff817 	ldw	r2,-32(fp)
 8004f14:	10001105 	stb	zero,68(r2)
 8004f18:	e0bff817 	ldw	r2,-32(fp)
 8004f1c:	10801143 	ldbu	r2,69(r2)
 8004f20:	10803fcc 	andi	r2,r2,255
 8004f24:	1080201c 	xori	r2,r2,128
 8004f28:	10bfe004 	addi	r2,r2,-128
 8004f2c:	10bfffd8 	cmpnei	r2,r2,-1
 8004f30:	1000021e 	bne	r2,zero,8004f3c <xQueuePeek+0x118>
 8004f34:	e0bff817 	ldw	r2,-32(fp)
 8004f38:	10001145 	stb	zero,69(r2)
 8004f3c:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f40:	e0ffff04 	addi	r3,fp,-4
 8004f44:	e0bffb04 	addi	r2,fp,-20
 8004f48:	180b883a 	mov	r5,r3
 8004f4c:	1009883a 	mov	r4,r2
 8004f50:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004f54:	1000131e 	bne	r2,zero,8004fa4 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f58:	e13ff817 	ldw	r4,-32(fp)
 8004f5c:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004f60:	10000c26 	beq	r2,zero,8004f94 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f64:	e0bff817 	ldw	r2,-32(fp)
 8004f68:	10800904 	addi	r2,r2,36
 8004f6c:	e0ffff17 	ldw	r3,-4(fp)
 8004f70:	180b883a 	mov	r5,r3
 8004f74:	1009883a 	mov	r4,r2
 8004f78:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f7c:	e13ff817 	ldw	r4,-32(fp)
 8004f80:	80054b40 	call	80054b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f84:	80063840 	call	8006384 <xTaskResumeAll>
 8004f88:	103fb01e 	bne	r2,zero,8004e4c <xQueuePeek+0x28>
				{
					portYIELD_WITHIN_API();
 8004f8c:	003b683a 	trap	0
 8004f90:	003fae06 	br	8004e4c <xQueuePeek+0x28>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8004f94:	e13ff817 	ldw	r4,-32(fp)
 8004f98:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f9c:	80063840 	call	8006384 <xTaskResumeAll>
 8004fa0:	003faa06 	br	8004e4c <xQueuePeek+0x28>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8004fa4:	e13ff817 	ldw	r4,-32(fp)
 8004fa8:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fac:	80063840 	call	8006384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fb0:	e13ff817 	ldw	r4,-32(fp)
 8004fb4:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004fb8:	103fa426 	beq	r2,zero,8004e4c <xQueuePeek+0x28>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fbc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fc0:	e037883a 	mov	sp,fp
 8004fc4:	dfc00117 	ldw	ra,4(sp)
 8004fc8:	df000017 	ldw	fp,0(sp)
 8004fcc:	dec00204 	addi	sp,sp,8
 8004fd0:	f800283a 	ret

08004fd4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fd4:	defff604 	addi	sp,sp,-40
 8004fd8:	dfc00915 	stw	ra,36(sp)
 8004fdc:	df000815 	stw	fp,32(sp)
 8004fe0:	df000804 	addi	fp,sp,32
 8004fe4:	e13ffd15 	stw	r4,-12(fp)
 8004fe8:	e17ffe15 	stw	r5,-8(fp)
 8004fec:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ff0:	e0bffd17 	ldw	r2,-12(fp)
 8004ff4:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ff8:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffc:	e0bff917 	ldw	r2,-28(fp)
 8005000:	10800e17 	ldw	r2,56(r2)
 8005004:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005008:	e0bffb17 	ldw	r2,-20(fp)
 800500c:	10002326 	beq	r2,zero,800509c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005010:	e0bff917 	ldw	r2,-28(fp)
 8005014:	10801103 	ldbu	r2,68(r2)
 8005018:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800501c:	e17ffe17 	ldw	r5,-8(fp)
 8005020:	e13ff917 	ldw	r4,-28(fp)
 8005024:	80054180 	call	8005418 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005028:	e0bffb17 	ldw	r2,-20(fp)
 800502c:	10ffffc4 	addi	r3,r2,-1
 8005030:	e0bff917 	ldw	r2,-28(fp)
 8005034:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005038:	e0bffc07 	ldb	r2,-16(fp)
 800503c:	10bfffd8 	cmpnei	r2,r2,-1
 8005040:	10000e1e 	bne	r2,zero,800507c <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005044:	e0bff917 	ldw	r2,-28(fp)
 8005048:	10800417 	ldw	r2,16(r2)
 800504c:	10001026 	beq	r2,zero,8005090 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005050:	e0bff917 	ldw	r2,-28(fp)
 8005054:	10800404 	addi	r2,r2,16
 8005058:	1009883a 	mov	r4,r2
 800505c:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8005060:	10000b26 	beq	r2,zero,8005090 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005064:	e0bfff17 	ldw	r2,-4(fp)
 8005068:	10000926 	beq	r2,zero,8005090 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800506c:	e0bfff17 	ldw	r2,-4(fp)
 8005070:	00c00044 	movi	r3,1
 8005074:	10c00015 	stw	r3,0(r2)
 8005078:	00000506 	br	8005090 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800507c:	e0bffc03 	ldbu	r2,-16(fp)
 8005080:	10800044 	addi	r2,r2,1
 8005084:	1007883a 	mov	r3,r2
 8005088:	e0bff917 	ldw	r2,-28(fp)
 800508c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 8005090:	00800044 	movi	r2,1
 8005094:	e0bff815 	stw	r2,-32(fp)
 8005098:	00000106 	br	80050a0 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 800509c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050a0:	e0bff817 	ldw	r2,-32(fp)
}
 80050a4:	e037883a 	mov	sp,fp
 80050a8:	dfc00117 	ldw	ra,4(sp)
 80050ac:	df000017 	ldw	fp,0(sp)
 80050b0:	dec00204 	addi	sp,sp,8
 80050b4:	f800283a 	ret

080050b8 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80050b8:	defff804 	addi	sp,sp,-32
 80050bc:	dfc00715 	stw	ra,28(sp)
 80050c0:	df000615 	stw	fp,24(sp)
 80050c4:	df000604 	addi	fp,sp,24
 80050c8:	e13ffe15 	stw	r4,-8(fp)
 80050cc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80050d0:	e0bffe17 	ldw	r2,-8(fp)
 80050d4:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050d8:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050dc:	e0bffb17 	ldw	r2,-20(fp)
 80050e0:	10800e17 	ldw	r2,56(r2)
 80050e4:	10000c26 	beq	r2,zero,8005118 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80050e8:	e0bffb17 	ldw	r2,-20(fp)
 80050ec:	10800317 	ldw	r2,12(r2)
 80050f0:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050f4:	e17fff17 	ldw	r5,-4(fp)
 80050f8:	e13ffb17 	ldw	r4,-20(fp)
 80050fc:	80054180 	call	8005418 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8005100:	e0bffb17 	ldw	r2,-20(fp)
 8005104:	e0fffd17 	ldw	r3,-12(fp)
 8005108:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 800510c:	00800044 	movi	r2,1
 8005110:	e0bffa15 	stw	r2,-24(fp)
 8005114:	00000106 	br	800511c <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 8005118:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800511c:	e0bffa17 	ldw	r2,-24(fp)
}
 8005120:	e037883a 	mov	sp,fp
 8005124:	dfc00117 	ldw	ra,4(sp)
 8005128:	df000017 	ldw	fp,0(sp)
 800512c:	dec00204 	addi	sp,sp,8
 8005130:	f800283a 	ret

08005134 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005134:	defffc04 	addi	sp,sp,-16
 8005138:	dfc00315 	stw	ra,12(sp)
 800513c:	df000215 	stw	fp,8(sp)
 8005140:	df000204 	addi	fp,sp,8
 8005144:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8005148:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800514c:	e0bfff17 	ldw	r2,-4(fp)
 8005150:	10800e17 	ldw	r2,56(r2)
 8005154:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 8005158:	80073700 	call	8007370 <vTaskExitCritical>

	return uxReturn;
 800515c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005160:	e037883a 	mov	sp,fp
 8005164:	dfc00117 	ldw	ra,4(sp)
 8005168:	df000017 	ldw	fp,0(sp)
 800516c:	dec00204 	addi	sp,sp,8
 8005170:	f800283a 	ret

08005174 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005174:	defffb04 	addi	sp,sp,-20
 8005178:	dfc00415 	stw	ra,16(sp)
 800517c:	df000315 	stw	fp,12(sp)
 8005180:	df000304 	addi	fp,sp,12
 8005184:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005188:	e0bfff17 	ldw	r2,-4(fp)
 800518c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8005190:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8005194:	e0bffd17 	ldw	r2,-12(fp)
 8005198:	10c00f17 	ldw	r3,60(r2)
 800519c:	e0bffd17 	ldw	r2,-12(fp)
 80051a0:	10800e17 	ldw	r2,56(r2)
 80051a4:	1885c83a 	sub	r2,r3,r2
 80051a8:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 80051ac:	80073700 	call	8007370 <vTaskExitCritical>

	return uxReturn;
 80051b0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051b4:	e037883a 	mov	sp,fp
 80051b8:	dfc00117 	ldw	ra,4(sp)
 80051bc:	df000017 	ldw	fp,0(sp)
 80051c0:	dec00204 	addi	sp,sp,8
 80051c4:	f800283a 	ret

080051c8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80051c8:	defffc04 	addi	sp,sp,-16
 80051cc:	df000315 	stw	fp,12(sp)
 80051d0:	df000304 	addi	fp,sp,12
 80051d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80051d8:	e0bfff17 	ldw	r2,-4(fp)
 80051dc:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 80051e0:	e0bffd17 	ldw	r2,-12(fp)
 80051e4:	10800e17 	ldw	r2,56(r2)
 80051e8:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 80051ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051f0:	e037883a 	mov	sp,fp
 80051f4:	df000017 	ldw	fp,0(sp)
 80051f8:	dec00104 	addi	sp,sp,4
 80051fc:	f800283a 	ret

08005200 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005200:	defffc04 	addi	sp,sp,-16
 8005204:	dfc00315 	stw	ra,12(sp)
 8005208:	df000215 	stw	fp,8(sp)
 800520c:	df000204 	addi	fp,sp,8
 8005210:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 8005214:	e0bfff17 	ldw	r2,-4(fp)
 8005218:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800521c:	e13ffe17 	ldw	r4,-8(fp)
 8005220:	80040dc0 	call	80040dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005224:	0001883a 	nop
 8005228:	e037883a 	mov	sp,fp
 800522c:	dfc00117 	ldw	ra,4(sp)
 8005230:	df000017 	ldw	fp,0(sp)
 8005234:	dec00204 	addi	sp,sp,8
 8005238:	f800283a 	ret

0800523c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800523c:	defffd04 	addi	sp,sp,-12
 8005240:	df000215 	stw	fp,8(sp)
 8005244:	df000204 	addi	fp,sp,8
 8005248:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800524c:	e0bfff17 	ldw	r2,-4(fp)
 8005250:	10800917 	ldw	r2,36(r2)
 8005254:	10000726 	beq	r2,zero,8005274 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005258:	e0bfff17 	ldw	r2,-4(fp)
 800525c:	10800c17 	ldw	r2,48(r2)
 8005260:	10800017 	ldw	r2,0(r2)
 8005264:	00c00144 	movi	r3,5
 8005268:	1885c83a 	sub	r2,r3,r2
 800526c:	e0bffe15 	stw	r2,-8(fp)
 8005270:	00000106 	br	8005278 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005274:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 8005278:	e0bffe17 	ldw	r2,-8(fp)
	}
 800527c:	e037883a 	mov	sp,fp
 8005280:	df000017 	ldw	fp,0(sp)
 8005284:	dec00104 	addi	sp,sp,4
 8005288:	f800283a 	ret

0800528c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800528c:	defff904 	addi	sp,sp,-28
 8005290:	dfc00615 	stw	ra,24(sp)
 8005294:	df000515 	stw	fp,20(sp)
 8005298:	df000504 	addi	fp,sp,20
 800529c:	e13ffd15 	stw	r4,-12(fp)
 80052a0:	e17ffe15 	stw	r5,-8(fp)
 80052a4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 80052a8:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ac:	e0bffd17 	ldw	r2,-12(fp)
 80052b0:	10800e17 	ldw	r2,56(r2)
 80052b4:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052b8:	e0bffd17 	ldw	r2,-12(fp)
 80052bc:	10801017 	ldw	r2,64(r2)
 80052c0:	10000b1e 	bne	r2,zero,80052f0 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052c4:	e0bffd17 	ldw	r2,-12(fp)
 80052c8:	10800017 	ldw	r2,0(r2)
 80052cc:	1000481e 	bne	r2,zero,80053f0 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052d0:	e0bffd17 	ldw	r2,-12(fp)
 80052d4:	10800217 	ldw	r2,8(r2)
 80052d8:	1009883a 	mov	r4,r2
 80052dc:	80070b80 	call	80070b8 <xTaskPriorityDisinherit>
 80052e0:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052e4:	e0bffd17 	ldw	r2,-12(fp)
 80052e8:	10000215 	stw	zero,8(r2)
 80052ec:	00004006 	br	80053f0 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052f0:	e0bfff17 	ldw	r2,-4(fp)
 80052f4:	1000191e 	bne	r2,zero,800535c <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052f8:	e0bffd17 	ldw	r2,-12(fp)
 80052fc:	10c00117 	ldw	r3,4(r2)
 8005300:	e0bffd17 	ldw	r2,-12(fp)
 8005304:	10801017 	ldw	r2,64(r2)
 8005308:	100d883a 	mov	r6,r2
 800530c:	e17ffe17 	ldw	r5,-8(fp)
 8005310:	1809883a 	mov	r4,r3
 8005314:	800971c0 	call	800971c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005318:	e0bffd17 	ldw	r2,-12(fp)
 800531c:	10c00117 	ldw	r3,4(r2)
 8005320:	e0bffd17 	ldw	r2,-12(fp)
 8005324:	10801017 	ldw	r2,64(r2)
 8005328:	1887883a 	add	r3,r3,r2
 800532c:	e0bffd17 	ldw	r2,-12(fp)
 8005330:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005334:	e0bffd17 	ldw	r2,-12(fp)
 8005338:	10c00117 	ldw	r3,4(r2)
 800533c:	e0bffd17 	ldw	r2,-12(fp)
 8005340:	10800217 	ldw	r2,8(r2)
 8005344:	18802a36 	bltu	r3,r2,80053f0 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005348:	e0bffd17 	ldw	r2,-12(fp)
 800534c:	10c00017 	ldw	r3,0(r2)
 8005350:	e0bffd17 	ldw	r2,-12(fp)
 8005354:	10c00115 	stw	r3,4(r2)
 8005358:	00002506 	br	80053f0 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800535c:	e0bffd17 	ldw	r2,-12(fp)
 8005360:	10c00317 	ldw	r3,12(r2)
 8005364:	e0bffd17 	ldw	r2,-12(fp)
 8005368:	10801017 	ldw	r2,64(r2)
 800536c:	100d883a 	mov	r6,r2
 8005370:	e17ffe17 	ldw	r5,-8(fp)
 8005374:	1809883a 	mov	r4,r3
 8005378:	800971c0 	call	800971c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800537c:	e0bffd17 	ldw	r2,-12(fp)
 8005380:	10c00317 	ldw	r3,12(r2)
 8005384:	e0bffd17 	ldw	r2,-12(fp)
 8005388:	10801017 	ldw	r2,64(r2)
 800538c:	0085c83a 	sub	r2,zero,r2
 8005390:	1887883a 	add	r3,r3,r2
 8005394:	e0bffd17 	ldw	r2,-12(fp)
 8005398:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800539c:	e0bffd17 	ldw	r2,-12(fp)
 80053a0:	10c00317 	ldw	r3,12(r2)
 80053a4:	e0bffd17 	ldw	r2,-12(fp)
 80053a8:	10800017 	ldw	r2,0(r2)
 80053ac:	1880082e 	bgeu	r3,r2,80053d0 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053b0:	e0bffd17 	ldw	r2,-12(fp)
 80053b4:	10c00217 	ldw	r3,8(r2)
 80053b8:	e0bffd17 	ldw	r2,-12(fp)
 80053bc:	10801017 	ldw	r2,64(r2)
 80053c0:	0085c83a 	sub	r2,zero,r2
 80053c4:	1887883a 	add	r3,r3,r2
 80053c8:	e0bffd17 	ldw	r2,-12(fp)
 80053cc:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053d0:	e0bfff17 	ldw	r2,-4(fp)
 80053d4:	10800098 	cmpnei	r2,r2,2
 80053d8:	1000051e 	bne	r2,zero,80053f0 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053dc:	e0bffc17 	ldw	r2,-16(fp)
 80053e0:	10000326 	beq	r2,zero,80053f0 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053e4:	e0bffc17 	ldw	r2,-16(fp)
 80053e8:	10bfffc4 	addi	r2,r2,-1
 80053ec:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053f0:	e0bffc17 	ldw	r2,-16(fp)
 80053f4:	10c00044 	addi	r3,r2,1
 80053f8:	e0bffd17 	ldw	r2,-12(fp)
 80053fc:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 8005400:	e0bffb17 	ldw	r2,-20(fp)
}
 8005404:	e037883a 	mov	sp,fp
 8005408:	dfc00117 	ldw	ra,4(sp)
 800540c:	df000017 	ldw	fp,0(sp)
 8005410:	dec00204 	addi	sp,sp,8
 8005414:	f800283a 	ret

08005418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005418:	defffc04 	addi	sp,sp,-16
 800541c:	dfc00315 	stw	ra,12(sp)
 8005420:	df000215 	stw	fp,8(sp)
 8005424:	df000204 	addi	fp,sp,8
 8005428:	e13ffe15 	stw	r4,-8(fp)
 800542c:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005430:	e0bffe17 	ldw	r2,-8(fp)
 8005434:	10801017 	ldw	r2,64(r2)
 8005438:	10001826 	beq	r2,zero,800549c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800543c:	e0bffe17 	ldw	r2,-8(fp)
 8005440:	10c00317 	ldw	r3,12(r2)
 8005444:	e0bffe17 	ldw	r2,-8(fp)
 8005448:	10801017 	ldw	r2,64(r2)
 800544c:	1887883a 	add	r3,r3,r2
 8005450:	e0bffe17 	ldw	r2,-8(fp)
 8005454:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005458:	e0bffe17 	ldw	r2,-8(fp)
 800545c:	10c00317 	ldw	r3,12(r2)
 8005460:	e0bffe17 	ldw	r2,-8(fp)
 8005464:	10800217 	ldw	r2,8(r2)
 8005468:	18800436 	bltu	r3,r2,800547c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800546c:	e0bffe17 	ldw	r2,-8(fp)
 8005470:	10c00017 	ldw	r3,0(r2)
 8005474:	e0bffe17 	ldw	r2,-8(fp)
 8005478:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800547c:	e0bffe17 	ldw	r2,-8(fp)
 8005480:	10c00317 	ldw	r3,12(r2)
 8005484:	e0bffe17 	ldw	r2,-8(fp)
 8005488:	10801017 	ldw	r2,64(r2)
 800548c:	100d883a 	mov	r6,r2
 8005490:	180b883a 	mov	r5,r3
 8005494:	e13fff17 	ldw	r4,-4(fp)
 8005498:	800971c0 	call	800971c <memcpy>
	}
}
 800549c:	0001883a 	nop
 80054a0:	e037883a 	mov	sp,fp
 80054a4:	dfc00117 	ldw	ra,4(sp)
 80054a8:	df000017 	ldw	fp,0(sp)
 80054ac:	dec00204 	addi	sp,sp,8
 80054b0:	f800283a 	ret

080054b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054b4:	defffc04 	addi	sp,sp,-16
 80054b8:	dfc00315 	stw	ra,12(sp)
 80054bc:	df000215 	stw	fp,8(sp)
 80054c0:	df000204 	addi	fp,sp,8
 80054c4:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c8:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054cc:	e0bfff17 	ldw	r2,-4(fp)
 80054d0:	10801143 	ldbu	r2,69(r2)
 80054d4:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d8:	00000c06 	br	800550c <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054dc:	e0bfff17 	ldw	r2,-4(fp)
 80054e0:	10800917 	ldw	r2,36(r2)
 80054e4:	10000c26 	beq	r2,zero,8005518 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e8:	e0bfff17 	ldw	r2,-4(fp)
 80054ec:	10800904 	addi	r2,r2,36
 80054f0:	1009883a 	mov	r4,r2
 80054f4:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 80054f8:	10000126 	beq	r2,zero,8005500 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054fc:	8006c500 	call	8006c50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005500:	e0bffe03 	ldbu	r2,-8(fp)
 8005504:	10bfffc4 	addi	r2,r2,-1
 8005508:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800550c:	e0bffe07 	ldb	r2,-8(fp)
 8005510:	00bff216 	blt	zero,r2,80054dc <prvUnlockQueue+0x28>
 8005514:	00000106 	br	800551c <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8005518:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800551c:	e0bfff17 	ldw	r2,-4(fp)
 8005520:	00ffffc4 	movi	r3,-1
 8005524:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 8005528:	80073700 	call	8007370 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800552c:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005530:	e0bfff17 	ldw	r2,-4(fp)
 8005534:	10801103 	ldbu	r2,68(r2)
 8005538:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800553c:	00000c06 	br	8005570 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005540:	e0bfff17 	ldw	r2,-4(fp)
 8005544:	10800417 	ldw	r2,16(r2)
 8005548:	10000c26 	beq	r2,zero,800557c <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554c:	e0bfff17 	ldw	r2,-4(fp)
 8005550:	10800404 	addi	r2,r2,16
 8005554:	1009883a 	mov	r4,r2
 8005558:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 800555c:	10000126 	beq	r2,zero,8005564 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 8005560:	8006c500 	call	8006c50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005564:	e0bffe43 	ldbu	r2,-7(fp)
 8005568:	10bfffc4 	addi	r2,r2,-1
 800556c:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005570:	e0bffe47 	ldb	r2,-7(fp)
 8005574:	00bff216 	blt	zero,r2,8005540 <prvUnlockQueue+0x8c>
 8005578:	00000106 	br	8005580 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 800557c:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005580:	e0bfff17 	ldw	r2,-4(fp)
 8005584:	00ffffc4 	movi	r3,-1
 8005588:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 800558c:	80073700 	call	8007370 <vTaskExitCritical>
}
 8005590:	0001883a 	nop
 8005594:	e037883a 	mov	sp,fp
 8005598:	dfc00117 	ldw	ra,4(sp)
 800559c:	df000017 	ldw	fp,0(sp)
 80055a0:	dec00204 	addi	sp,sp,8
 80055a4:	f800283a 	ret

080055a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055a8:	defffc04 	addi	sp,sp,-16
 80055ac:	dfc00315 	stw	ra,12(sp)
 80055b0:	df000215 	stw	fp,8(sp)
 80055b4:	df000204 	addi	fp,sp,8
 80055b8:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055bc:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055c0:	e0bfff17 	ldw	r2,-4(fp)
 80055c4:	10800e17 	ldw	r2,56(r2)
 80055c8:	1000031e 	bne	r2,zero,80055d8 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 80055cc:	00800044 	movi	r2,1
 80055d0:	e0bffe15 	stw	r2,-8(fp)
 80055d4:	00000106 	br	80055dc <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 80055d8:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 80055dc:	80073700 	call	8007370 <vTaskExitCritical>

	return xReturn;
 80055e0:	e0bffe17 	ldw	r2,-8(fp)
}
 80055e4:	e037883a 	mov	sp,fp
 80055e8:	dfc00117 	ldw	ra,4(sp)
 80055ec:	df000017 	ldw	fp,0(sp)
 80055f0:	dec00204 	addi	sp,sp,8
 80055f4:	f800283a 	ret

080055f8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80055f8:	defffc04 	addi	sp,sp,-16
 80055fc:	df000315 	stw	fp,12(sp)
 8005600:	df000304 	addi	fp,sp,12
 8005604:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8005608:	e0bfff17 	ldw	r2,-4(fp)
 800560c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005610:	e0bffe17 	ldw	r2,-8(fp)
 8005614:	10800e17 	ldw	r2,56(r2)
 8005618:	1000031e 	bne	r2,zero,8005628 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 800561c:	00800044 	movi	r2,1
 8005620:	e0bffd15 	stw	r2,-12(fp)
 8005624:	00000106 	br	800562c <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 8005628:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 800562c:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005630:	e037883a 	mov	sp,fp
 8005634:	df000017 	ldw	fp,0(sp)
 8005638:	dec00104 	addi	sp,sp,4
 800563c:	f800283a 	ret

08005640 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005640:	defffc04 	addi	sp,sp,-16
 8005644:	dfc00315 	stw	ra,12(sp)
 8005648:	df000215 	stw	fp,8(sp)
 800564c:	df000204 	addi	fp,sp,8
 8005650:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005654:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005658:	e0bfff17 	ldw	r2,-4(fp)
 800565c:	10c00e17 	ldw	r3,56(r2)
 8005660:	e0bfff17 	ldw	r2,-4(fp)
 8005664:	10800f17 	ldw	r2,60(r2)
 8005668:	1880031e 	bne	r3,r2,8005678 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 800566c:	00800044 	movi	r2,1
 8005670:	e0bffe15 	stw	r2,-8(fp)
 8005674:	00000106 	br	800567c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 8005678:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 800567c:	80073700 	call	8007370 <vTaskExitCritical>

	return xReturn;
 8005680:	e0bffe17 	ldw	r2,-8(fp)
}
 8005684:	e037883a 	mov	sp,fp
 8005688:	dfc00117 	ldw	ra,4(sp)
 800568c:	df000017 	ldw	fp,0(sp)
 8005690:	dec00204 	addi	sp,sp,8
 8005694:	f800283a 	ret

08005698 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005698:	defffc04 	addi	sp,sp,-16
 800569c:	df000315 	stw	fp,12(sp)
 80056a0:	df000304 	addi	fp,sp,12
 80056a4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 80056a8:	e0bfff17 	ldw	r2,-4(fp)
 80056ac:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b0:	e0bffe17 	ldw	r2,-8(fp)
 80056b4:	10c00e17 	ldw	r3,56(r2)
 80056b8:	e0bffe17 	ldw	r2,-8(fp)
 80056bc:	10800f17 	ldw	r2,60(r2)
 80056c0:	1880031e 	bne	r3,r2,80056d0 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 80056c4:	00800044 	movi	r2,1
 80056c8:	e0bffd15 	stw	r2,-12(fp)
 80056cc:	00000106 	br	80056d4 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 80056d0:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 80056d4:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80056d8:	e037883a 	mov	sp,fp
 80056dc:	df000017 	ldw	fp,0(sp)
 80056e0:	dec00104 	addi	sp,sp,4
 80056e4:	f800283a 	ret

080056e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056e8:	defff304 	addi	sp,sp,-52
 80056ec:	dfc00c15 	stw	ra,48(sp)
 80056f0:	df000b15 	stw	fp,44(sp)
 80056f4:	df000b04 	addi	fp,sp,44
 80056f8:	e13ffc15 	stw	r4,-16(fp)
 80056fc:	e17ffd15 	stw	r5,-12(fp)
 8005700:	3005883a 	mov	r2,r6
 8005704:	e1ffff15 	stw	r7,-4(fp)
 8005708:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800570c:	e0bffe0b 	ldhu	r2,-8(fp)
 8005710:	1085883a 	add	r2,r2,r2
 8005714:	1085883a 	add	r2,r2,r2
 8005718:	1009883a 	mov	r4,r2
 800571c:	8003f080 	call	8003f08 <pvPortMalloc>
 8005720:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 8005724:	e0bffb17 	ldw	r2,-20(fp)
 8005728:	10000c26 	beq	r2,zero,800575c <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800572c:	01001404 	movi	r4,80
 8005730:	8003f080 	call	8003f08 <pvPortMalloc>
 8005734:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 8005738:	e0bff917 	ldw	r2,-28(fp)
 800573c:	10000426 	beq	r2,zero,8005750 <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005740:	e0bff917 	ldw	r2,-28(fp)
 8005744:	e0fffb17 	ldw	r3,-20(fp)
 8005748:	10c00c15 	stw	r3,48(r2)
 800574c:	00000406 	br	8005760 <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005750:	e13ffb17 	ldw	r4,-20(fp)
 8005754:	80040dc0 	call	80040dc <vPortFree>
 8005758:	00000106 	br	8005760 <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800575c:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005760:	e0bff917 	ldw	r2,-28(fp)
 8005764:	10001226 	beq	r2,zero,80057b0 <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005768:	e0fffe0b 	ldhu	r3,-8(fp)
 800576c:	d8000315 	stw	zero,12(sp)
 8005770:	e0bff917 	ldw	r2,-28(fp)
 8005774:	d8800215 	stw	r2,8(sp)
 8005778:	e0800317 	ldw	r2,12(fp)
 800577c:	d8800115 	stw	r2,4(sp)
 8005780:	e0800217 	ldw	r2,8(fp)
 8005784:	d8800015 	stw	r2,0(sp)
 8005788:	e1ffff17 	ldw	r7,-4(fp)
 800578c:	180d883a 	mov	r6,r3
 8005790:	e17ffd17 	ldw	r5,-12(fp)
 8005794:	e13ffc17 	ldw	r4,-16(fp)
 8005798:	80057d00 	call	80057d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579c:	e13ff917 	ldw	r4,-28(fp)
 80057a0:	80059b40 	call	80059b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a4:	00800044 	movi	r2,1
 80057a8:	e0bffa15 	stw	r2,-24(fp)
 80057ac:	00000206 	br	80057b8 <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057b0:	00bfffc4 	movi	r2,-1
 80057b4:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 80057b8:	e0bffa17 	ldw	r2,-24(fp)
	}
 80057bc:	e037883a 	mov	sp,fp
 80057c0:	dfc00117 	ldw	ra,4(sp)
 80057c4:	df000017 	ldw	fp,0(sp)
 80057c8:	dec00204 	addi	sp,sp,8
 80057cc:	f800283a 	ret

080057d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057d0:	defff804 	addi	sp,sp,-32
 80057d4:	dfc00715 	stw	ra,28(sp)
 80057d8:	df000615 	stw	fp,24(sp)
 80057dc:	df000604 	addi	fp,sp,24
 80057e0:	e13ffc15 	stw	r4,-16(fp)
 80057e4:	e17ffd15 	stw	r5,-12(fp)
 80057e8:	e1bffe15 	stw	r6,-8(fp)
 80057ec:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f0:	e0800417 	ldw	r2,16(fp)
 80057f4:	10c00c17 	ldw	r3,48(r2)
 80057f8:	e0bffe17 	ldw	r2,-8(fp)
 80057fc:	1085883a 	add	r2,r2,r2
 8005800:	1085883a 	add	r2,r2,r2
 8005804:	100d883a 	mov	r6,r2
 8005808:	01402944 	movi	r5,165
 800580c:	1809883a 	mov	r4,r3
 8005810:	80098640 	call	8009864 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005814:	e0800417 	ldw	r2,16(fp)
 8005818:	10c00c17 	ldw	r3,48(r2)
 800581c:	e13ffe17 	ldw	r4,-8(fp)
 8005820:	00900034 	movhi	r2,16384
 8005824:	10bfffc4 	addi	r2,r2,-1
 8005828:	2085883a 	add	r2,r4,r2
 800582c:	1085883a 	add	r2,r2,r2
 8005830:	1085883a 	add	r2,r2,r2
 8005834:	1885883a 	add	r2,r3,r2
 8005838:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800583c:	e0fffb17 	ldw	r3,-20(fp)
 8005840:	00bfff04 	movi	r2,-4
 8005844:	1884703a 	and	r2,r3,r2
 8005848:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800584c:	e0bffd17 	ldw	r2,-12(fp)
 8005850:	10001e26 	beq	r2,zero,80058cc <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005854:	e03ffa15 	stw	zero,-24(fp)
 8005858:	00001406 	br	80058ac <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800585c:	e0fffd17 	ldw	r3,-12(fp)
 8005860:	e0bffa17 	ldw	r2,-24(fp)
 8005864:	1885883a 	add	r2,r3,r2
 8005868:	10c00003 	ldbu	r3,0(r2)
 800586c:	e1000417 	ldw	r4,16(fp)
 8005870:	e0bffa17 	ldw	r2,-24(fp)
 8005874:	2085883a 	add	r2,r4,r2
 8005878:	10800d04 	addi	r2,r2,52
 800587c:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005880:	e0fffd17 	ldw	r3,-12(fp)
 8005884:	e0bffa17 	ldw	r2,-24(fp)
 8005888:	1885883a 	add	r2,r3,r2
 800588c:	10800003 	ldbu	r2,0(r2)
 8005890:	10803fcc 	andi	r2,r2,255
 8005894:	1080201c 	xori	r2,r2,128
 8005898:	10bfe004 	addi	r2,r2,-128
 800589c:	10000726 	beq	r2,zero,80058bc <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058a0:	e0bffa17 	ldw	r2,-24(fp)
 80058a4:	10800044 	addi	r2,r2,1
 80058a8:	e0bffa15 	stw	r2,-24(fp)
 80058ac:	e0bffa17 	ldw	r2,-24(fp)
 80058b0:	10800230 	cmpltui	r2,r2,8
 80058b4:	103fe91e 	bne	r2,zero,800585c <prvInitialiseNewTask+0x8c>
 80058b8:	00000106 	br	80058c0 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 80058bc:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058c0:	e0800417 	ldw	r2,16(fp)
 80058c4:	10000ec5 	stb	zero,59(r2)
 80058c8:	00000206 	br	80058d4 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058cc:	e0800417 	ldw	r2,16(fp)
 80058d0:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058d4:	e0800217 	ldw	r2,8(fp)
 80058d8:	10800170 	cmpltui	r2,r2,5
 80058dc:	1000021e 	bne	r2,zero,80058e8 <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058e0:	00800104 	movi	r2,4
 80058e4:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058e8:	e0800417 	ldw	r2,16(fp)
 80058ec:	e0c00217 	ldw	r3,8(fp)
 80058f0:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f4:	e0800417 	ldw	r2,16(fp)
 80058f8:	e0c00217 	ldw	r3,8(fp)
 80058fc:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 8005900:	e0800417 	ldw	r2,16(fp)
 8005904:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005908:	e0800417 	ldw	r2,16(fp)
 800590c:	10800104 	addi	r2,r2,4
 8005910:	1009883a 	mov	r4,r2
 8005914:	80038480 	call	8003848 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005918:	e0800417 	ldw	r2,16(fp)
 800591c:	10800604 	addi	r2,r2,24
 8005920:	1009883a 	mov	r4,r2
 8005924:	80038480 	call	8003848 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005928:	e0800417 	ldw	r2,16(fp)
 800592c:	e0c00417 	ldw	r3,16(fp)
 8005930:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005934:	00c00144 	movi	r3,5
 8005938:	e0800217 	ldw	r2,8(fp)
 800593c:	1887c83a 	sub	r3,r3,r2
 8005940:	e0800417 	ldw	r2,16(fp)
 8005944:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005948:	e0800417 	ldw	r2,16(fp)
 800594c:	e0c00417 	ldw	r3,16(fp)
 8005950:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 8005954:	e0800417 	ldw	r2,16(fp)
 8005958:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800595c:	e0800417 	ldw	r2,16(fp)
 8005960:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005964:	e0800417 	ldw	r2,16(fp)
 8005968:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800596c:	e1bfff17 	ldw	r6,-4(fp)
 8005970:	e17ffc17 	ldw	r5,-16(fp)
 8005974:	e13ffb17 	ldw	r4,-20(fp)
 8005978:	8003a980 	call	8003a98 <pxPortInitialiseStack>
 800597c:	1007883a 	mov	r3,r2
 8005980:	e0800417 	ldw	r2,16(fp)
 8005984:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005988:	e0800317 	ldw	r2,12(fp)
 800598c:	10000326 	beq	r2,zero,800599c <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005990:	e0800317 	ldw	r2,12(fp)
 8005994:	e0c00417 	ldw	r3,16(fp)
 8005998:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599c:	0001883a 	nop
 80059a0:	e037883a 	mov	sp,fp
 80059a4:	dfc00117 	ldw	ra,4(sp)
 80059a8:	df000017 	ldw	fp,0(sp)
 80059ac:	dec00204 	addi	sp,sp,8
 80059b0:	f800283a 	ret

080059b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059b4:	defffd04 	addi	sp,sp,-12
 80059b8:	dfc00215 	stw	ra,8(sp)
 80059bc:	df000115 	stw	fp,4(sp)
 80059c0:	df000104 	addi	fp,sp,4
 80059c4:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059c8:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059cc:	d0a89e17 	ldw	r2,-23944(gp)
 80059d0:	10800044 	addi	r2,r2,1
 80059d4:	d0a89e15 	stw	r2,-23944(gp)
		if( pxCurrentTCB == NULL )
 80059d8:	d0a89a17 	ldw	r2,-23960(gp)
 80059dc:	1000071e 	bne	r2,zero,80059fc <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059e0:	e0bfff17 	ldw	r2,-4(fp)
 80059e4:	d0a89a15 	stw	r2,-23960(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059e8:	d0a89e17 	ldw	r2,-23944(gp)
 80059ec:	10800058 	cmpnei	r2,r2,1
 80059f0:	10000b1e 	bne	r2,zero,8005a20 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059f4:	8006c940 	call	8006c94 <prvInitialiseTaskLists>
 80059f8:	00000906 	br	8005a20 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059fc:	d0a8a117 	ldw	r2,-23932(gp)
 8005a00:	1000071e 	bne	r2,zero,8005a20 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a04:	d0a89a17 	ldw	r2,-23960(gp)
 8005a08:	10800b17 	ldw	r2,44(r2)
 8005a0c:	e0ffff17 	ldw	r3,-4(fp)
 8005a10:	18c00b17 	ldw	r3,44(r3)
 8005a14:	18800236 	bltu	r3,r2,8005a20 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 8005a18:	e0bfff17 	ldw	r2,-4(fp)
 8005a1c:	d0a89a15 	stw	r2,-23960(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a20:	d0a8a517 	ldw	r2,-23916(gp)
 8005a24:	10800044 	addi	r2,r2,1
 8005a28:	d0a8a515 	stw	r2,-23916(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a2c:	e0bfff17 	ldw	r2,-4(fp)
 8005a30:	10800b17 	ldw	r2,44(r2)
 8005a34:	d0e8a017 	ldw	r3,-23936(gp)
 8005a38:	1880032e 	bgeu	r3,r2,8005a48 <prvAddNewTaskToReadyList+0x94>
 8005a3c:	e0bfff17 	ldw	r2,-4(fp)
 8005a40:	10800b17 	ldw	r2,44(r2)
 8005a44:	d0a8a015 	stw	r2,-23936(gp)
 8005a48:	e0bfff17 	ldw	r2,-4(fp)
 8005a4c:	10800b17 	ldw	r2,44(r2)
 8005a50:	01400504 	movi	r5,20
 8005a54:	1009883a 	mov	r4,r2
 8005a58:	80086340 	call	8008634 <__mulsi3>
 8005a5c:	1007883a 	mov	r3,r2
 8005a60:	008220b4 	movhi	r2,2178
 8005a64:	10ba0904 	addi	r2,r2,-6108
 8005a68:	1887883a 	add	r3,r3,r2
 8005a6c:	e0bfff17 	ldw	r2,-4(fp)
 8005a70:	10800104 	addi	r2,r2,4
 8005a74:	100b883a 	mov	r5,r2
 8005a78:	1809883a 	mov	r4,r3
 8005a7c:	80038740 	call	8003874 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a80:	80073700 	call	8007370 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a84:	d0a8a117 	ldw	r2,-23932(gp)
 8005a88:	10000626 	beq	r2,zero,8005aa4 <prvAddNewTaskToReadyList+0xf0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a8c:	d0a89a17 	ldw	r2,-23960(gp)
 8005a90:	10c00b17 	ldw	r3,44(r2)
 8005a94:	e0bfff17 	ldw	r2,-4(fp)
 8005a98:	10800b17 	ldw	r2,44(r2)
 8005a9c:	1880012e 	bgeu	r3,r2,8005aa4 <prvAddNewTaskToReadyList+0xf0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aa0:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa4:	0001883a 	nop
 8005aa8:	e037883a 	mov	sp,fp
 8005aac:	dfc00117 	ldw	ra,4(sp)
 8005ab0:	df000017 	ldw	fp,0(sp)
 8005ab4:	dec00204 	addi	sp,sp,8
 8005ab8:	f800283a 	ret

08005abc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005abc:	defffc04 	addi	sp,sp,-16
 8005ac0:	dfc00315 	stw	ra,12(sp)
 8005ac4:	df000215 	stw	fp,8(sp)
 8005ac8:	df000204 	addi	fp,sp,8
 8005acc:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005ad0:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005ad4:	e0bfff17 	ldw	r2,-4(fp)
 8005ad8:	1000021e 	bne	r2,zero,8005ae4 <vTaskDelete+0x28>
 8005adc:	d0a89a17 	ldw	r2,-23960(gp)
 8005ae0:	00000106 	br	8005ae8 <vTaskDelete+0x2c>
 8005ae4:	e0bfff17 	ldw	r2,-4(fp)
 8005ae8:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aec:	e0bffe17 	ldw	r2,-8(fp)
 8005af0:	10800104 	addi	r2,r2,4
 8005af4:	1009883a 	mov	r4,r2
 8005af8:	80039d80 	call	80039d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005afc:	e0bffe17 	ldw	r2,-8(fp)
 8005b00:	10800a17 	ldw	r2,40(r2)
 8005b04:	10000426 	beq	r2,zero,8005b18 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b08:	e0bffe17 	ldw	r2,-8(fp)
 8005b0c:	10800604 	addi	r2,r2,24
 8005b10:	1009883a 	mov	r4,r2
 8005b14:	80039d80 	call	80039d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005b18:	d0a8a517 	ldw	r2,-23916(gp)
 8005b1c:	10800044 	addi	r2,r2,1
 8005b20:	d0a8a515 	stw	r2,-23916(gp)

			if( pxTCB == pxCurrentTCB )
 8005b24:	d0a89a17 	ldw	r2,-23960(gp)
 8005b28:	e0fffe17 	ldw	r3,-8(fp)
 8005b2c:	18800a1e 	bne	r3,r2,8005b58 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005b30:	e0bffe17 	ldw	r2,-8(fp)
 8005b34:	10800104 	addi	r2,r2,4
 8005b38:	100b883a 	mov	r5,r2
 8005b3c:	010220b4 	movhi	r4,2178
 8005b40:	213a3104 	addi	r4,r4,-5948
 8005b44:	80038740 	call	8003874 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005b48:	d0a89d17 	ldw	r2,-23948(gp)
 8005b4c:	10800044 	addi	r2,r2,1
 8005b50:	d0a89d15 	stw	r2,-23948(gp)
 8005b54:	00000606 	br	8005b70 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005b58:	d0a89e17 	ldw	r2,-23944(gp)
 8005b5c:	10bfffc4 	addi	r2,r2,-1
 8005b60:	d0a89e15 	stw	r2,-23944(gp)
				prvDeleteTCB( pxTCB );
 8005b64:	e13ffe17 	ldw	r4,-8(fp)
 8005b68:	8006e980 	call	8006e98 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005b6c:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005b70:	80073700 	call	8007370 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005b74:	d0a8a117 	ldw	r2,-23932(gp)
 8005b78:	10000426 	beq	r2,zero,8005b8c <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 8005b7c:	d0a89a17 	ldw	r2,-23960(gp)
 8005b80:	e0fffe17 	ldw	r3,-8(fp)
 8005b84:	1880011e 	bne	r3,r2,8005b8c <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8005b88:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b8c:	0001883a 	nop
 8005b90:	e037883a 	mov	sp,fp
 8005b94:	dfc00117 	ldw	ra,4(sp)
 8005b98:	df000017 	ldw	fp,0(sp)
 8005b9c:	dec00204 	addi	sp,sp,8
 8005ba0:	f800283a 	ret

08005ba4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005ba4:	defff804 	addi	sp,sp,-32
 8005ba8:	dfc00715 	stw	ra,28(sp)
 8005bac:	df000615 	stw	fp,24(sp)
 8005bb0:	df000604 	addi	fp,sp,24
 8005bb4:	e13ffe15 	stw	r4,-8(fp)
 8005bb8:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005bbc:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 8005bc0:	80063580 	call	8006358 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005bc4:	d0a89f17 	ldw	r2,-23940(gp)
 8005bc8:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005bcc:	e0bffe17 	ldw	r2,-8(fp)
 8005bd0:	10c00017 	ldw	r3,0(r2)
 8005bd4:	e0bfff17 	ldw	r2,-4(fp)
 8005bd8:	1885883a 	add	r2,r3,r2
 8005bdc:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 8005be0:	e0bffe17 	ldw	r2,-8(fp)
 8005be4:	10800017 	ldw	r2,0(r2)
 8005be8:	e0fffb17 	ldw	r3,-20(fp)
 8005bec:	18800a2e 	bgeu	r3,r2,8005c18 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005bf0:	e0bffe17 	ldw	r2,-8(fp)
 8005bf4:	10800017 	ldw	r2,0(r2)
 8005bf8:	e0fffc17 	ldw	r3,-16(fp)
 8005bfc:	18800f2e 	bgeu	r3,r2,8005c3c <vTaskDelayUntil+0x98>
 8005c00:	e0bffc17 	ldw	r2,-16(fp)
 8005c04:	e0fffb17 	ldw	r3,-20(fp)
 8005c08:	18800c2e 	bgeu	r3,r2,8005c3c <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 8005c0c:	00800044 	movi	r2,1
 8005c10:	e0bffa15 	stw	r2,-24(fp)
 8005c14:	00000906 	br	8005c3c <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c18:	e0bffe17 	ldw	r2,-8(fp)
 8005c1c:	10800017 	ldw	r2,0(r2)
 8005c20:	e0fffc17 	ldw	r3,-16(fp)
 8005c24:	18800336 	bltu	r3,r2,8005c34 <vTaskDelayUntil+0x90>
 8005c28:	e0bffc17 	ldw	r2,-16(fp)
 8005c2c:	e0fffb17 	ldw	r3,-20(fp)
 8005c30:	1880022e 	bgeu	r3,r2,8005c3c <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 8005c34:	00800044 	movi	r2,1
 8005c38:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c3c:	e0bffe17 	ldw	r2,-8(fp)
 8005c40:	e0fffc17 	ldw	r3,-16(fp)
 8005c44:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 8005c48:	e0bffa17 	ldw	r2,-24(fp)
 8005c4c:	10000626 	beq	r2,zero,8005c68 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005c50:	e0fffc17 	ldw	r3,-16(fp)
 8005c54:	e0bffb17 	ldw	r2,-20(fp)
 8005c58:	1885c83a 	sub	r2,r3,r2
 8005c5c:	000b883a 	mov	r5,zero
 8005c60:	1009883a 	mov	r4,r2
 8005c64:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005c68:	80063840 	call	8006384 <xTaskResumeAll>
 8005c6c:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c70:	e0bffd17 	ldw	r2,-12(fp)
 8005c74:	1000011e 	bne	r2,zero,8005c7c <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 8005c78:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c7c:	0001883a 	nop
 8005c80:	e037883a 	mov	sp,fp
 8005c84:	dfc00117 	ldw	ra,4(sp)
 8005c88:	df000017 	ldw	fp,0(sp)
 8005c8c:	dec00204 	addi	sp,sp,8
 8005c90:	f800283a 	ret

08005c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c94:	defffc04 	addi	sp,sp,-16
 8005c98:	dfc00315 	stw	ra,12(sp)
 8005c9c:	df000215 	stw	fp,8(sp)
 8005ca0:	df000204 	addi	fp,sp,8
 8005ca4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ca8:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cac:	e0bfff17 	ldw	r2,-4(fp)
 8005cb0:	10000626 	beq	r2,zero,8005ccc <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8005cb4:	80063580 	call	8006358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cb8:	000b883a 	mov	r5,zero
 8005cbc:	e13fff17 	ldw	r4,-4(fp)
 8005cc0:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cc4:	80063840 	call	8006384 <xTaskResumeAll>
 8005cc8:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ccc:	e0bffe17 	ldw	r2,-8(fp)
 8005cd0:	1000011e 	bne	r2,zero,8005cd8 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 8005cd4:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cd8:	0001883a 	nop
 8005cdc:	e037883a 	mov	sp,fp
 8005ce0:	dfc00117 	ldw	ra,4(sp)
 8005ce4:	df000017 	ldw	fp,0(sp)
 8005ce8:	dec00204 	addi	sp,sp,8
 8005cec:	f800283a 	ret

08005cf0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8005cf0:	defffb04 	addi	sp,sp,-20
 8005cf4:	dfc00415 	stw	ra,16(sp)
 8005cf8:	df000315 	stw	fp,12(sp)
 8005cfc:	df000304 	addi	fp,sp,12
 8005d00:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8005d04:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005d08:	e0bfff17 	ldw	r2,-4(fp)
 8005d0c:	1000021e 	bne	r2,zero,8005d18 <uxTaskPriorityGet+0x28>
 8005d10:	d0a89a17 	ldw	r2,-23960(gp)
 8005d14:	00000106 	br	8005d1c <uxTaskPriorityGet+0x2c>
 8005d18:	e0bfff17 	ldw	r2,-4(fp)
 8005d1c:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 8005d20:	e0bffd17 	ldw	r2,-12(fp)
 8005d24:	10800b17 	ldw	r2,44(r2)
 8005d28:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 8005d2c:	80073700 	call	8007370 <vTaskExitCritical>

		return uxReturn;
 8005d30:	e0bffe17 	ldw	r2,-8(fp)
	}
 8005d34:	e037883a 	mov	sp,fp
 8005d38:	dfc00117 	ldw	ra,4(sp)
 8005d3c:	df000017 	ldw	fp,0(sp)
 8005d40:	dec00204 	addi	sp,sp,8
 8005d44:	f800283a 	ret

08005d48 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8005d48:	defffb04 	addi	sp,sp,-20
 8005d4c:	df000415 	stw	fp,16(sp)
 8005d50:	df000404 	addi	fp,sp,16
 8005d54:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d58:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005d5c:	e0bfff17 	ldw	r2,-4(fp)
 8005d60:	1000021e 	bne	r2,zero,8005d6c <uxTaskPriorityGetFromISR+0x24>
 8005d64:	d0a89a17 	ldw	r2,-23960(gp)
 8005d68:	00000106 	br	8005d70 <uxTaskPriorityGetFromISR+0x28>
 8005d6c:	e0bfff17 	ldw	r2,-4(fp)
 8005d70:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 8005d74:	e0bffd17 	ldw	r2,-12(fp)
 8005d78:	10800b17 	ldw	r2,44(r2)
 8005d7c:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8005d80:	e0bffe17 	ldw	r2,-8(fp)
	}
 8005d84:	e037883a 	mov	sp,fp
 8005d88:	df000017 	ldw	fp,0(sp)
 8005d8c:	dec00104 	addi	sp,sp,4
 8005d90:	f800283a 	ret

08005d94 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005d94:	defff704 	addi	sp,sp,-36
 8005d98:	dfc00815 	stw	ra,32(sp)
 8005d9c:	df000715 	stw	fp,28(sp)
 8005da0:	dc000615 	stw	r16,24(sp)
 8005da4:	df000704 	addi	fp,sp,28
 8005da8:	e13ffd15 	stw	r4,-12(fp)
 8005dac:	e17ffe15 	stw	r5,-8(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005db0:	e03ff915 	stw	zero,-28(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005db4:	e0bffe17 	ldw	r2,-8(fp)
 8005db8:	10800170 	cmpltui	r2,r2,5
 8005dbc:	1000021e 	bne	r2,zero,8005dc8 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dc0:	00800104 	movi	r2,4
 8005dc4:	e0bffe15 	stw	r2,-8(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005dc8:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005dcc:	e0bffd17 	ldw	r2,-12(fp)
 8005dd0:	1000021e 	bne	r2,zero,8005ddc <vTaskPrioritySet+0x48>
 8005dd4:	d0a89a17 	ldw	r2,-23960(gp)
 8005dd8:	00000106 	br	8005de0 <vTaskPrioritySet+0x4c>
 8005ddc:	e0bffd17 	ldw	r2,-12(fp)
 8005de0:	e0bffa15 	stw	r2,-24(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005de4:	e0bffa17 	ldw	r2,-24(fp)
 8005de8:	10801017 	ldw	r2,64(r2)
 8005dec:	e0bffb15 	stw	r2,-20(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005df0:	e0fffb17 	ldw	r3,-20(fp)
 8005df4:	e0bffe17 	ldw	r2,-8(fp)
 8005df8:	18804e26 	beq	r3,r2,8005f34 <vTaskPrioritySet+0x1a0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005dfc:	e0bffe17 	ldw	r2,-8(fp)
 8005e00:	e0fffb17 	ldw	r3,-20(fp)
 8005e04:	18800a2e 	bgeu	r3,r2,8005e30 <vTaskPrioritySet+0x9c>
				{
					if( pxTCB != pxCurrentTCB )
 8005e08:	d0a89a17 	ldw	r2,-23960(gp)
 8005e0c:	e0fffa17 	ldw	r3,-24(fp)
 8005e10:	18800c26 	beq	r3,r2,8005e44 <vTaskPrioritySet+0xb0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005e14:	d0a89a17 	ldw	r2,-23960(gp)
 8005e18:	10800b17 	ldw	r2,44(r2)
 8005e1c:	e0fffe17 	ldw	r3,-8(fp)
 8005e20:	18800836 	bltu	r3,r2,8005e44 <vTaskPrioritySet+0xb0>
						{
							xYieldRequired = pdTRUE;
 8005e24:	00800044 	movi	r2,1
 8005e28:	e0bff915 	stw	r2,-28(fp)
 8005e2c:	00000506 	br	8005e44 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005e30:	d0a89a17 	ldw	r2,-23960(gp)
 8005e34:	e0fffa17 	ldw	r3,-24(fp)
 8005e38:	1880021e 	bne	r3,r2,8005e44 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005e3c:	00800044 	movi	r2,1
 8005e40:	e0bff915 	stw	r2,-28(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e44:	e0bffa17 	ldw	r2,-24(fp)
 8005e48:	10800b17 	ldw	r2,44(r2)
 8005e4c:	e0bffc15 	stw	r2,-16(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005e50:	e0bffa17 	ldw	r2,-24(fp)
 8005e54:	10c01017 	ldw	r3,64(r2)
 8005e58:	e0bffa17 	ldw	r2,-24(fp)
 8005e5c:	10800b17 	ldw	r2,44(r2)
 8005e60:	1880031e 	bne	r3,r2,8005e70 <vTaskPrioritySet+0xdc>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005e64:	e0bffa17 	ldw	r2,-24(fp)
 8005e68:	e0fffe17 	ldw	r3,-8(fp)
 8005e6c:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005e70:	e0bffa17 	ldw	r2,-24(fp)
 8005e74:	e0fffe17 	ldw	r3,-8(fp)
 8005e78:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e7c:	e0bffa17 	ldw	r2,-24(fp)
 8005e80:	10800617 	ldw	r2,24(r2)
 8005e84:	10000516 	blt	r2,zero,8005e9c <vTaskPrioritySet+0x108>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e88:	00c00144 	movi	r3,5
 8005e8c:	e0bffe17 	ldw	r2,-8(fp)
 8005e90:	1887c83a 	sub	r3,r3,r2
 8005e94:	e0bffa17 	ldw	r2,-24(fp)
 8005e98:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e9c:	e0bffa17 	ldw	r2,-24(fp)
 8005ea0:	14000517 	ldw	r16,20(r2)
 8005ea4:	01400504 	movi	r5,20
 8005ea8:	e13ffc17 	ldw	r4,-16(fp)
 8005eac:	80086340 	call	8008634 <__mulsi3>
 8005eb0:	1007883a 	mov	r3,r2
 8005eb4:	008220b4 	movhi	r2,2178
 8005eb8:	10ba0904 	addi	r2,r2,-6108
 8005ebc:	1885883a 	add	r2,r3,r2
 8005ec0:	8080191e 	bne	r16,r2,8005f28 <vTaskPrioritySet+0x194>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec4:	e0bffa17 	ldw	r2,-24(fp)
 8005ec8:	10800104 	addi	r2,r2,4
 8005ecc:	1009883a 	mov	r4,r2
 8005ed0:	80039d80 	call	80039d8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005ed4:	e0bffa17 	ldw	r2,-24(fp)
 8005ed8:	10800b17 	ldw	r2,44(r2)
 8005edc:	d0e8a017 	ldw	r3,-23936(gp)
 8005ee0:	1880032e 	bgeu	r3,r2,8005ef0 <vTaskPrioritySet+0x15c>
 8005ee4:	e0bffa17 	ldw	r2,-24(fp)
 8005ee8:	10800b17 	ldw	r2,44(r2)
 8005eec:	d0a8a015 	stw	r2,-23936(gp)
 8005ef0:	e0bffa17 	ldw	r2,-24(fp)
 8005ef4:	10800b17 	ldw	r2,44(r2)
 8005ef8:	01400504 	movi	r5,20
 8005efc:	1009883a 	mov	r4,r2
 8005f00:	80086340 	call	8008634 <__mulsi3>
 8005f04:	1007883a 	mov	r3,r2
 8005f08:	008220b4 	movhi	r2,2178
 8005f0c:	10ba0904 	addi	r2,r2,-6108
 8005f10:	1887883a 	add	r3,r3,r2
 8005f14:	e0bffa17 	ldw	r2,-24(fp)
 8005f18:	10800104 	addi	r2,r2,4
 8005f1c:	100b883a 	mov	r5,r2
 8005f20:	1809883a 	mov	r4,r3
 8005f24:	80038740 	call	8003874 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005f28:	e0bff917 	ldw	r2,-28(fp)
 8005f2c:	10000126 	beq	r2,zero,8005f34 <vTaskPrioritySet+0x1a0>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005f30:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005f34:	80073700 	call	8007370 <vTaskExitCritical>
	}
 8005f38:	0001883a 	nop
 8005f3c:	e6ffff04 	addi	sp,fp,-4
 8005f40:	dfc00217 	ldw	ra,8(sp)
 8005f44:	df000117 	ldw	fp,4(sp)
 8005f48:	dc000017 	ldw	r16,0(sp)
 8005f4c:	dec00304 	addi	sp,sp,12
 8005f50:	f800283a 	ret

08005f54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005f54:	defffc04 	addi	sp,sp,-16
 8005f58:	dfc00315 	stw	ra,12(sp)
 8005f5c:	df000215 	stw	fp,8(sp)
 8005f60:	df000204 	addi	fp,sp,8
 8005f64:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f68:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f6c:	e0bfff17 	ldw	r2,-4(fp)
 8005f70:	1000021e 	bne	r2,zero,8005f7c <vTaskSuspend+0x28>
 8005f74:	d0a89a17 	ldw	r2,-23960(gp)
 8005f78:	00000106 	br	8005f80 <vTaskSuspend+0x2c>
 8005f7c:	e0bfff17 	ldw	r2,-4(fp)
 8005f80:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f84:	e0bffe17 	ldw	r2,-8(fp)
 8005f88:	10800104 	addi	r2,r2,4
 8005f8c:	1009883a 	mov	r4,r2
 8005f90:	80039d80 	call	80039d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f94:	e0bffe17 	ldw	r2,-8(fp)
 8005f98:	10800a17 	ldw	r2,40(r2)
 8005f9c:	10000426 	beq	r2,zero,8005fb0 <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fa0:	e0bffe17 	ldw	r2,-8(fp)
 8005fa4:	10800604 	addi	r2,r2,24
 8005fa8:	1009883a 	mov	r4,r2
 8005fac:	80039d80 	call	80039d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005fb0:	e0bffe17 	ldw	r2,-8(fp)
 8005fb4:	10800104 	addi	r2,r2,4
 8005fb8:	100b883a 	mov	r5,r2
 8005fbc:	010220b4 	movhi	r4,2178
 8005fc0:	213a3604 	addi	r4,r4,-5928
 8005fc4:	80038740 	call	8003874 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005fc8:	e0bffe17 	ldw	r2,-8(fp)
 8005fcc:	10801303 	ldbu	r2,76(r2)
 8005fd0:	10803fcc 	andi	r2,r2,255
 8005fd4:	10800058 	cmpnei	r2,r2,1
 8005fd8:	1000021e 	bne	r2,zero,8005fe4 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fdc:	e0bffe17 	ldw	r2,-8(fp)
 8005fe0:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005fe4:	80073700 	call	8007370 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005fe8:	d0a8a117 	ldw	r2,-23932(gp)
 8005fec:	10000326 	beq	r2,zero,8005ffc <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005ff0:	800731c0 	call	800731c <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005ff4:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005ff8:	80073700 	call	8007370 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005ffc:	d0a89a17 	ldw	r2,-23960(gp)
 8006000:	e0fffe17 	ldw	r3,-8(fp)
 8006004:	18800c1e 	bne	r3,r2,8006038 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 8006008:	d0a8a117 	ldw	r2,-23932(gp)
 800600c:	10000226 	beq	r2,zero,8006018 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8006010:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006014:	00000806 	br	8006038 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006018:	008220b4 	movhi	r2,2178
 800601c:	10ba3604 	addi	r2,r2,-5928
 8006020:	10c00017 	ldw	r3,0(r2)
 8006024:	d0a89e17 	ldw	r2,-23944(gp)
 8006028:	1880021e 	bne	r3,r2,8006034 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 800602c:	d0289a15 	stw	zero,-23960(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006030:	00000106 	br	8006038 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 8006034:	80067680 	call	8006768 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006038:	0001883a 	nop
 800603c:	e037883a 	mov	sp,fp
 8006040:	dfc00117 	ldw	ra,4(sp)
 8006044:	df000017 	ldw	fp,0(sp)
 8006048:	dec00204 	addi	sp,sp,8
 800604c:	f800283a 	ret

08006050 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006050:	defffc04 	addi	sp,sp,-16
 8006054:	df000315 	stw	fp,12(sp)
 8006058:	df000304 	addi	fp,sp,12
 800605c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 8006060:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 8006064:	e0bfff17 	ldw	r2,-4(fp)
 8006068:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800606c:	e0bffe17 	ldw	r2,-8(fp)
 8006070:	10c00517 	ldw	r3,20(r2)
 8006074:	008220b4 	movhi	r2,2178
 8006078:	10ba3604 	addi	r2,r2,-5928
 800607c:	18800a1e 	bne	r3,r2,80060a8 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006080:	e0bffe17 	ldw	r2,-8(fp)
 8006084:	10c00a17 	ldw	r3,40(r2)
 8006088:	008220b4 	movhi	r2,2178
 800608c:	10ba2c04 	addi	r2,r2,-5968
 8006090:	18800526 	beq	r3,r2,80060a8 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006094:	e0bffe17 	ldw	r2,-8(fp)
 8006098:	10800a17 	ldw	r2,40(r2)
 800609c:	1000021e 	bne	r2,zero,80060a8 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 80060a0:	00800044 	movi	r2,1
 80060a4:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060a8:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80060ac:	e037883a 	mov	sp,fp
 80060b0:	df000017 	ldw	fp,0(sp)
 80060b4:	dec00104 	addi	sp,sp,4
 80060b8:	f800283a 	ret

080060bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80060bc:	defffc04 	addi	sp,sp,-16
 80060c0:	dfc00315 	stw	ra,12(sp)
 80060c4:	df000215 	stw	fp,8(sp)
 80060c8:	df000204 	addi	fp,sp,8
 80060cc:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 80060d0:	e0bfff17 	ldw	r2,-4(fp)
 80060d4:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80060d8:	d0a89a17 	ldw	r2,-23960(gp)
 80060dc:	e0fffe17 	ldw	r3,-8(fp)
 80060e0:	18802626 	beq	r3,r2,800617c <vTaskResume+0xc0>
 80060e4:	e0bffe17 	ldw	r2,-8(fp)
 80060e8:	10002426 	beq	r2,zero,800617c <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 80060ec:	800731c0 	call	800731c <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80060f0:	e13ffe17 	ldw	r4,-8(fp)
 80060f4:	80060500 	call	8006050 <prvTaskIsTaskSuspended>
 80060f8:	10001f26 	beq	r2,zero,8006178 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80060fc:	e0bffe17 	ldw	r2,-8(fp)
 8006100:	10800104 	addi	r2,r2,4
 8006104:	1009883a 	mov	r4,r2
 8006108:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800610c:	e0bffe17 	ldw	r2,-8(fp)
 8006110:	10800b17 	ldw	r2,44(r2)
 8006114:	d0e8a017 	ldw	r3,-23936(gp)
 8006118:	1880032e 	bgeu	r3,r2,8006128 <vTaskResume+0x6c>
 800611c:	e0bffe17 	ldw	r2,-8(fp)
 8006120:	10800b17 	ldw	r2,44(r2)
 8006124:	d0a8a015 	stw	r2,-23936(gp)
 8006128:	e0bffe17 	ldw	r2,-8(fp)
 800612c:	10800b17 	ldw	r2,44(r2)
 8006130:	01400504 	movi	r5,20
 8006134:	1009883a 	mov	r4,r2
 8006138:	80086340 	call	8008634 <__mulsi3>
 800613c:	1007883a 	mov	r3,r2
 8006140:	008220b4 	movhi	r2,2178
 8006144:	10ba0904 	addi	r2,r2,-6108
 8006148:	1887883a 	add	r3,r3,r2
 800614c:	e0bffe17 	ldw	r2,-8(fp)
 8006150:	10800104 	addi	r2,r2,4
 8006154:	100b883a 	mov	r5,r2
 8006158:	1809883a 	mov	r4,r3
 800615c:	80038740 	call	8003874 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006160:	e0bffe17 	ldw	r2,-8(fp)
 8006164:	10c00b17 	ldw	r3,44(r2)
 8006168:	d0a89a17 	ldw	r2,-23960(gp)
 800616c:	10800b17 	ldw	r2,44(r2)
 8006170:	18800136 	bltu	r3,r2,8006178 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006174:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006178:	80073700 	call	8007370 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800617c:	0001883a 	nop
 8006180:	e037883a 	mov	sp,fp
 8006184:	dfc00117 	ldw	ra,4(sp)
 8006188:	df000017 	ldw	fp,0(sp)
 800618c:	dec00204 	addi	sp,sp,8
 8006190:	f800283a 	ret

08006194 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006194:	defffa04 	addi	sp,sp,-24
 8006198:	dfc00515 	stw	ra,20(sp)
 800619c:	df000415 	stw	fp,16(sp)
 80061a0:	df000404 	addi	fp,sp,16
 80061a4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 80061a8:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 80061ac:	e0bfff17 	ldw	r2,-4(fp)
 80061b0:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061b4:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80061b8:	e13ffd17 	ldw	r4,-12(fp)
 80061bc:	80060500 	call	8006050 <prvTaskIsTaskSuspended>
 80061c0:	10002926 	beq	r2,zero,8006268 <xTaskResumeFromISR+0xd4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061c4:	d0a8a817 	ldw	r2,-23904(gp)
 80061c8:	1000211e 	bne	r2,zero,8006250 <xTaskResumeFromISR+0xbc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061cc:	e0bffd17 	ldw	r2,-12(fp)
 80061d0:	10c00b17 	ldw	r3,44(r2)
 80061d4:	d0a89a17 	ldw	r2,-23960(gp)
 80061d8:	10800b17 	ldw	r2,44(r2)
 80061dc:	18800236 	bltu	r3,r2,80061e8 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 80061e0:	00800044 	movi	r2,1
 80061e4:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e8:	e0bffd17 	ldw	r2,-12(fp)
 80061ec:	10800104 	addi	r2,r2,4
 80061f0:	1009883a 	mov	r4,r2
 80061f4:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061f8:	e0bffd17 	ldw	r2,-12(fp)
 80061fc:	10800b17 	ldw	r2,44(r2)
 8006200:	d0e8a017 	ldw	r3,-23936(gp)
 8006204:	1880032e 	bgeu	r3,r2,8006214 <xTaskResumeFromISR+0x80>
 8006208:	e0bffd17 	ldw	r2,-12(fp)
 800620c:	10800b17 	ldw	r2,44(r2)
 8006210:	d0a8a015 	stw	r2,-23936(gp)
 8006214:	e0bffd17 	ldw	r2,-12(fp)
 8006218:	10800b17 	ldw	r2,44(r2)
 800621c:	01400504 	movi	r5,20
 8006220:	1009883a 	mov	r4,r2
 8006224:	80086340 	call	8008634 <__mulsi3>
 8006228:	1007883a 	mov	r3,r2
 800622c:	008220b4 	movhi	r2,2178
 8006230:	10ba0904 	addi	r2,r2,-6108
 8006234:	1887883a 	add	r3,r3,r2
 8006238:	e0bffd17 	ldw	r2,-12(fp)
 800623c:	10800104 	addi	r2,r2,4
 8006240:	100b883a 	mov	r5,r2
 8006244:	1809883a 	mov	r4,r3
 8006248:	80038740 	call	8003874 <vListInsertEnd>
 800624c:	00000606 	br	8006268 <xTaskResumeFromISR+0xd4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006250:	e0bffd17 	ldw	r2,-12(fp)
 8006254:	10800604 	addi	r2,r2,24
 8006258:	100b883a 	mov	r5,r2
 800625c:	010220b4 	movhi	r4,2178
 8006260:	213a2c04 	addi	r4,r4,-5968
 8006264:	80038740 	call	8003874 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006268:	e0bffc17 	ldw	r2,-16(fp)
	}
 800626c:	e037883a 	mov	sp,fp
 8006270:	dfc00117 	ldw	ra,4(sp)
 8006274:	df000017 	ldw	fp,0(sp)
 8006278:	dec00204 	addi	sp,sp,8
 800627c:	f800283a 	ret

08006280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006280:	defffa04 	addi	sp,sp,-24
 8006284:	dfc00515 	stw	ra,20(sp)
 8006288:	df000415 	stw	fp,16(sp)
 800628c:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006290:	d0a8a704 	addi	r2,gp,-23908
 8006294:	d8800115 	stw	r2,4(sp)
 8006298:	d8000015 	stw	zero,0(sp)
 800629c:	000f883a 	mov	r7,zero
 80062a0:	01810004 	movi	r6,1024
 80062a4:	014200b4 	movhi	r5,2050
 80062a8:	2967e204 	addi	r5,r5,-24696
 80062ac:	01020034 	movhi	r4,2048
 80062b0:	211b1e04 	addi	r4,r4,27768
 80062b4:	80056e80 	call	80056e8 <xTaskCreate>
 80062b8:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062bc:	e0bffe17 	ldw	r2,-8(fp)
 80062c0:	10800058 	cmpnei	r2,r2,1
 80062c4:	10000c1e 	bne	r2,zero,80062f8 <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80062c8:	0005303a 	rdctl	r2,status
 80062cc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80062d0:	e0ffff17 	ldw	r3,-4(fp)
 80062d4:	00bfff84 	movi	r2,-2
 80062d8:	1884703a 	and	r2,r3,r2
 80062dc:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e0:	00bfffc4 	movi	r2,-1
 80062e4:	d0a8a615 	stw	r2,-23912(gp)
		xSchedulerRunning = pdTRUE;
 80062e8:	00800044 	movi	r2,1
 80062ec:	d0a8a115 	stw	r2,-23932(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062f0:	d0289f15 	stw	zero,-23940(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062f4:	8003b780 	call	8003b78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062f8:	0001883a 	nop
 80062fc:	e037883a 	mov	sp,fp
 8006300:	dfc00117 	ldw	ra,4(sp)
 8006304:	df000017 	ldw	fp,0(sp)
 8006308:	dec00204 	addi	sp,sp,8
 800630c:	f800283a 	ret

08006310 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8006310:	defffd04 	addi	sp,sp,-12
 8006314:	dfc00215 	stw	ra,8(sp)
 8006318:	df000115 	stw	fp,4(sp)
 800631c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006320:	0005303a 	rdctl	r2,status
 8006324:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006328:	e0ffff17 	ldw	r3,-4(fp)
 800632c:	00bfff84 	movi	r2,-2
 8006330:	1884703a 	and	r2,r3,r2
 8006334:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8006338:	d028a115 	stw	zero,-23932(gp)
	vPortEndScheduler();
 800633c:	8003bb00 	call	8003bb0 <vPortEndScheduler>
}
 8006340:	0001883a 	nop
 8006344:	e037883a 	mov	sp,fp
 8006348:	dfc00117 	ldw	ra,4(sp)
 800634c:	df000017 	ldw	fp,0(sp)
 8006350:	dec00204 	addi	sp,sp,8
 8006354:	f800283a 	ret

08006358 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006358:	deffff04 	addi	sp,sp,-4
 800635c:	df000015 	stw	fp,0(sp)
 8006360:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006364:	d0a8a817 	ldw	r2,-23904(gp)
 8006368:	10800044 	addi	r2,r2,1
 800636c:	d0a8a815 	stw	r2,-23904(gp)
	portMEMORY_BARRIER();
}
 8006370:	0001883a 	nop
 8006374:	e037883a 	mov	sp,fp
 8006378:	df000017 	ldw	fp,0(sp)
 800637c:	dec00104 	addi	sp,sp,4
 8006380:	f800283a 	ret

08006384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006384:	defffb04 	addi	sp,sp,-20
 8006388:	dfc00415 	stw	ra,16(sp)
 800638c:	df000315 	stw	fp,12(sp)
 8006390:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 8006394:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 8006398:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800639c:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 80063a0:	d0a8a817 	ldw	r2,-23904(gp)
 80063a4:	10bfffc4 	addi	r2,r2,-1
 80063a8:	d0a8a815 	stw	r2,-23904(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ac:	d0a8a817 	ldw	r2,-23904(gp)
 80063b0:	1000461e 	bne	r2,zero,80064cc <xTaskResumeAll+0x148>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063b4:	d0a89e17 	ldw	r2,-23944(gp)
 80063b8:	10004426 	beq	r2,zero,80064cc <xTaskResumeAll+0x148>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063bc:	00002906 	br	8006464 <xTaskResumeAll+0xe0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	008220b4 	movhi	r2,2178
 80063c4:	10ba2c04 	addi	r2,r2,-5968
 80063c8:	10800317 	ldw	r2,12(r2)
 80063cc:	10800317 	ldw	r2,12(r2)
 80063d0:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063d4:	e0bffd17 	ldw	r2,-12(fp)
 80063d8:	10800604 	addi	r2,r2,24
 80063dc:	1009883a 	mov	r4,r2
 80063e0:	80039d80 	call	80039d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e4:	e0bffd17 	ldw	r2,-12(fp)
 80063e8:	10800104 	addi	r2,r2,4
 80063ec:	1009883a 	mov	r4,r2
 80063f0:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063f4:	e0bffd17 	ldw	r2,-12(fp)
 80063f8:	10800b17 	ldw	r2,44(r2)
 80063fc:	d0e8a017 	ldw	r3,-23936(gp)
 8006400:	1880032e 	bgeu	r3,r2,8006410 <xTaskResumeAll+0x8c>
 8006404:	e0bffd17 	ldw	r2,-12(fp)
 8006408:	10800b17 	ldw	r2,44(r2)
 800640c:	d0a8a015 	stw	r2,-23936(gp)
 8006410:	e0bffd17 	ldw	r2,-12(fp)
 8006414:	10800b17 	ldw	r2,44(r2)
 8006418:	01400504 	movi	r5,20
 800641c:	1009883a 	mov	r4,r2
 8006420:	80086340 	call	8008634 <__mulsi3>
 8006424:	1007883a 	mov	r3,r2
 8006428:	008220b4 	movhi	r2,2178
 800642c:	10ba0904 	addi	r2,r2,-6108
 8006430:	1887883a 	add	r3,r3,r2
 8006434:	e0bffd17 	ldw	r2,-12(fp)
 8006438:	10800104 	addi	r2,r2,4
 800643c:	100b883a 	mov	r5,r2
 8006440:	1809883a 	mov	r4,r3
 8006444:	80038740 	call	8003874 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006448:	e0bffd17 	ldw	r2,-12(fp)
 800644c:	10c00b17 	ldw	r3,44(r2)
 8006450:	d0a89a17 	ldw	r2,-23960(gp)
 8006454:	10800b17 	ldw	r2,44(r2)
 8006458:	18800236 	bltu	r3,r2,8006464 <xTaskResumeAll+0xe0>
					{
						xYieldPending = pdTRUE;
 800645c:	00800044 	movi	r2,1
 8006460:	d0a8a315 	stw	r2,-23924(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006464:	008220b4 	movhi	r2,2178
 8006468:	10ba2c04 	addi	r2,r2,-5968
 800646c:	10800017 	ldw	r2,0(r2)
 8006470:	103fd31e 	bne	r2,zero,80063c0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006474:	e0bffd17 	ldw	r2,-12(fp)
 8006478:	10000126 	beq	r2,zero,8006480 <xTaskResumeAll+0xfc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800647c:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006480:	d0a8a217 	ldw	r2,-23928(gp)
 8006484:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006488:	e0bfff17 	ldw	r2,-4(fp)
 800648c:	10000a26 	beq	r2,zero,80064b8 <xTaskResumeAll+0x134>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006490:	800659c0 	call	800659c <xTaskIncrementTick>
 8006494:	10000226 	beq	r2,zero,80064a0 <xTaskResumeAll+0x11c>
							{
								xYieldPending = pdTRUE;
 8006498:	00800044 	movi	r2,1
 800649c:	d0a8a315 	stw	r2,-23924(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064a0:	e0bfff17 	ldw	r2,-4(fp)
 80064a4:	10bfffc4 	addi	r2,r2,-1
 80064a8:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064ac:	e0bfff17 	ldw	r2,-4(fp)
 80064b0:	103ff71e 	bne	r2,zero,8006490 <xTaskResumeAll+0x10c>

						uxPendedTicks = 0;
 80064b4:	d028a215 	stw	zero,-23928(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064b8:	d0a8a317 	ldw	r2,-23924(gp)
 80064bc:	10000326 	beq	r2,zero,80064cc <xTaskResumeAll+0x148>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064c0:	00800044 	movi	r2,1
 80064c4:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064c8:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064cc:	80073700 	call	8007370 <vTaskExitCritical>

	return xAlreadyYielded;
 80064d0:	e0bffe17 	ldw	r2,-8(fp)
}
 80064d4:	e037883a 	mov	sp,fp
 80064d8:	dfc00117 	ldw	ra,4(sp)
 80064dc:	df000017 	ldw	fp,0(sp)
 80064e0:	dec00204 	addi	sp,sp,8
 80064e4:	f800283a 	ret

080064e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064e8:	defffe04 	addi	sp,sp,-8
 80064ec:	df000115 	stw	fp,4(sp)
 80064f0:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064f4:	d0a89f17 	ldw	r2,-23940(gp)
 80064f8:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064fc:	e0bfff17 	ldw	r2,-4(fp)
}
 8006500:	e037883a 	mov	sp,fp
 8006504:	df000017 	ldw	fp,0(sp)
 8006508:	dec00104 	addi	sp,sp,4
 800650c:	f800283a 	ret

08006510 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006510:	defffd04 	addi	sp,sp,-12
 8006514:	df000215 	stw	fp,8(sp)
 8006518:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800651c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 8006520:	d0a89f17 	ldw	r2,-23940(gp)
 8006524:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006528:	e0bfff17 	ldw	r2,-4(fp)
}
 800652c:	e037883a 	mov	sp,fp
 8006530:	df000017 	ldw	fp,0(sp)
 8006534:	dec00104 	addi	sp,sp,4
 8006538:	f800283a 	ret

0800653c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800653c:	deffff04 	addi	sp,sp,-4
 8006540:	df000015 	stw	fp,0(sp)
 8006544:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8006548:	d0a89e17 	ldw	r2,-23944(gp)
}
 800654c:	e037883a 	mov	sp,fp
 8006550:	df000017 	ldw	fp,0(sp)
 8006554:	dec00104 	addi	sp,sp,4
 8006558:	f800283a 	ret

0800655c <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800655c:	defffd04 	addi	sp,sp,-12
 8006560:	df000215 	stw	fp,8(sp)
 8006564:	df000204 	addi	fp,sp,8
 8006568:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800656c:	e0bfff17 	ldw	r2,-4(fp)
 8006570:	1000021e 	bne	r2,zero,800657c <pcTaskGetName+0x20>
 8006574:	d0a89a17 	ldw	r2,-23960(gp)
 8006578:	00000106 	br	8006580 <pcTaskGetName+0x24>
 800657c:	e0bfff17 	ldw	r2,-4(fp)
 8006580:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 8006584:	e0bffe17 	ldw	r2,-8(fp)
 8006588:	10800d04 	addi	r2,r2,52
}
 800658c:	e037883a 	mov	sp,fp
 8006590:	df000017 	ldw	fp,0(sp)
 8006594:	dec00104 	addi	sp,sp,4
 8006598:	f800283a 	ret

0800659c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800659c:	defff804 	addi	sp,sp,-32
 80065a0:	dfc00715 	stw	ra,28(sp)
 80065a4:	df000615 	stw	fp,24(sp)
 80065a8:	dc000515 	stw	r16,20(sp)
 80065ac:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065b0:	e03ffa15 	stw	zero,-24(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b4:	d0a8a817 	ldw	r2,-23904(gp)
 80065b8:	10005d1e 	bne	r2,zero,8006730 <xTaskIncrementTick+0x194>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065bc:	d0a89f17 	ldw	r2,-23940(gp)
 80065c0:	10800044 	addi	r2,r2,1
 80065c4:	e0bffb15 	stw	r2,-20(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065c8:	e0bffb17 	ldw	r2,-20(fp)
 80065cc:	d0a89f15 	stw	r2,-23940(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065d0:	e0bffb17 	ldw	r2,-20(fp)
 80065d4:	10000a1e 	bne	r2,zero,8006600 <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
 80065d8:	d0a89b17 	ldw	r2,-23956(gp)
 80065dc:	e0bffc15 	stw	r2,-16(fp)
 80065e0:	d0a89c17 	ldw	r2,-23952(gp)
 80065e4:	d0a89b15 	stw	r2,-23956(gp)
 80065e8:	e0bffc17 	ldw	r2,-16(fp)
 80065ec:	d0a89c15 	stw	r2,-23952(gp)
 80065f0:	d0a8a417 	ldw	r2,-23920(gp)
 80065f4:	10800044 	addi	r2,r2,1
 80065f8:	d0a8a415 	stw	r2,-23920(gp)
 80065fc:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006600:	d0a8a617 	ldw	r2,-23912(gp)
 8006604:	e0fffb17 	ldw	r3,-20(fp)
 8006608:	18803b36 	bltu	r3,r2,80066f8 <xTaskIncrementTick+0x15c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660c:	d0a89b17 	ldw	r2,-23956(gp)
 8006610:	10800017 	ldw	r2,0(r2)
 8006614:	1000031e 	bne	r2,zero,8006624 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	00bfffc4 	movi	r2,-1
 800661c:	d0a8a615 	stw	r2,-23912(gp)
					break;
 8006620:	00003506 	br	80066f8 <xTaskIncrementTick+0x15c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006624:	d0a89b17 	ldw	r2,-23956(gp)
 8006628:	10800317 	ldw	r2,12(r2)
 800662c:	10800317 	ldw	r2,12(r2)
 8006630:	e0bffd15 	stw	r2,-12(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006634:	e0bffd17 	ldw	r2,-12(fp)
 8006638:	10800117 	ldw	r2,4(r2)
 800663c:	e0bffe15 	stw	r2,-8(fp)

					if( xConstTickCount < xItemValue )
 8006640:	e0fffb17 	ldw	r3,-20(fp)
 8006644:	e0bffe17 	ldw	r2,-8(fp)
 8006648:	1880032e 	bgeu	r3,r2,8006658 <xTaskIncrementTick+0xbc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800664c:	e0bffe17 	ldw	r2,-8(fp)
 8006650:	d0a8a615 	stw	r2,-23912(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006654:	00002806 	br	80066f8 <xTaskIncrementTick+0x15c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006658:	e0bffd17 	ldw	r2,-12(fp)
 800665c:	10800104 	addi	r2,r2,4
 8006660:	1009883a 	mov	r4,r2
 8006664:	80039d80 	call	80039d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006668:	e0bffd17 	ldw	r2,-12(fp)
 800666c:	10800a17 	ldw	r2,40(r2)
 8006670:	10000426 	beq	r2,zero,8006684 <xTaskIncrementTick+0xe8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006674:	e0bffd17 	ldw	r2,-12(fp)
 8006678:	10800604 	addi	r2,r2,24
 800667c:	1009883a 	mov	r4,r2
 8006680:	80039d80 	call	80039d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006684:	e0bffd17 	ldw	r2,-12(fp)
 8006688:	10800b17 	ldw	r2,44(r2)
 800668c:	d0e8a017 	ldw	r3,-23936(gp)
 8006690:	1880032e 	bgeu	r3,r2,80066a0 <xTaskIncrementTick+0x104>
 8006694:	e0bffd17 	ldw	r2,-12(fp)
 8006698:	10800b17 	ldw	r2,44(r2)
 800669c:	d0a8a015 	stw	r2,-23936(gp)
 80066a0:	e0bffd17 	ldw	r2,-12(fp)
 80066a4:	10800b17 	ldw	r2,44(r2)
 80066a8:	01400504 	movi	r5,20
 80066ac:	1009883a 	mov	r4,r2
 80066b0:	80086340 	call	8008634 <__mulsi3>
 80066b4:	1007883a 	mov	r3,r2
 80066b8:	008220b4 	movhi	r2,2178
 80066bc:	10ba0904 	addi	r2,r2,-6108
 80066c0:	1887883a 	add	r3,r3,r2
 80066c4:	e0bffd17 	ldw	r2,-12(fp)
 80066c8:	10800104 	addi	r2,r2,4
 80066cc:	100b883a 	mov	r5,r2
 80066d0:	1809883a 	mov	r4,r3
 80066d4:	80038740 	call	8003874 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d8:	e0bffd17 	ldw	r2,-12(fp)
 80066dc:	10c00b17 	ldw	r3,44(r2)
 80066e0:	d0a89a17 	ldw	r2,-23960(gp)
 80066e4:	10800b17 	ldw	r2,44(r2)
 80066e8:	18bfc836 	bltu	r3,r2,800660c <xTaskIncrementTick+0x70>
						{
							xSwitchRequired = pdTRUE;
 80066ec:	00800044 	movi	r2,1
 80066f0:	e0bffa15 	stw	r2,-24(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80066f4:	003fc506 	br	800660c <xTaskIncrementTick+0x70>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066f8:	d0a89a17 	ldw	r2,-23960(gp)
 80066fc:	10800b17 	ldw	r2,44(r2)
 8006700:	040220b4 	movhi	r16,2178
 8006704:	843a0904 	addi	r16,r16,-6108
 8006708:	01400504 	movi	r5,20
 800670c:	1009883a 	mov	r4,r2
 8006710:	80086340 	call	8008634 <__mulsi3>
 8006714:	8085883a 	add	r2,r16,r2
 8006718:	10800017 	ldw	r2,0(r2)
 800671c:	108000b0 	cmpltui	r2,r2,2
 8006720:	1000061e 	bne	r2,zero,800673c <xTaskIncrementTick+0x1a0>
			{
				xSwitchRequired = pdTRUE;
 8006724:	00800044 	movi	r2,1
 8006728:	e0bffa15 	stw	r2,-24(fp)
 800672c:	00000306 	br	800673c <xTaskIncrementTick+0x1a0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006730:	d0a8a217 	ldw	r2,-23928(gp)
 8006734:	10800044 	addi	r2,r2,1
 8006738:	d0a8a215 	stw	r2,-23928(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800673c:	d0a8a317 	ldw	r2,-23924(gp)
 8006740:	10000226 	beq	r2,zero,800674c <xTaskIncrementTick+0x1b0>
		{
			xSwitchRequired = pdTRUE;
 8006744:	00800044 	movi	r2,1
 8006748:	e0bffa15 	stw	r2,-24(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800674c:	e0bffa17 	ldw	r2,-24(fp)
}
 8006750:	e6ffff04 	addi	sp,fp,-4
 8006754:	dfc00217 	ldw	ra,8(sp)
 8006758:	df000117 	ldw	fp,4(sp)
 800675c:	dc000017 	ldw	r16,0(sp)
 8006760:	dec00304 	addi	sp,sp,12
 8006764:	f800283a 	ret

08006768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006768:	defffb04 	addi	sp,sp,-20
 800676c:	dfc00415 	stw	ra,16(sp)
 8006770:	df000315 	stw	fp,12(sp)
 8006774:	dc000215 	stw	r16,8(sp)
 8006778:	df000304 	addi	fp,sp,12
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800677c:	d0a8a817 	ldw	r2,-23904(gp)
 8006780:	10000326 	beq	r2,zero,8006790 <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006784:	00800044 	movi	r2,1
 8006788:	d0a8a315 	stw	r2,-23924(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800678c:	00002d06 	br	8006844 <vTaskSwitchContext+0xdc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8006790:	d028a315 	stw	zero,-23924(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006794:	d0a8a017 	ldw	r2,-23936(gp)
 8006798:	e0bffd15 	stw	r2,-12(fp)
 800679c:	00000306 	br	80067ac <vTaskSwitchContext+0x44>
 80067a0:	e0bffd17 	ldw	r2,-12(fp)
 80067a4:	10bfffc4 	addi	r2,r2,-1
 80067a8:	e0bffd15 	stw	r2,-12(fp)
 80067ac:	040220b4 	movhi	r16,2178
 80067b0:	843a0904 	addi	r16,r16,-6108
 80067b4:	e0bffd17 	ldw	r2,-12(fp)
 80067b8:	01400504 	movi	r5,20
 80067bc:	1009883a 	mov	r4,r2
 80067c0:	80086340 	call	8008634 <__mulsi3>
 80067c4:	8085883a 	add	r2,r16,r2
 80067c8:	10800017 	ldw	r2,0(r2)
 80067cc:	103ff426 	beq	r2,zero,80067a0 <vTaskSwitchContext+0x38>
 80067d0:	01400504 	movi	r5,20
 80067d4:	e13ffd17 	ldw	r4,-12(fp)
 80067d8:	80086340 	call	8008634 <__mulsi3>
 80067dc:	1007883a 	mov	r3,r2
 80067e0:	008220b4 	movhi	r2,2178
 80067e4:	10ba0904 	addi	r2,r2,-6108
 80067e8:	1885883a 	add	r2,r3,r2
 80067ec:	e0bffe15 	stw	r2,-8(fp)
 80067f0:	e0bffe17 	ldw	r2,-8(fp)
 80067f4:	10800117 	ldw	r2,4(r2)
 80067f8:	10c00117 	ldw	r3,4(r2)
 80067fc:	e0bffe17 	ldw	r2,-8(fp)
 8006800:	10c00115 	stw	r3,4(r2)
 8006804:	e0bffe17 	ldw	r2,-8(fp)
 8006808:	10c00117 	ldw	r3,4(r2)
 800680c:	e0bffe17 	ldw	r2,-8(fp)
 8006810:	10800204 	addi	r2,r2,8
 8006814:	1880051e 	bne	r3,r2,800682c <vTaskSwitchContext+0xc4>
 8006818:	e0bffe17 	ldw	r2,-8(fp)
 800681c:	10800117 	ldw	r2,4(r2)
 8006820:	10c00117 	ldw	r3,4(r2)
 8006824:	e0bffe17 	ldw	r2,-8(fp)
 8006828:	10c00115 	stw	r3,4(r2)
 800682c:	e0bffe17 	ldw	r2,-8(fp)
 8006830:	10800117 	ldw	r2,4(r2)
 8006834:	10800317 	ldw	r2,12(r2)
 8006838:	d0a89a15 	stw	r2,-23960(gp)
 800683c:	e0bffd17 	ldw	r2,-12(fp)
 8006840:	d0a8a015 	stw	r2,-23936(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006844:	0001883a 	nop
 8006848:	e6ffff04 	addi	sp,fp,-4
 800684c:	dfc00217 	ldw	ra,8(sp)
 8006850:	df000117 	ldw	fp,4(sp)
 8006854:	dc000017 	ldw	r16,0(sp)
 8006858:	dec00304 	addi	sp,sp,12
 800685c:	f800283a 	ret

08006860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006860:	defffc04 	addi	sp,sp,-16
 8006864:	dfc00315 	stw	ra,12(sp)
 8006868:	df000215 	stw	fp,8(sp)
 800686c:	df000204 	addi	fp,sp,8
 8006870:	e13ffe15 	stw	r4,-8(fp)
 8006874:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006878:	d0a89a17 	ldw	r2,-23960(gp)
 800687c:	10800604 	addi	r2,r2,24
 8006880:	100b883a 	mov	r5,r2
 8006884:	e13ffe17 	ldw	r4,-8(fp)
 8006888:	80039000 	call	8003900 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800688c:	01400044 	movi	r5,1
 8006890:	e13fff17 	ldw	r4,-4(fp)
 8006894:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
}
 8006898:	0001883a 	nop
 800689c:	e037883a 	mov	sp,fp
 80068a0:	dfc00117 	ldw	ra,4(sp)
 80068a4:	df000017 	ldw	fp,0(sp)
 80068a8:	dec00204 	addi	sp,sp,8
 80068ac:	f800283a 	ret

080068b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80068b0:	defffb04 	addi	sp,sp,-20
 80068b4:	dfc00415 	stw	ra,16(sp)
 80068b8:	df000315 	stw	fp,12(sp)
 80068bc:	df000304 	addi	fp,sp,12
 80068c0:	e13ffd15 	stw	r4,-12(fp)
 80068c4:	e17ffe15 	stw	r5,-8(fp)
 80068c8:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80068cc:	d0a89a17 	ldw	r2,-23960(gp)
 80068d0:	e0fffe17 	ldw	r3,-8(fp)
 80068d4:	18e00034 	orhi	r3,r3,32768
 80068d8:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068dc:	d0a89a17 	ldw	r2,-23960(gp)
 80068e0:	10800604 	addi	r2,r2,24
 80068e4:	100b883a 	mov	r5,r2
 80068e8:	e13ffd17 	ldw	r4,-12(fp)
 80068ec:	80038740 	call	8003874 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068f0:	01400044 	movi	r5,1
 80068f4:	e13fff17 	ldw	r4,-4(fp)
 80068f8:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
}
 80068fc:	0001883a 	nop
 8006900:	e037883a 	mov	sp,fp
 8006904:	dfc00117 	ldw	ra,4(sp)
 8006908:	df000017 	ldw	fp,0(sp)
 800690c:	dec00204 	addi	sp,sp,8
 8006910:	f800283a 	ret

08006914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006914:	defffb04 	addi	sp,sp,-20
 8006918:	dfc00415 	stw	ra,16(sp)
 800691c:	df000315 	stw	fp,12(sp)
 8006920:	df000304 	addi	fp,sp,12
 8006924:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006928:	e0bfff17 	ldw	r2,-4(fp)
 800692c:	10800317 	ldw	r2,12(r2)
 8006930:	10800317 	ldw	r2,12(r2)
 8006934:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006938:	e0bffe17 	ldw	r2,-8(fp)
 800693c:	10800604 	addi	r2,r2,24
 8006940:	1009883a 	mov	r4,r2
 8006944:	80039d80 	call	80039d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006948:	d0a8a817 	ldw	r2,-23904(gp)
 800694c:	10001a1e 	bne	r2,zero,80069b8 <xTaskRemoveFromEventList+0xa4>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006950:	e0bffe17 	ldw	r2,-8(fp)
 8006954:	10800104 	addi	r2,r2,4
 8006958:	1009883a 	mov	r4,r2
 800695c:	80039d80 	call	80039d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006960:	e0bffe17 	ldw	r2,-8(fp)
 8006964:	10800b17 	ldw	r2,44(r2)
 8006968:	d0e8a017 	ldw	r3,-23936(gp)
 800696c:	1880032e 	bgeu	r3,r2,800697c <xTaskRemoveFromEventList+0x68>
 8006970:	e0bffe17 	ldw	r2,-8(fp)
 8006974:	10800b17 	ldw	r2,44(r2)
 8006978:	d0a8a015 	stw	r2,-23936(gp)
 800697c:	e0bffe17 	ldw	r2,-8(fp)
 8006980:	10800b17 	ldw	r2,44(r2)
 8006984:	01400504 	movi	r5,20
 8006988:	1009883a 	mov	r4,r2
 800698c:	80086340 	call	8008634 <__mulsi3>
 8006990:	1007883a 	mov	r3,r2
 8006994:	008220b4 	movhi	r2,2178
 8006998:	10ba0904 	addi	r2,r2,-6108
 800699c:	1887883a 	add	r3,r3,r2
 80069a0:	e0bffe17 	ldw	r2,-8(fp)
 80069a4:	10800104 	addi	r2,r2,4
 80069a8:	100b883a 	mov	r5,r2
 80069ac:	1809883a 	mov	r4,r3
 80069b0:	80038740 	call	8003874 <vListInsertEnd>
 80069b4:	00000606 	br	80069d0 <xTaskRemoveFromEventList+0xbc>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069b8:	e0bffe17 	ldw	r2,-8(fp)
 80069bc:	10800604 	addi	r2,r2,24
 80069c0:	100b883a 	mov	r5,r2
 80069c4:	010220b4 	movhi	r4,2178
 80069c8:	213a2c04 	addi	r4,r4,-5968
 80069cc:	80038740 	call	8003874 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069d0:	e0bffe17 	ldw	r2,-8(fp)
 80069d4:	10800b17 	ldw	r2,44(r2)
 80069d8:	d0e89a17 	ldw	r3,-23960(gp)
 80069dc:	18c00b17 	ldw	r3,44(r3)
 80069e0:	1880052e 	bgeu	r3,r2,80069f8 <xTaskRemoveFromEventList+0xe4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069e4:	00800044 	movi	r2,1
 80069e8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ec:	00800044 	movi	r2,1
 80069f0:	d0a8a315 	stw	r2,-23924(gp)
 80069f4:	00000106 	br	80069fc <xTaskRemoveFromEventList+0xe8>
	}
	else
	{
		xReturn = pdFALSE;
 80069f8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 80069fc:	e0bffd17 	ldw	r2,-12(fp)
}
 8006a00:	e037883a 	mov	sp,fp
 8006a04:	dfc00117 	ldw	ra,4(sp)
 8006a08:	df000017 	ldw	fp,0(sp)
 8006a0c:	dec00204 	addi	sp,sp,8
 8006a10:	f800283a 	ret

08006a14 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006a14:	defffb04 	addi	sp,sp,-20
 8006a18:	dfc00415 	stw	ra,16(sp)
 8006a1c:	df000315 	stw	fp,12(sp)
 8006a20:	df000304 	addi	fp,sp,12
 8006a24:	e13ffe15 	stw	r4,-8(fp)
 8006a28:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a2c:	e0bfff17 	ldw	r2,-4(fp)
 8006a30:	10e00034 	orhi	r3,r2,32768
 8006a34:	e0bffe17 	ldw	r2,-8(fp)
 8006a38:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3c:	e0bffe17 	ldw	r2,-8(fp)
 8006a40:	10800317 	ldw	r2,12(r2)
 8006a44:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8006a48:	e13ffe17 	ldw	r4,-8(fp)
 8006a4c:	80039d80 	call	80039d8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a50:	e0bffd17 	ldw	r2,-12(fp)
 8006a54:	10800104 	addi	r2,r2,4
 8006a58:	1009883a 	mov	r4,r2
 8006a5c:	80039d80 	call	80039d8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006a60:	e0bffd17 	ldw	r2,-12(fp)
 8006a64:	10800b17 	ldw	r2,44(r2)
 8006a68:	d0e8a017 	ldw	r3,-23936(gp)
 8006a6c:	1880032e 	bgeu	r3,r2,8006a7c <vTaskRemoveFromUnorderedEventList+0x68>
 8006a70:	e0bffd17 	ldw	r2,-12(fp)
 8006a74:	10800b17 	ldw	r2,44(r2)
 8006a78:	d0a8a015 	stw	r2,-23936(gp)
 8006a7c:	e0bffd17 	ldw	r2,-12(fp)
 8006a80:	10800b17 	ldw	r2,44(r2)
 8006a84:	01400504 	movi	r5,20
 8006a88:	1009883a 	mov	r4,r2
 8006a8c:	80086340 	call	8008634 <__mulsi3>
 8006a90:	1007883a 	mov	r3,r2
 8006a94:	008220b4 	movhi	r2,2178
 8006a98:	10ba0904 	addi	r2,r2,-6108
 8006a9c:	1887883a 	add	r3,r3,r2
 8006aa0:	e0bffd17 	ldw	r2,-12(fp)
 8006aa4:	10800104 	addi	r2,r2,4
 8006aa8:	100b883a 	mov	r5,r2
 8006aac:	1809883a 	mov	r4,r3
 8006ab0:	80038740 	call	8003874 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ab4:	e0bffd17 	ldw	r2,-12(fp)
 8006ab8:	10800b17 	ldw	r2,44(r2)
 8006abc:	d0e89a17 	ldw	r3,-23960(gp)
 8006ac0:	18c00b17 	ldw	r3,44(r3)
 8006ac4:	1880022e 	bgeu	r3,r2,8006ad0 <vTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006ac8:	00800044 	movi	r2,1
 8006acc:	d0a8a315 	stw	r2,-23924(gp)
	}
}
 8006ad0:	0001883a 	nop
 8006ad4:	e037883a 	mov	sp,fp
 8006ad8:	dfc00117 	ldw	ra,4(sp)
 8006adc:	df000017 	ldw	fp,0(sp)
 8006ae0:	dec00204 	addi	sp,sp,8
 8006ae4:	f800283a 	ret

08006ae8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae8:	defffd04 	addi	sp,sp,-12
 8006aec:	dfc00215 	stw	ra,8(sp)
 8006af0:	df000115 	stw	fp,4(sp)
 8006af4:	df000104 	addi	fp,sp,4
 8006af8:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 8006afc:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b00:	d0e8a417 	ldw	r3,-23920(gp)
 8006b04:	e0bfff17 	ldw	r2,-4(fp)
 8006b08:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006b0c:	d0e89f17 	ldw	r3,-23940(gp)
 8006b10:	e0bfff17 	ldw	r2,-4(fp)
 8006b14:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 8006b18:	80073700 	call	8007370 <vTaskExitCritical>
}
 8006b1c:	0001883a 	nop
 8006b20:	e037883a 	mov	sp,fp
 8006b24:	dfc00117 	ldw	ra,4(sp)
 8006b28:	df000017 	ldw	fp,0(sp)
 8006b2c:	dec00204 	addi	sp,sp,8
 8006b30:	f800283a 	ret

08006b34 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b34:	defffe04 	addi	sp,sp,-8
 8006b38:	df000115 	stw	fp,4(sp)
 8006b3c:	df000104 	addi	fp,sp,4
 8006b40:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b44:	d0e8a417 	ldw	r3,-23920(gp)
 8006b48:	e0bfff17 	ldw	r2,-4(fp)
 8006b4c:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b50:	d0e89f17 	ldw	r3,-23940(gp)
 8006b54:	e0bfff17 	ldw	r2,-4(fp)
 8006b58:	10c00115 	stw	r3,4(r2)
}
 8006b5c:	0001883a 	nop
 8006b60:	e037883a 	mov	sp,fp
 8006b64:	df000017 	ldw	fp,0(sp)
 8006b68:	dec00104 	addi	sp,sp,4
 8006b6c:	f800283a 	ret

08006b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b70:	defff904 	addi	sp,sp,-28
 8006b74:	dfc00615 	stw	ra,24(sp)
 8006b78:	df000515 	stw	fp,20(sp)
 8006b7c:	df000504 	addi	fp,sp,20
 8006b80:	e13ffe15 	stw	r4,-8(fp)
 8006b84:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8006b88:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b8c:	d0a89f17 	ldw	r2,-23940(gp)
 8006b90:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b94:	e0bffe17 	ldw	r2,-8(fp)
 8006b98:	10800117 	ldw	r2,4(r2)
 8006b9c:	e0fffc17 	ldw	r3,-16(fp)
 8006ba0:	1885c83a 	sub	r2,r3,r2
 8006ba4:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ba8:	e0bfff17 	ldw	r2,-4(fp)
 8006bac:	10800017 	ldw	r2,0(r2)
 8006bb0:	10bfffd8 	cmpnei	r2,r2,-1
 8006bb4:	1000021e 	bne	r2,zero,8006bc0 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb8:	e03ffb15 	stw	zero,-20(fp)
 8006bbc:	00001d06 	br	8006c34 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bc0:	e0bffe17 	ldw	r2,-8(fp)
 8006bc4:	10c00017 	ldw	r3,0(r2)
 8006bc8:	d0a8a417 	ldw	r2,-23920(gp)
 8006bcc:	18800726 	beq	r3,r2,8006bec <xTaskCheckForTimeOut+0x7c>
 8006bd0:	e0bffe17 	ldw	r2,-8(fp)
 8006bd4:	10800117 	ldw	r2,4(r2)
 8006bd8:	e0fffc17 	ldw	r3,-16(fp)
 8006bdc:	18800336 	bltu	r3,r2,8006bec <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006be0:	00800044 	movi	r2,1
 8006be4:	e0bffb15 	stw	r2,-20(fp)
 8006be8:	00001206 	br	8006c34 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bec:	e0bfff17 	ldw	r2,-4(fp)
 8006bf0:	10800017 	ldw	r2,0(r2)
 8006bf4:	e0fffd17 	ldw	r3,-12(fp)
 8006bf8:	18800a2e 	bgeu	r3,r2,8006c24 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bfc:	e0bfff17 	ldw	r2,-4(fp)
 8006c00:	10c00017 	ldw	r3,0(r2)
 8006c04:	e0bffd17 	ldw	r2,-12(fp)
 8006c08:	1887c83a 	sub	r3,r3,r2
 8006c0c:	e0bfff17 	ldw	r2,-4(fp)
 8006c10:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c14:	e13ffe17 	ldw	r4,-8(fp)
 8006c18:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c1c:	e03ffb15 	stw	zero,-20(fp)
 8006c20:	00000406 	br	8006c34 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c24:	e0bfff17 	ldw	r2,-4(fp)
 8006c28:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 8006c2c:	00800044 	movi	r2,1
 8006c30:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 8006c34:	80073700 	call	8007370 <vTaskExitCritical>

	return xReturn;
 8006c38:	e0bffb17 	ldw	r2,-20(fp)
}
 8006c3c:	e037883a 	mov	sp,fp
 8006c40:	dfc00117 	ldw	ra,4(sp)
 8006c44:	df000017 	ldw	fp,0(sp)
 8006c48:	dec00204 	addi	sp,sp,8
 8006c4c:	f800283a 	ret

08006c50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c50:	deffff04 	addi	sp,sp,-4
 8006c54:	df000015 	stw	fp,0(sp)
 8006c58:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 8006c5c:	00800044 	movi	r2,1
 8006c60:	d0a8a315 	stw	r2,-23924(gp)
}
 8006c64:	0001883a 	nop
 8006c68:	e037883a 	mov	sp,fp
 8006c6c:	df000017 	ldw	fp,0(sp)
 8006c70:	dec00104 	addi	sp,sp,4
 8006c74:	f800283a 	ret

08006c78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c78:	defffd04 	addi	sp,sp,-12
 8006c7c:	dfc00215 	stw	ra,8(sp)
 8006c80:	df000115 	stw	fp,4(sp)
 8006c84:	df000104 	addi	fp,sp,4
 8006c88:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c8c:	8006d540 	call	8006d54 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8006c90:	003ffe06 	br	8006c8c <prvIdleTask+0x14>

08006c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c94:	defffd04 	addi	sp,sp,-12
 8006c98:	dfc00215 	stw	ra,8(sp)
 8006c9c:	df000115 	stw	fp,4(sp)
 8006ca0:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca4:	e03fff15 	stw	zero,-4(fp)
 8006ca8:	00000c06 	br	8006cdc <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cac:	01400504 	movi	r5,20
 8006cb0:	e13fff17 	ldw	r4,-4(fp)
 8006cb4:	80086340 	call	8008634 <__mulsi3>
 8006cb8:	1007883a 	mov	r3,r2
 8006cbc:	008220b4 	movhi	r2,2178
 8006cc0:	10ba0904 	addi	r2,r2,-6108
 8006cc4:	1885883a 	add	r2,r3,r2
 8006cc8:	1009883a 	mov	r4,r2
 8006ccc:	80037e00 	call	80037e0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd0:	e0bfff17 	ldw	r2,-4(fp)
 8006cd4:	10800044 	addi	r2,r2,1
 8006cd8:	e0bfff15 	stw	r2,-4(fp)
 8006cdc:	e0bfff17 	ldw	r2,-4(fp)
 8006ce0:	10800170 	cmpltui	r2,r2,5
 8006ce4:	103ff11e 	bne	r2,zero,8006cac <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ce8:	010220b4 	movhi	r4,2178
 8006cec:	213a2204 	addi	r4,r4,-6008
 8006cf0:	80037e00 	call	80037e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cf4:	010220b4 	movhi	r4,2178
 8006cf8:	213a2704 	addi	r4,r4,-5988
 8006cfc:	80037e00 	call	80037e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d00:	010220b4 	movhi	r4,2178
 8006d04:	213a2c04 	addi	r4,r4,-5968
 8006d08:	80037e00 	call	80037e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d0c:	010220b4 	movhi	r4,2178
 8006d10:	213a3104 	addi	r4,r4,-5948
 8006d14:	80037e00 	call	80037e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d18:	010220b4 	movhi	r4,2178
 8006d1c:	213a3604 	addi	r4,r4,-5928
 8006d20:	80037e00 	call	80037e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d24:	008220b4 	movhi	r2,2178
 8006d28:	10ba2204 	addi	r2,r2,-6008
 8006d2c:	d0a89b15 	stw	r2,-23956(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d30:	008220b4 	movhi	r2,2178
 8006d34:	10ba2704 	addi	r2,r2,-5988
 8006d38:	d0a89c15 	stw	r2,-23952(gp)
}
 8006d3c:	0001883a 	nop
 8006d40:	e037883a 	mov	sp,fp
 8006d44:	dfc00117 	ldw	ra,4(sp)
 8006d48:	df000017 	ldw	fp,0(sp)
 8006d4c:	dec00204 	addi	sp,sp,8
 8006d50:	f800283a 	ret

08006d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d54:	defffd04 	addi	sp,sp,-12
 8006d58:	dfc00215 	stw	ra,8(sp)
 8006d5c:	df000115 	stw	fp,4(sp)
 8006d60:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d64:	00001306 	br	8006db4 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 8006d68:	800731c0 	call	800731c <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	008220b4 	movhi	r2,2178
 8006d70:	10ba3104 	addi	r2,r2,-5948
 8006d74:	10800317 	ldw	r2,12(r2)
 8006d78:	10800317 	ldw	r2,12(r2)
 8006d7c:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d80:	e0bfff17 	ldw	r2,-4(fp)
 8006d84:	10800104 	addi	r2,r2,4
 8006d88:	1009883a 	mov	r4,r2
 8006d8c:	80039d80 	call	80039d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d90:	d0a89e17 	ldw	r2,-23944(gp)
 8006d94:	10bfffc4 	addi	r2,r2,-1
 8006d98:	d0a89e15 	stw	r2,-23944(gp)
				--uxDeletedTasksWaitingCleanUp;
 8006d9c:	d0a89d17 	ldw	r2,-23948(gp)
 8006da0:	10bfffc4 	addi	r2,r2,-1
 8006da4:	d0a89d15 	stw	r2,-23948(gp)
			}
			taskEXIT_CRITICAL();
 8006da8:	80073700 	call	8007370 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 8006dac:	e13fff17 	ldw	r4,-4(fp)
 8006db0:	8006e980 	call	8006e98 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db4:	d0a89d17 	ldw	r2,-23948(gp)
 8006db8:	103feb1e 	bne	r2,zero,8006d68 <prvCheckTasksWaitingTermination+0x14>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dbc:	0001883a 	nop
 8006dc0:	e037883a 	mov	sp,fp
 8006dc4:	dfc00117 	ldw	ra,4(sp)
 8006dc8:	df000017 	ldw	fp,0(sp)
 8006dcc:	dec00204 	addi	sp,sp,8
 8006dd0:	f800283a 	ret

08006dd4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006dd4:	defffd04 	addi	sp,sp,-12
 8006dd8:	df000215 	stw	fp,8(sp)
 8006ddc:	df000204 	addi	fp,sp,8
 8006de0:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 8006de4:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006de8:	00000606 	br	8006e04 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006dec:	e0bfff17 	ldw	r2,-4(fp)
 8006df0:	10800044 	addi	r2,r2,1
 8006df4:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 8006df8:	e0bffe17 	ldw	r2,-8(fp)
 8006dfc:	10800044 	addi	r2,r2,1
 8006e00:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006e04:	e0bfff17 	ldw	r2,-4(fp)
 8006e08:	10800003 	ldbu	r2,0(r2)
 8006e0c:	10803fcc 	andi	r2,r2,255
 8006e10:	10802960 	cmpeqi	r2,r2,165
 8006e14:	103ff51e 	bne	r2,zero,8006dec <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006e18:	e0bffe17 	ldw	r2,-8(fp)
 8006e1c:	1004d0ba 	srli	r2,r2,2
 8006e20:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006e24:	e0bffe17 	ldw	r2,-8(fp)
	}
 8006e28:	e037883a 	mov	sp,fp
 8006e2c:	df000017 	ldw	fp,0(sp)
 8006e30:	dec00104 	addi	sp,sp,4
 8006e34:	f800283a 	ret

08006e38 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006e38:	defffa04 	addi	sp,sp,-24
 8006e3c:	dfc00515 	stw	ra,20(sp)
 8006e40:	df000415 	stw	fp,16(sp)
 8006e44:	df000404 	addi	fp,sp,16
 8006e48:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006e4c:	e0bfff17 	ldw	r2,-4(fp)
 8006e50:	1000021e 	bne	r2,zero,8006e5c <uxTaskGetStackHighWaterMark+0x24>
 8006e54:	d0a89a17 	ldw	r2,-23960(gp)
 8006e58:	00000106 	br	8006e60 <uxTaskGetStackHighWaterMark+0x28>
 8006e5c:	e0bfff17 	ldw	r2,-4(fp)
 8006e60:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006e64:	e0bffc17 	ldw	r2,-16(fp)
 8006e68:	10800c17 	ldw	r2,48(r2)
 8006e6c:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8006e70:	e13ffd17 	ldw	r4,-12(fp)
 8006e74:	8006dd40 	call	8006dd4 <prvTaskCheckFreeStackSpace>
 8006e78:	10bfffcc 	andi	r2,r2,65535
 8006e7c:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 8006e80:	e0bffe17 	ldw	r2,-8(fp)
	}
 8006e84:	e037883a 	mov	sp,fp
 8006e88:	dfc00117 	ldw	ra,4(sp)
 8006e8c:	df000017 	ldw	fp,0(sp)
 8006e90:	dec00204 	addi	sp,sp,8
 8006e94:	f800283a 	ret

08006e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e98:	defffd04 	addi	sp,sp,-12
 8006e9c:	dfc00215 	stw	ra,8(sp)
 8006ea0:	df000115 	stw	fp,4(sp)
 8006ea4:	df000104 	addi	fp,sp,4
 8006ea8:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006eac:	e0bfff17 	ldw	r2,-4(fp)
 8006eb0:	10800c17 	ldw	r2,48(r2)
 8006eb4:	1009883a 	mov	r4,r2
 8006eb8:	80040dc0 	call	80040dc <vPortFree>
			vPortFree( pxTCB );
 8006ebc:	e13fff17 	ldw	r4,-4(fp)
 8006ec0:	80040dc0 	call	80040dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ec4:	0001883a 	nop
 8006ec8:	e037883a 	mov	sp,fp
 8006ecc:	dfc00117 	ldw	ra,4(sp)
 8006ed0:	df000017 	ldw	fp,0(sp)
 8006ed4:	dec00204 	addi	sp,sp,8
 8006ed8:	f800283a 	ret

08006edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006edc:	defffe04 	addi	sp,sp,-8
 8006ee0:	df000115 	stw	fp,4(sp)
 8006ee4:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee8:	d0a89b17 	ldw	r2,-23956(gp)
 8006eec:	10800017 	ldw	r2,0(r2)
 8006ef0:	1000031e 	bne	r2,zero,8006f00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef4:	00bfffc4 	movi	r2,-1
 8006ef8:	d0a8a615 	stw	r2,-23912(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006efc:	00000706 	br	8006f1c <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f00:	d0a89b17 	ldw	r2,-23956(gp)
 8006f04:	10800317 	ldw	r2,12(r2)
 8006f08:	10800317 	ldw	r2,12(r2)
 8006f0c:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f10:	e0bfff17 	ldw	r2,-4(fp)
 8006f14:	10800117 	ldw	r2,4(r2)
 8006f18:	d0a8a615 	stw	r2,-23912(gp)
	}
}
 8006f1c:	0001883a 	nop
 8006f20:	e037883a 	mov	sp,fp
 8006f24:	df000017 	ldw	fp,0(sp)
 8006f28:	dec00104 	addi	sp,sp,4
 8006f2c:	f800283a 	ret

08006f30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006f30:	defffe04 	addi	sp,sp,-8
 8006f34:	df000115 	stw	fp,4(sp)
 8006f38:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006f3c:	d0a89a17 	ldw	r2,-23960(gp)
 8006f40:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 8006f44:	e0bfff17 	ldw	r2,-4(fp)
	}
 8006f48:	e037883a 	mov	sp,fp
 8006f4c:	df000017 	ldw	fp,0(sp)
 8006f50:	dec00104 	addi	sp,sp,4
 8006f54:	f800283a 	ret

08006f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f58:	defffa04 	addi	sp,sp,-24
 8006f5c:	dfc00515 	stw	ra,20(sp)
 8006f60:	df000415 	stw	fp,16(sp)
 8006f64:	dc000315 	stw	r16,12(sp)
 8006f68:	df000404 	addi	fp,sp,16
 8006f6c:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f70:	e0bffe17 	ldw	r2,-8(fp)
 8006f74:	e0bffd15 	stw	r2,-12(fp)
	BaseType_t xReturn = pdFALSE;
 8006f78:	e03ffc15 	stw	zero,-16(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f7c:	e0bffe17 	ldw	r2,-8(fp)
 8006f80:	10004626 	beq	r2,zero,800709c <xTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f84:	e0bffd17 	ldw	r2,-12(fp)
 8006f88:	10c00b17 	ldw	r3,44(r2)
 8006f8c:	d0a89a17 	ldw	r2,-23960(gp)
 8006f90:	10800b17 	ldw	r2,44(r2)
 8006f94:	18803a2e 	bgeu	r3,r2,8007080 <xTaskPriorityInherit+0x128>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f98:	e0bffd17 	ldw	r2,-12(fp)
 8006f9c:	10800617 	ldw	r2,24(r2)
 8006fa0:	10000616 	blt	r2,zero,8006fbc <xTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa4:	d0a89a17 	ldw	r2,-23960(gp)
 8006fa8:	10800b17 	ldw	r2,44(r2)
 8006fac:	00c00144 	movi	r3,5
 8006fb0:	1887c83a 	sub	r3,r3,r2
 8006fb4:	e0bffd17 	ldw	r2,-12(fp)
 8006fb8:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fbc:	e0bffd17 	ldw	r2,-12(fp)
 8006fc0:	14000517 	ldw	r16,20(r2)
 8006fc4:	e0bffd17 	ldw	r2,-12(fp)
 8006fc8:	10800b17 	ldw	r2,44(r2)
 8006fcc:	01400504 	movi	r5,20
 8006fd0:	1009883a 	mov	r4,r2
 8006fd4:	80086340 	call	8008634 <__mulsi3>
 8006fd8:	1007883a 	mov	r3,r2
 8006fdc:	008220b4 	movhi	r2,2178
 8006fe0:	10ba0904 	addi	r2,r2,-6108
 8006fe4:	1885883a 	add	r2,r3,r2
 8006fe8:	80801e1e 	bne	r16,r2,8007064 <xTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fec:	e0bffd17 	ldw	r2,-12(fp)
 8006ff0:	10800104 	addi	r2,r2,4
 8006ff4:	1009883a 	mov	r4,r2
 8006ff8:	80039d80 	call	80039d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ffc:	d0a89a17 	ldw	r2,-23960(gp)
 8007000:	10c00b17 	ldw	r3,44(r2)
 8007004:	e0bffd17 	ldw	r2,-12(fp)
 8007008:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800700c:	e0bffd17 	ldw	r2,-12(fp)
 8007010:	10800b17 	ldw	r2,44(r2)
 8007014:	d0e8a017 	ldw	r3,-23936(gp)
 8007018:	1880032e 	bgeu	r3,r2,8007028 <xTaskPriorityInherit+0xd0>
 800701c:	e0bffd17 	ldw	r2,-12(fp)
 8007020:	10800b17 	ldw	r2,44(r2)
 8007024:	d0a8a015 	stw	r2,-23936(gp)
 8007028:	e0bffd17 	ldw	r2,-12(fp)
 800702c:	10800b17 	ldw	r2,44(r2)
 8007030:	01400504 	movi	r5,20
 8007034:	1009883a 	mov	r4,r2
 8007038:	80086340 	call	8008634 <__mulsi3>
 800703c:	1007883a 	mov	r3,r2
 8007040:	008220b4 	movhi	r2,2178
 8007044:	10ba0904 	addi	r2,r2,-6108
 8007048:	1887883a 	add	r3,r3,r2
 800704c:	e0bffd17 	ldw	r2,-12(fp)
 8007050:	10800104 	addi	r2,r2,4
 8007054:	100b883a 	mov	r5,r2
 8007058:	1809883a 	mov	r4,r3
 800705c:	80038740 	call	8003874 <vListInsertEnd>
 8007060:	00000406 	br	8007074 <xTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007064:	d0a89a17 	ldw	r2,-23960(gp)
 8007068:	10c00b17 	ldw	r3,44(r2)
 800706c:	e0bffd17 	ldw	r2,-12(fp)
 8007070:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007074:	00800044 	movi	r2,1
 8007078:	e0bffc15 	stw	r2,-16(fp)
 800707c:	00000706 	br	800709c <xTaskPriorityInherit+0x144>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007080:	e0bffd17 	ldw	r2,-12(fp)
 8007084:	10c01017 	ldw	r3,64(r2)
 8007088:	d0a89a17 	ldw	r2,-23960(gp)
 800708c:	10800b17 	ldw	r2,44(r2)
 8007090:	1880022e 	bgeu	r3,r2,800709c <xTaskPriorityInherit+0x144>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007094:	00800044 	movi	r2,1
 8007098:	e0bffc15 	stw	r2,-16(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800709c:	e0bffc17 	ldw	r2,-16(fp)
	}
 80070a0:	e6ffff04 	addi	sp,fp,-4
 80070a4:	dfc00217 	ldw	ra,8(sp)
 80070a8:	df000117 	ldw	fp,4(sp)
 80070ac:	dc000017 	ldw	r16,0(sp)
 80070b0:	dec00304 	addi	sp,sp,12
 80070b4:	f800283a 	ret

080070b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070b8:	defffb04 	addi	sp,sp,-20
 80070bc:	dfc00415 	stw	ra,16(sp)
 80070c0:	df000315 	stw	fp,12(sp)
 80070c4:	df000304 	addi	fp,sp,12
 80070c8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 80070cc:	e0bfff17 	ldw	r2,-4(fp)
 80070d0:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 80070d4:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 80070d8:	e0bfff17 	ldw	r2,-4(fp)
 80070dc:	10003226 	beq	r2,zero,80071a8 <xTaskPriorityDisinherit+0xf0>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80070e0:	e0bffe17 	ldw	r2,-8(fp)
 80070e4:	10801117 	ldw	r2,68(r2)
 80070e8:	10ffffc4 	addi	r3,r2,-1
 80070ec:	e0bffe17 	ldw	r2,-8(fp)
 80070f0:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070f4:	e0bffe17 	ldw	r2,-8(fp)
 80070f8:	10c00b17 	ldw	r3,44(r2)
 80070fc:	e0bffe17 	ldw	r2,-8(fp)
 8007100:	10801017 	ldw	r2,64(r2)
 8007104:	18802826 	beq	r3,r2,80071a8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007108:	e0bffe17 	ldw	r2,-8(fp)
 800710c:	10801117 	ldw	r2,68(r2)
 8007110:	1000251e 	bne	r2,zero,80071a8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007114:	e0bffe17 	ldw	r2,-8(fp)
 8007118:	10800104 	addi	r2,r2,4
 800711c:	1009883a 	mov	r4,r2
 8007120:	80039d80 	call	80039d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007124:	e0bffe17 	ldw	r2,-8(fp)
 8007128:	10c01017 	ldw	r3,64(r2)
 800712c:	e0bffe17 	ldw	r2,-8(fp)
 8007130:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007134:	e0bffe17 	ldw	r2,-8(fp)
 8007138:	10800b17 	ldw	r2,44(r2)
 800713c:	00c00144 	movi	r3,5
 8007140:	1887c83a 	sub	r3,r3,r2
 8007144:	e0bffe17 	ldw	r2,-8(fp)
 8007148:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 800714c:	e0bffe17 	ldw	r2,-8(fp)
 8007150:	10800b17 	ldw	r2,44(r2)
 8007154:	d0e8a017 	ldw	r3,-23936(gp)
 8007158:	1880032e 	bgeu	r3,r2,8007168 <xTaskPriorityDisinherit+0xb0>
 800715c:	e0bffe17 	ldw	r2,-8(fp)
 8007160:	10800b17 	ldw	r2,44(r2)
 8007164:	d0a8a015 	stw	r2,-23936(gp)
 8007168:	e0bffe17 	ldw	r2,-8(fp)
 800716c:	10800b17 	ldw	r2,44(r2)
 8007170:	01400504 	movi	r5,20
 8007174:	1009883a 	mov	r4,r2
 8007178:	80086340 	call	8008634 <__mulsi3>
 800717c:	1007883a 	mov	r3,r2
 8007180:	008220b4 	movhi	r2,2178
 8007184:	10ba0904 	addi	r2,r2,-6108
 8007188:	1887883a 	add	r3,r3,r2
 800718c:	e0bffe17 	ldw	r2,-8(fp)
 8007190:	10800104 	addi	r2,r2,4
 8007194:	100b883a 	mov	r5,r2
 8007198:	1809883a 	mov	r4,r3
 800719c:	80038740 	call	8003874 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071a0:	00800044 	movi	r2,1
 80071a4:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071a8:	e0bffd17 	ldw	r2,-12(fp)
	}
 80071ac:	e037883a 	mov	sp,fp
 80071b0:	dfc00117 	ldw	ra,4(sp)
 80071b4:	df000017 	ldw	fp,0(sp)
 80071b8:	dec00204 	addi	sp,sp,8
 80071bc:	f800283a 	ret

080071c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071c0:	defff704 	addi	sp,sp,-36
 80071c4:	dfc00815 	stw	ra,32(sp)
 80071c8:	df000715 	stw	fp,28(sp)
 80071cc:	dc000615 	stw	r16,24(sp)
 80071d0:	df000704 	addi	fp,sp,28
 80071d4:	e13ffd15 	stw	r4,-12(fp)
 80071d8:	e17ffe15 	stw	r5,-8(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 80071dc:	e0bffd17 	ldw	r2,-12(fp)
 80071e0:	e0bffa15 	stw	r2,-24(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071e4:	00800044 	movi	r2,1
 80071e8:	e0bffb15 	stw	r2,-20(fp)

		if( pxMutexHolder != NULL )
 80071ec:	e0bffd17 	ldw	r2,-12(fp)
 80071f0:	10004326 	beq	r2,zero,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071f4:	e0bffa17 	ldw	r2,-24(fp)
 80071f8:	10c01017 	ldw	r3,64(r2)
 80071fc:	e0bffe17 	ldw	r2,-8(fp)
 8007200:	1880032e 	bgeu	r3,r2,8007210 <vTaskPriorityDisinheritAfterTimeout+0x50>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007204:	e0bffe17 	ldw	r2,-8(fp)
 8007208:	e0bff915 	stw	r2,-28(fp)
 800720c:	00000306 	br	800721c <vTaskPriorityDisinheritAfterTimeout+0x5c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007210:	e0bffa17 	ldw	r2,-24(fp)
 8007214:	10801017 	ldw	r2,64(r2)
 8007218:	e0bff915 	stw	r2,-28(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800721c:	e0bffa17 	ldw	r2,-24(fp)
 8007220:	10c00b17 	ldw	r3,44(r2)
 8007224:	e0bff917 	ldw	r2,-28(fp)
 8007228:	18803526 	beq	r3,r2,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800722c:	e0bffa17 	ldw	r2,-24(fp)
 8007230:	10c01117 	ldw	r3,68(r2)
 8007234:	e0bffb17 	ldw	r2,-20(fp)
 8007238:	1880311e 	bne	r3,r2,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800723c:	e0bffa17 	ldw	r2,-24(fp)
 8007240:	10800b17 	ldw	r2,44(r2)
 8007244:	e0bffc15 	stw	r2,-16(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 8007248:	e0bffa17 	ldw	r2,-24(fp)
 800724c:	e0fff917 	ldw	r3,-28(fp)
 8007250:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007254:	e0bffa17 	ldw	r2,-24(fp)
 8007258:	10800617 	ldw	r2,24(r2)
 800725c:	10000516 	blt	r2,zero,8007274 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007260:	00c00144 	movi	r3,5
 8007264:	e0bff917 	ldw	r2,-28(fp)
 8007268:	1887c83a 	sub	r3,r3,r2
 800726c:	e0bffa17 	ldw	r2,-24(fp)
 8007270:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007274:	e0bffa17 	ldw	r2,-24(fp)
 8007278:	14000517 	ldw	r16,20(r2)
 800727c:	01400504 	movi	r5,20
 8007280:	e13ffc17 	ldw	r4,-16(fp)
 8007284:	80086340 	call	8008634 <__mulsi3>
 8007288:	1007883a 	mov	r3,r2
 800728c:	008220b4 	movhi	r2,2178
 8007290:	10ba0904 	addi	r2,r2,-6108
 8007294:	1885883a 	add	r2,r3,r2
 8007298:	8080191e 	bne	r16,r2,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729c:	e0bffa17 	ldw	r2,-24(fp)
 80072a0:	10800104 	addi	r2,r2,4
 80072a4:	1009883a 	mov	r4,r2
 80072a8:	80039d80 	call	80039d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072ac:	e0bffa17 	ldw	r2,-24(fp)
 80072b0:	10800b17 	ldw	r2,44(r2)
 80072b4:	d0e8a017 	ldw	r3,-23936(gp)
 80072b8:	1880032e 	bgeu	r3,r2,80072c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
 80072bc:	e0bffa17 	ldw	r2,-24(fp)
 80072c0:	10800b17 	ldw	r2,44(r2)
 80072c4:	d0a8a015 	stw	r2,-23936(gp)
 80072c8:	e0bffa17 	ldw	r2,-24(fp)
 80072cc:	10800b17 	ldw	r2,44(r2)
 80072d0:	01400504 	movi	r5,20
 80072d4:	1009883a 	mov	r4,r2
 80072d8:	80086340 	call	8008634 <__mulsi3>
 80072dc:	1007883a 	mov	r3,r2
 80072e0:	008220b4 	movhi	r2,2178
 80072e4:	10ba0904 	addi	r2,r2,-6108
 80072e8:	1887883a 	add	r3,r3,r2
 80072ec:	e0bffa17 	ldw	r2,-24(fp)
 80072f0:	10800104 	addi	r2,r2,4
 80072f4:	100b883a 	mov	r5,r2
 80072f8:	1809883a 	mov	r4,r3
 80072fc:	80038740 	call	8003874 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007300:	0001883a 	nop
 8007304:	e6ffff04 	addi	sp,fp,-4
 8007308:	dfc00217 	ldw	ra,8(sp)
 800730c:	df000117 	ldw	fp,4(sp)
 8007310:	dc000017 	ldw	r16,0(sp)
 8007314:	dec00304 	addi	sp,sp,12
 8007318:	f800283a 	ret

0800731c <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 800731c:	defffe04 	addi	sp,sp,-8
 8007320:	df000115 	stw	fp,4(sp)
 8007324:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007328:	0005303a 	rdctl	r2,status
 800732c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007330:	e0ffff17 	ldw	r3,-4(fp)
 8007334:	00bfff84 	movi	r2,-2
 8007338:	1884703a 	and	r2,r3,r2
 800733c:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 8007340:	d0a8a117 	ldw	r2,-23932(gp)
 8007344:	10000526 	beq	r2,zero,800735c <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 8007348:	d0a89a17 	ldw	r2,-23960(gp)
 800734c:	10c00f17 	ldw	r3,60(r2)
 8007350:	18c00044 	addi	r3,r3,1
 8007354:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 8007358:	d0a89a17 	ldw	r2,-23960(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800735c:	0001883a 	nop
 8007360:	e037883a 	mov	sp,fp
 8007364:	df000017 	ldw	fp,0(sp)
 8007368:	dec00104 	addi	sp,sp,4
 800736c:	f800283a 	ret

08007370 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 8007370:	defffe04 	addi	sp,sp,-8
 8007374:	df000115 	stw	fp,4(sp)
 8007378:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 800737c:	d0a8a117 	ldw	r2,-23932(gp)
 8007380:	10000e26 	beq	r2,zero,80073bc <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 8007384:	d0a89a17 	ldw	r2,-23960(gp)
 8007388:	10800f17 	ldw	r2,60(r2)
 800738c:	10000b26 	beq	r2,zero,80073bc <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 8007390:	d0a89a17 	ldw	r2,-23960(gp)
 8007394:	10c00f17 	ldw	r3,60(r2)
 8007398:	18ffffc4 	addi	r3,r3,-1
 800739c:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 80073a0:	d0a89a17 	ldw	r2,-23960(gp)
 80073a4:	10800f17 	ldw	r2,60(r2)
 80073a8:	1000041e 	bne	r2,zero,80073bc <vTaskExitCritical+0x4c>
 80073ac:	00800044 	movi	r2,1
 80073b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80073b4:	e0bfff17 	ldw	r2,-4(fp)
 80073b8:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073bc:	0001883a 	nop
 80073c0:	e037883a 	mov	sp,fp
 80073c4:	df000017 	ldw	fp,0(sp)
 80073c8:	dec00104 	addi	sp,sp,4
 80073cc:	f800283a 	ret

080073d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80073d0:	defffe04 	addi	sp,sp,-8
 80073d4:	df000115 	stw	fp,4(sp)
 80073d8:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80073dc:	d0a89a17 	ldw	r2,-23960(gp)
 80073e0:	10800617 	ldw	r2,24(r2)
 80073e4:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e8:	d0a89a17 	ldw	r2,-23960(gp)
 80073ec:	d0e89a17 	ldw	r3,-23960(gp)
 80073f0:	18c00b17 	ldw	r3,44(r3)
 80073f4:	01000144 	movi	r4,5
 80073f8:	20c7c83a 	sub	r3,r4,r3
 80073fc:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 8007400:	e0bfff17 	ldw	r2,-4(fp)
}
 8007404:	e037883a 	mov	sp,fp
 8007408:	df000017 	ldw	fp,0(sp)
 800740c:	dec00104 	addi	sp,sp,4
 8007410:	f800283a 	ret

08007414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007414:	deffff04 	addi	sp,sp,-4
 8007418:	df000015 	stw	fp,0(sp)
 800741c:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007420:	d0a89a17 	ldw	r2,-23960(gp)
 8007424:	10000426 	beq	r2,zero,8007438 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007428:	d0a89a17 	ldw	r2,-23960(gp)
 800742c:	10c01117 	ldw	r3,68(r2)
 8007430:	18c00044 	addi	r3,r3,1
 8007434:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 8007438:	d0a89a17 	ldw	r2,-23960(gp)
	}
 800743c:	e037883a 	mov	sp,fp
 8007440:	df000017 	ldw	fp,0(sp)
 8007444:	dec00104 	addi	sp,sp,4
 8007448:	f800283a 	ret

0800744c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800744c:	defffb04 	addi	sp,sp,-20
 8007450:	dfc00415 	stw	ra,16(sp)
 8007454:	df000315 	stw	fp,12(sp)
 8007458:	df000304 	addi	fp,sp,12
 800745c:	e13ffe15 	stw	r4,-8(fp)
 8007460:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007464:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007468:	d0a89a17 	ldw	r2,-23960(gp)
 800746c:	10801217 	ldw	r2,72(r2)
 8007470:	1000091e 	bne	r2,zero,8007498 <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007474:	d0a89a17 	ldw	r2,-23960(gp)
 8007478:	00c00044 	movi	r3,1
 800747c:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 8007480:	e0bfff17 	ldw	r2,-4(fp)
 8007484:	10000426 	beq	r2,zero,8007498 <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007488:	01400044 	movi	r5,1
 800748c:	e13fff17 	ldw	r4,-4(fp)
 8007490:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007494:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007498:	80073700 	call	8007370 <vTaskExitCritical>

		taskENTER_CRITICAL();
 800749c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80074a0:	d0a89a17 	ldw	r2,-23960(gp)
 80074a4:	10801217 	ldw	r2,72(r2)
 80074a8:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 80074ac:	e0bffd17 	ldw	r2,-12(fp)
 80074b0:	10000926 	beq	r2,zero,80074d8 <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 80074b4:	e0bffe17 	ldw	r2,-8(fp)
 80074b8:	10000326 	beq	r2,zero,80074c8 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80074bc:	d0a89a17 	ldw	r2,-23960(gp)
 80074c0:	10001215 	stw	zero,72(r2)
 80074c4:	00000406 	br	80074d8 <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80074c8:	d0a89a17 	ldw	r2,-23960(gp)
 80074cc:	e0fffd17 	ldw	r3,-12(fp)
 80074d0:	18ffffc4 	addi	r3,r3,-1
 80074d4:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074d8:	d0a89a17 	ldw	r2,-23960(gp)
 80074dc:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 80074e0:	80073700 	call	8007370 <vTaskExitCritical>

		return ulReturn;
 80074e4:	e0bffd17 	ldw	r2,-12(fp)
	}
 80074e8:	e037883a 	mov	sp,fp
 80074ec:	dfc00117 	ldw	ra,4(sp)
 80074f0:	df000017 	ldw	fp,0(sp)
 80074f4:	dec00204 	addi	sp,sp,8
 80074f8:	f800283a 	ret

080074fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80074fc:	defff904 	addi	sp,sp,-28
 8007500:	dfc00615 	stw	ra,24(sp)
 8007504:	df000515 	stw	fp,20(sp)
 8007508:	df000504 	addi	fp,sp,20
 800750c:	e13ffc15 	stw	r4,-16(fp)
 8007510:	e17ffd15 	stw	r5,-12(fp)
 8007514:	e1bffe15 	stw	r6,-8(fp)
 8007518:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800751c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007520:	d0a89a17 	ldw	r2,-23960(gp)
 8007524:	10801303 	ldbu	r2,76(r2)
 8007528:	10803fcc 	andi	r2,r2,255
 800752c:	108000a0 	cmpeqi	r2,r2,2
 8007530:	10000f1e 	bne	r2,zero,8007570 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007534:	d0a89a17 	ldw	r2,-23960(gp)
 8007538:	11001217 	ldw	r4,72(r2)
 800753c:	e0fffc17 	ldw	r3,-16(fp)
 8007540:	00c6303a 	nor	r3,zero,r3
 8007544:	20c6703a 	and	r3,r4,r3
 8007548:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800754c:	d0a89a17 	ldw	r2,-23960(gp)
 8007550:	00c00044 	movi	r3,1
 8007554:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 8007558:	e0bfff17 	ldw	r2,-4(fp)
 800755c:	10000426 	beq	r2,zero,8007570 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007560:	01400044 	movi	r5,1
 8007564:	e13fff17 	ldw	r4,-4(fp)
 8007568:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800756c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007570:	80073700 	call	8007370 <vTaskExitCritical>

		taskENTER_CRITICAL();
 8007574:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007578:	e0bffe17 	ldw	r2,-8(fp)
 800757c:	10000426 	beq	r2,zero,8007590 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007580:	d0a89a17 	ldw	r2,-23960(gp)
 8007584:	10c01217 	ldw	r3,72(r2)
 8007588:	e0bffe17 	ldw	r2,-8(fp)
 800758c:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007590:	d0a89a17 	ldw	r2,-23960(gp)
 8007594:	10801303 	ldbu	r2,76(r2)
 8007598:	10803fcc 	andi	r2,r2,255
 800759c:	108000a0 	cmpeqi	r2,r2,2
 80075a0:	1000021e 	bne	r2,zero,80075ac <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80075a4:	e03ffb15 	stw	zero,-20(fp)
 80075a8:	00000806 	br	80075cc <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80075ac:	d0a89a17 	ldw	r2,-23960(gp)
 80075b0:	11001217 	ldw	r4,72(r2)
 80075b4:	e0fffd17 	ldw	r3,-12(fp)
 80075b8:	00c6303a 	nor	r3,zero,r3
 80075bc:	20c6703a 	and	r3,r4,r3
 80075c0:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 80075c4:	00800044 	movi	r2,1
 80075c8:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075cc:	d0a89a17 	ldw	r2,-23960(gp)
 80075d0:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 80075d4:	80073700 	call	8007370 <vTaskExitCritical>

		return xReturn;
 80075d8:	e0bffb17 	ldw	r2,-20(fp)
	}
 80075dc:	e037883a 	mov	sp,fp
 80075e0:	dfc00117 	ldw	ra,4(sp)
 80075e4:	df000017 	ldw	fp,0(sp)
 80075e8:	dec00204 	addi	sp,sp,8
 80075ec:	f800283a 	ret

080075f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80075f0:	defff704 	addi	sp,sp,-36
 80075f4:	dfc00815 	stw	ra,32(sp)
 80075f8:	df000715 	stw	fp,28(sp)
 80075fc:	df000704 	addi	fp,sp,28
 8007600:	e13ffc15 	stw	r4,-16(fp)
 8007604:	e17ffd15 	stw	r5,-12(fp)
 8007608:	e1bffe15 	stw	r6,-8(fp)
 800760c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007610:	00800044 	movi	r2,1
 8007614:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 8007618:	e0bffc17 	ldw	r2,-16(fp)
 800761c:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 8007620:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007624:	e0bfff17 	ldw	r2,-4(fp)
 8007628:	10000426 	beq	r2,zero,800763c <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800762c:	e0bffa17 	ldw	r2,-24(fp)
 8007630:	10c01217 	ldw	r3,72(r2)
 8007634:	e0bfff17 	ldw	r2,-4(fp)
 8007638:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800763c:	e0bffa17 	ldw	r2,-24(fp)
 8007640:	10801303 	ldbu	r2,76(r2)
 8007644:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007648:	e0bffa17 	ldw	r2,-24(fp)
 800764c:	00c00084 	movi	r3,2
 8007650:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 8007654:	e0bffe17 	ldw	r2,-8(fp)
 8007658:	10800168 	cmpgeui	r2,r2,5
 800765c:	1000261e 	bne	r2,zero,80076f8 <xTaskGenericNotify+0x108>
 8007660:	e0bffe17 	ldw	r2,-8(fp)
 8007664:	100690ba 	slli	r3,r2,2
 8007668:	00820034 	movhi	r2,2048
 800766c:	109d9f04 	addi	r2,r2,30332
 8007670:	1885883a 	add	r2,r3,r2
 8007674:	10800017 	ldw	r2,0(r2)
 8007678:	1000683a 	jmp	r2
 800767c:	08007700 	call	800770 <__alt_mem_sdram-0x77ff890>
 8007680:	08007690 	cmplti	zero,at,474
 8007684:	080076ac 	andhi	zero,at,474
 8007688:	080076c4 	addi	zero,at,475
 800768c:	080076d4 	ori	zero,at,475
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007690:	e0bffa17 	ldw	r2,-24(fp)
 8007694:	10c01217 	ldw	r3,72(r2)
 8007698:	e0bffd17 	ldw	r2,-12(fp)
 800769c:	1886b03a 	or	r3,r3,r2
 80076a0:	e0bffa17 	ldw	r2,-24(fp)
 80076a4:	10c01215 	stw	r3,72(r2)
					break;
 80076a8:	00001606 	br	8007704 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80076ac:	e0bffa17 	ldw	r2,-24(fp)
 80076b0:	10801217 	ldw	r2,72(r2)
 80076b4:	10c00044 	addi	r3,r2,1
 80076b8:	e0bffa17 	ldw	r2,-24(fp)
 80076bc:	10c01215 	stw	r3,72(r2)
					break;
 80076c0:	00001006 	br	8007704 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80076c4:	e0bffa17 	ldw	r2,-24(fp)
 80076c8:	e0fffd17 	ldw	r3,-12(fp)
 80076cc:	10c01215 	stw	r3,72(r2)
					break;
 80076d0:	00000c06 	br	8007704 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076d4:	e0bffb03 	ldbu	r2,-20(fp)
 80076d8:	108000a0 	cmpeqi	r2,r2,2
 80076dc:	1000041e 	bne	r2,zero,80076f0 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80076e0:	e0bffa17 	ldw	r2,-24(fp)
 80076e4:	e0fffd17 	ldw	r3,-12(fp)
 80076e8:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80076ec:	00000506 	br	8007704 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80076f0:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 80076f4:	00000306 	br	8007704 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 80076f8:	0001883a 	nop
 80076fc:	00000106 	br	8007704 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8007700:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007704:	e0bffb03 	ldbu	r2,-20(fp)
 8007708:	10800058 	cmpnei	r2,r2,1
 800770c:	10001f1e 	bne	r2,zero,800778c <xTaskGenericNotify+0x19c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007710:	e0bffa17 	ldw	r2,-24(fp)
 8007714:	10800104 	addi	r2,r2,4
 8007718:	1009883a 	mov	r4,r2
 800771c:	80039d80 	call	80039d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007720:	e0bffa17 	ldw	r2,-24(fp)
 8007724:	10800b17 	ldw	r2,44(r2)
 8007728:	d0e8a017 	ldw	r3,-23936(gp)
 800772c:	1880032e 	bgeu	r3,r2,800773c <xTaskGenericNotify+0x14c>
 8007730:	e0bffa17 	ldw	r2,-24(fp)
 8007734:	10800b17 	ldw	r2,44(r2)
 8007738:	d0a8a015 	stw	r2,-23936(gp)
 800773c:	e0bffa17 	ldw	r2,-24(fp)
 8007740:	10800b17 	ldw	r2,44(r2)
 8007744:	01400504 	movi	r5,20
 8007748:	1009883a 	mov	r4,r2
 800774c:	80086340 	call	8008634 <__mulsi3>
 8007750:	1007883a 	mov	r3,r2
 8007754:	008220b4 	movhi	r2,2178
 8007758:	10ba0904 	addi	r2,r2,-6108
 800775c:	1887883a 	add	r3,r3,r2
 8007760:	e0bffa17 	ldw	r2,-24(fp)
 8007764:	10800104 	addi	r2,r2,4
 8007768:	100b883a 	mov	r5,r2
 800776c:	1809883a 	mov	r4,r3
 8007770:	80038740 	call	8003874 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007774:	e0bffa17 	ldw	r2,-24(fp)
 8007778:	10800b17 	ldw	r2,44(r2)
 800777c:	d0e89a17 	ldw	r3,-23960(gp)
 8007780:	18c00b17 	ldw	r3,44(r3)
 8007784:	1880012e 	bgeu	r3,r2,800778c <xTaskGenericNotify+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007788:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800778c:	80073700 	call	8007370 <vTaskExitCritical>

		return xReturn;
 8007790:	e0bff917 	ldw	r2,-28(fp)
	}
 8007794:	e037883a 	mov	sp,fp
 8007798:	dfc00117 	ldw	ra,4(sp)
 800779c:	df000017 	ldw	fp,0(sp)
 80077a0:	dec00204 	addi	sp,sp,8
 80077a4:	f800283a 	ret

080077a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077a8:	defff604 	addi	sp,sp,-40
 80077ac:	dfc00915 	stw	ra,36(sp)
 80077b0:	df000815 	stw	fp,32(sp)
 80077b4:	df000804 	addi	fp,sp,32
 80077b8:	e13ffc15 	stw	r4,-16(fp)
 80077bc:	e17ffd15 	stw	r5,-12(fp)
 80077c0:	e1bffe15 	stw	r6,-8(fp)
 80077c4:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80077c8:	00800044 	movi	r2,1
 80077cc:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80077d0:	e0bffc17 	ldw	r2,-16(fp)
 80077d4:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077d8:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 80077dc:	e0bfff17 	ldw	r2,-4(fp)
 80077e0:	10000426 	beq	r2,zero,80077f4 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80077e4:	e0bff917 	ldw	r2,-28(fp)
 80077e8:	10c01217 	ldw	r3,72(r2)
 80077ec:	e0bfff17 	ldw	r2,-4(fp)
 80077f0:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077f4:	e0bff917 	ldw	r2,-28(fp)
 80077f8:	10801303 	ldbu	r2,76(r2)
 80077fc:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007800:	e0bff917 	ldw	r2,-28(fp)
 8007804:	00c00084 	movi	r3,2
 8007808:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 800780c:	e0bffe17 	ldw	r2,-8(fp)
 8007810:	10800168 	cmpgeui	r2,r2,5
 8007814:	1000261e 	bne	r2,zero,80078b0 <xTaskGenericNotifyFromISR+0x108>
 8007818:	e0bffe17 	ldw	r2,-8(fp)
 800781c:	100690ba 	slli	r3,r2,2
 8007820:	00820034 	movhi	r2,2048
 8007824:	109e0d04 	addi	r2,r2,30772
 8007828:	1885883a 	add	r2,r3,r2
 800782c:	10800017 	ldw	r2,0(r2)
 8007830:	1000683a 	jmp	r2
 8007834:	080078b8 	rdprs	zero,at,482
 8007838:	08007848 	cmpgei	zero,at,481
 800783c:	08007864 	muli	zero,at,481
 8007840:	0800787c 	xorhi	zero,at,481
 8007844:	0800788c 	andi	zero,at,482
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007848:	e0bff917 	ldw	r2,-28(fp)
 800784c:	10c01217 	ldw	r3,72(r2)
 8007850:	e0bffd17 	ldw	r2,-12(fp)
 8007854:	1886b03a 	or	r3,r3,r2
 8007858:	e0bff917 	ldw	r2,-28(fp)
 800785c:	10c01215 	stw	r3,72(r2)
					break;
 8007860:	00001606 	br	80078bc <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007864:	e0bff917 	ldw	r2,-28(fp)
 8007868:	10801217 	ldw	r2,72(r2)
 800786c:	10c00044 	addi	r3,r2,1
 8007870:	e0bff917 	ldw	r2,-28(fp)
 8007874:	10c01215 	stw	r3,72(r2)
					break;
 8007878:	00001006 	br	80078bc <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800787c:	e0bff917 	ldw	r2,-28(fp)
 8007880:	e0fffd17 	ldw	r3,-12(fp)
 8007884:	10c01215 	stw	r3,72(r2)
					break;
 8007888:	00000c06 	br	80078bc <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800788c:	e0bffb03 	ldbu	r2,-20(fp)
 8007890:	108000a0 	cmpeqi	r2,r2,2
 8007894:	1000041e 	bne	r2,zero,80078a8 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007898:	e0bff917 	ldw	r2,-28(fp)
 800789c:	e0fffd17 	ldw	r3,-12(fp)
 80078a0:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80078a4:	00000506 	br	80078bc <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80078a8:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 80078ac:	00000306 	br	80078bc <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 80078b0:	0001883a 	nop
 80078b4:	00000106 	br	80078bc <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 80078b8:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078bc:	e0bffb03 	ldbu	r2,-20(fp)
 80078c0:	10800058 	cmpnei	r2,r2,1
 80078c4:	10002e1e 	bne	r2,zero,8007980 <xTaskGenericNotifyFromISR+0x1d8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c8:	d0a8a817 	ldw	r2,-23904(gp)
 80078cc:	10001a1e 	bne	r2,zero,8007938 <xTaskGenericNotifyFromISR+0x190>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d0:	e0bff917 	ldw	r2,-28(fp)
 80078d4:	10800104 	addi	r2,r2,4
 80078d8:	1009883a 	mov	r4,r2
 80078dc:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078e0:	e0bff917 	ldw	r2,-28(fp)
 80078e4:	10800b17 	ldw	r2,44(r2)
 80078e8:	d0e8a017 	ldw	r3,-23936(gp)
 80078ec:	1880032e 	bgeu	r3,r2,80078fc <xTaskGenericNotifyFromISR+0x154>
 80078f0:	e0bff917 	ldw	r2,-28(fp)
 80078f4:	10800b17 	ldw	r2,44(r2)
 80078f8:	d0a8a015 	stw	r2,-23936(gp)
 80078fc:	e0bff917 	ldw	r2,-28(fp)
 8007900:	10800b17 	ldw	r2,44(r2)
 8007904:	01400504 	movi	r5,20
 8007908:	1009883a 	mov	r4,r2
 800790c:	80086340 	call	8008634 <__mulsi3>
 8007910:	1007883a 	mov	r3,r2
 8007914:	008220b4 	movhi	r2,2178
 8007918:	10ba0904 	addi	r2,r2,-6108
 800791c:	1887883a 	add	r3,r3,r2
 8007920:	e0bff917 	ldw	r2,-28(fp)
 8007924:	10800104 	addi	r2,r2,4
 8007928:	100b883a 	mov	r5,r2
 800792c:	1809883a 	mov	r4,r3
 8007930:	80038740 	call	8003874 <vListInsertEnd>
 8007934:	00000606 	br	8007950 <xTaskGenericNotifyFromISR+0x1a8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007938:	e0bff917 	ldw	r2,-28(fp)
 800793c:	10800604 	addi	r2,r2,24
 8007940:	100b883a 	mov	r5,r2
 8007944:	010220b4 	movhi	r4,2178
 8007948:	213a2c04 	addi	r4,r4,-5968
 800794c:	80038740 	call	8003874 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007950:	e0bff917 	ldw	r2,-28(fp)
 8007954:	10800b17 	ldw	r2,44(r2)
 8007958:	d0e89a17 	ldw	r3,-23960(gp)
 800795c:	18c00b17 	ldw	r3,44(r3)
 8007960:	1880072e 	bgeu	r3,r2,8007980 <xTaskGenericNotifyFromISR+0x1d8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007964:	e0800217 	ldw	r2,8(fp)
 8007968:	10000326 	beq	r2,zero,8007978 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800796c:	e0800217 	ldw	r2,8(fp)
 8007970:	00c00044 	movi	r3,1
 8007974:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007978:	00800044 	movi	r2,1
 800797c:	d0a8a315 	stw	r2,-23924(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007980:	e0bff817 	ldw	r2,-32(fp)
	}
 8007984:	e037883a 	mov	sp,fp
 8007988:	dfc00117 	ldw	ra,4(sp)
 800798c:	df000017 	ldw	fp,0(sp)
 8007990:	dec00204 	addi	sp,sp,8
 8007994:	f800283a 	ret

08007998 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007998:	defff904 	addi	sp,sp,-28
 800799c:	dfc00615 	stw	ra,24(sp)
 80079a0:	df000515 	stw	fp,20(sp)
 80079a4:	df000504 	addi	fp,sp,20
 80079a8:	e13ffe15 	stw	r4,-8(fp)
 80079ac:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80079b0:	e0bffe17 	ldw	r2,-8(fp)
 80079b4:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079b8:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80079bc:	e0bffb17 	ldw	r2,-20(fp)
 80079c0:	10801303 	ldbu	r2,76(r2)
 80079c4:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079c8:	e0bffb17 	ldw	r2,-20(fp)
 80079cc:	00c00084 	movi	r3,2
 80079d0:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80079d4:	e0bffb17 	ldw	r2,-20(fp)
 80079d8:	10801217 	ldw	r2,72(r2)
 80079dc:	10c00044 	addi	r3,r2,1
 80079e0:	e0bffb17 	ldw	r2,-20(fp)
 80079e4:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079e8:	e0bffd03 	ldbu	r2,-12(fp)
 80079ec:	10800058 	cmpnei	r2,r2,1
 80079f0:	10002e1e 	bne	r2,zero,8007aac <vTaskNotifyGiveFromISR+0x114>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f4:	d0a8a817 	ldw	r2,-23904(gp)
 80079f8:	10001a1e 	bne	r2,zero,8007a64 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079fc:	e0bffb17 	ldw	r2,-20(fp)
 8007a00:	10800104 	addi	r2,r2,4
 8007a04:	1009883a 	mov	r4,r2
 8007a08:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a0c:	e0bffb17 	ldw	r2,-20(fp)
 8007a10:	10800b17 	ldw	r2,44(r2)
 8007a14:	d0e8a017 	ldw	r3,-23936(gp)
 8007a18:	1880032e 	bgeu	r3,r2,8007a28 <vTaskNotifyGiveFromISR+0x90>
 8007a1c:	e0bffb17 	ldw	r2,-20(fp)
 8007a20:	10800b17 	ldw	r2,44(r2)
 8007a24:	d0a8a015 	stw	r2,-23936(gp)
 8007a28:	e0bffb17 	ldw	r2,-20(fp)
 8007a2c:	10800b17 	ldw	r2,44(r2)
 8007a30:	01400504 	movi	r5,20
 8007a34:	1009883a 	mov	r4,r2
 8007a38:	80086340 	call	8008634 <__mulsi3>
 8007a3c:	1007883a 	mov	r3,r2
 8007a40:	008220b4 	movhi	r2,2178
 8007a44:	10ba0904 	addi	r2,r2,-6108
 8007a48:	1887883a 	add	r3,r3,r2
 8007a4c:	e0bffb17 	ldw	r2,-20(fp)
 8007a50:	10800104 	addi	r2,r2,4
 8007a54:	100b883a 	mov	r5,r2
 8007a58:	1809883a 	mov	r4,r3
 8007a5c:	80038740 	call	8003874 <vListInsertEnd>
 8007a60:	00000606 	br	8007a7c <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a64:	e0bffb17 	ldw	r2,-20(fp)
 8007a68:	10800604 	addi	r2,r2,24
 8007a6c:	100b883a 	mov	r5,r2
 8007a70:	010220b4 	movhi	r4,2178
 8007a74:	213a2c04 	addi	r4,r4,-5968
 8007a78:	80038740 	call	8003874 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a7c:	e0bffb17 	ldw	r2,-20(fp)
 8007a80:	10800b17 	ldw	r2,44(r2)
 8007a84:	d0e89a17 	ldw	r3,-23960(gp)
 8007a88:	18c00b17 	ldw	r3,44(r3)
 8007a8c:	1880072e 	bgeu	r3,r2,8007aac <vTaskNotifyGiveFromISR+0x114>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a90:	e0bfff17 	ldw	r2,-4(fp)
 8007a94:	10000326 	beq	r2,zero,8007aa4 <vTaskNotifyGiveFromISR+0x10c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a98:	e0bfff17 	ldw	r2,-4(fp)
 8007a9c:	00c00044 	movi	r3,1
 8007aa0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007aa4:	00800044 	movi	r2,1
 8007aa8:	d0a8a315 	stw	r2,-23924(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007aac:	0001883a 	nop
 8007ab0:	e037883a 	mov	sp,fp
 8007ab4:	dfc00117 	ldw	ra,4(sp)
 8007ab8:	df000017 	ldw	fp,0(sp)
 8007abc:	dec00204 	addi	sp,sp,8
 8007ac0:	f800283a 	ret

08007ac4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007ac4:	defffb04 	addi	sp,sp,-20
 8007ac8:	dfc00415 	stw	ra,16(sp)
 8007acc:	df000315 	stw	fp,12(sp)
 8007ad0:	df000304 	addi	fp,sp,12
 8007ad4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007ad8:	e0bfff17 	ldw	r2,-4(fp)
 8007adc:	1000021e 	bne	r2,zero,8007ae8 <xTaskNotifyStateClear+0x24>
 8007ae0:	d0a89a17 	ldw	r2,-23960(gp)
 8007ae4:	00000106 	br	8007aec <xTaskNotifyStateClear+0x28>
 8007ae8:	e0bfff17 	ldw	r2,-4(fp)
 8007aec:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 8007af0:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007af4:	e0bffe17 	ldw	r2,-8(fp)
 8007af8:	10801303 	ldbu	r2,76(r2)
 8007afc:	10803fcc 	andi	r2,r2,255
 8007b00:	10800098 	cmpnei	r2,r2,2
 8007b04:	1000051e 	bne	r2,zero,8007b1c <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b08:	e0bffe17 	ldw	r2,-8(fp)
 8007b0c:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 8007b10:	00800044 	movi	r2,1
 8007b14:	e0bffd15 	stw	r2,-12(fp)
 8007b18:	00000106 	br	8007b20 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 8007b1c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 8007b20:	80073700 	call	8007370 <vTaskExitCritical>

		return xReturn;
 8007b24:	e0bffd17 	ldw	r2,-12(fp)
	}
 8007b28:	e037883a 	mov	sp,fp
 8007b2c:	dfc00117 	ldw	ra,4(sp)
 8007b30:	df000017 	ldw	fp,0(sp)
 8007b34:	dec00204 	addi	sp,sp,8
 8007b38:	f800283a 	ret

08007b3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b3c:	defffa04 	addi	sp,sp,-24
 8007b40:	dfc00515 	stw	ra,20(sp)
 8007b44:	df000415 	stw	fp,16(sp)
 8007b48:	df000404 	addi	fp,sp,16
 8007b4c:	e13ffe15 	stw	r4,-8(fp)
 8007b50:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b54:	d0a89f17 	ldw	r2,-23940(gp)
 8007b58:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b5c:	d0a89a17 	ldw	r2,-23960(gp)
 8007b60:	10800104 	addi	r2,r2,4
 8007b64:	1009883a 	mov	r4,r2
 8007b68:	80039d80 	call	80039d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b6c:	e0bffe17 	ldw	r2,-8(fp)
 8007b70:	10bfffd8 	cmpnei	r2,r2,-1
 8007b74:	1000091e 	bne	r2,zero,8007b9c <prvAddCurrentTaskToDelayedList+0x60>
 8007b78:	e0bfff17 	ldw	r2,-4(fp)
 8007b7c:	10000726 	beq	r2,zero,8007b9c <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b80:	d0a89a17 	ldw	r2,-23960(gp)
 8007b84:	10800104 	addi	r2,r2,4
 8007b88:	100b883a 	mov	r5,r2
 8007b8c:	010220b4 	movhi	r4,2178
 8007b90:	213a3604 	addi	r4,r4,-5928
 8007b94:	80038740 	call	8003874 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b98:	00001c06 	br	8007c0c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b9c:	e0fffc17 	ldw	r3,-16(fp)
 8007ba0:	e0bffe17 	ldw	r2,-8(fp)
 8007ba4:	1885883a 	add	r2,r3,r2
 8007ba8:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bac:	d0a89a17 	ldw	r2,-23960(gp)
 8007bb0:	e0fffd17 	ldw	r3,-12(fp)
 8007bb4:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 8007bb8:	e0fffd17 	ldw	r3,-12(fp)
 8007bbc:	e0bffc17 	ldw	r2,-16(fp)
 8007bc0:	1880072e 	bgeu	r3,r2,8007be0 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bc4:	d0e89c17 	ldw	r3,-23952(gp)
 8007bc8:	d0a89a17 	ldw	r2,-23960(gp)
 8007bcc:	10800104 	addi	r2,r2,4
 8007bd0:	100b883a 	mov	r5,r2
 8007bd4:	1809883a 	mov	r4,r3
 8007bd8:	80039000 	call	8003900 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bdc:	00000b06 	br	8007c0c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be0:	d0e89b17 	ldw	r3,-23956(gp)
 8007be4:	d0a89a17 	ldw	r2,-23960(gp)
 8007be8:	10800104 	addi	r2,r2,4
 8007bec:	100b883a 	mov	r5,r2
 8007bf0:	1809883a 	mov	r4,r3
 8007bf4:	80039000 	call	8003900 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bf8:	d0a8a617 	ldw	r2,-23912(gp)
 8007bfc:	e0fffd17 	ldw	r3,-12(fp)
 8007c00:	1880022e 	bgeu	r3,r2,8007c0c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007c04:	e0bffd17 	ldw	r2,-12(fp)
 8007c08:	d0a8a615 	stw	r2,-23912(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c0c:	0001883a 	nop
 8007c10:	e037883a 	mov	sp,fp
 8007c14:	dfc00117 	ldw	ra,4(sp)
 8007c18:	df000017 	ldw	fp,0(sp)
 8007c1c:	dec00204 	addi	sp,sp,8
 8007c20:	f800283a 	ret

08007c24 <xSerialPortInitMinimal>:
static void vUARTReceiveHandler( alt_u32 status );
static void vUARTTransmitHandler( alt_u32 status );
/*---------------------------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
 8007c24:	defffb04 	addi	sp,sp,-20
 8007c28:	dfc00415 	stw	ra,16(sp)
 8007c2c:	df000315 	stw	fp,12(sp)
 8007c30:	df000304 	addi	fp,sp,12
 8007c34:	e13ffe15 	stw	r4,-8(fp)
 8007c38:	e17fff15 	stw	r5,-4(fp)
	/* Create the queues used to hold Rx and Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8007c3c:	000d883a 	mov	r6,zero
 8007c40:	01400044 	movi	r5,1
 8007c44:	e13fff17 	ldw	r4,-4(fp)
 8007c48:	80043880 	call	8004388 <xQueueGenericCreate>
 8007c4c:	d0a8a915 	stw	r2,-23900(gp)
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8007c50:	e0bfff17 	ldw	r2,-4(fp)
 8007c54:	10800044 	addi	r2,r2,1
 8007c58:	000d883a 	mov	r6,zero
 8007c5c:	01400044 	movi	r5,1
 8007c60:	1009883a 	mov	r4,r2
 8007c64:	80043880 	call	8004388 <xQueueGenericCreate>
 8007c68:	d0a8aa15 	stw	r2,-23896(gp)

	/* If the queues were created correctly then setup the serial port hardware. */
	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
 8007c6c:	d0a8a917 	ldw	r2,-23900(gp)
 8007c70:	10001426 	beq	r2,zero,8007cc4 <xSerialPortInitMinimal+0xa0>
 8007c74:	d0a8aa17 	ldw	r2,-23896(gp)
 8007c78:	10001226 	beq	r2,zero,8007cc4 <xSerialPortInitMinimal+0xa0>
	{
		portENTER_CRITICAL();
 8007c7c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			uartControl = ALTERA_AVALON_UART_CONTROL_RTS_MSK | ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
 8007c80:	00832004 	movi	r2,3200
 8007c84:	d0a8ab15 	stw	r2,-23892(gp)
			IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007c88:	d0a8ab17 	ldw	r2,-23892(gp)
 8007c8c:	1007883a 	mov	r3,r2
 8007c90:	00840034 	movhi	r2,4096
 8007c94:	10912304 	addi	r2,r2,17548
 8007c98:	10c00035 	stwio	r3,0(r2)

		    /* register the interrupt handler */
			//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ,
 8007c9c:	d8000015 	stw	zero,0(sp)
 8007ca0:	000f883a 	mov	r7,zero
 8007ca4:	01820034 	movhi	r6,2048
 8007ca8:	319fa504 	addi	r6,r6,32404
 8007cac:	01400084 	movi	r5,2
 8007cb0:	0009883a 	mov	r4,zero
 8007cb4:	8015f8c0 	call	8015f8c <alt_ic_isr_register>
#else
	alt_irq_register ( UART_IRQ, NULL, vUARTInterruptHandler );

#endif
		}
		portEXIT_CRITICAL();
 8007cb8:	80073700 	call	8007370 <vTaskExitCritical>
	}
	else
	{
		return ( xComPortHandle ) 0;
	}
    return ( xComPortHandle ) 1;
 8007cbc:	00800044 	movi	r2,1
 8007cc0:	00000106 	br	8007cc8 <xSerialPortInitMinimal+0xa4>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		return ( xComPortHandle ) 0;
 8007cc4:	0005883a 	mov	r2,zero
	}
    return ( xComPortHandle ) 1;
}
 8007cc8:	e037883a 	mov	sp,fp
 8007ccc:	dfc00117 	ldw	ra,4(sp)
 8007cd0:	df000017 	ldw	fp,0(sp)
 8007cd4:	dec00204 	addi	sp,sp,8
 8007cd8:	f800283a 	ret

08007cdc <vSerialClose>:
/*---------------------------------------------------------------------------*/

void vSerialClose( xComPortHandle xPort )
{
 8007cdc:	defffe04 	addi	sp,sp,-8
 8007ce0:	df000115 	stw	fp,4(sp)
 8007ce4:	df000104 	addi	fp,sp,4
 8007ce8:	e13fff15 	stw	r4,-4(fp)
    /* Never used. */
}
 8007cec:	0001883a 	nop
 8007cf0:	e037883a 	mov	sp,fp
 8007cf4:	df000017 	ldw	fp,0(sp)
 8007cf8:	dec00104 	addi	sp,sp,4
 8007cfc:	f800283a 	ret

08007d00 <xSerialGetChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, portTickType xBlockTime )
{
 8007d00:	defffb04 	addi	sp,sp,-20
 8007d04:	dfc00415 	stw	ra,16(sp)
 8007d08:	df000315 	stw	fp,12(sp)
 8007d0c:	df000304 	addi	fp,sp,12
 8007d10:	e13ffd15 	stw	r4,-12(fp)
 8007d14:	e17ffe15 	stw	r5,-8(fp)
 8007d18:	e1bfff15 	stw	r6,-4(fp)
	( void ) pxPort;


	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 8007d1c:	d0a8a917 	ldw	r2,-23900(gp)
 8007d20:	e1bfff17 	ldw	r6,-4(fp)
 8007d24:	e17ffe17 	ldw	r5,-8(fp)
 8007d28:	1009883a 	mov	r4,r2
 8007d2c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8007d30:	10000226 	beq	r2,zero,8007d3c <xSerialGetChar+0x3c>
	{
		return pdTRUE;
 8007d34:	00800044 	movi	r2,1
 8007d38:	00000906 	br	8007d60 <xSerialGetChar+0x60>
	}
	else
	{
		uartControl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8007d3c:	d0a8ab17 	ldw	r2,-23892(gp)
 8007d40:	10802014 	ori	r2,r2,128
 8007d44:	d0a8ab15 	stw	r2,-23892(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007d48:	d0a8ab17 	ldw	r2,-23892(gp)
 8007d4c:	1007883a 	mov	r3,r2
 8007d50:	00840034 	movhi	r2,4096
 8007d54:	10912304 	addi	r2,r2,17548
 8007d58:	10c00035 	stwio	r3,0(r2)
		return pdFALSE;
 8007d5c:	0005883a 	mov	r2,zero
	}
}
 8007d60:	e037883a 	mov	sp,fp
 8007d64:	dfc00117 	ldw	ra,4(sp)
 8007d68:	df000017 	ldw	fp,0(sp)
 8007d6c:	dec00204 	addi	sp,sp,8
 8007d70:	f800283a 	ret

08007d74 <xSerialPutChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, portTickType xBlockTime )
{
 8007d74:	defffa04 	addi	sp,sp,-24
 8007d78:	dfc00515 	stw	ra,20(sp)
 8007d7c:	df000415 	stw	fp,16(sp)
 8007d80:	df000404 	addi	fp,sp,16
 8007d84:	e13ffd15 	stw	r4,-12(fp)
 8007d88:	2805883a 	mov	r2,r5
 8007d8c:	e1bfff15 	stw	r6,-4(fp)
 8007d90:	e0bffe05 	stb	r2,-8(fp)
signed portBASE_TYPE lReturn = pdPASS;
 8007d94:	00800044 	movi	r2,1
 8007d98:	e0bffc15 	stw	r2,-16(fp)

	/* Place the character in the queue of characters to be transmitted. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 8007d9c:	d0a8aa17 	ldw	r2,-23896(gp)
 8007da0:	e0fffe04 	addi	r3,fp,-8
 8007da4:	000f883a 	mov	r7,zero
 8007da8:	e1bfff17 	ldw	r6,-4(fp)
 8007dac:	180b883a 	mov	r5,r3
 8007db0:	1009883a 	mov	r4,r2
 8007db4:	80046f40 	call	80046f4 <xQueueGenericSend>
 8007db8:	10800058 	cmpnei	r2,r2,1
 8007dbc:	10000b1e 	bne	r2,zero,8007dec <xSerialPutChar+0x78>
	{
        /*Triggers an interrupt on every character or (down) when queue is full. */
        uartControl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8007dc0:	d0a8ab17 	ldw	r2,-23892(gp)
 8007dc4:	10801014 	ori	r2,r2,64
 8007dc8:	d0a8ab15 	stw	r2,-23892(gp)
        IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007dcc:	d0a8ab17 	ldw	r2,-23892(gp)
 8007dd0:	1007883a 	mov	r3,r2
 8007dd4:	00840034 	movhi	r2,4096
 8007dd8:	10912304 	addi	r2,r2,17548
 8007ddc:	10c00035 	stwio	r3,0(r2)
        lReturn = pdPASS;
 8007de0:	00800044 	movi	r2,1
 8007de4:	e0bffc15 	stw	r2,-16(fp)
 8007de8:	00000106 	br	8007df0 <xSerialPutChar+0x7c>
    }
    else
    {
		lReturn = pdFAIL;
 8007dec:	e03ffc15 	stw	zero,-16(fp)
	}
	return lReturn;
 8007df0:	e0bffc17 	ldw	r2,-16(fp)
}
 8007df4:	e037883a 	mov	sp,fp
 8007df8:	dfc00117 	ldw	ra,4(sp)
 8007dfc:	df000017 	ldw	fp,0(sp)
 8007e00:	dec00204 	addi	sp,sp,8
 8007e04:	f800283a 	ret

08007e08 <vSerialPutString>:
/*---------------------------------------------------------------------------*/

void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
{
 8007e08:	defffa04 	addi	sp,sp,-24
 8007e0c:	dfc00515 	stw	ra,20(sp)
 8007e10:	df000415 	stw	fp,16(sp)
 8007e14:	df000404 	addi	fp,sp,16
 8007e18:	e13ffd15 	stw	r4,-12(fp)
 8007e1c:	e17ffe15 	stw	r5,-8(fp)
 8007e20:	3005883a 	mov	r2,r6
 8007e24:	e0bfff0d 	sth	r2,-4(fp)

	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
 8007e28:	e0bffe17 	ldw	r2,-8(fp)
 8007e2c:	e0bffc15 	stw	r2,-16(fp)
	while( *pxNext )
 8007e30:	00000c06 	br	8007e64 <vSerialPutString+0x5c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 8007e34:	e0bffc17 	ldw	r2,-16(fp)
 8007e38:	10800003 	ldbu	r2,0(r2)
 8007e3c:	10803fcc 	andi	r2,r2,255
 8007e40:	1080201c 	xori	r2,r2,128
 8007e44:	10bfe004 	addi	r2,r2,-128
 8007e48:	000d883a 	mov	r6,zero
 8007e4c:	100b883a 	mov	r5,r2
 8007e50:	e13ffd17 	ldw	r4,-12(fp)
 8007e54:	8007d740 	call	8007d74 <xSerialPutChar>
		pxNext++;
 8007e58:	e0bffc17 	ldw	r2,-16(fp)
 8007e5c:	10800044 	addi	r2,r2,1
 8007e60:	e0bffc15 	stw	r2,-16(fp)
	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
	while( *pxNext )
 8007e64:	e0bffc17 	ldw	r2,-16(fp)
 8007e68:	10800003 	ldbu	r2,0(r2)
 8007e6c:	10803fcc 	andi	r2,r2,255
 8007e70:	1080201c 	xori	r2,r2,128
 8007e74:	10bfe004 	addi	r2,r2,-128
 8007e78:	103fee1e 	bne	r2,zero,8007e34 <vSerialPutString+0x2c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
		pxNext++;
	}
}
 8007e7c:	0001883a 	nop
 8007e80:	e037883a 	mov	sp,fp
 8007e84:	dfc00117 	ldw	ra,4(sp)
 8007e88:	df000017 	ldw	fp,0(sp)
 8007e8c:	dec00204 	addi	sp,sp,8
 8007e90:	f800283a 	ret

08007e94 <vUARTInterruptHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void vUARTInterruptHandler(void* context)
#else
static void vUARTInterruptHandler(void* context, alt_u32 id)
#endif
{
 8007e94:	defffc04 	addi	sp,sp,-16
 8007e98:	dfc00315 	stw	ra,12(sp)
 8007e9c:	df000215 	stw	fp,8(sp)
 8007ea0:	df000204 	addi	fp,sp,8
 8007ea4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 status;

	/* Read the status register in order to determine the cause of the
    interrupt. */
	status = IORD_ALTERA_AVALON_UART_STATUS( UART_BASE );
 8007ea8:	00840034 	movhi	r2,4096
 8007eac:	10912204 	addi	r2,r2,17544
 8007eb0:	10800037 	ldwio	r2,0(r2)
 8007eb4:	e0bffe15 	stw	r2,-8(fp)

	/* Clear any error flags set at the device */
	IOWR_ALTERA_AVALON_UART_STATUS( UART_BASE, 0 );
 8007eb8:	0007883a 	mov	r3,zero
 8007ebc:	00840034 	movhi	r2,4096
 8007ec0:	10912204 	addi	r2,r2,17544
 8007ec4:	10c00035 	stwio	r3,0(r2)

	/* process a read irq */
	if ( status & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
 8007ec8:	e0bffe17 	ldw	r2,-8(fp)
 8007ecc:	1080200c 	andi	r2,r2,128
 8007ed0:	10000226 	beq	r2,zero,8007edc <vUARTInterruptHandler+0x48>
	{
		vUARTReceiveHandler( status );
 8007ed4:	e13ffe17 	ldw	r4,-8(fp)
 8007ed8:	8007f080 	call	8007f08 <vUARTReceiveHandler>
	}

	/* process a write irq */
	if ( status & ( ALTERA_AVALON_UART_STATUS_TRDY_MSK  ) )
 8007edc:	e0bffe17 	ldw	r2,-8(fp)
 8007ee0:	1080100c 	andi	r2,r2,64
 8007ee4:	10000226 	beq	r2,zero,8007ef0 <vUARTInterruptHandler+0x5c>
	{
		vUARTTransmitHandler( status );
 8007ee8:	e13ffe17 	ldw	r4,-8(fp)
 8007eec:	8007fac0 	call	8007fac <vUARTTransmitHandler>
	}
}
 8007ef0:	0001883a 	nop
 8007ef4:	e037883a 	mov	sp,fp
 8007ef8:	dfc00117 	ldw	ra,4(sp)
 8007efc:	df000017 	ldw	fp,0(sp)
 8007f00:	dec00204 	addi	sp,sp,8
 8007f04:	f800283a 	ret

08007f08 <vUARTReceiveHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTReceiveHandler( alt_u32 status )
{
 8007f08:	defffb04 	addi	sp,sp,-20
 8007f0c:	dfc00415 	stw	ra,16(sp)
 8007f10:	df000315 	stw	fp,12(sp)
 8007f14:	df000304 	addi	fp,sp,12
 8007f18:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8007f1c:	e03ffe15 	stw	zero,-8(fp)

	/* If there was an error, discard the data */
	if ( status & ( ALTERA_AVALON_UART_STATUS_PE_MSK | ALTERA_AVALON_UART_STATUS_FE_MSK ) )
 8007f20:	e0bfff17 	ldw	r2,-4(fp)
 8007f24:	108000cc 	andi	r2,r2,3
 8007f28:	10000226 	beq	r2,zero,8007f34 <vUARTReceiveHandler+0x2c>
	{
        asm("break");
 8007f2c:	003da03a 	break	0
 8007f30:	00001906 	br	8007f98 <vUARTReceiveHandler+0x90>
		return;
	}

	/* Transfer data from the device to the circular buffer */
	cChar = IORD_ALTERA_AVALON_UART_RXDATA( UART_BASE );
 8007f34:	00840034 	movhi	r2,4096
 8007f38:	10912004 	addi	r2,r2,17536
 8007f3c:	10800037 	ldwio	r2,0(r2)
 8007f40:	e0bffd05 	stb	r2,-12(fp)
	if ( pdTRUE != xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken ) )
 8007f44:	d0a8a917 	ldw	r2,-23900(gp)
 8007f48:	e0fffe04 	addi	r3,fp,-8
 8007f4c:	000f883a 	mov	r7,zero
 8007f50:	180d883a 	mov	r6,r3
 8007f54:	e17ffd04 	addi	r5,fp,-12
 8007f58:	1009883a 	mov	r4,r2
 8007f5c:	80048a80 	call	80048a8 <xQueueGenericSendFromISR>
 8007f60:	10800060 	cmpeqi	r2,r2,1
 8007f64:	1000091e 	bne	r2,zero,8007f8c <vUARTReceiveHandler+0x84>
	{
		/* If the circular buffer was full, disable interrupts. Interrupts will
        be re-enabled when data is removed from the buffer. */
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8007f68:	d0e8ab17 	ldw	r3,-23892(gp)
 8007f6c:	00bfdfc4 	movi	r2,-129
 8007f70:	1884703a 	and	r2,r3,r2
 8007f74:	d0a8ab15 	stw	r2,-23892(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007f78:	d0a8ab17 	ldw	r2,-23892(gp)
 8007f7c:	1007883a 	mov	r3,r2
 8007f80:	00840034 	movhi	r2,4096
 8007f84:	10912304 	addi	r2,r2,17548
 8007f88:	10c00035 	stwio	r3,0(r2)
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8007f8c:	e0bffe17 	ldw	r2,-8(fp)
 8007f90:	10000126 	beq	r2,zero,8007f98 <vUARTReceiveHandler+0x90>
 8007f94:	80067680 	call	8006768 <vTaskSwitchContext>
}
 8007f98:	e037883a 	mov	sp,fp
 8007f9c:	dfc00117 	ldw	ra,4(sp)
 8007fa0:	df000017 	ldw	fp,0(sp)
 8007fa4:	dec00204 	addi	sp,sp,8
 8007fa8:	f800283a 	ret

08007fac <vUARTTransmitHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTTransmitHandler( alt_u32 status )
{
 8007fac:	defffb04 	addi	sp,sp,-20
 8007fb0:	dfc00415 	stw	ra,16(sp)
 8007fb4:	df000315 	stw	fp,12(sp)
 8007fb8:	df000304 	addi	fp,sp,12
 8007fbc:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8007fc0:	e03ffe15 	stw	zero,-8(fp)
	/* Transfer data if there is some ready to be transferred */
	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
 8007fc4:	d0a8aa17 	ldw	r2,-23896(gp)
 8007fc8:	e0fffe04 	addi	r3,fp,-8
 8007fcc:	180d883a 	mov	r6,r3
 8007fd0:	e17ffd04 	addi	r5,fp,-12
 8007fd4:	1009883a 	mov	r4,r2
 8007fd8:	8004fd40 	call	8004fd4 <xQueueReceiveFromISR>
 8007fdc:	10800058 	cmpnei	r2,r2,1
 8007fe0:	1000081e 	bne	r2,zero,8008004 <vUARTTransmitHandler+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA( UART_BASE, cChar );
 8007fe4:	e0bffd03 	ldbu	r2,-12(fp)
 8007fe8:	10c03fcc 	andi	r3,r2,255
 8007fec:	18c0201c 	xori	r3,r3,128
 8007ff0:	18ffe004 	addi	r3,r3,-128
 8007ff4:	00840034 	movhi	r2,4096
 8007ff8:	10912104 	addi	r2,r2,17540
 8007ffc:	10c00035 	stwio	r3,0(r2)
 8008000:	00000406 	br	8008014 <vUARTTransmitHandler+0x68>
    }
    else
    {
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8008004:	d0e8ab17 	ldw	r3,-23892(gp)
 8008008:	00bfefc4 	movi	r2,-65
 800800c:	1884703a 	and	r2,r3,r2
 8008010:	d0a8ab15 	stw	r2,-23892(gp)
    }

	IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8008014:	d0a8ab17 	ldw	r2,-23892(gp)
 8008018:	1007883a 	mov	r3,r2
 800801c:	00840034 	movhi	r2,4096
 8008020:	10912304 	addi	r2,r2,17548
 8008024:	10c00035 	stwio	r3,0(r2)
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8008028:	e0bffe17 	ldw	r2,-8(fp)
 800802c:	10000126 	beq	r2,zero,8008034 <vUARTTransmitHandler+0x88>
 8008030:	80067680 	call	8006768 <vTaskSwitchContext>
}
 8008034:	0001883a 	nop
 8008038:	e037883a 	mov	sp,fp
 800803c:	dfc00117 	ldw	ra,4(sp)
 8008040:	df000017 	ldw	fp,0(sp)
 8008044:	dec00204 	addi	sp,sp,8
 8008048:	f800283a 	ret

0800804c <main>:

//=====================================================================================================================
// Main Function
//=====================================================================================================================
int main()
{
 800804c:	defffc04 	addi	sp,sp,-16
 8008050:	dfc00315 	stw	ra,12(sp)
 8008054:	df000215 	stw	fp,8(sp)
 8008058:	df000204 	addi	fp,sp,8
	// Configure any hardware required for this demo.
	vParTestInitialise();
 800805c:	80036a00 	call	80036a0 <vParTestInitialise>

	// Initialize the MAC hardware
	xNetworkInterfaceInitialise();
 8008060:	800819c0 	call	800819c <xNetworkInterfaceInitialise>

	printf("Hello from Nios II!\n");
 8008064:	010200b4 	movhi	r4,2050
 8008068:	2127e404 	addi	r4,r4,-24688
 800806c:	8009b180 	call	8009b18 <puts>

	// prvPrintTask1 uses sprintf so requires more stack.
	xTaskCreate( prvPrintTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, mainTASK1_PRIORITY, NULL );
 8008070:	d8000115 	stw	zero,4(sp)
 8008074:	00800044 	movi	r2,1
 8008078:	d8800015 	stw	r2,0(sp)
 800807c:	000f883a 	mov	r7,zero
 8008080:	01810004 	movi	r6,1024
 8008084:	014200b4 	movhi	r5,2050
 8008088:	2967e904 	addi	r5,r5,-24668
 800808c:	01020074 	movhi	r4,2049
 8008090:	21203c04 	addi	r4,r4,-32528
 8008094:	80056e80 	call	80056e8 <xTaskCreate>

	// prvPrintTask2 uses sprintf so requires more stack.
	xTaskCreate( prvPrintTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, mainTASK2_PRIORITY, NULL );
 8008098:	d8000115 	stw	zero,4(sp)
 800809c:	00800084 	movi	r2,2
 80080a0:	d8800015 	stw	r2,0(sp)
 80080a4:	000f883a 	mov	r7,zero
 80080a8:	01810004 	movi	r6,1024
 80080ac:	014200b4 	movhi	r5,2050
 80080b0:	2967eb04 	addi	r5,r5,-24660
 80080b4:	01020074 	movhi	r4,2049
 80080b8:	21205a04 	addi	r4,r4,-32408
 80080bc:	80056e80 	call	80056e8 <xTaskCreate>

	// prvPrintTask2 uses sprintf so requires more stack.
	xTaskCreate( prvEMACHandlerTask, "interrupt", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80080c0:	d8000115 	stw	zero,4(sp)
 80080c4:	00800044 	movi	r2,1
 80080c8:	d8800015 	stw	r2,0(sp)
 80080cc:	000f883a 	mov	r7,zero
 80080d0:	01810004 	movi	r6,1024
 80080d4:	014200b4 	movhi	r5,2050
 80080d8:	2967ed04 	addi	r5,r5,-24652
 80080dc:	01020074 	movhi	r4,2049
 80080e0:	21210b04 	addi	r4,r4,-31700
 80080e4:	80056e80 	call	80056e8 <xTaskCreate>

    // Finally start the scheduler
	vTaskStartScheduler();
 80080e8:	80062800 	call	8006280 <vTaskStartScheduler>

	// Will only reach here if there is insufficient heap available to start the scheduler.
	for( ;; );
 80080ec:	003fff06 	br	80080ec <main+0xa0>

080080f0 <prvPrintTask1>:

//=====================================================================================================================
// Tasks Functions
//=====================================================================================================================
static void prvPrintTask1( void *pvParameters )
{
 80080f0:	defffc04 	addi	sp,sp,-16
 80080f4:	dfc00315 	stw	ra,12(sp)
 80080f8:	df000215 	stw	fp,8(sp)
 80080fc:	df000204 	addi	fp,sp,8
 8008100:	e13fff15 	stw	r4,-4(fp)
	FILE* stream_UART;
	stream_UART = fopen ("/dev/uart", "w");
 8008104:	014200b4 	movhi	r5,2050
 8008108:	2967f004 	addi	r5,r5,-24640
 800810c:	010200b4 	movhi	r4,2050
 8008110:	2127f104 	addi	r4,r4,-24636
 8008114:	80087500 	call	8008750 <fopen>
 8008118:	e0bffe15 	stw	r2,-8(fp)
	if (stream_UART == NULL)
 800811c:	e0bffe17 	ldw	r2,-8(fp)
 8008120:	1000031e 	bne	r2,zero,8008130 <prvPrintTask1+0x40>
	{
		printf("Nao foi criada stream UART");
 8008124:	010200b4 	movhi	r4,2050
 8008128:	2127f404 	addi	r4,r4,-24624
 800812c:	8009a1c0 	call	8009a1c <printf>
	}
	for( ;; )
	{
		// Wait until it is time to run the tests again.
		vTaskDelay( mainTASK1_PERIOD / portTICK_PERIOD_MS);
 8008130:	01007d04 	movi	r4,500
 8008134:	8005c940 	call	8005c94 <vTaskDelay>

        // Print out an message
        printf( "NIOS II Task1 from jtag\r\n" );
 8008138:	010200b4 	movhi	r4,2050
 800813c:	2127fb04 	addi	r4,r4,-24596
 8008140:	8009b180 	call	8009b18 <puts>
        fprintf(stream_UART, "NIOS II Task1 from uart\r\n ");
 8008144:	e1fffe17 	ldw	r7,-8(fp)
 8008148:	01800684 	movi	r6,26
 800814c:	01400044 	movi	r5,1
 8008150:	010200b4 	movhi	r4,2050
 8008154:	21280204 	addi	r4,r4,-24568
 8008158:	8008d200 	call	8008d20 <fwrite>

        // Control LED 1 DE0-NANO
        vParTestToggleLED(1);
 800815c:	01000044 	movi	r4,1
 8008160:	80037740 	call	8003774 <vParTestToggleLED>
	}
 8008164:	003ff206 	br	8008130 <prvPrintTask1+0x40>

08008168 <prvPrintTask2>:
}

static void prvPrintTask2( void *pvParameters )
{
 8008168:	defffd04 	addi	sp,sp,-12
 800816c:	dfc00215 	stw	ra,8(sp)
 8008170:	df000115 	stw	fp,4(sp)
 8008174:	df000104 	addi	fp,sp,4
 8008178:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK2_PERIOD / portTICK_PERIOD_MS);
 800817c:	0100fa04 	movi	r4,1000
 8008180:	8005c940 	call	8005c94 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task2\r\n" );
 8008184:	010200b4 	movhi	r4,2050
 8008188:	21280904 	addi	r4,r4,-24540
 800818c:	8009b180 	call	8009b18 <puts>

        //Control LED 2 DE0-NANO
        vParTestToggleLED(2);
 8008190:	01000084 	movi	r4,2
 8008194:	80037740 	call	8003774 <vParTestToggleLED>
	}
 8008198:	003ff806 	br	800817c <prvPrintTask2+0x14>

0800819c <xNetworkInterfaceInitialise>:

//=====================================================================================================================
// Functions
//=====================================================================================================================
BaseType_t xNetworkInterfaceInitialise( void )
{
 800819c:	defffc04 	addi	sp,sp,-16
 80081a0:	dfc00315 	stw	ra,12(sp)
 80081a4:	df000215 	stw	fp,8(sp)
 80081a8:	df000204 	addi	fp,sp,8

	// Configura SGDMA
	//===================================================================================================================================
	// Open the sgdma transmit device
	//----------------------------------------------------------------------------------------
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
 80081ac:	010200b4 	movhi	r4,2050
 80081b0:	21280d04 	addi	r4,r4,-24524
 80081b4:	8017ff40 	call	8017ff4 <alt_avalon_sgdma_open>
 80081b8:	d0a8ad15 	stw	r2,-23884(gp)

	if (sgdma_tx_dev == NULL) {
 80081bc:	d0a8ad17 	ldw	r2,-23884(gp)
 80081c0:	1000051e 	bne	r2,zero,80081d8 <xNetworkInterfaceInitialise+0x3c>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
 80081c4:	010200b4 	movhi	r4,2050
 80081c8:	21281104 	addi	r4,r4,-24508
 80081cc:	80167700 	call	8016770 <alt_printf>
		return pdFAIL;
 80081d0:	0005883a 	mov	r2,zero
 80081d4:	00006e06 	br	8008390 <xNetworkInterfaceInitialise+0x1f4>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
 80081d8:	010200b4 	movhi	r4,2050
 80081dc:	21282004 	addi	r4,r4,-24448
 80081e0:	80167700 	call	8016770 <alt_printf>

	// Open the sgdma receive device
	//----------------------------------------------------------------------------------------
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
 80081e4:	010200b4 	movhi	r4,2050
 80081e8:	21282b04 	addi	r4,r4,-24404
 80081ec:	8017ff40 	call	8017ff4 <alt_avalon_sgdma_open>
 80081f0:	d0a8af15 	stw	r2,-23876(gp)

	if (sgdma_rx_dev == NULL) {
 80081f4:	d0a8af17 	ldw	r2,-23876(gp)
 80081f8:	1000051e 	bne	r2,zero,8008210 <xNetworkInterfaceInitialise+0x74>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
 80081fc:	010200b4 	movhi	r4,2050
 8008200:	21282f04 	addi	r4,r4,-24388
 8008204:	80167700 	call	8016770 <alt_printf>
		return pdFAIL;
 8008208:	0005883a 	mov	r2,zero
 800820c:	00006006 	br	8008390 <xNetworkInterfaceInitialise+0x1f4>
	} else alt_printf ("Opened scatter-gather dma receive device\n");
 8008210:	010200b4 	movhi	r4,2050
 8008214:	21283e04 	addi	r4,r4,-24328
 8008218:	80167700 	call	8016770 <alt_printf>
	 * blocking transfers enables interrupts that causes the callback to be executed. The callback runs as part
	 * of the interrupt service routine, and care must be taken to follow the guidelines for acceptable interrupt
	 * service routine behavior as described in the Nios II Software Developer's Handbook.
	 * To disable callbacks after registering one, call this routine with 0x0 as the callback argument.
	 */
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
 800821c:	d0a8af17 	ldw	r2,-23876(gp)
 8008220:	000f883a 	mov	r7,zero
 8008224:	01800504 	movi	r6,20
 8008228:	01420074 	movhi	r5,2049
 800822c:	2960e904 	addi	r5,r5,-31836
 8008230:	1009883a 	mov	r4,r2
 8008234:	8017e880 	call	8017e88 <alt_avalon_sgdma_register_callback>
	 * the next descriptor in the chain.
	 * Descriptors must be in a memory device mastered by the SG-DMA controller's chain read and chain
	 * write Avalon master ports. Care must be taken to ensure that both *desc and *next point to areas of
	 * memory mastered by the controller.
	 */
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
 8008238:	d8000015 	stw	zero,0(sp)
 800823c:	000f883a 	mov	r7,zero
 8008240:	018220b4 	movhi	r6,2178
 8008244:	31ba3b04 	addi	r6,r6,-5908
 8008248:	01440034 	movhi	r5,4096
 800824c:	29441804 	addi	r5,r5,4192
 8008250:	01040034 	movhi	r4,4096
 8008254:	21041004 	addi	r4,r4,4160
 8008258:	8017ca40 	call	8017ca4 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	 * registered with this particular SG-DMA controller, the transfer is set up to issue an interrupt on error,
	 * EOP, or chain completion. Otherwise, no interrupt is registered and the application developer must
	 * check for and handle errors and completion. The run bit is cleared before the beginning of the transfer
	 * and is set to 1 to restart a new descriptor chain.
	 */
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
 800825c:	d0a8af17 	ldw	r2,-23876(gp)
 8008260:	01440034 	movhi	r5,4096
 8008264:	29441004 	addi	r5,r5,4160
 8008268:	1009883a 	mov	r4,r2
 800826c:	80179780 	call	8017978 <alt_avalon_sgdma_do_async_transfer>
	// Configura Triple Speed Ethernet
	//===================================================================================================================================
	/*
	 * Triple-speed Ethernet MegaCore base address
	 */
	volatile int * tse = (int *) 0x10004000;
 8008270:	00840034 	movhi	r2,4096
 8008274:	10900004 	addi	r2,r2,16384
 8008278:	e0bfff15 	stw	r2,-4(fp)
	 * 6-byte MAC primary address. The first four most significant
	 * bytes of the MAC address occupy mac_0 (0x03) in reverse order.
	 * The last two bytes of the MAC address occupy the two least
	 * significant bytes of mac_1 (0x04)in reverse order.0
	 */
	*(tse + 3) = 0x116E6001;
 800827c:	e0bfff17 	ldw	r2,-4(fp)
 8008280:	10c00304 	addi	r3,r2,12
 8008284:	00845bb4 	movhi	r2,4462
 8008288:	10980044 	addi	r2,r2,24577
 800828c:	18800015 	stw	r2,0(r3)
	*(tse + 4) = 0x00000F02;
 8008290:	e0bfff17 	ldw	r2,-4(fp)
 8008294:	10800404 	addi	r2,r2,16
 8008298:	00c3c084 	movi	r3,3842
 800829c:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	//===================================================================================================================================v
	*(tse + 0x0F) = 0x10;
 80082a0:	e0bfff17 	ldw	r2,-4(fp)
 80082a4:	10800f04 	addi	r2,r2,60
 80082a8:	00c00404 	movi	r3,16
 80082ac:	10c00015 	stw	r3,0(r2)
	*(tse + 0x10) = 0x11;
 80082b0:	e0bfff17 	ldw	r2,-4(fp)
 80082b4:	10801004 	addi	r2,r2,64
 80082b8:	00c00444 	movi	r3,17
 80082bc:	10c00015 	stw	r3,0(r2)

	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	//----------------------------------------------------------------------------------------
	*(tse + 0x94) = 0x4000;
 80082c0:	e0bfff17 	ldw	r2,-4(fp)
 80082c4:	10809404 	addi	r2,r2,592
 80082c8:	00d00004 	movi	r3,16384
 80082cc:	10c00015 	stw	r3,0(r2)

	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	//----------------------------------------------------------------------------------------
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
 80082d0:	e0bfff17 	ldw	r2,-4(fp)
 80082d4:	1080b004 	addi	r2,r2,704
 80082d8:	e0ffff17 	ldw	r3,-4(fp)
 80082dc:	18c0b004 	addi	r3,r3,704
 80082e0:	18c00017 	ldw	r3,0(r3)
 80082e4:	18c01814 	ori	r3,r3,96
 80082e8:	10c00015 	stw	r3,0(r2)

	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	//----------------------------------------------------------------------------------------
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
 80082ec:	e0bfff17 	ldw	r2,-4(fp)
 80082f0:	1080b404 	addi	r2,r2,720
 80082f4:	e0ffff17 	ldw	r3,-4(fp)
 80082f8:	18c0b404 	addi	r3,r3,720
 80082fc:	18c00017 	ldw	r3,0(r3)
 8008300:	18c02094 	ori	r3,r3,130
 8008304:	10c00015 	stw	r3,0(r2)

	// Software reset the second PHY chip and wait
	//----------------------------------------------------------------------------------------
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
 8008308:	e0bfff17 	ldw	r2,-4(fp)
 800830c:	1080a004 	addi	r2,r2,640
 8008310:	e0ffff17 	ldw	r3,-4(fp)
 8008314:	18c0a004 	addi	r3,r3,640
 8008318:	18c00017 	ldw	r3,0(r3)
 800831c:	18e00014 	ori	r3,r3,32768
 8008320:	10c00015 	stw	r3,0(r2)
	while ( *(tse + 0xA0) & 0x8000  )
 8008324:	0001883a 	nop
 8008328:	e0bfff17 	ldw	r2,-4(fp)
 800832c:	1080a004 	addi	r2,r2,640
 8008330:	10800017 	ldw	r2,0(r2)
 8008334:	10a0000c 	andi	r2,r2,32768
 8008338:	103ffb1e 	bne	r2,zero,8008328 <xNetworkInterfaceInitialise+0x18c>
		;

	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse + 2) = *(tse + 2) | 0x0000004B;
 800833c:	e0bfff17 	ldw	r2,-4(fp)
 8008340:	10800204 	addi	r2,r2,8
 8008344:	e0ffff17 	ldw	r3,-4(fp)
 8008348:	18c00204 	addi	r3,r3,8
 800834c:	18c00017 	ldw	r3,0(r3)
 8008350:	18c012d4 	ori	r3,r3,75
 8008354:	10c00015 	stw	r3,0(r2)


	vSemaphoreCreateBinary( xEMACRxEventSemaphore );
 8008358:	018000c4 	movi	r6,3
 800835c:	000b883a 	mov	r5,zero
 8008360:	01000044 	movi	r4,1
 8008364:	80043880 	call	8004388 <xQueueGenericCreate>
 8008368:	d0a8ac15 	stw	r2,-23888(gp)
 800836c:	d0a8ac17 	ldw	r2,-23888(gp)
 8008370:	10000626 	beq	r2,zero,800838c <xNetworkInterfaceInitialise+0x1f0>
 8008374:	d0a8ac17 	ldw	r2,-23888(gp)
 8008378:	000f883a 	mov	r7,zero
 800837c:	000d883a 	mov	r6,zero
 8008380:	000b883a 	mov	r5,zero
 8008384:	1009883a 	mov	r4,r2
 8008388:	80046f40 	call	80046f4 <xQueueGenericSend>

	return pdPASS;
 800838c:	00800044 	movi	r2,1
}
 8008390:	e037883a 	mov	sp,fp
 8008394:	dfc00117 	ldw	ra,4(sp)
 8008398:	df000017 	ldw	fp,0(sp)
 800839c:	dec00204 	addi	sp,sp,8
 80083a0:	f800283a 	ret

080083a4 <rx_ethernet_isr>:

//=====================================================================================================================
// Subroutine to read incoming Ethernet frames
//=====================================================================================================================
void rx_ethernet_isr (void *context)
{
 80083a4:	defffc04 	addi	sp,sp,-16
 80083a8:	dfc00315 	stw	ra,12(sp)
 80083ac:	df000215 	stw	fp,8(sp)
 80083b0:	df000204 	addi	fp,sp,8
 80083b4:	e13fff15 	stw	r4,-4(fp)
	/*
	 * Description:
	 * Checks a descriptor previously owned by hardware for any errors reported in a previous transfer. The
	 * routine reports: errors reported by the SG-DMA controller, the buffer in use.
	 */
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
 80083b8:	0001883a 	nop
 80083bc:	01040034 	movhi	r4,4096
 80083c0:	21041004 	addi	r4,r4,4160
 80083c4:	8017f900 	call	8017f90 <alt_avalon_sgdma_check_descriptor_status>
 80083c8:	103ffc1e 	bne	r2,zero,80083bc <rx_ethernet_isr+0x18>

	xSemaphoreGiveFromISR( xEMACRxEventSemaphore, NULL );
 80083cc:	d0a8ac17 	ldw	r2,-23888(gp)
 80083d0:	000b883a 	mov	r5,zero
 80083d4:	1009883a 	mov	r4,r2
 80083d8:	80049900 	call	8004990 <xQueueGiveFromISR>
	 * the next descriptor in the chain.
	 * Descriptors must be in a memory device mastered by the SG-DMA controller's chain read and chain
	 * write Avalon master ports. Care must be taken to ensure that both *desc and *next point to areas of
	 * memory mastered by the controller.
	 */
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
 80083dc:	d8000015 	stw	zero,0(sp)
 80083e0:	000f883a 	mov	r7,zero
 80083e4:	018220b4 	movhi	r6,2178
 80083e8:	31ba3b04 	addi	r6,r6,-5908
 80083ec:	01440034 	movhi	r5,4096
 80083f0:	29441804 	addi	r5,r5,4192
 80083f4:	01040034 	movhi	r4,4096
 80083f8:	21041004 	addi	r4,r4,4160
 80083fc:	8017ca40 	call	8017ca4 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	 * registered with this particular SG-DMA controller, the transfer is set up to issue an interrupt on error,
	 * EOP, or chain completion. Otherwise, no interrupt is registered and the application developer must
	 * check for and handle errors and completion. The run bit is cleared before the beginning of the transfer
	 * and is set to 1 to restart a new descriptor chain.
	 */
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
 8008400:	d0a8af17 	ldw	r2,-23876(gp)
 8008404:	01440034 	movhi	r5,4096
 8008408:	29441004 	addi	r5,r5,4160
 800840c:	1009883a 	mov	r4,r2
 8008410:	80179780 	call	8017978 <alt_avalon_sgdma_do_async_transfer>
}
 8008414:	0001883a 	nop
 8008418:	e037883a 	mov	sp,fp
 800841c:	dfc00117 	ldw	ra,4(sp)
 8008420:	df000017 	ldw	fp,0(sp)
 8008424:	dec00204 	addi	sp,sp,8
 8008428:	f800283a 	ret

0800842c <prvEMACHandlerTask>:

static void prvEMACHandlerTask( void *pvParameters )
{
 800842c:	defffc04 	addi	sp,sp,-16
 8008430:	dfc00315 	stw	ra,12(sp)
 8008434:	df000215 	stw	fp,8(sp)
 8008438:	df000204 	addi	fp,sp,8
 800843c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 valor = 0;
 8008440:	e03ffe0d 	sth	zero,-8(fp)
	while(1)
	{
		if (xSemaphoreTake( xEMACRxEventSemaphore, portMAX_DELAY ))
 8008444:	d0a8ac17 	ldw	r2,-23888(gp)
 8008448:	017fffc4 	movi	r5,-1
 800844c:	1009883a 	mov	r4,r2
 8008450:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8008454:	103ffb26 	beq	r2,zero,8008444 <prvEMACHandlerTask+0x18>
		{
			// Teste para novo received frame
			alt_printf( "receive> %s \n", rx_frame+295 );
 8008458:	008220b4 	movhi	r2,2178
 800845c:	10ba84c4 	addi	r2,r2,-5613
 8008460:	100b883a 	mov	r5,r2
 8008464:	010200b4 	movhi	r4,2050
 8008468:	21284904 	addi	r4,r4,-24284
 800846c:	80167700 	call	8016770 <alt_printf>

			// Reprint current input line after the output
			alt_printf( "\nsend> \n");
 8008470:	010200b4 	movhi	r4,2050
 8008474:	21284d04 	addi	r4,r4,-24268
 8008478:	80167700 	call	8016770 <alt_printf>
		}
	}
 800847c:	003ff106 	br	8008444 <prvEMACHandlerTask+0x18>

08008480 <__divsi3>:
 8008480:	20001b16 	blt	r4,zero,80084f0 <__divsi3+0x70>
 8008484:	000f883a 	mov	r7,zero
 8008488:	28001616 	blt	r5,zero,80084e4 <__divsi3+0x64>
 800848c:	200d883a 	mov	r6,r4
 8008490:	29001a2e 	bgeu	r5,r4,80084fc <__divsi3+0x7c>
 8008494:	00800804 	movi	r2,32
 8008498:	00c00044 	movi	r3,1
 800849c:	00000106 	br	80084a4 <__divsi3+0x24>
 80084a0:	10000d26 	beq	r2,zero,80084d8 <__divsi3+0x58>
 80084a4:	294b883a 	add	r5,r5,r5
 80084a8:	10bfffc4 	addi	r2,r2,-1
 80084ac:	18c7883a 	add	r3,r3,r3
 80084b0:	293ffb36 	bltu	r5,r4,80084a0 <__divsi3+0x20>
 80084b4:	0005883a 	mov	r2,zero
 80084b8:	18000726 	beq	r3,zero,80084d8 <__divsi3+0x58>
 80084bc:	0005883a 	mov	r2,zero
 80084c0:	31400236 	bltu	r6,r5,80084cc <__divsi3+0x4c>
 80084c4:	314dc83a 	sub	r6,r6,r5
 80084c8:	10c4b03a 	or	r2,r2,r3
 80084cc:	1806d07a 	srli	r3,r3,1
 80084d0:	280ad07a 	srli	r5,r5,1
 80084d4:	183ffa1e 	bne	r3,zero,80084c0 <__divsi3+0x40>
 80084d8:	38000126 	beq	r7,zero,80084e0 <__divsi3+0x60>
 80084dc:	0085c83a 	sub	r2,zero,r2
 80084e0:	f800283a 	ret
 80084e4:	014bc83a 	sub	r5,zero,r5
 80084e8:	39c0005c 	xori	r7,r7,1
 80084ec:	003fe706 	br	800848c <__divsi3+0xc>
 80084f0:	0109c83a 	sub	r4,zero,r4
 80084f4:	01c00044 	movi	r7,1
 80084f8:	003fe306 	br	8008488 <__divsi3+0x8>
 80084fc:	00c00044 	movi	r3,1
 8008500:	003fee06 	br	80084bc <__divsi3+0x3c>

08008504 <__modsi3>:
 8008504:	20001716 	blt	r4,zero,8008564 <__modsi3+0x60>
 8008508:	000f883a 	mov	r7,zero
 800850c:	2005883a 	mov	r2,r4
 8008510:	28001216 	blt	r5,zero,800855c <__modsi3+0x58>
 8008514:	2900162e 	bgeu	r5,r4,8008570 <__modsi3+0x6c>
 8008518:	01800804 	movi	r6,32
 800851c:	00c00044 	movi	r3,1
 8008520:	00000106 	br	8008528 <__modsi3+0x24>
 8008524:	30000a26 	beq	r6,zero,8008550 <__modsi3+0x4c>
 8008528:	294b883a 	add	r5,r5,r5
 800852c:	31bfffc4 	addi	r6,r6,-1
 8008530:	18c7883a 	add	r3,r3,r3
 8008534:	293ffb36 	bltu	r5,r4,8008524 <__modsi3+0x20>
 8008538:	18000526 	beq	r3,zero,8008550 <__modsi3+0x4c>
 800853c:	1806d07a 	srli	r3,r3,1
 8008540:	11400136 	bltu	r2,r5,8008548 <__modsi3+0x44>
 8008544:	1145c83a 	sub	r2,r2,r5
 8008548:	280ad07a 	srli	r5,r5,1
 800854c:	183ffb1e 	bne	r3,zero,800853c <__modsi3+0x38>
 8008550:	38000126 	beq	r7,zero,8008558 <__modsi3+0x54>
 8008554:	0085c83a 	sub	r2,zero,r2
 8008558:	f800283a 	ret
 800855c:	014bc83a 	sub	r5,zero,r5
 8008560:	003fec06 	br	8008514 <__modsi3+0x10>
 8008564:	0109c83a 	sub	r4,zero,r4
 8008568:	01c00044 	movi	r7,1
 800856c:	003fe706 	br	800850c <__modsi3+0x8>
 8008570:	00c00044 	movi	r3,1
 8008574:	003ff106 	br	800853c <__modsi3+0x38>

08008578 <__udivsi3>:
 8008578:	200d883a 	mov	r6,r4
 800857c:	2900152e 	bgeu	r5,r4,80085d4 <__udivsi3+0x5c>
 8008580:	28001416 	blt	r5,zero,80085d4 <__udivsi3+0x5c>
 8008584:	00800804 	movi	r2,32
 8008588:	00c00044 	movi	r3,1
 800858c:	00000206 	br	8008598 <__udivsi3+0x20>
 8008590:	10000e26 	beq	r2,zero,80085cc <__udivsi3+0x54>
 8008594:	28000516 	blt	r5,zero,80085ac <__udivsi3+0x34>
 8008598:	294b883a 	add	r5,r5,r5
 800859c:	10bfffc4 	addi	r2,r2,-1
 80085a0:	18c7883a 	add	r3,r3,r3
 80085a4:	293ffa36 	bltu	r5,r4,8008590 <__udivsi3+0x18>
 80085a8:	18000826 	beq	r3,zero,80085cc <__udivsi3+0x54>
 80085ac:	0005883a 	mov	r2,zero
 80085b0:	31400236 	bltu	r6,r5,80085bc <__udivsi3+0x44>
 80085b4:	314dc83a 	sub	r6,r6,r5
 80085b8:	10c4b03a 	or	r2,r2,r3
 80085bc:	1806d07a 	srli	r3,r3,1
 80085c0:	280ad07a 	srli	r5,r5,1
 80085c4:	183ffa1e 	bne	r3,zero,80085b0 <__udivsi3+0x38>
 80085c8:	f800283a 	ret
 80085cc:	0005883a 	mov	r2,zero
 80085d0:	f800283a 	ret
 80085d4:	00c00044 	movi	r3,1
 80085d8:	003ff406 	br	80085ac <__udivsi3+0x34>

080085dc <__umodsi3>:
 80085dc:	2005883a 	mov	r2,r4
 80085e0:	2900122e 	bgeu	r5,r4,800862c <__umodsi3+0x50>
 80085e4:	28001116 	blt	r5,zero,800862c <__umodsi3+0x50>
 80085e8:	01800804 	movi	r6,32
 80085ec:	00c00044 	movi	r3,1
 80085f0:	00000206 	br	80085fc <__umodsi3+0x20>
 80085f4:	30000c26 	beq	r6,zero,8008628 <__umodsi3+0x4c>
 80085f8:	28000516 	blt	r5,zero,8008610 <__umodsi3+0x34>
 80085fc:	294b883a 	add	r5,r5,r5
 8008600:	31bfffc4 	addi	r6,r6,-1
 8008604:	18c7883a 	add	r3,r3,r3
 8008608:	293ffa36 	bltu	r5,r4,80085f4 <__umodsi3+0x18>
 800860c:	18000626 	beq	r3,zero,8008628 <__umodsi3+0x4c>
 8008610:	1806d07a 	srli	r3,r3,1
 8008614:	11400136 	bltu	r2,r5,800861c <__umodsi3+0x40>
 8008618:	1145c83a 	sub	r2,r2,r5
 800861c:	280ad07a 	srli	r5,r5,1
 8008620:	183ffb1e 	bne	r3,zero,8008610 <__umodsi3+0x34>
 8008624:	f800283a 	ret
 8008628:	f800283a 	ret
 800862c:	00c00044 	movi	r3,1
 8008630:	003ff706 	br	8008610 <__umodsi3+0x34>

08008634 <__mulsi3>:
 8008634:	0005883a 	mov	r2,zero
 8008638:	20000726 	beq	r4,zero,8008658 <__mulsi3+0x24>
 800863c:	20c0004c 	andi	r3,r4,1
 8008640:	2008d07a 	srli	r4,r4,1
 8008644:	18000126 	beq	r3,zero,800864c <__mulsi3+0x18>
 8008648:	1145883a 	add	r2,r2,r5
 800864c:	294b883a 	add	r5,r5,r5
 8008650:	203ffa1e 	bne	r4,zero,800863c <__mulsi3+0x8>
 8008654:	f800283a 	ret
 8008658:	f800283a 	ret

0800865c <_fopen_r>:
 800865c:	defffa04 	addi	sp,sp,-24
 8008660:	3005883a 	mov	r2,r6
 8008664:	dcc00415 	stw	r19,16(sp)
 8008668:	d80d883a 	mov	r6,sp
 800866c:	2827883a 	mov	r19,r5
 8008670:	100b883a 	mov	r5,r2
 8008674:	dc800315 	stw	r18,12(sp)
 8008678:	dfc00515 	stw	ra,20(sp)
 800867c:	dc400215 	stw	r17,8(sp)
 8008680:	dc000115 	stw	r16,4(sp)
 8008684:	2025883a 	mov	r18,r4
 8008688:	800e4080 	call	800e408 <__sflags>
 800868c:	10002726 	beq	r2,zero,800872c <_fopen_r+0xd0>
 8008690:	9009883a 	mov	r4,r18
 8008694:	1023883a 	mov	r17,r2
 8008698:	800e2880 	call	800e288 <__sfp>
 800869c:	1021883a 	mov	r16,r2
 80086a0:	10002226 	beq	r2,zero,800872c <_fopen_r+0xd0>
 80086a4:	d9800017 	ldw	r6,0(sp)
 80086a8:	01c06d84 	movi	r7,438
 80086ac:	980b883a 	mov	r5,r19
 80086b0:	9009883a 	mov	r4,r18
 80086b4:	800998c0 	call	800998c <_open_r>
 80086b8:	10001916 	blt	r2,zero,8008720 <_fopen_r+0xc4>
 80086bc:	8080038d 	sth	r2,14(r16)
 80086c0:	00820074 	movhi	r2,2049
 80086c4:	10a75c04 	addi	r2,r2,-25232
 80086c8:	80800815 	stw	r2,32(r16)
 80086cc:	00820074 	movhi	r2,2049
 80086d0:	10a77304 	addi	r2,r2,-25140
 80086d4:	80800915 	stw	r2,36(r16)
 80086d8:	00820074 	movhi	r2,2049
 80086dc:	10a79204 	addi	r2,r2,-25016
 80086e0:	80800a15 	stw	r2,40(r16)
 80086e4:	00820074 	movhi	r2,2049
 80086e8:	10a7a904 	addi	r2,r2,-24924
 80086ec:	8440030d 	sth	r17,12(r16)
 80086f0:	84000715 	stw	r16,28(r16)
 80086f4:	80800b15 	stw	r2,44(r16)
 80086f8:	8c40400c 	andi	r17,r17,256
 80086fc:	88000d1e 	bne	r17,zero,8008734 <_fopen_r+0xd8>
 8008700:	8005883a 	mov	r2,r16
 8008704:	dfc00517 	ldw	ra,20(sp)
 8008708:	dcc00417 	ldw	r19,16(sp)
 800870c:	dc800317 	ldw	r18,12(sp)
 8008710:	dc400217 	ldw	r17,8(sp)
 8008714:	dc000117 	ldw	r16,4(sp)
 8008718:	dec00604 	addi	sp,sp,24
 800871c:	f800283a 	ret
 8008720:	800e3c80 	call	800e3c8 <__sfp_lock_acquire>
 8008724:	8000030d 	sth	zero,12(r16)
 8008728:	800e3cc0 	call	800e3cc <__sfp_lock_release>
 800872c:	0005883a 	mov	r2,zero
 8008730:	003ff406 	br	8008704 <_fopen_r+0xa8>
 8008734:	01c00084 	movi	r7,2
 8008738:	000d883a 	mov	r6,zero
 800873c:	800b883a 	mov	r5,r16
 8008740:	9009883a 	mov	r4,r18
 8008744:	80087680 	call	8008768 <_fseek_r>
 8008748:	8005883a 	mov	r2,r16
 800874c:	003fed06 	br	8008704 <_fopen_r+0xa8>

08008750 <fopen>:
 8008750:	008200b4 	movhi	r2,2050
 8008754:	10b14b04 	addi	r2,r2,-15060
 8008758:	280d883a 	mov	r6,r5
 800875c:	200b883a 	mov	r5,r4
 8008760:	11000017 	ldw	r4,0(r2)
 8008764:	800865c1 	jmpi	800865c <_fopen_r>

08008768 <_fseek_r>:
 8008768:	80087881 	jmpi	8008788 <_fseeko_r>

0800876c <fseek>:
 800876c:	008200b4 	movhi	r2,2050
 8008770:	10b14b04 	addi	r2,r2,-15060
 8008774:	300f883a 	mov	r7,r6
 8008778:	280d883a 	mov	r6,r5
 800877c:	200b883a 	mov	r5,r4
 8008780:	11000017 	ldw	r4,0(r2)
 8008784:	80087881 	jmpi	8008788 <_fseeko_r>

08008788 <_fseeko_r>:
 8008788:	deffe804 	addi	sp,sp,-96
 800878c:	dd401415 	stw	r21,80(sp)
 8008790:	dc801115 	stw	r18,68(sp)
 8008794:	dc401015 	stw	r17,64(sp)
 8008798:	dc000f15 	stw	r16,60(sp)
 800879c:	dfc01715 	stw	ra,92(sp)
 80087a0:	ddc01615 	stw	r23,88(sp)
 80087a4:	dd801515 	stw	r22,84(sp)
 80087a8:	dd001315 	stw	r20,76(sp)
 80087ac:	dcc01215 	stw	r19,72(sp)
 80087b0:	2023883a 	mov	r17,r4
 80087b4:	2821883a 	mov	r16,r5
 80087b8:	302b883a 	mov	r21,r6
 80087bc:	3825883a 	mov	r18,r7
 80087c0:	20000226 	beq	r4,zero,80087cc <_fseeko_r+0x44>
 80087c4:	20800e17 	ldw	r2,56(r4)
 80087c8:	10005a26 	beq	r2,zero,8008934 <_fseeko_r+0x1ac>
 80087cc:	8080030b 	ldhu	r2,12(r16)
 80087d0:	00c04204 	movi	r3,264
 80087d4:	1080420c 	andi	r2,r2,264
 80087d8:	10c05b26 	beq	r2,r3,8008948 <_fseeko_r+0x1c0>
 80087dc:	85000a17 	ldw	r20,40(r16)
 80087e0:	a000f626 	beq	r20,zero,8008bbc <_fseeko_r+0x434>
 80087e4:	00800044 	movi	r2,1
 80087e8:	90803e26 	beq	r18,r2,80088e4 <_fseeko_r+0x15c>
 80087ec:	00800084 	movi	r2,2
 80087f0:	90801026 	beq	r18,r2,8008834 <_fseeko_r+0xac>
 80087f4:	90000f26 	beq	r18,zero,8008834 <_fseeko_r+0xac>
 80087f8:	00800584 	movi	r2,22
 80087fc:	88800015 	stw	r2,0(r17)
 8008800:	04ffffc4 	movi	r19,-1
 8008804:	9805883a 	mov	r2,r19
 8008808:	dfc01717 	ldw	ra,92(sp)
 800880c:	ddc01617 	ldw	r23,88(sp)
 8008810:	dd801517 	ldw	r22,84(sp)
 8008814:	dd401417 	ldw	r21,80(sp)
 8008818:	dd001317 	ldw	r20,76(sp)
 800881c:	dcc01217 	ldw	r19,72(sp)
 8008820:	dc801117 	ldw	r18,68(sp)
 8008824:	dc401017 	ldw	r17,64(sp)
 8008828:	dc000f17 	ldw	r16,60(sp)
 800882c:	dec01804 	addi	sp,sp,96
 8008830:	f800283a 	ret
 8008834:	80800417 	ldw	r2,16(r16)
 8008838:	002f883a 	mov	r23,zero
 800883c:	0027883a 	mov	r19,zero
 8008840:	1000cb26 	beq	r2,zero,8008b70 <_fseeko_r+0x3e8>
 8008844:	8080030b 	ldhu	r2,12(r16)
 8008848:	10c2068c 	andi	r3,r2,2074
 800884c:	1800071e 	bne	r3,zero,800886c <_fseeko_r+0xe4>
 8008850:	10c1000c 	andi	r3,r2,1024
 8008854:	1800451e 	bne	r3,zero,800896c <_fseeko_r+0x1e4>
 8008858:	00c20074 	movhi	r3,2049
 800885c:	18e79204 	addi	r3,r3,-25016
 8008860:	a0c0b726 	beq	r20,r3,8008b40 <_fseeko_r+0x3b8>
 8008864:	10820014 	ori	r2,r2,2048
 8008868:	8080030d 	sth	r2,12(r16)
 800886c:	800b883a 	mov	r5,r16
 8008870:	8809883a 	mov	r4,r17
 8008874:	800dfcc0 	call	800dfcc <_fflush_r>
 8008878:	1027883a 	mov	r19,r2
 800887c:	103fe01e 	bne	r2,zero,8008800 <_fseeko_r+0x78>
 8008880:	81400717 	ldw	r5,28(r16)
 8008884:	900f883a 	mov	r7,r18
 8008888:	a80d883a 	mov	r6,r21
 800888c:	8809883a 	mov	r4,r17
 8008890:	a03ee83a 	callr	r20
 8008894:	00ffffc4 	movi	r3,-1
 8008898:	10ffd926 	beq	r2,r3,8008800 <_fseeko_r+0x78>
 800889c:	81400c17 	ldw	r5,48(r16)
 80088a0:	28000526 	beq	r5,zero,80088b8 <_fseeko_r+0x130>
 80088a4:	80801004 	addi	r2,r16,64
 80088a8:	28800226 	beq	r5,r2,80088b4 <_fseeko_r+0x12c>
 80088ac:	8809883a 	mov	r4,r17
 80088b0:	800e5d80 	call	800e5d8 <_free_r>
 80088b4:	80000c15 	stw	zero,48(r16)
 80088b8:	8080030b 	ldhu	r2,12(r16)
 80088bc:	80c00417 	ldw	r3,16(r16)
 80088c0:	80000115 	stw	zero,4(r16)
 80088c4:	10bdf7cc 	andi	r2,r2,63455
 80088c8:	80c00015 	stw	r3,0(r16)
 80088cc:	8080030d 	sth	r2,12(r16)
 80088d0:	01800204 	movi	r6,8
 80088d4:	000b883a 	mov	r5,zero
 80088d8:	81001704 	addi	r4,r16,92
 80088dc:	80098640 	call	8009864 <memset>
 80088e0:	003fc806 	br	8008804 <_fseeko_r+0x7c>
 80088e4:	800b883a 	mov	r5,r16
 80088e8:	8809883a 	mov	r4,r17
 80088ec:	800dfcc0 	call	800dfcc <_fflush_r>
 80088f0:	8080030b 	ldhu	r2,12(r16)
 80088f4:	10c4000c 	andi	r3,r2,4096
 80088f8:	18008726 	beq	r3,zero,8008b18 <_fseeko_r+0x390>
 80088fc:	84c01417 	ldw	r19,80(r16)
 8008900:	10c0010c 	andi	r3,r2,4
 8008904:	1800431e 	bne	r3,zero,8008a14 <_fseeko_r+0x28c>
 8008908:	1080020c 	andi	r2,r2,8
 800890c:	10008026 	beq	r2,zero,8008b10 <_fseeko_r+0x388>
 8008910:	80c00017 	ldw	r3,0(r16)
 8008914:	80800417 	ldw	r2,16(r16)
 8008918:	18000226 	beq	r3,zero,8008924 <_fseeko_r+0x19c>
 800891c:	1887c83a 	sub	r3,r3,r2
 8008920:	98e7883a 	add	r19,r19,r3
 8008924:	aceb883a 	add	r21,r21,r19
 8008928:	05c00044 	movi	r23,1
 800892c:	0025883a 	mov	r18,zero
 8008930:	003fc306 	br	8008840 <_fseeko_r+0xb8>
 8008934:	800e3b80 	call	800e3b8 <__sinit>
 8008938:	8080030b 	ldhu	r2,12(r16)
 800893c:	00c04204 	movi	r3,264
 8008940:	1080420c 	andi	r2,r2,264
 8008944:	10ffa51e 	bne	r2,r3,80087dc <_fseeko_r+0x54>
 8008948:	800b883a 	mov	r5,r16
 800894c:	8809883a 	mov	r4,r17
 8008950:	800dfcc0 	call	800dfcc <_fflush_r>
 8008954:	003fa106 	br	80087dc <_fseeko_r+0x54>
 8008958:	8080030b 	ldhu	r2,12(r16)
 800895c:	00c10004 	movi	r3,1024
 8008960:	80c01315 	stw	r3,76(r16)
 8008964:	10c4b03a 	or	r2,r2,r3
 8008968:	8080030d 	sth	r2,12(r16)
 800896c:	9000311e 	bne	r18,zero,8008a34 <_fseeko_r+0x2ac>
 8008970:	a82d883a 	mov	r22,r21
 8008974:	b800371e 	bne	r23,zero,8008a54 <_fseeko_r+0x2cc>
 8008978:	8080030b 	ldhu	r2,12(r16)
 800897c:	1084000c 	andi	r2,r2,4096
 8008980:	10007f26 	beq	r2,zero,8008b80 <_fseeko_r+0x3f8>
 8008984:	80801417 	ldw	r2,80(r16)
 8008988:	81800117 	ldw	r6,4(r16)
 800898c:	81400c17 	ldw	r5,48(r16)
 8008990:	11a7c83a 	sub	r19,r2,r6
 8008994:	28008226 	beq	r5,zero,8008ba0 <_fseeko_r+0x418>
 8008998:	81c00f17 	ldw	r7,60(r16)
 800899c:	99e7c83a 	sub	r19,r19,r7
 80089a0:	81000e17 	ldw	r4,56(r16)
 80089a4:	80800417 	ldw	r2,16(r16)
 80089a8:	99a7883a 	add	r19,r19,r6
 80089ac:	2087c83a 	sub	r3,r4,r2
 80089b0:	98e7c83a 	sub	r19,r19,r3
 80089b4:	38c7883a 	add	r3,r7,r3
 80089b8:	b4c02b16 	blt	r22,r19,8008a68 <_fseeko_r+0x2e0>
 80089bc:	98c9883a 	add	r4,r19,r3
 80089c0:	b100292e 	bgeu	r22,r4,8008a68 <_fseeko_r+0x2e0>
 80089c4:	b4e7c83a 	sub	r19,r22,r19
 80089c8:	14c5883a 	add	r2,r2,r19
 80089cc:	1ce7c83a 	sub	r19,r3,r19
 80089d0:	80800015 	stw	r2,0(r16)
 80089d4:	84c00115 	stw	r19,4(r16)
 80089d8:	28000526 	beq	r5,zero,80089f0 <_fseeko_r+0x268>
 80089dc:	80801004 	addi	r2,r16,64
 80089e0:	28800226 	beq	r5,r2,80089ec <_fseeko_r+0x264>
 80089e4:	8809883a 	mov	r4,r17
 80089e8:	800e5d80 	call	800e5d8 <_free_r>
 80089ec:	80000c15 	stw	zero,48(r16)
 80089f0:	8080030b 	ldhu	r2,12(r16)
 80089f4:	01800204 	movi	r6,8
 80089f8:	000b883a 	mov	r5,zero
 80089fc:	10bff7cc 	andi	r2,r2,65503
 8008a00:	8080030d 	sth	r2,12(r16)
 8008a04:	81001704 	addi	r4,r16,92
 8008a08:	80098640 	call	8009864 <memset>
 8008a0c:	0027883a 	mov	r19,zero
 8008a10:	003f7c06 	br	8008804 <_fseeko_r+0x7c>
 8008a14:	80c00117 	ldw	r3,4(r16)
 8008a18:	80800c17 	ldw	r2,48(r16)
 8008a1c:	98e7c83a 	sub	r19,r19,r3
 8008a20:	10003b26 	beq	r2,zero,8008b10 <_fseeko_r+0x388>
 8008a24:	80c00f17 	ldw	r3,60(r16)
 8008a28:	80800417 	ldw	r2,16(r16)
 8008a2c:	98e7c83a 	sub	r19,r19,r3
 8008a30:	003fbc06 	br	8008924 <_fseeko_r+0x19c>
 8008a34:	8140038f 	ldh	r5,14(r16)
 8008a38:	d80d883a 	mov	r6,sp
 8008a3c:	8809883a 	mov	r4,r17
 8008a40:	8008be80 	call	8008be8 <_fstat_r>
 8008a44:	103f891e 	bne	r2,zero,800886c <_fseeko_r+0xe4>
 8008a48:	dd800417 	ldw	r22,16(sp)
 8008a4c:	adad883a 	add	r22,r21,r22
 8008a50:	b83fc926 	beq	r23,zero,8008978 <_fseeko_r+0x1f0>
 8008a54:	81400c17 	ldw	r5,48(r16)
 8008a58:	81800117 	ldw	r6,4(r16)
 8008a5c:	28005026 	beq	r5,zero,8008ba0 <_fseeko_r+0x418>
 8008a60:	81c00f17 	ldw	r7,60(r16)
 8008a64:	003fce06 	br	80089a0 <_fseeko_r+0x218>
 8008a68:	84c01317 	ldw	r19,76(r16)
 8008a6c:	81400717 	ldw	r5,28(r16)
 8008a70:	000f883a 	mov	r7,zero
 8008a74:	04e7c83a 	sub	r19,zero,r19
 8008a78:	9da6703a 	and	r19,r19,r22
 8008a7c:	980d883a 	mov	r6,r19
 8008a80:	8809883a 	mov	r4,r17
 8008a84:	a03ee83a 	callr	r20
 8008a88:	00ffffc4 	movi	r3,-1
 8008a8c:	10ff7726 	beq	r2,r3,800886c <_fseeko_r+0xe4>
 8008a90:	80800417 	ldw	r2,16(r16)
 8008a94:	81400c17 	ldw	r5,48(r16)
 8008a98:	80000115 	stw	zero,4(r16)
 8008a9c:	80800015 	stw	r2,0(r16)
 8008aa0:	28000526 	beq	r5,zero,8008ab8 <_fseeko_r+0x330>
 8008aa4:	80801004 	addi	r2,r16,64
 8008aa8:	28800226 	beq	r5,r2,8008ab4 <_fseeko_r+0x32c>
 8008aac:	8809883a 	mov	r4,r17
 8008ab0:	800e5d80 	call	800e5d8 <_free_r>
 8008ab4:	80000c15 	stw	zero,48(r16)
 8008ab8:	8080030b 	ldhu	r2,12(r16)
 8008abc:	b4e7c83a 	sub	r19,r22,r19
 8008ac0:	10bff7cc 	andi	r2,r2,65503
 8008ac4:	8080030d 	sth	r2,12(r16)
 8008ac8:	98000b26 	beq	r19,zero,8008af8 <_fseeko_r+0x370>
 8008acc:	800b883a 	mov	r5,r16
 8008ad0:	8809883a 	mov	r4,r17
 8008ad4:	8009b480 	call	8009b48 <__srefill_r>
 8008ad8:	103f641e 	bne	r2,zero,800886c <_fseeko_r+0xe4>
 8008adc:	80800117 	ldw	r2,4(r16)
 8008ae0:	14ff6236 	bltu	r2,r19,800886c <_fseeko_r+0xe4>
 8008ae4:	80c00017 	ldw	r3,0(r16)
 8008ae8:	14c5c83a 	sub	r2,r2,r19
 8008aec:	80800115 	stw	r2,4(r16)
 8008af0:	1ce7883a 	add	r19,r3,r19
 8008af4:	84c00015 	stw	r19,0(r16)
 8008af8:	01800204 	movi	r6,8
 8008afc:	000b883a 	mov	r5,zero
 8008b00:	81001704 	addi	r4,r16,92
 8008b04:	80098640 	call	8009864 <memset>
 8008b08:	0027883a 	mov	r19,zero
 8008b0c:	003f3d06 	br	8008804 <_fseeko_r+0x7c>
 8008b10:	80800417 	ldw	r2,16(r16)
 8008b14:	003f8306 	br	8008924 <_fseeko_r+0x19c>
 8008b18:	81400717 	ldw	r5,28(r16)
 8008b1c:	900f883a 	mov	r7,r18
 8008b20:	000d883a 	mov	r6,zero
 8008b24:	8809883a 	mov	r4,r17
 8008b28:	a03ee83a 	callr	r20
 8008b2c:	1027883a 	mov	r19,r2
 8008b30:	00bfffc4 	movi	r2,-1
 8008b34:	98bf3226 	beq	r19,r2,8008800 <_fseeko_r+0x78>
 8008b38:	8080030b 	ldhu	r2,12(r16)
 8008b3c:	003f7006 	br	8008900 <_fseeko_r+0x178>
 8008b40:	8140038f 	ldh	r5,14(r16)
 8008b44:	283f4716 	blt	r5,zero,8008864 <_fseeko_r+0xdc>
 8008b48:	d80d883a 	mov	r6,sp
 8008b4c:	8809883a 	mov	r4,r17
 8008b50:	8008be80 	call	8008be8 <_fstat_r>
 8008b54:	1000041e 	bne	r2,zero,8008b68 <_fseeko_r+0x3e0>
 8008b58:	d8800117 	ldw	r2,4(sp)
 8008b5c:	00e00014 	movui	r3,32768
 8008b60:	10bc000c 	andi	r2,r2,61440
 8008b64:	10ff7c26 	beq	r2,r3,8008958 <_fseeko_r+0x1d0>
 8008b68:	8080030b 	ldhu	r2,12(r16)
 8008b6c:	003f3d06 	br	8008864 <_fseeko_r+0xdc>
 8008b70:	800b883a 	mov	r5,r16
 8008b74:	8809883a 	mov	r4,r17
 8008b78:	8008d540 	call	8008d54 <__smakebuf_r>
 8008b7c:	003f3106 	br	8008844 <_fseeko_r+0xbc>
 8008b80:	81400717 	ldw	r5,28(r16)
 8008b84:	01c00044 	movi	r7,1
 8008b88:	000d883a 	mov	r6,zero
 8008b8c:	8809883a 	mov	r4,r17
 8008b90:	a03ee83a 	callr	r20
 8008b94:	00ffffc4 	movi	r3,-1
 8008b98:	10ff7b1e 	bne	r2,r3,8008988 <_fseeko_r+0x200>
 8008b9c:	003f3306 	br	800886c <_fseeko_r+0xe4>
 8008ba0:	80c00017 	ldw	r3,0(r16)
 8008ba4:	80800417 	ldw	r2,16(r16)
 8008ba8:	000b883a 	mov	r5,zero
 8008bac:	1887c83a 	sub	r3,r3,r2
 8008bb0:	98e7c83a 	sub	r19,r19,r3
 8008bb4:	30c7883a 	add	r3,r6,r3
 8008bb8:	003f7f06 	br	80089b8 <_fseeko_r+0x230>
 8008bbc:	00800744 	movi	r2,29
 8008bc0:	88800015 	stw	r2,0(r17)
 8008bc4:	04ffffc4 	movi	r19,-1
 8008bc8:	003f0e06 	br	8008804 <_fseeko_r+0x7c>

08008bcc <fseeko>:
 8008bcc:	008200b4 	movhi	r2,2050
 8008bd0:	10b14b04 	addi	r2,r2,-15060
 8008bd4:	300f883a 	mov	r7,r6
 8008bd8:	280d883a 	mov	r6,r5
 8008bdc:	200b883a 	mov	r5,r4
 8008be0:	11000017 	ldw	r4,0(r2)
 8008be4:	80087881 	jmpi	8008788 <_fseeko_r>

08008be8 <_fstat_r>:
 8008be8:	defffd04 	addi	sp,sp,-12
 8008bec:	2805883a 	mov	r2,r5
 8008bf0:	dc000015 	stw	r16,0(sp)
 8008bf4:	040200b4 	movhi	r16,2050
 8008bf8:	dc400115 	stw	r17,4(sp)
 8008bfc:	8439f604 	addi	r16,r16,-6184
 8008c00:	2023883a 	mov	r17,r4
 8008c04:	300b883a 	mov	r5,r6
 8008c08:	1009883a 	mov	r4,r2
 8008c0c:	dfc00215 	stw	ra,8(sp)
 8008c10:	80000015 	stw	zero,0(r16)
 8008c14:	8015ed40 	call	8015ed4 <fstat>
 8008c18:	00ffffc4 	movi	r3,-1
 8008c1c:	10c00526 	beq	r2,r3,8008c34 <_fstat_r+0x4c>
 8008c20:	dfc00217 	ldw	ra,8(sp)
 8008c24:	dc400117 	ldw	r17,4(sp)
 8008c28:	dc000017 	ldw	r16,0(sp)
 8008c2c:	dec00304 	addi	sp,sp,12
 8008c30:	f800283a 	ret
 8008c34:	80c00017 	ldw	r3,0(r16)
 8008c38:	183ff926 	beq	r3,zero,8008c20 <_fstat_r+0x38>
 8008c3c:	88c00015 	stw	r3,0(r17)
 8008c40:	003ff706 	br	8008c20 <_fstat_r+0x38>

08008c44 <_fwrite_r>:
 8008c44:	defff504 	addi	sp,sp,-44
 8008c48:	dc400715 	stw	r17,28(sp)
 8008c4c:	d9400315 	stw	r5,12(sp)
 8008c50:	2023883a 	mov	r17,r4
 8008c54:	300b883a 	mov	r5,r6
 8008c58:	3809883a 	mov	r4,r7
 8008c5c:	dcc00915 	stw	r19,36(sp)
 8008c60:	dc800815 	stw	r18,32(sp)
 8008c64:	dc000615 	stw	r16,24(sp)
 8008c68:	dfc00a15 	stw	ra,40(sp)
 8008c6c:	3027883a 	mov	r19,r6
 8008c70:	3821883a 	mov	r16,r7
 8008c74:	80086340 	call	8008634 <__mulsi3>
 8008c78:	1025883a 	mov	r18,r2
 8008c7c:	d8800415 	stw	r2,16(sp)
 8008c80:	d8800215 	stw	r2,8(sp)
 8008c84:	d8800304 	addi	r2,sp,12
 8008c88:	d8800015 	stw	r2,0(sp)
 8008c8c:	00800044 	movi	r2,1
 8008c90:	d8800115 	stw	r2,4(sp)
 8008c94:	d9400b17 	ldw	r5,44(sp)
 8008c98:	88000226 	beq	r17,zero,8008ca4 <_fwrite_r+0x60>
 8008c9c:	88800e17 	ldw	r2,56(r17)
 8008ca0:	10001a26 	beq	r2,zero,8008d0c <_fwrite_r+0xc8>
 8008ca4:	2880030b 	ldhu	r2,12(r5)
 8008ca8:	10c8000c 	andi	r3,r2,8192
 8008cac:	1800061e 	bne	r3,zero,8008cc8 <_fwrite_r+0x84>
 8008cb0:	29001917 	ldw	r4,100(r5)
 8008cb4:	00f7ffc4 	movi	r3,-8193
 8008cb8:	10880014 	ori	r2,r2,8192
 8008cbc:	20c6703a 	and	r3,r4,r3
 8008cc0:	2880030d 	sth	r2,12(r5)
 8008cc4:	28c01915 	stw	r3,100(r5)
 8008cc8:	d80d883a 	mov	r6,sp
 8008ccc:	8809883a 	mov	r4,r17
 8008cd0:	800e8e80 	call	800e8e8 <__sfvwrite_r>
 8008cd4:	10000b26 	beq	r2,zero,8008d04 <_fwrite_r+0xc0>
 8008cd8:	d9000217 	ldw	r4,8(sp)
 8008cdc:	980b883a 	mov	r5,r19
 8008ce0:	9109c83a 	sub	r4,r18,r4
 8008ce4:	80085780 	call	8008578 <__udivsi3>
 8008ce8:	dfc00a17 	ldw	ra,40(sp)
 8008cec:	dcc00917 	ldw	r19,36(sp)
 8008cf0:	dc800817 	ldw	r18,32(sp)
 8008cf4:	dc400717 	ldw	r17,28(sp)
 8008cf8:	dc000617 	ldw	r16,24(sp)
 8008cfc:	dec00b04 	addi	sp,sp,44
 8008d00:	f800283a 	ret
 8008d04:	8005883a 	mov	r2,r16
 8008d08:	003ff706 	br	8008ce8 <_fwrite_r+0xa4>
 8008d0c:	8809883a 	mov	r4,r17
 8008d10:	d9400515 	stw	r5,20(sp)
 8008d14:	800e3b80 	call	800e3b8 <__sinit>
 8008d18:	d9400517 	ldw	r5,20(sp)
 8008d1c:	003fe106 	br	8008ca4 <_fwrite_r+0x60>

08008d20 <fwrite>:
 8008d20:	defffe04 	addi	sp,sp,-8
 8008d24:	008200b4 	movhi	r2,2050
 8008d28:	d9c00015 	stw	r7,0(sp)
 8008d2c:	10b14b04 	addi	r2,r2,-15060
 8008d30:	300f883a 	mov	r7,r6
 8008d34:	280d883a 	mov	r6,r5
 8008d38:	200b883a 	mov	r5,r4
 8008d3c:	11000017 	ldw	r4,0(r2)
 8008d40:	dfc00115 	stw	ra,4(sp)
 8008d44:	8008c440 	call	8008c44 <_fwrite_r>
 8008d48:	dfc00117 	ldw	ra,4(sp)
 8008d4c:	dec00204 	addi	sp,sp,8
 8008d50:	f800283a 	ret

08008d54 <__smakebuf_r>:
 8008d54:	2880030b 	ldhu	r2,12(r5)
 8008d58:	10c0008c 	andi	r3,r2,2
 8008d5c:	1800411e 	bne	r3,zero,8008e64 <__smakebuf_r+0x110>
 8008d60:	deffec04 	addi	sp,sp,-80
 8008d64:	dc000f15 	stw	r16,60(sp)
 8008d68:	2821883a 	mov	r16,r5
 8008d6c:	2940038f 	ldh	r5,14(r5)
 8008d70:	dc401015 	stw	r17,64(sp)
 8008d74:	dfc01315 	stw	ra,76(sp)
 8008d78:	dcc01215 	stw	r19,72(sp)
 8008d7c:	dc801115 	stw	r18,68(sp)
 8008d80:	2023883a 	mov	r17,r4
 8008d84:	28001c16 	blt	r5,zero,8008df8 <__smakebuf_r+0xa4>
 8008d88:	d80d883a 	mov	r6,sp
 8008d8c:	8008be80 	call	8008be8 <_fstat_r>
 8008d90:	10001816 	blt	r2,zero,8008df4 <__smakebuf_r+0xa0>
 8008d94:	d8800117 	ldw	r2,4(sp)
 8008d98:	00e00014 	movui	r3,32768
 8008d9c:	10bc000c 	andi	r2,r2,61440
 8008da0:	14c80020 	cmpeqi	r19,r2,8192
 8008da4:	10c03726 	beq	r2,r3,8008e84 <__smakebuf_r+0x130>
 8008da8:	80c0030b 	ldhu	r3,12(r16)
 8008dac:	18c20014 	ori	r3,r3,2048
 8008db0:	80c0030d 	sth	r3,12(r16)
 8008db4:	00c80004 	movi	r3,8192
 8008db8:	10c0521e 	bne	r2,r3,8008f04 <__smakebuf_r+0x1b0>
 8008dbc:	8140038f 	ldh	r5,14(r16)
 8008dc0:	8809883a 	mov	r4,r17
 8008dc4:	800ef380 	call	800ef38 <_isatty_r>
 8008dc8:	10004c26 	beq	r2,zero,8008efc <__smakebuf_r+0x1a8>
 8008dcc:	8080030b 	ldhu	r2,12(r16)
 8008dd0:	80c010c4 	addi	r3,r16,67
 8008dd4:	80c00015 	stw	r3,0(r16)
 8008dd8:	10800054 	ori	r2,r2,1
 8008ddc:	8080030d 	sth	r2,12(r16)
 8008de0:	00800044 	movi	r2,1
 8008de4:	80c00415 	stw	r3,16(r16)
 8008de8:	80800515 	stw	r2,20(r16)
 8008dec:	04810004 	movi	r18,1024
 8008df0:	00000706 	br	8008e10 <__smakebuf_r+0xbc>
 8008df4:	8080030b 	ldhu	r2,12(r16)
 8008df8:	10c0200c 	andi	r3,r2,128
 8008dfc:	18001f1e 	bne	r3,zero,8008e7c <__smakebuf_r+0x128>
 8008e00:	04810004 	movi	r18,1024
 8008e04:	10820014 	ori	r2,r2,2048
 8008e08:	8080030d 	sth	r2,12(r16)
 8008e0c:	0027883a 	mov	r19,zero
 8008e10:	900b883a 	mov	r5,r18
 8008e14:	8809883a 	mov	r4,r17
 8008e18:	8008f100 	call	8008f10 <_malloc_r>
 8008e1c:	10002c26 	beq	r2,zero,8008ed0 <__smakebuf_r+0x17c>
 8008e20:	80c0030b 	ldhu	r3,12(r16)
 8008e24:	01020074 	movhi	r4,2049
 8008e28:	21381804 	addi	r4,r4,-8096
 8008e2c:	89000f15 	stw	r4,60(r17)
 8008e30:	18c02014 	ori	r3,r3,128
 8008e34:	80c0030d 	sth	r3,12(r16)
 8008e38:	80800015 	stw	r2,0(r16)
 8008e3c:	80800415 	stw	r2,16(r16)
 8008e40:	84800515 	stw	r18,20(r16)
 8008e44:	98001a1e 	bne	r19,zero,8008eb0 <__smakebuf_r+0x15c>
 8008e48:	dfc01317 	ldw	ra,76(sp)
 8008e4c:	dcc01217 	ldw	r19,72(sp)
 8008e50:	dc801117 	ldw	r18,68(sp)
 8008e54:	dc401017 	ldw	r17,64(sp)
 8008e58:	dc000f17 	ldw	r16,60(sp)
 8008e5c:	dec01404 	addi	sp,sp,80
 8008e60:	f800283a 	ret
 8008e64:	288010c4 	addi	r2,r5,67
 8008e68:	28800015 	stw	r2,0(r5)
 8008e6c:	28800415 	stw	r2,16(r5)
 8008e70:	00800044 	movi	r2,1
 8008e74:	28800515 	stw	r2,20(r5)
 8008e78:	f800283a 	ret
 8008e7c:	04801004 	movi	r18,64
 8008e80:	003fe006 	br	8008e04 <__smakebuf_r+0xb0>
 8008e84:	81000a17 	ldw	r4,40(r16)
 8008e88:	00c20074 	movhi	r3,2049
 8008e8c:	18e79204 	addi	r3,r3,-25016
 8008e90:	20ffc51e 	bne	r4,r3,8008da8 <__smakebuf_r+0x54>
 8008e94:	8080030b 	ldhu	r2,12(r16)
 8008e98:	04810004 	movi	r18,1024
 8008e9c:	84801315 	stw	r18,76(r16)
 8008ea0:	1484b03a 	or	r2,r2,r18
 8008ea4:	8080030d 	sth	r2,12(r16)
 8008ea8:	0027883a 	mov	r19,zero
 8008eac:	003fd806 	br	8008e10 <__smakebuf_r+0xbc>
 8008eb0:	8140038f 	ldh	r5,14(r16)
 8008eb4:	8809883a 	mov	r4,r17
 8008eb8:	800ef380 	call	800ef38 <_isatty_r>
 8008ebc:	103fe226 	beq	r2,zero,8008e48 <__smakebuf_r+0xf4>
 8008ec0:	8080030b 	ldhu	r2,12(r16)
 8008ec4:	10800054 	ori	r2,r2,1
 8008ec8:	8080030d 	sth	r2,12(r16)
 8008ecc:	003fde06 	br	8008e48 <__smakebuf_r+0xf4>
 8008ed0:	8080030b 	ldhu	r2,12(r16)
 8008ed4:	10c0800c 	andi	r3,r2,512
 8008ed8:	183fdb1e 	bne	r3,zero,8008e48 <__smakebuf_r+0xf4>
 8008edc:	10800094 	ori	r2,r2,2
 8008ee0:	80c010c4 	addi	r3,r16,67
 8008ee4:	8080030d 	sth	r2,12(r16)
 8008ee8:	00800044 	movi	r2,1
 8008eec:	80c00015 	stw	r3,0(r16)
 8008ef0:	80c00415 	stw	r3,16(r16)
 8008ef4:	80800515 	stw	r2,20(r16)
 8008ef8:	003fd306 	br	8008e48 <__smakebuf_r+0xf4>
 8008efc:	04810004 	movi	r18,1024
 8008f00:	003fc306 	br	8008e10 <__smakebuf_r+0xbc>
 8008f04:	0027883a 	mov	r19,zero
 8008f08:	04810004 	movi	r18,1024
 8008f0c:	003fc006 	br	8008e10 <__smakebuf_r+0xbc>

08008f10 <_malloc_r>:
 8008f10:	defff504 	addi	sp,sp,-44
 8008f14:	dc800315 	stw	r18,12(sp)
 8008f18:	dfc00a15 	stw	ra,40(sp)
 8008f1c:	df000915 	stw	fp,36(sp)
 8008f20:	ddc00815 	stw	r23,32(sp)
 8008f24:	dd800715 	stw	r22,28(sp)
 8008f28:	dd400615 	stw	r21,24(sp)
 8008f2c:	dd000515 	stw	r20,20(sp)
 8008f30:	dcc00415 	stw	r19,16(sp)
 8008f34:	dc400215 	stw	r17,8(sp)
 8008f38:	dc000115 	stw	r16,4(sp)
 8008f3c:	288002c4 	addi	r2,r5,11
 8008f40:	00c00584 	movi	r3,22
 8008f44:	2025883a 	mov	r18,r4
 8008f48:	18807f2e 	bgeu	r3,r2,8009148 <_malloc_r+0x238>
 8008f4c:	047ffe04 	movi	r17,-8
 8008f50:	1462703a 	and	r17,r2,r17
 8008f54:	8800a316 	blt	r17,zero,80091e4 <_malloc_r+0x2d4>
 8008f58:	8940a236 	bltu	r17,r5,80091e4 <_malloc_r+0x2d4>
 8008f5c:	80164a40 	call	80164a4 <__malloc_lock>
 8008f60:	00807dc4 	movi	r2,503
 8008f64:	1441e92e 	bgeu	r2,r17,800970c <_malloc_r+0x7fc>
 8008f68:	8804d27a 	srli	r2,r17,9
 8008f6c:	1000a126 	beq	r2,zero,80091f4 <_malloc_r+0x2e4>
 8008f70:	00c00104 	movi	r3,4
 8008f74:	18811e36 	bltu	r3,r2,80093f0 <_malloc_r+0x4e0>
 8008f78:	8804d1ba 	srli	r2,r17,6
 8008f7c:	12000e44 	addi	r8,r2,57
 8008f80:	11c00e04 	addi	r7,r2,56
 8008f84:	4209883a 	add	r4,r8,r8
 8008f88:	04c200b4 	movhi	r19,2050
 8008f8c:	2109883a 	add	r4,r4,r4
 8008f90:	9ceb2f04 	addi	r19,r19,-21316
 8008f94:	2109883a 	add	r4,r4,r4
 8008f98:	9909883a 	add	r4,r19,r4
 8008f9c:	24000117 	ldw	r16,4(r4)
 8008fa0:	213ffe04 	addi	r4,r4,-8
 8008fa4:	24009726 	beq	r4,r16,8009204 <_malloc_r+0x2f4>
 8008fa8:	80800117 	ldw	r2,4(r16)
 8008fac:	01bfff04 	movi	r6,-4
 8008fb0:	014003c4 	movi	r5,15
 8008fb4:	1184703a 	and	r2,r2,r6
 8008fb8:	1447c83a 	sub	r3,r2,r17
 8008fbc:	28c00716 	blt	r5,r3,8008fdc <_malloc_r+0xcc>
 8008fc0:	1800920e 	bge	r3,zero,800920c <_malloc_r+0x2fc>
 8008fc4:	84000317 	ldw	r16,12(r16)
 8008fc8:	24008e26 	beq	r4,r16,8009204 <_malloc_r+0x2f4>
 8008fcc:	80800117 	ldw	r2,4(r16)
 8008fd0:	1184703a 	and	r2,r2,r6
 8008fd4:	1447c83a 	sub	r3,r2,r17
 8008fd8:	28fff90e 	bge	r5,r3,8008fc0 <_malloc_r+0xb0>
 8008fdc:	3809883a 	mov	r4,r7
 8008fe0:	018200b4 	movhi	r6,2050
 8008fe4:	9c000417 	ldw	r16,16(r19)
 8008fe8:	31ab2f04 	addi	r6,r6,-21316
 8008fec:	32000204 	addi	r8,r6,8
 8008ff0:	82013426 	beq	r16,r8,80094c4 <_malloc_r+0x5b4>
 8008ff4:	80c00117 	ldw	r3,4(r16)
 8008ff8:	00bfff04 	movi	r2,-4
 8008ffc:	188e703a 	and	r7,r3,r2
 8009000:	3c45c83a 	sub	r2,r7,r17
 8009004:	00c003c4 	movi	r3,15
 8009008:	18811f16 	blt	r3,r2,8009488 <_malloc_r+0x578>
 800900c:	32000515 	stw	r8,20(r6)
 8009010:	32000415 	stw	r8,16(r6)
 8009014:	10007f0e 	bge	r2,zero,8009214 <_malloc_r+0x304>
 8009018:	00807fc4 	movi	r2,511
 800901c:	11c0fd36 	bltu	r2,r7,8009414 <_malloc_r+0x504>
 8009020:	3806d0fa 	srli	r3,r7,3
 8009024:	01c00044 	movi	r7,1
 8009028:	30800117 	ldw	r2,4(r6)
 800902c:	19400044 	addi	r5,r3,1
 8009030:	294b883a 	add	r5,r5,r5
 8009034:	1807d0ba 	srai	r3,r3,2
 8009038:	294b883a 	add	r5,r5,r5
 800903c:	294b883a 	add	r5,r5,r5
 8009040:	298b883a 	add	r5,r5,r6
 8009044:	38c6983a 	sll	r3,r7,r3
 8009048:	29c00017 	ldw	r7,0(r5)
 800904c:	2a7ffe04 	addi	r9,r5,-8
 8009050:	1886b03a 	or	r3,r3,r2
 8009054:	82400315 	stw	r9,12(r16)
 8009058:	81c00215 	stw	r7,8(r16)
 800905c:	30c00115 	stw	r3,4(r6)
 8009060:	2c000015 	stw	r16,0(r5)
 8009064:	3c000315 	stw	r16,12(r7)
 8009068:	2005d0ba 	srai	r2,r4,2
 800906c:	01400044 	movi	r5,1
 8009070:	288a983a 	sll	r5,r5,r2
 8009074:	19406f36 	bltu	r3,r5,8009234 <_malloc_r+0x324>
 8009078:	28c4703a 	and	r2,r5,r3
 800907c:	10000a1e 	bne	r2,zero,80090a8 <_malloc_r+0x198>
 8009080:	00bfff04 	movi	r2,-4
 8009084:	294b883a 	add	r5,r5,r5
 8009088:	2088703a 	and	r4,r4,r2
 800908c:	28c4703a 	and	r2,r5,r3
 8009090:	21000104 	addi	r4,r4,4
 8009094:	1000041e 	bne	r2,zero,80090a8 <_malloc_r+0x198>
 8009098:	294b883a 	add	r5,r5,r5
 800909c:	28c4703a 	and	r2,r5,r3
 80090a0:	21000104 	addi	r4,r4,4
 80090a4:	103ffc26 	beq	r2,zero,8009098 <_malloc_r+0x188>
 80090a8:	02bfff04 	movi	r10,-4
 80090ac:	024003c4 	movi	r9,15
 80090b0:	21800044 	addi	r6,r4,1
 80090b4:	318d883a 	add	r6,r6,r6
 80090b8:	318d883a 	add	r6,r6,r6
 80090bc:	318d883a 	add	r6,r6,r6
 80090c0:	998d883a 	add	r6,r19,r6
 80090c4:	333ffe04 	addi	r12,r6,-8
 80090c8:	2017883a 	mov	r11,r4
 80090cc:	31800104 	addi	r6,r6,4
 80090d0:	34000017 	ldw	r16,0(r6)
 80090d4:	31fffd04 	addi	r7,r6,-12
 80090d8:	81c0041e 	bne	r16,r7,80090ec <_malloc_r+0x1dc>
 80090dc:	0000fb06 	br	80094cc <_malloc_r+0x5bc>
 80090e0:	1801030e 	bge	r3,zero,80094f0 <_malloc_r+0x5e0>
 80090e4:	84000317 	ldw	r16,12(r16)
 80090e8:	81c0f826 	beq	r16,r7,80094cc <_malloc_r+0x5bc>
 80090ec:	80800117 	ldw	r2,4(r16)
 80090f0:	1284703a 	and	r2,r2,r10
 80090f4:	1447c83a 	sub	r3,r2,r17
 80090f8:	48fff90e 	bge	r9,r3,80090e0 <_malloc_r+0x1d0>
 80090fc:	80800317 	ldw	r2,12(r16)
 8009100:	81000217 	ldw	r4,8(r16)
 8009104:	89400054 	ori	r5,r17,1
 8009108:	81400115 	stw	r5,4(r16)
 800910c:	20800315 	stw	r2,12(r4)
 8009110:	11000215 	stw	r4,8(r2)
 8009114:	8463883a 	add	r17,r16,r17
 8009118:	9c400515 	stw	r17,20(r19)
 800911c:	9c400415 	stw	r17,16(r19)
 8009120:	18800054 	ori	r2,r3,1
 8009124:	88800115 	stw	r2,4(r17)
 8009128:	8a000315 	stw	r8,12(r17)
 800912c:	8a000215 	stw	r8,8(r17)
 8009130:	88e3883a 	add	r17,r17,r3
 8009134:	88c00015 	stw	r3,0(r17)
 8009138:	9009883a 	mov	r4,r18
 800913c:	80164c80 	call	80164c8 <__malloc_unlock>
 8009140:	80800204 	addi	r2,r16,8
 8009144:	00001b06 	br	80091b4 <_malloc_r+0x2a4>
 8009148:	04400404 	movi	r17,16
 800914c:	89402536 	bltu	r17,r5,80091e4 <_malloc_r+0x2d4>
 8009150:	80164a40 	call	80164a4 <__malloc_lock>
 8009154:	00800184 	movi	r2,6
 8009158:	01000084 	movi	r4,2
 800915c:	04c200b4 	movhi	r19,2050
 8009160:	1085883a 	add	r2,r2,r2
 8009164:	9ceb2f04 	addi	r19,r19,-21316
 8009168:	1085883a 	add	r2,r2,r2
 800916c:	9885883a 	add	r2,r19,r2
 8009170:	14000117 	ldw	r16,4(r2)
 8009174:	10fffe04 	addi	r3,r2,-8
 8009178:	80c0d926 	beq	r16,r3,80094e0 <_malloc_r+0x5d0>
 800917c:	80c00117 	ldw	r3,4(r16)
 8009180:	81000317 	ldw	r4,12(r16)
 8009184:	00bfff04 	movi	r2,-4
 8009188:	1884703a 	and	r2,r3,r2
 800918c:	81400217 	ldw	r5,8(r16)
 8009190:	8085883a 	add	r2,r16,r2
 8009194:	10c00117 	ldw	r3,4(r2)
 8009198:	29000315 	stw	r4,12(r5)
 800919c:	21400215 	stw	r5,8(r4)
 80091a0:	18c00054 	ori	r3,r3,1
 80091a4:	10c00115 	stw	r3,4(r2)
 80091a8:	9009883a 	mov	r4,r18
 80091ac:	80164c80 	call	80164c8 <__malloc_unlock>
 80091b0:	80800204 	addi	r2,r16,8
 80091b4:	dfc00a17 	ldw	ra,40(sp)
 80091b8:	df000917 	ldw	fp,36(sp)
 80091bc:	ddc00817 	ldw	r23,32(sp)
 80091c0:	dd800717 	ldw	r22,28(sp)
 80091c4:	dd400617 	ldw	r21,24(sp)
 80091c8:	dd000517 	ldw	r20,20(sp)
 80091cc:	dcc00417 	ldw	r19,16(sp)
 80091d0:	dc800317 	ldw	r18,12(sp)
 80091d4:	dc400217 	ldw	r17,8(sp)
 80091d8:	dc000117 	ldw	r16,4(sp)
 80091dc:	dec00b04 	addi	sp,sp,44
 80091e0:	f800283a 	ret
 80091e4:	00800304 	movi	r2,12
 80091e8:	90800015 	stw	r2,0(r18)
 80091ec:	0005883a 	mov	r2,zero
 80091f0:	003ff006 	br	80091b4 <_malloc_r+0x2a4>
 80091f4:	01002004 	movi	r4,128
 80091f8:	02001004 	movi	r8,64
 80091fc:	01c00fc4 	movi	r7,63
 8009200:	003f6106 	br	8008f88 <_malloc_r+0x78>
 8009204:	4009883a 	mov	r4,r8
 8009208:	003f7506 	br	8008fe0 <_malloc_r+0xd0>
 800920c:	81000317 	ldw	r4,12(r16)
 8009210:	003fde06 	br	800918c <_malloc_r+0x27c>
 8009214:	81c5883a 	add	r2,r16,r7
 8009218:	11400117 	ldw	r5,4(r2)
 800921c:	9009883a 	mov	r4,r18
 8009220:	29400054 	ori	r5,r5,1
 8009224:	11400115 	stw	r5,4(r2)
 8009228:	80164c80 	call	80164c8 <__malloc_unlock>
 800922c:	80800204 	addi	r2,r16,8
 8009230:	003fe006 	br	80091b4 <_malloc_r+0x2a4>
 8009234:	9c000217 	ldw	r16,8(r19)
 8009238:	00bfff04 	movi	r2,-4
 800923c:	85800117 	ldw	r22,4(r16)
 8009240:	b0ac703a 	and	r22,r22,r2
 8009244:	b4400336 	bltu	r22,r17,8009254 <_malloc_r+0x344>
 8009248:	b445c83a 	sub	r2,r22,r17
 800924c:	00c003c4 	movi	r3,15
 8009250:	18805d16 	blt	r3,r2,80093c8 <_malloc_r+0x4b8>
 8009254:	05c200b4 	movhi	r23,2050
 8009258:	008200b4 	movhi	r2,2050
 800925c:	10b9f904 	addi	r2,r2,-6172
 8009260:	bdf14c04 	addi	r23,r23,-15056
 8009264:	15400017 	ldw	r21,0(r2)
 8009268:	b8c00017 	ldw	r3,0(r23)
 800926c:	00bfffc4 	movi	r2,-1
 8009270:	858d883a 	add	r6,r16,r22
 8009274:	8d6b883a 	add	r21,r17,r21
 8009278:	1880ea26 	beq	r3,r2,8009624 <_malloc_r+0x714>
 800927c:	ad4403c4 	addi	r21,r21,4111
 8009280:	00bc0004 	movi	r2,-4096
 8009284:	a8aa703a 	and	r21,r21,r2
 8009288:	a80b883a 	mov	r5,r21
 800928c:	9009883a 	mov	r4,r18
 8009290:	d9800015 	stw	r6,0(sp)
 8009294:	8009d1c0 	call	8009d1c <_sbrk_r>
 8009298:	1029883a 	mov	r20,r2
 800929c:	00bfffc4 	movi	r2,-1
 80092a0:	d9800017 	ldw	r6,0(sp)
 80092a4:	a080e826 	beq	r20,r2,8009648 <_malloc_r+0x738>
 80092a8:	a180a636 	bltu	r20,r6,8009544 <_malloc_r+0x634>
 80092ac:	070220b4 	movhi	fp,2178
 80092b0:	e73c3b04 	addi	fp,fp,-3860
 80092b4:	e0800017 	ldw	r2,0(fp)
 80092b8:	a887883a 	add	r3,r21,r2
 80092bc:	e0c00015 	stw	r3,0(fp)
 80092c0:	3500e626 	beq	r6,r20,800965c <_malloc_r+0x74c>
 80092c4:	b9000017 	ldw	r4,0(r23)
 80092c8:	00bfffc4 	movi	r2,-1
 80092cc:	2080ee26 	beq	r4,r2,8009688 <_malloc_r+0x778>
 80092d0:	a185c83a 	sub	r2,r20,r6
 80092d4:	10c5883a 	add	r2,r2,r3
 80092d8:	e0800015 	stw	r2,0(fp)
 80092dc:	a0c001cc 	andi	r3,r20,7
 80092e0:	1800bc26 	beq	r3,zero,80095d4 <_malloc_r+0x6c4>
 80092e4:	a0e9c83a 	sub	r20,r20,r3
 80092e8:	00840204 	movi	r2,4104
 80092ec:	a5000204 	addi	r20,r20,8
 80092f0:	10c7c83a 	sub	r3,r2,r3
 80092f4:	a545883a 	add	r2,r20,r21
 80092f8:	1083ffcc 	andi	r2,r2,4095
 80092fc:	18abc83a 	sub	r21,r3,r2
 8009300:	a80b883a 	mov	r5,r21
 8009304:	9009883a 	mov	r4,r18
 8009308:	8009d1c0 	call	8009d1c <_sbrk_r>
 800930c:	00ffffc4 	movi	r3,-1
 8009310:	10c0e126 	beq	r2,r3,8009698 <_malloc_r+0x788>
 8009314:	1505c83a 	sub	r2,r2,r20
 8009318:	1545883a 	add	r2,r2,r21
 800931c:	10800054 	ori	r2,r2,1
 8009320:	e0c00017 	ldw	r3,0(fp)
 8009324:	9d000215 	stw	r20,8(r19)
 8009328:	a0800115 	stw	r2,4(r20)
 800932c:	a8c7883a 	add	r3,r21,r3
 8009330:	e0c00015 	stw	r3,0(fp)
 8009334:	84c00e26 	beq	r16,r19,8009370 <_malloc_r+0x460>
 8009338:	018003c4 	movi	r6,15
 800933c:	3580a72e 	bgeu	r6,r22,80095dc <_malloc_r+0x6cc>
 8009340:	81400117 	ldw	r5,4(r16)
 8009344:	013ffe04 	movi	r4,-8
 8009348:	b0bffd04 	addi	r2,r22,-12
 800934c:	1104703a 	and	r2,r2,r4
 8009350:	2900004c 	andi	r4,r5,1
 8009354:	2088b03a 	or	r4,r4,r2
 8009358:	81000115 	stw	r4,4(r16)
 800935c:	01400144 	movi	r5,5
 8009360:	8089883a 	add	r4,r16,r2
 8009364:	21400115 	stw	r5,4(r4)
 8009368:	21400215 	stw	r5,8(r4)
 800936c:	3080cd36 	bltu	r6,r2,80096a4 <_malloc_r+0x794>
 8009370:	008200b4 	movhi	r2,2050
 8009374:	10b9f804 	addi	r2,r2,-6176
 8009378:	11000017 	ldw	r4,0(r2)
 800937c:	20c0012e 	bgeu	r4,r3,8009384 <_malloc_r+0x474>
 8009380:	10c00015 	stw	r3,0(r2)
 8009384:	008200b4 	movhi	r2,2050
 8009388:	10b9f704 	addi	r2,r2,-6180
 800938c:	11000017 	ldw	r4,0(r2)
 8009390:	9c000217 	ldw	r16,8(r19)
 8009394:	20c0012e 	bgeu	r4,r3,800939c <_malloc_r+0x48c>
 8009398:	10c00015 	stw	r3,0(r2)
 800939c:	80c00117 	ldw	r3,4(r16)
 80093a0:	00bfff04 	movi	r2,-4
 80093a4:	1886703a 	and	r3,r3,r2
 80093a8:	1c45c83a 	sub	r2,r3,r17
 80093ac:	1c400236 	bltu	r3,r17,80093b8 <_malloc_r+0x4a8>
 80093b0:	00c003c4 	movi	r3,15
 80093b4:	18800416 	blt	r3,r2,80093c8 <_malloc_r+0x4b8>
 80093b8:	9009883a 	mov	r4,r18
 80093bc:	80164c80 	call	80164c8 <__malloc_unlock>
 80093c0:	0005883a 	mov	r2,zero
 80093c4:	003f7b06 	br	80091b4 <_malloc_r+0x2a4>
 80093c8:	88c00054 	ori	r3,r17,1
 80093cc:	80c00115 	stw	r3,4(r16)
 80093d0:	8463883a 	add	r17,r16,r17
 80093d4:	10800054 	ori	r2,r2,1
 80093d8:	9c400215 	stw	r17,8(r19)
 80093dc:	88800115 	stw	r2,4(r17)
 80093e0:	9009883a 	mov	r4,r18
 80093e4:	80164c80 	call	80164c8 <__malloc_unlock>
 80093e8:	80800204 	addi	r2,r16,8
 80093ec:	003f7106 	br	80091b4 <_malloc_r+0x2a4>
 80093f0:	00c00504 	movi	r3,20
 80093f4:	18804a2e 	bgeu	r3,r2,8009520 <_malloc_r+0x610>
 80093f8:	00c01504 	movi	r3,84
 80093fc:	18806e36 	bltu	r3,r2,80095b8 <_malloc_r+0x6a8>
 8009400:	8804d33a 	srli	r2,r17,12
 8009404:	12001bc4 	addi	r8,r2,111
 8009408:	11c01b84 	addi	r7,r2,110
 800940c:	4209883a 	add	r4,r8,r8
 8009410:	003edd06 	br	8008f88 <_malloc_r+0x78>
 8009414:	3804d27a 	srli	r2,r7,9
 8009418:	00c00104 	movi	r3,4
 800941c:	1880442e 	bgeu	r3,r2,8009530 <_malloc_r+0x620>
 8009420:	00c00504 	movi	r3,20
 8009424:	18808136 	bltu	r3,r2,800962c <_malloc_r+0x71c>
 8009428:	11401704 	addi	r5,r2,92
 800942c:	10c016c4 	addi	r3,r2,91
 8009430:	294b883a 	add	r5,r5,r5
 8009434:	294b883a 	add	r5,r5,r5
 8009438:	294b883a 	add	r5,r5,r5
 800943c:	994b883a 	add	r5,r19,r5
 8009440:	28800017 	ldw	r2,0(r5)
 8009444:	018200b4 	movhi	r6,2050
 8009448:	297ffe04 	addi	r5,r5,-8
 800944c:	31ab2f04 	addi	r6,r6,-21316
 8009450:	28806526 	beq	r5,r2,80095e8 <_malloc_r+0x6d8>
 8009454:	01bfff04 	movi	r6,-4
 8009458:	10c00117 	ldw	r3,4(r2)
 800945c:	1986703a 	and	r3,r3,r6
 8009460:	38c0022e 	bgeu	r7,r3,800946c <_malloc_r+0x55c>
 8009464:	10800217 	ldw	r2,8(r2)
 8009468:	28bffb1e 	bne	r5,r2,8009458 <_malloc_r+0x548>
 800946c:	11400317 	ldw	r5,12(r2)
 8009470:	98c00117 	ldw	r3,4(r19)
 8009474:	81400315 	stw	r5,12(r16)
 8009478:	80800215 	stw	r2,8(r16)
 800947c:	2c000215 	stw	r16,8(r5)
 8009480:	14000315 	stw	r16,12(r2)
 8009484:	003ef806 	br	8009068 <_malloc_r+0x158>
 8009488:	88c00054 	ori	r3,r17,1
 800948c:	80c00115 	stw	r3,4(r16)
 8009490:	8463883a 	add	r17,r16,r17
 8009494:	34400515 	stw	r17,20(r6)
 8009498:	34400415 	stw	r17,16(r6)
 800949c:	10c00054 	ori	r3,r2,1
 80094a0:	8a000315 	stw	r8,12(r17)
 80094a4:	8a000215 	stw	r8,8(r17)
 80094a8:	88c00115 	stw	r3,4(r17)
 80094ac:	88a3883a 	add	r17,r17,r2
 80094b0:	88800015 	stw	r2,0(r17)
 80094b4:	9009883a 	mov	r4,r18
 80094b8:	80164c80 	call	80164c8 <__malloc_unlock>
 80094bc:	80800204 	addi	r2,r16,8
 80094c0:	003f3c06 	br	80091b4 <_malloc_r+0x2a4>
 80094c4:	30c00117 	ldw	r3,4(r6)
 80094c8:	003ee706 	br	8009068 <_malloc_r+0x158>
 80094cc:	5ac00044 	addi	r11,r11,1
 80094d0:	588000cc 	andi	r2,r11,3
 80094d4:	31800204 	addi	r6,r6,8
 80094d8:	103efd1e 	bne	r2,zero,80090d0 <_malloc_r+0x1c0>
 80094dc:	00002406 	br	8009570 <_malloc_r+0x660>
 80094e0:	14000317 	ldw	r16,12(r2)
 80094e4:	143f251e 	bne	r2,r16,800917c <_malloc_r+0x26c>
 80094e8:	21000084 	addi	r4,r4,2
 80094ec:	003ebc06 	br	8008fe0 <_malloc_r+0xd0>
 80094f0:	8085883a 	add	r2,r16,r2
 80094f4:	10c00117 	ldw	r3,4(r2)
 80094f8:	81000317 	ldw	r4,12(r16)
 80094fc:	81400217 	ldw	r5,8(r16)
 8009500:	18c00054 	ori	r3,r3,1
 8009504:	10c00115 	stw	r3,4(r2)
 8009508:	29000315 	stw	r4,12(r5)
 800950c:	21400215 	stw	r5,8(r4)
 8009510:	9009883a 	mov	r4,r18
 8009514:	80164c80 	call	80164c8 <__malloc_unlock>
 8009518:	80800204 	addi	r2,r16,8
 800951c:	003f2506 	br	80091b4 <_malloc_r+0x2a4>
 8009520:	12001704 	addi	r8,r2,92
 8009524:	11c016c4 	addi	r7,r2,91
 8009528:	4209883a 	add	r4,r8,r8
 800952c:	003e9606 	br	8008f88 <_malloc_r+0x78>
 8009530:	3804d1ba 	srli	r2,r7,6
 8009534:	11400e44 	addi	r5,r2,57
 8009538:	10c00e04 	addi	r3,r2,56
 800953c:	294b883a 	add	r5,r5,r5
 8009540:	003fbc06 	br	8009434 <_malloc_r+0x524>
 8009544:	84ff5926 	beq	r16,r19,80092ac <_malloc_r+0x39c>
 8009548:	008200b4 	movhi	r2,2050
 800954c:	10ab2f04 	addi	r2,r2,-21316
 8009550:	14000217 	ldw	r16,8(r2)
 8009554:	00bfff04 	movi	r2,-4
 8009558:	80c00117 	ldw	r3,4(r16)
 800955c:	1886703a 	and	r3,r3,r2
 8009560:	003f9106 	br	80093a8 <_malloc_r+0x498>
 8009564:	60800217 	ldw	r2,8(r12)
 8009568:	213fffc4 	addi	r4,r4,-1
 800956c:	1300651e 	bne	r2,r12,8009704 <_malloc_r+0x7f4>
 8009570:	208000cc 	andi	r2,r4,3
 8009574:	633ffe04 	addi	r12,r12,-8
 8009578:	103ffa1e 	bne	r2,zero,8009564 <_malloc_r+0x654>
 800957c:	98800117 	ldw	r2,4(r19)
 8009580:	0146303a 	nor	r3,zero,r5
 8009584:	1884703a 	and	r2,r3,r2
 8009588:	98800115 	stw	r2,4(r19)
 800958c:	294b883a 	add	r5,r5,r5
 8009590:	117f2836 	bltu	r2,r5,8009234 <_malloc_r+0x324>
 8009594:	283f2726 	beq	r5,zero,8009234 <_malloc_r+0x324>
 8009598:	2886703a 	and	r3,r5,r2
 800959c:	5809883a 	mov	r4,r11
 80095a0:	183ec31e 	bne	r3,zero,80090b0 <_malloc_r+0x1a0>
 80095a4:	294b883a 	add	r5,r5,r5
 80095a8:	2886703a 	and	r3,r5,r2
 80095ac:	21000104 	addi	r4,r4,4
 80095b0:	183ffc26 	beq	r3,zero,80095a4 <_malloc_r+0x694>
 80095b4:	003ebe06 	br	80090b0 <_malloc_r+0x1a0>
 80095b8:	00c05504 	movi	r3,340
 80095bc:	18801236 	bltu	r3,r2,8009608 <_malloc_r+0x6f8>
 80095c0:	8804d3fa 	srli	r2,r17,15
 80095c4:	12001e04 	addi	r8,r2,120
 80095c8:	11c01dc4 	addi	r7,r2,119
 80095cc:	4209883a 	add	r4,r8,r8
 80095d0:	003e6d06 	br	8008f88 <_malloc_r+0x78>
 80095d4:	00c40004 	movi	r3,4096
 80095d8:	003f4606 	br	80092f4 <_malloc_r+0x3e4>
 80095dc:	00800044 	movi	r2,1
 80095e0:	a0800115 	stw	r2,4(r20)
 80095e4:	003f7406 	br	80093b8 <_malloc_r+0x4a8>
 80095e8:	1805d0ba 	srai	r2,r3,2
 80095ec:	01c00044 	movi	r7,1
 80095f0:	30c00117 	ldw	r3,4(r6)
 80095f4:	388e983a 	sll	r7,r7,r2
 80095f8:	2805883a 	mov	r2,r5
 80095fc:	38c6b03a 	or	r3,r7,r3
 8009600:	30c00115 	stw	r3,4(r6)
 8009604:	003f9b06 	br	8009474 <_malloc_r+0x564>
 8009608:	00c15504 	movi	r3,1364
 800960c:	18801a36 	bltu	r3,r2,8009678 <_malloc_r+0x768>
 8009610:	8804d4ba 	srli	r2,r17,18
 8009614:	12001f44 	addi	r8,r2,125
 8009618:	11c01f04 	addi	r7,r2,124
 800961c:	4209883a 	add	r4,r8,r8
 8009620:	003e5906 	br	8008f88 <_malloc_r+0x78>
 8009624:	ad400404 	addi	r21,r21,16
 8009628:	003f1706 	br	8009288 <_malloc_r+0x378>
 800962c:	00c01504 	movi	r3,84
 8009630:	18802336 	bltu	r3,r2,80096c0 <_malloc_r+0x7b0>
 8009634:	3804d33a 	srli	r2,r7,12
 8009638:	11401bc4 	addi	r5,r2,111
 800963c:	10c01b84 	addi	r3,r2,110
 8009640:	294b883a 	add	r5,r5,r5
 8009644:	003f7b06 	br	8009434 <_malloc_r+0x524>
 8009648:	9c000217 	ldw	r16,8(r19)
 800964c:	00bfff04 	movi	r2,-4
 8009650:	80c00117 	ldw	r3,4(r16)
 8009654:	1886703a 	and	r3,r3,r2
 8009658:	003f5306 	br	80093a8 <_malloc_r+0x498>
 800965c:	3083ffcc 	andi	r2,r6,4095
 8009660:	103f181e 	bne	r2,zero,80092c4 <_malloc_r+0x3b4>
 8009664:	99000217 	ldw	r4,8(r19)
 8009668:	b545883a 	add	r2,r22,r21
 800966c:	10800054 	ori	r2,r2,1
 8009670:	20800115 	stw	r2,4(r4)
 8009674:	003f3e06 	br	8009370 <_malloc_r+0x460>
 8009678:	01003f84 	movi	r4,254
 800967c:	02001fc4 	movi	r8,127
 8009680:	01c01f84 	movi	r7,126
 8009684:	003e4006 	br	8008f88 <_malloc_r+0x78>
 8009688:	008200b4 	movhi	r2,2050
 800968c:	10b14c04 	addi	r2,r2,-15056
 8009690:	15000015 	stw	r20,0(r2)
 8009694:	003f1106 	br	80092dc <_malloc_r+0x3cc>
 8009698:	00800044 	movi	r2,1
 800969c:	002b883a 	mov	r21,zero
 80096a0:	003f1f06 	br	8009320 <_malloc_r+0x410>
 80096a4:	81400204 	addi	r5,r16,8
 80096a8:	9009883a 	mov	r4,r18
 80096ac:	800e5d80 	call	800e5d8 <_free_r>
 80096b0:	008220b4 	movhi	r2,2178
 80096b4:	10bc3b04 	addi	r2,r2,-3860
 80096b8:	10c00017 	ldw	r3,0(r2)
 80096bc:	003f2c06 	br	8009370 <_malloc_r+0x460>
 80096c0:	00c05504 	movi	r3,340
 80096c4:	18800536 	bltu	r3,r2,80096dc <_malloc_r+0x7cc>
 80096c8:	3804d3fa 	srli	r2,r7,15
 80096cc:	11401e04 	addi	r5,r2,120
 80096d0:	10c01dc4 	addi	r3,r2,119
 80096d4:	294b883a 	add	r5,r5,r5
 80096d8:	003f5606 	br	8009434 <_malloc_r+0x524>
 80096dc:	00c15504 	movi	r3,1364
 80096e0:	18800536 	bltu	r3,r2,80096f8 <_malloc_r+0x7e8>
 80096e4:	3804d4ba 	srli	r2,r7,18
 80096e8:	11401f44 	addi	r5,r2,125
 80096ec:	10c01f04 	addi	r3,r2,124
 80096f0:	294b883a 	add	r5,r5,r5
 80096f4:	003f4f06 	br	8009434 <_malloc_r+0x524>
 80096f8:	01403f84 	movi	r5,254
 80096fc:	00c01f84 	movi	r3,126
 8009700:	003f4c06 	br	8009434 <_malloc_r+0x524>
 8009704:	98800117 	ldw	r2,4(r19)
 8009708:	003fa006 	br	800958c <_malloc_r+0x67c>
 800970c:	8808d0fa 	srli	r4,r17,3
 8009710:	20800044 	addi	r2,r4,1
 8009714:	1085883a 	add	r2,r2,r2
 8009718:	003e9006 	br	800915c <_malloc_r+0x24c>

0800971c <memcpy>:
 800971c:	defffd04 	addi	sp,sp,-12
 8009720:	dfc00215 	stw	ra,8(sp)
 8009724:	dc400115 	stw	r17,4(sp)
 8009728:	dc000015 	stw	r16,0(sp)
 800972c:	00c003c4 	movi	r3,15
 8009730:	2005883a 	mov	r2,r4
 8009734:	1980452e 	bgeu	r3,r6,800984c <memcpy+0x130>
 8009738:	2906b03a 	or	r3,r5,r4
 800973c:	18c000cc 	andi	r3,r3,3
 8009740:	1800441e 	bne	r3,zero,8009854 <memcpy+0x138>
 8009744:	347ffc04 	addi	r17,r6,-16
 8009748:	8822d13a 	srli	r17,r17,4
 800974c:	28c00104 	addi	r3,r5,4
 8009750:	23400104 	addi	r13,r4,4
 8009754:	8820913a 	slli	r16,r17,4
 8009758:	2b000204 	addi	r12,r5,8
 800975c:	22c00204 	addi	r11,r4,8
 8009760:	84000504 	addi	r16,r16,20
 8009764:	2a800304 	addi	r10,r5,12
 8009768:	22400304 	addi	r9,r4,12
 800976c:	2c21883a 	add	r16,r5,r16
 8009770:	2811883a 	mov	r8,r5
 8009774:	200f883a 	mov	r7,r4
 8009778:	41000017 	ldw	r4,0(r8)
 800977c:	1fc00017 	ldw	ra,0(r3)
 8009780:	63c00017 	ldw	r15,0(r12)
 8009784:	39000015 	stw	r4,0(r7)
 8009788:	53800017 	ldw	r14,0(r10)
 800978c:	6fc00015 	stw	ra,0(r13)
 8009790:	5bc00015 	stw	r15,0(r11)
 8009794:	4b800015 	stw	r14,0(r9)
 8009798:	18c00404 	addi	r3,r3,16
 800979c:	39c00404 	addi	r7,r7,16
 80097a0:	42000404 	addi	r8,r8,16
 80097a4:	6b400404 	addi	r13,r13,16
 80097a8:	63000404 	addi	r12,r12,16
 80097ac:	5ac00404 	addi	r11,r11,16
 80097b0:	52800404 	addi	r10,r10,16
 80097b4:	4a400404 	addi	r9,r9,16
 80097b8:	1c3fef1e 	bne	r3,r16,8009778 <memcpy+0x5c>
 80097bc:	89c00044 	addi	r7,r17,1
 80097c0:	380e913a 	slli	r7,r7,4
 80097c4:	310003cc 	andi	r4,r6,15
 80097c8:	02c000c4 	movi	r11,3
 80097cc:	11c7883a 	add	r3,r2,r7
 80097d0:	29cb883a 	add	r5,r5,r7
 80097d4:	5900212e 	bgeu	r11,r4,800985c <memcpy+0x140>
 80097d8:	1813883a 	mov	r9,r3
 80097dc:	2811883a 	mov	r8,r5
 80097e0:	200f883a 	mov	r7,r4
 80097e4:	42800017 	ldw	r10,0(r8)
 80097e8:	4a400104 	addi	r9,r9,4
 80097ec:	39ffff04 	addi	r7,r7,-4
 80097f0:	4abfff15 	stw	r10,-4(r9)
 80097f4:	42000104 	addi	r8,r8,4
 80097f8:	59fffa36 	bltu	r11,r7,80097e4 <memcpy+0xc8>
 80097fc:	213fff04 	addi	r4,r4,-4
 8009800:	2008d0ba 	srli	r4,r4,2
 8009804:	318000cc 	andi	r6,r6,3
 8009808:	21000044 	addi	r4,r4,1
 800980c:	2109883a 	add	r4,r4,r4
 8009810:	2109883a 	add	r4,r4,r4
 8009814:	1907883a 	add	r3,r3,r4
 8009818:	290b883a 	add	r5,r5,r4
 800981c:	30000626 	beq	r6,zero,8009838 <memcpy+0x11c>
 8009820:	198d883a 	add	r6,r3,r6
 8009824:	29c00003 	ldbu	r7,0(r5)
 8009828:	18c00044 	addi	r3,r3,1
 800982c:	29400044 	addi	r5,r5,1
 8009830:	19ffffc5 	stb	r7,-1(r3)
 8009834:	19bffb1e 	bne	r3,r6,8009824 <memcpy+0x108>
 8009838:	dfc00217 	ldw	ra,8(sp)
 800983c:	dc400117 	ldw	r17,4(sp)
 8009840:	dc000017 	ldw	r16,0(sp)
 8009844:	dec00304 	addi	sp,sp,12
 8009848:	f800283a 	ret
 800984c:	2007883a 	mov	r3,r4
 8009850:	003ff206 	br	800981c <memcpy+0x100>
 8009854:	2007883a 	mov	r3,r4
 8009858:	003ff106 	br	8009820 <memcpy+0x104>
 800985c:	200d883a 	mov	r6,r4
 8009860:	003fee06 	br	800981c <memcpy+0x100>

08009864 <memset>:
 8009864:	20c000cc 	andi	r3,r4,3
 8009868:	2005883a 	mov	r2,r4
 800986c:	18004426 	beq	r3,zero,8009980 <memset+0x11c>
 8009870:	31ffffc4 	addi	r7,r6,-1
 8009874:	30004026 	beq	r6,zero,8009978 <memset+0x114>
 8009878:	2813883a 	mov	r9,r5
 800987c:	200d883a 	mov	r6,r4
 8009880:	2007883a 	mov	r3,r4
 8009884:	00000406 	br	8009898 <memset+0x34>
 8009888:	3a3fffc4 	addi	r8,r7,-1
 800988c:	31800044 	addi	r6,r6,1
 8009890:	38003926 	beq	r7,zero,8009978 <memset+0x114>
 8009894:	400f883a 	mov	r7,r8
 8009898:	18c00044 	addi	r3,r3,1
 800989c:	32400005 	stb	r9,0(r6)
 80098a0:	1a0000cc 	andi	r8,r3,3
 80098a4:	403ff81e 	bne	r8,zero,8009888 <memset+0x24>
 80098a8:	010000c4 	movi	r4,3
 80098ac:	21c02d2e 	bgeu	r4,r7,8009964 <memset+0x100>
 80098b0:	29003fcc 	andi	r4,r5,255
 80098b4:	200c923a 	slli	r6,r4,8
 80098b8:	3108b03a 	or	r4,r6,r4
 80098bc:	200c943a 	slli	r6,r4,16
 80098c0:	218cb03a 	or	r6,r4,r6
 80098c4:	010003c4 	movi	r4,15
 80098c8:	21c0182e 	bgeu	r4,r7,800992c <memset+0xc8>
 80098cc:	3b3ffc04 	addi	r12,r7,-16
 80098d0:	6018d13a 	srli	r12,r12,4
 80098d4:	1a000104 	addi	r8,r3,4
 80098d8:	1ac00204 	addi	r11,r3,8
 80098dc:	6008913a 	slli	r4,r12,4
 80098e0:	1a800304 	addi	r10,r3,12
 80098e4:	1813883a 	mov	r9,r3
 80098e8:	21000504 	addi	r4,r4,20
 80098ec:	1909883a 	add	r4,r3,r4
 80098f0:	49800015 	stw	r6,0(r9)
 80098f4:	41800015 	stw	r6,0(r8)
 80098f8:	59800015 	stw	r6,0(r11)
 80098fc:	51800015 	stw	r6,0(r10)
 8009900:	42000404 	addi	r8,r8,16
 8009904:	4a400404 	addi	r9,r9,16
 8009908:	5ac00404 	addi	r11,r11,16
 800990c:	52800404 	addi	r10,r10,16
 8009910:	413ff71e 	bne	r8,r4,80098f0 <memset+0x8c>
 8009914:	63000044 	addi	r12,r12,1
 8009918:	6018913a 	slli	r12,r12,4
 800991c:	39c003cc 	andi	r7,r7,15
 8009920:	010000c4 	movi	r4,3
 8009924:	1b07883a 	add	r3,r3,r12
 8009928:	21c00e2e 	bgeu	r4,r7,8009964 <memset+0x100>
 800992c:	1813883a 	mov	r9,r3
 8009930:	3811883a 	mov	r8,r7
 8009934:	010000c4 	movi	r4,3
 8009938:	49800015 	stw	r6,0(r9)
 800993c:	423fff04 	addi	r8,r8,-4
 8009940:	4a400104 	addi	r9,r9,4
 8009944:	223ffc36 	bltu	r4,r8,8009938 <memset+0xd4>
 8009948:	393fff04 	addi	r4,r7,-4
 800994c:	2008d0ba 	srli	r4,r4,2
 8009950:	39c000cc 	andi	r7,r7,3
 8009954:	21000044 	addi	r4,r4,1
 8009958:	2109883a 	add	r4,r4,r4
 800995c:	2109883a 	add	r4,r4,r4
 8009960:	1907883a 	add	r3,r3,r4
 8009964:	38000526 	beq	r7,zero,800997c <memset+0x118>
 8009968:	19cf883a 	add	r7,r3,r7
 800996c:	19400005 	stb	r5,0(r3)
 8009970:	18c00044 	addi	r3,r3,1
 8009974:	38fffd1e 	bne	r7,r3,800996c <memset+0x108>
 8009978:	f800283a 	ret
 800997c:	f800283a 	ret
 8009980:	2007883a 	mov	r3,r4
 8009984:	300f883a 	mov	r7,r6
 8009988:	003fc706 	br	80098a8 <memset+0x44>

0800998c <_open_r>:
 800998c:	defffd04 	addi	sp,sp,-12
 8009990:	2805883a 	mov	r2,r5
 8009994:	dc000015 	stw	r16,0(sp)
 8009998:	040200b4 	movhi	r16,2050
 800999c:	dc400115 	stw	r17,4(sp)
 80099a0:	300b883a 	mov	r5,r6
 80099a4:	8439f604 	addi	r16,r16,-6184
 80099a8:	2023883a 	mov	r17,r4
 80099ac:	380d883a 	mov	r6,r7
 80099b0:	1009883a 	mov	r4,r2
 80099b4:	dfc00215 	stw	ra,8(sp)
 80099b8:	80000015 	stw	zero,0(r16)
 80099bc:	80166140 	call	8016614 <open>
 80099c0:	00ffffc4 	movi	r3,-1
 80099c4:	10c00526 	beq	r2,r3,80099dc <_open_r+0x50>
 80099c8:	dfc00217 	ldw	ra,8(sp)
 80099cc:	dc400117 	ldw	r17,4(sp)
 80099d0:	dc000017 	ldw	r16,0(sp)
 80099d4:	dec00304 	addi	sp,sp,12
 80099d8:	f800283a 	ret
 80099dc:	80c00017 	ldw	r3,0(r16)
 80099e0:	183ff926 	beq	r3,zero,80099c8 <_open_r+0x3c>
 80099e4:	88c00015 	stw	r3,0(r17)
 80099e8:	003ff706 	br	80099c8 <_open_r+0x3c>

080099ec <_printf_r>:
 80099ec:	defffd04 	addi	sp,sp,-12
 80099f0:	2805883a 	mov	r2,r5
 80099f4:	dfc00015 	stw	ra,0(sp)
 80099f8:	d9800115 	stw	r6,4(sp)
 80099fc:	d9c00215 	stw	r7,8(sp)
 8009a00:	21400217 	ldw	r5,8(r4)
 8009a04:	d9c00104 	addi	r7,sp,4
 8009a08:	100d883a 	mov	r6,r2
 8009a0c:	8009f440 	call	8009f44 <___vfprintf_internal_r>
 8009a10:	dfc00017 	ldw	ra,0(sp)
 8009a14:	dec00304 	addi	sp,sp,12
 8009a18:	f800283a 	ret

08009a1c <printf>:
 8009a1c:	defffc04 	addi	sp,sp,-16
 8009a20:	dfc00015 	stw	ra,0(sp)
 8009a24:	d9400115 	stw	r5,4(sp)
 8009a28:	d9800215 	stw	r6,8(sp)
 8009a2c:	d9c00315 	stw	r7,12(sp)
 8009a30:	008200b4 	movhi	r2,2050
 8009a34:	10b14b04 	addi	r2,r2,-15060
 8009a38:	10800017 	ldw	r2,0(r2)
 8009a3c:	200b883a 	mov	r5,r4
 8009a40:	d9800104 	addi	r6,sp,4
 8009a44:	11000217 	ldw	r4,8(r2)
 8009a48:	800c2200 	call	800c220 <__vfprintf_internal>
 8009a4c:	dfc00017 	ldw	ra,0(sp)
 8009a50:	dec00404 	addi	sp,sp,16
 8009a54:	f800283a 	ret

08009a58 <_puts_r>:
 8009a58:	defff604 	addi	sp,sp,-40
 8009a5c:	dc000715 	stw	r16,28(sp)
 8009a60:	2021883a 	mov	r16,r4
 8009a64:	2809883a 	mov	r4,r5
 8009a68:	dc400815 	stw	r17,32(sp)
 8009a6c:	dfc00915 	stw	ra,36(sp)
 8009a70:	2823883a 	mov	r17,r5
 8009a74:	8009eac0 	call	8009eac <strlen>
 8009a78:	10c00044 	addi	r3,r2,1
 8009a7c:	d8800115 	stw	r2,4(sp)
 8009a80:	008200b4 	movhi	r2,2050
 8009a84:	10a85104 	addi	r2,r2,-24252
 8009a88:	d8800215 	stw	r2,8(sp)
 8009a8c:	00800044 	movi	r2,1
 8009a90:	d8800315 	stw	r2,12(sp)
 8009a94:	00800084 	movi	r2,2
 8009a98:	dc400015 	stw	r17,0(sp)
 8009a9c:	d8c00615 	stw	r3,24(sp)
 8009aa0:	dec00415 	stw	sp,16(sp)
 8009aa4:	d8800515 	stw	r2,20(sp)
 8009aa8:	80000226 	beq	r16,zero,8009ab4 <_puts_r+0x5c>
 8009aac:	80800e17 	ldw	r2,56(r16)
 8009ab0:	10001426 	beq	r2,zero,8009b04 <_puts_r+0xac>
 8009ab4:	81400217 	ldw	r5,8(r16)
 8009ab8:	2880030b 	ldhu	r2,12(r5)
 8009abc:	10c8000c 	andi	r3,r2,8192
 8009ac0:	1800061e 	bne	r3,zero,8009adc <_puts_r+0x84>
 8009ac4:	29001917 	ldw	r4,100(r5)
 8009ac8:	00f7ffc4 	movi	r3,-8193
 8009acc:	10880014 	ori	r2,r2,8192
 8009ad0:	20c6703a 	and	r3,r4,r3
 8009ad4:	2880030d 	sth	r2,12(r5)
 8009ad8:	28c01915 	stw	r3,100(r5)
 8009adc:	d9800404 	addi	r6,sp,16
 8009ae0:	8009883a 	mov	r4,r16
 8009ae4:	800e8e80 	call	800e8e8 <__sfvwrite_r>
 8009ae8:	1000091e 	bne	r2,zero,8009b10 <_puts_r+0xb8>
 8009aec:	00800284 	movi	r2,10
 8009af0:	dfc00917 	ldw	ra,36(sp)
 8009af4:	dc400817 	ldw	r17,32(sp)
 8009af8:	dc000717 	ldw	r16,28(sp)
 8009afc:	dec00a04 	addi	sp,sp,40
 8009b00:	f800283a 	ret
 8009b04:	8009883a 	mov	r4,r16
 8009b08:	800e3b80 	call	800e3b8 <__sinit>
 8009b0c:	003fe906 	br	8009ab4 <_puts_r+0x5c>
 8009b10:	00bfffc4 	movi	r2,-1
 8009b14:	003ff606 	br	8009af0 <_puts_r+0x98>

08009b18 <puts>:
 8009b18:	008200b4 	movhi	r2,2050
 8009b1c:	10b14b04 	addi	r2,r2,-15060
 8009b20:	200b883a 	mov	r5,r4
 8009b24:	11000017 	ldw	r4,0(r2)
 8009b28:	8009a581 	jmpi	8009a58 <_puts_r>

08009b2c <lflush>:
 8009b2c:	2080030b 	ldhu	r2,12(r4)
 8009b30:	00c00244 	movi	r3,9
 8009b34:	1080024c 	andi	r2,r2,9
 8009b38:	10c00226 	beq	r2,r3,8009b44 <lflush+0x18>
 8009b3c:	0005883a 	mov	r2,zero
 8009b40:	f800283a 	ret
 8009b44:	800e0281 	jmpi	800e028 <fflush>

08009b48 <__srefill_r>:
 8009b48:	defffc04 	addi	sp,sp,-16
 8009b4c:	dc400115 	stw	r17,4(sp)
 8009b50:	dc000015 	stw	r16,0(sp)
 8009b54:	dfc00315 	stw	ra,12(sp)
 8009b58:	dc800215 	stw	r18,8(sp)
 8009b5c:	2023883a 	mov	r17,r4
 8009b60:	2821883a 	mov	r16,r5
 8009b64:	20000226 	beq	r4,zero,8009b70 <__srefill_r+0x28>
 8009b68:	20800e17 	ldw	r2,56(r4)
 8009b6c:	10003c26 	beq	r2,zero,8009c60 <__srefill_r+0x118>
 8009b70:	80c0030b 	ldhu	r3,12(r16)
 8009b74:	1908000c 	andi	r4,r3,8192
 8009b78:	1805883a 	mov	r2,r3
 8009b7c:	2000071e 	bne	r4,zero,8009b9c <__srefill_r+0x54>
 8009b80:	81001917 	ldw	r4,100(r16)
 8009b84:	18880014 	ori	r2,r3,8192
 8009b88:	00f7ffc4 	movi	r3,-8193
 8009b8c:	20c8703a 	and	r4,r4,r3
 8009b90:	8080030d 	sth	r2,12(r16)
 8009b94:	1007883a 	mov	r3,r2
 8009b98:	81001915 	stw	r4,100(r16)
 8009b9c:	80000115 	stw	zero,4(r16)
 8009ba0:	1100080c 	andi	r4,r2,32
 8009ba4:	2000571e 	bne	r4,zero,8009d04 <__srefill_r+0x1bc>
 8009ba8:	1100010c 	andi	r4,r2,4
 8009bac:	20001f26 	beq	r4,zero,8009c2c <__srefill_r+0xe4>
 8009bb0:	81400c17 	ldw	r5,48(r16)
 8009bb4:	28000826 	beq	r5,zero,8009bd8 <__srefill_r+0x90>
 8009bb8:	80801004 	addi	r2,r16,64
 8009bbc:	28800226 	beq	r5,r2,8009bc8 <__srefill_r+0x80>
 8009bc0:	8809883a 	mov	r4,r17
 8009bc4:	800e5d80 	call	800e5d8 <_free_r>
 8009bc8:	80800f17 	ldw	r2,60(r16)
 8009bcc:	80000c15 	stw	zero,48(r16)
 8009bd0:	80800115 	stw	r2,4(r16)
 8009bd4:	1000391e 	bne	r2,zero,8009cbc <__srefill_r+0x174>
 8009bd8:	80800417 	ldw	r2,16(r16)
 8009bdc:	10004b26 	beq	r2,zero,8009d0c <__srefill_r+0x1c4>
 8009be0:	8480030b 	ldhu	r18,12(r16)
 8009be4:	908000cc 	andi	r2,r18,3
 8009be8:	10001f1e 	bne	r2,zero,8009c68 <__srefill_r+0x120>
 8009bec:	81800417 	ldw	r6,16(r16)
 8009bf0:	80800817 	ldw	r2,32(r16)
 8009bf4:	81c00517 	ldw	r7,20(r16)
 8009bf8:	81400717 	ldw	r5,28(r16)
 8009bfc:	81800015 	stw	r6,0(r16)
 8009c00:	8809883a 	mov	r4,r17
 8009c04:	103ee83a 	callr	r2
 8009c08:	80800115 	stw	r2,4(r16)
 8009c0c:	00800e0e 	bge	zero,r2,8009c48 <__srefill_r+0x100>
 8009c10:	0005883a 	mov	r2,zero
 8009c14:	dfc00317 	ldw	ra,12(sp)
 8009c18:	dc800217 	ldw	r18,8(sp)
 8009c1c:	dc400117 	ldw	r17,4(sp)
 8009c20:	dc000017 	ldw	r16,0(sp)
 8009c24:	dec00404 	addi	sp,sp,16
 8009c28:	f800283a 	ret
 8009c2c:	1100040c 	andi	r4,r2,16
 8009c30:	20003026 	beq	r4,zero,8009cf4 <__srefill_r+0x1ac>
 8009c34:	1080020c 	andi	r2,r2,8
 8009c38:	1000241e 	bne	r2,zero,8009ccc <__srefill_r+0x184>
 8009c3c:	18c00114 	ori	r3,r3,4
 8009c40:	80c0030d 	sth	r3,12(r16)
 8009c44:	003fe406 	br	8009bd8 <__srefill_r+0x90>
 8009c48:	80c0030b 	ldhu	r3,12(r16)
 8009c4c:	1000161e 	bne	r2,zero,8009ca8 <__srefill_r+0x160>
 8009c50:	18c00814 	ori	r3,r3,32
 8009c54:	00bfffc4 	movi	r2,-1
 8009c58:	80c0030d 	sth	r3,12(r16)
 8009c5c:	003fed06 	br	8009c14 <__srefill_r+0xcc>
 8009c60:	800e3b80 	call	800e3b8 <__sinit>
 8009c64:	003fc206 	br	8009b70 <__srefill_r+0x28>
 8009c68:	008200b4 	movhi	r2,2050
 8009c6c:	10b14a04 	addi	r2,r2,-15064
 8009c70:	11000017 	ldw	r4,0(r2)
 8009c74:	01420074 	movhi	r5,2049
 8009c78:	00800044 	movi	r2,1
 8009c7c:	2966cb04 	addi	r5,r5,-25812
 8009c80:	8080030d 	sth	r2,12(r16)
 8009c84:	800edb00 	call	800edb0 <_fwalk>
 8009c88:	00800244 	movi	r2,9
 8009c8c:	8480030d 	sth	r18,12(r16)
 8009c90:	9480024c 	andi	r18,r18,9
 8009c94:	90bfd51e 	bne	r18,r2,8009bec <__srefill_r+0xa4>
 8009c98:	800b883a 	mov	r5,r16
 8009c9c:	8809883a 	mov	r4,r17
 8009ca0:	800ddb00 	call	800ddb0 <__sflush_r>
 8009ca4:	003fd106 	br	8009bec <__srefill_r+0xa4>
 8009ca8:	18c01014 	ori	r3,r3,64
 8009cac:	80000115 	stw	zero,4(r16)
 8009cb0:	00bfffc4 	movi	r2,-1
 8009cb4:	80c0030d 	sth	r3,12(r16)
 8009cb8:	003fd606 	br	8009c14 <__srefill_r+0xcc>
 8009cbc:	80c00e17 	ldw	r3,56(r16)
 8009cc0:	0005883a 	mov	r2,zero
 8009cc4:	80c00015 	stw	r3,0(r16)
 8009cc8:	003fd206 	br	8009c14 <__srefill_r+0xcc>
 8009ccc:	800b883a 	mov	r5,r16
 8009cd0:	8809883a 	mov	r4,r17
 8009cd4:	800dfcc0 	call	800dfcc <_fflush_r>
 8009cd8:	10000a1e 	bne	r2,zero,8009d04 <__srefill_r+0x1bc>
 8009cdc:	8080030b 	ldhu	r2,12(r16)
 8009ce0:	00fffdc4 	movi	r3,-9
 8009ce4:	80000215 	stw	zero,8(r16)
 8009ce8:	1886703a 	and	r3,r3,r2
 8009cec:	80000615 	stw	zero,24(r16)
 8009cf0:	003fd206 	br	8009c3c <__srefill_r+0xf4>
 8009cf4:	00800244 	movi	r2,9
 8009cf8:	88800015 	stw	r2,0(r17)
 8009cfc:	18c01014 	ori	r3,r3,64
 8009d00:	80c0030d 	sth	r3,12(r16)
 8009d04:	00bfffc4 	movi	r2,-1
 8009d08:	003fc206 	br	8009c14 <__srefill_r+0xcc>
 8009d0c:	800b883a 	mov	r5,r16
 8009d10:	8809883a 	mov	r4,r17
 8009d14:	8008d540 	call	8008d54 <__smakebuf_r>
 8009d18:	003fb106 	br	8009be0 <__srefill_r+0x98>

08009d1c <_sbrk_r>:
 8009d1c:	defffd04 	addi	sp,sp,-12
 8009d20:	dc000015 	stw	r16,0(sp)
 8009d24:	040200b4 	movhi	r16,2050
 8009d28:	dc400115 	stw	r17,4(sp)
 8009d2c:	8439f604 	addi	r16,r16,-6184
 8009d30:	2023883a 	mov	r17,r4
 8009d34:	2809883a 	mov	r4,r5
 8009d38:	dfc00215 	stw	ra,8(sp)
 8009d3c:	80000015 	stw	zero,0(r16)
 8009d40:	8016b9c0 	call	8016b9c <sbrk>
 8009d44:	00ffffc4 	movi	r3,-1
 8009d48:	10c00526 	beq	r2,r3,8009d60 <_sbrk_r+0x44>
 8009d4c:	dfc00217 	ldw	ra,8(sp)
 8009d50:	dc400117 	ldw	r17,4(sp)
 8009d54:	dc000017 	ldw	r16,0(sp)
 8009d58:	dec00304 	addi	sp,sp,12
 8009d5c:	f800283a 	ret
 8009d60:	80c00017 	ldw	r3,0(r16)
 8009d64:	183ff926 	beq	r3,zero,8009d4c <_sbrk_r+0x30>
 8009d68:	88c00015 	stw	r3,0(r17)
 8009d6c:	003ff706 	br	8009d4c <_sbrk_r+0x30>

08009d70 <__sread>:
 8009d70:	defffe04 	addi	sp,sp,-8
 8009d74:	dc000015 	stw	r16,0(sp)
 8009d78:	2821883a 	mov	r16,r5
 8009d7c:	2940038f 	ldh	r5,14(r5)
 8009d80:	dfc00115 	stw	ra,4(sp)
 8009d84:	80103c00 	call	80103c0 <_read_r>
 8009d88:	10000716 	blt	r2,zero,8009da8 <__sread+0x38>
 8009d8c:	80c01417 	ldw	r3,80(r16)
 8009d90:	1887883a 	add	r3,r3,r2
 8009d94:	80c01415 	stw	r3,80(r16)
 8009d98:	dfc00117 	ldw	ra,4(sp)
 8009d9c:	dc000017 	ldw	r16,0(sp)
 8009da0:	dec00204 	addi	sp,sp,8
 8009da4:	f800283a 	ret
 8009da8:	80c0030b 	ldhu	r3,12(r16)
 8009dac:	18fbffcc 	andi	r3,r3,61439
 8009db0:	80c0030d 	sth	r3,12(r16)
 8009db4:	dfc00117 	ldw	ra,4(sp)
 8009db8:	dc000017 	ldw	r16,0(sp)
 8009dbc:	dec00204 	addi	sp,sp,8
 8009dc0:	f800283a 	ret

08009dc4 <__seofread>:
 8009dc4:	0005883a 	mov	r2,zero
 8009dc8:	f800283a 	ret

08009dcc <__swrite>:
 8009dcc:	2880030b 	ldhu	r2,12(r5)
 8009dd0:	defffb04 	addi	sp,sp,-20
 8009dd4:	dcc00315 	stw	r19,12(sp)
 8009dd8:	dc800215 	stw	r18,8(sp)
 8009ddc:	dc400115 	stw	r17,4(sp)
 8009de0:	dc000015 	stw	r16,0(sp)
 8009de4:	dfc00415 	stw	ra,16(sp)
 8009de8:	10c0400c 	andi	r3,r2,256
 8009dec:	2821883a 	mov	r16,r5
 8009df0:	2023883a 	mov	r17,r4
 8009df4:	3025883a 	mov	r18,r6
 8009df8:	3827883a 	mov	r19,r7
 8009dfc:	18000526 	beq	r3,zero,8009e14 <__swrite+0x48>
 8009e00:	2940038f 	ldh	r5,14(r5)
 8009e04:	01c00084 	movi	r7,2
 8009e08:	000d883a 	mov	r6,zero
 8009e0c:	800f0680 	call	800f068 <_lseek_r>
 8009e10:	8080030b 	ldhu	r2,12(r16)
 8009e14:	8140038f 	ldh	r5,14(r16)
 8009e18:	10bbffcc 	andi	r2,r2,61439
 8009e1c:	980f883a 	mov	r7,r19
 8009e20:	900d883a 	mov	r6,r18
 8009e24:	8809883a 	mov	r4,r17
 8009e28:	8080030d 	sth	r2,12(r16)
 8009e2c:	dfc00417 	ldw	ra,16(sp)
 8009e30:	dcc00317 	ldw	r19,12(sp)
 8009e34:	dc800217 	ldw	r18,8(sp)
 8009e38:	dc400117 	ldw	r17,4(sp)
 8009e3c:	dc000017 	ldw	r16,0(sp)
 8009e40:	dec00504 	addi	sp,sp,20
 8009e44:	800c2f81 	jmpi	800c2f8 <_write_r>

08009e48 <__sseek>:
 8009e48:	defffe04 	addi	sp,sp,-8
 8009e4c:	dc000015 	stw	r16,0(sp)
 8009e50:	2821883a 	mov	r16,r5
 8009e54:	2940038f 	ldh	r5,14(r5)
 8009e58:	dfc00115 	stw	ra,4(sp)
 8009e5c:	800f0680 	call	800f068 <_lseek_r>
 8009e60:	00ffffc4 	movi	r3,-1
 8009e64:	10c00826 	beq	r2,r3,8009e88 <__sseek+0x40>
 8009e68:	80c0030b 	ldhu	r3,12(r16)
 8009e6c:	80801415 	stw	r2,80(r16)
 8009e70:	18c40014 	ori	r3,r3,4096
 8009e74:	80c0030d 	sth	r3,12(r16)
 8009e78:	dfc00117 	ldw	ra,4(sp)
 8009e7c:	dc000017 	ldw	r16,0(sp)
 8009e80:	dec00204 	addi	sp,sp,8
 8009e84:	f800283a 	ret
 8009e88:	80c0030b 	ldhu	r3,12(r16)
 8009e8c:	18fbffcc 	andi	r3,r3,61439
 8009e90:	80c0030d 	sth	r3,12(r16)
 8009e94:	dfc00117 	ldw	ra,4(sp)
 8009e98:	dc000017 	ldw	r16,0(sp)
 8009e9c:	dec00204 	addi	sp,sp,8
 8009ea0:	f800283a 	ret

08009ea4 <__sclose>:
 8009ea4:	2940038f 	ldh	r5,14(r5)
 8009ea8:	800c4ac1 	jmpi	800c4ac <_close_r>

08009eac <strlen>:
 8009eac:	208000cc 	andi	r2,r4,3
 8009eb0:	10002026 	beq	r2,zero,8009f34 <strlen+0x88>
 8009eb4:	20800007 	ldb	r2,0(r4)
 8009eb8:	10002026 	beq	r2,zero,8009f3c <strlen+0x90>
 8009ebc:	2005883a 	mov	r2,r4
 8009ec0:	00000206 	br	8009ecc <strlen+0x20>
 8009ec4:	10c00007 	ldb	r3,0(r2)
 8009ec8:	18001826 	beq	r3,zero,8009f2c <strlen+0x80>
 8009ecc:	10800044 	addi	r2,r2,1
 8009ed0:	10c000cc 	andi	r3,r2,3
 8009ed4:	183ffb1e 	bne	r3,zero,8009ec4 <strlen+0x18>
 8009ed8:	10c00017 	ldw	r3,0(r2)
 8009edc:	01ffbff4 	movhi	r7,65279
 8009ee0:	39ffbfc4 	addi	r7,r7,-257
 8009ee4:	00ca303a 	nor	r5,zero,r3
 8009ee8:	01a02074 	movhi	r6,32897
 8009eec:	19c7883a 	add	r3,r3,r7
 8009ef0:	31a02004 	addi	r6,r6,-32640
 8009ef4:	1946703a 	and	r3,r3,r5
 8009ef8:	1986703a 	and	r3,r3,r6
 8009efc:	1800091e 	bne	r3,zero,8009f24 <strlen+0x78>
 8009f00:	10800104 	addi	r2,r2,4
 8009f04:	10c00017 	ldw	r3,0(r2)
 8009f08:	19cb883a 	add	r5,r3,r7
 8009f0c:	00c6303a 	nor	r3,zero,r3
 8009f10:	28c6703a 	and	r3,r5,r3
 8009f14:	1986703a 	and	r3,r3,r6
 8009f18:	183ff926 	beq	r3,zero,8009f00 <strlen+0x54>
 8009f1c:	00000106 	br	8009f24 <strlen+0x78>
 8009f20:	10800044 	addi	r2,r2,1
 8009f24:	10c00007 	ldb	r3,0(r2)
 8009f28:	183ffd1e 	bne	r3,zero,8009f20 <strlen+0x74>
 8009f2c:	1105c83a 	sub	r2,r2,r4
 8009f30:	f800283a 	ret
 8009f34:	2005883a 	mov	r2,r4
 8009f38:	003fe706 	br	8009ed8 <strlen+0x2c>
 8009f3c:	0005883a 	mov	r2,zero
 8009f40:	f800283a 	ret

08009f44 <___vfprintf_internal_r>:
 8009f44:	deffb804 	addi	sp,sp,-288
 8009f48:	dfc04715 	stw	ra,284(sp)
 8009f4c:	ddc04515 	stw	r23,276(sp)
 8009f50:	dd404315 	stw	r21,268(sp)
 8009f54:	d9002d15 	stw	r4,180(sp)
 8009f58:	282f883a 	mov	r23,r5
 8009f5c:	302b883a 	mov	r21,r6
 8009f60:	d9c02e15 	stw	r7,184(sp)
 8009f64:	df004615 	stw	fp,280(sp)
 8009f68:	dd804415 	stw	r22,272(sp)
 8009f6c:	dd004215 	stw	r20,264(sp)
 8009f70:	dcc04115 	stw	r19,260(sp)
 8009f74:	dc804015 	stw	r18,256(sp)
 8009f78:	dc403f15 	stw	r17,252(sp)
 8009f7c:	dc003e15 	stw	r16,248(sp)
 8009f80:	800f0380 	call	800f038 <_localeconv_r>
 8009f84:	10800017 	ldw	r2,0(r2)
 8009f88:	1009883a 	mov	r4,r2
 8009f8c:	d8803415 	stw	r2,208(sp)
 8009f90:	8009eac0 	call	8009eac <strlen>
 8009f94:	d8803715 	stw	r2,220(sp)
 8009f98:	d8802d17 	ldw	r2,180(sp)
 8009f9c:	10000226 	beq	r2,zero,8009fa8 <___vfprintf_internal_r+0x64>
 8009fa0:	10800e17 	ldw	r2,56(r2)
 8009fa4:	1000fb26 	beq	r2,zero,800a394 <___vfprintf_internal_r+0x450>
 8009fa8:	b880030b 	ldhu	r2,12(r23)
 8009fac:	10c8000c 	andi	r3,r2,8192
 8009fb0:	1800061e 	bne	r3,zero,8009fcc <___vfprintf_internal_r+0x88>
 8009fb4:	b9001917 	ldw	r4,100(r23)
 8009fb8:	00f7ffc4 	movi	r3,-8193
 8009fbc:	10880014 	ori	r2,r2,8192
 8009fc0:	20c6703a 	and	r3,r4,r3
 8009fc4:	b880030d 	sth	r2,12(r23)
 8009fc8:	b8c01915 	stw	r3,100(r23)
 8009fcc:	10c0020c 	andi	r3,r2,8
 8009fd0:	1800c326 	beq	r3,zero,800a2e0 <___vfprintf_internal_r+0x39c>
 8009fd4:	b8c00417 	ldw	r3,16(r23)
 8009fd8:	1800c126 	beq	r3,zero,800a2e0 <___vfprintf_internal_r+0x39c>
 8009fdc:	1080068c 	andi	r2,r2,26
 8009fe0:	00c00284 	movi	r3,10
 8009fe4:	10c0c626 	beq	r2,r3,800a300 <___vfprintf_internal_r+0x3bc>
 8009fe8:	d8c00404 	addi	r3,sp,16
 8009fec:	050200b4 	movhi	r20,2050
 8009ff0:	d9001e04 	addi	r4,sp,120
 8009ff4:	a5286284 	addi	r20,r20,-24182
 8009ff8:	d8c01e15 	stw	r3,120(sp)
 8009ffc:	d8002015 	stw	zero,128(sp)
 800a000:	d8001f15 	stw	zero,124(sp)
 800a004:	d8003315 	stw	zero,204(sp)
 800a008:	d8003615 	stw	zero,216(sp)
 800a00c:	d8003815 	stw	zero,224(sp)
 800a010:	1811883a 	mov	r8,r3
 800a014:	d8003915 	stw	zero,228(sp)
 800a018:	d8003a15 	stw	zero,232(sp)
 800a01c:	d8002f15 	stw	zero,188(sp)
 800a020:	d9002815 	stw	r4,160(sp)
 800a024:	a8800007 	ldb	r2,0(r21)
 800a028:	10028b26 	beq	r2,zero,800aa58 <___vfprintf_internal_r+0xb14>
 800a02c:	00c00944 	movi	r3,37
 800a030:	a823883a 	mov	r17,r21
 800a034:	10c0021e 	bne	r2,r3,800a040 <___vfprintf_internal_r+0xfc>
 800a038:	00001406 	br	800a08c <___vfprintf_internal_r+0x148>
 800a03c:	10c00326 	beq	r2,r3,800a04c <___vfprintf_internal_r+0x108>
 800a040:	8c400044 	addi	r17,r17,1
 800a044:	88800007 	ldb	r2,0(r17)
 800a048:	103ffc1e 	bne	r2,zero,800a03c <___vfprintf_internal_r+0xf8>
 800a04c:	8d61c83a 	sub	r16,r17,r21
 800a050:	80000e26 	beq	r16,zero,800a08c <___vfprintf_internal_r+0x148>
 800a054:	d8c02017 	ldw	r3,128(sp)
 800a058:	d8801f17 	ldw	r2,124(sp)
 800a05c:	45400015 	stw	r21,0(r8)
 800a060:	1c07883a 	add	r3,r3,r16
 800a064:	10800044 	addi	r2,r2,1
 800a068:	d8c02015 	stw	r3,128(sp)
 800a06c:	44000115 	stw	r16,4(r8)
 800a070:	d8801f15 	stw	r2,124(sp)
 800a074:	00c001c4 	movi	r3,7
 800a078:	1880a916 	blt	r3,r2,800a320 <___vfprintf_internal_r+0x3dc>
 800a07c:	42000204 	addi	r8,r8,8
 800a080:	d9402f17 	ldw	r5,188(sp)
 800a084:	2c0b883a 	add	r5,r5,r16
 800a088:	d9402f15 	stw	r5,188(sp)
 800a08c:	88800007 	ldb	r2,0(r17)
 800a090:	1000aa26 	beq	r2,zero,800a33c <___vfprintf_internal_r+0x3f8>
 800a094:	8d400044 	addi	r21,r17,1
 800a098:	8c400047 	ldb	r17,1(r17)
 800a09c:	0021883a 	mov	r16,zero
 800a0a0:	00bfffc4 	movi	r2,-1
 800a0a4:	0025883a 	mov	r18,zero
 800a0a8:	dc002905 	stb	r16,164(sp)
 800a0ac:	d8002785 	stb	zero,158(sp)
 800a0b0:	d8002b05 	stb	zero,172(sp)
 800a0b4:	d8802a15 	stw	r2,168(sp)
 800a0b8:	d8003115 	stw	zero,196(sp)
 800a0bc:	04c01604 	movi	r19,88
 800a0c0:	05800244 	movi	r22,9
 800a0c4:	9021883a 	mov	r16,r18
 800a0c8:	4039883a 	mov	fp,r8
 800a0cc:	ad400044 	addi	r21,r21,1
 800a0d0:	88bff804 	addi	r2,r17,-32
 800a0d4:	98833236 	bltu	r19,r2,800ada0 <___vfprintf_internal_r+0xe5c>
 800a0d8:	100490ba 	slli	r2,r2,2
 800a0dc:	00c20074 	movhi	r3,2049
 800a0e0:	18e83c04 	addi	r3,r3,-24336
 800a0e4:	10c5883a 	add	r2,r2,r3
 800a0e8:	10800017 	ldw	r2,0(r2)
 800a0ec:	1000683a 	jmp	r2
 800a0f0:	0800ac98 	cmpnei	zero,at,690
 800a0f4:	0800ada0 	cmpeqi	zero,at,694
 800a0f8:	0800ada0 	cmpeqi	zero,at,694
 800a0fc:	0800acb8 	rdprs	zero,at,690
 800a100:	0800ada0 	cmpeqi	zero,at,694
 800a104:	0800ada0 	cmpeqi	zero,at,694
 800a108:	0800ada0 	cmpeqi	zero,at,694
 800a10c:	0800ada0 	cmpeqi	zero,at,694
 800a110:	0800ada0 	cmpeqi	zero,at,694
 800a114:	0800ada0 	cmpeqi	zero,at,694
 800a118:	0800a3a0 	cmpeqi	zero,at,654
 800a11c:	0800aba8 	cmpgeui	zero,at,686
 800a120:	0800ada0 	cmpeqi	zero,at,694
 800a124:	0800a264 	muli	zero,at,649
 800a128:	0800a3c4 	addi	zero,at,655
 800a12c:	0800ada0 	cmpeqi	zero,at,694
 800a130:	0800a414 	ori	zero,at,656
 800a134:	0800a420 	cmpeqi	zero,at,656
 800a138:	0800a420 	cmpeqi	zero,at,656
 800a13c:	0800a420 	cmpeqi	zero,at,656
 800a140:	0800a420 	cmpeqi	zero,at,656
 800a144:	0800a420 	cmpeqi	zero,at,656
 800a148:	0800a420 	cmpeqi	zero,at,656
 800a14c:	0800a420 	cmpeqi	zero,at,656
 800a150:	0800a420 	cmpeqi	zero,at,656
 800a154:	0800a420 	cmpeqi	zero,at,656
 800a158:	0800ada0 	cmpeqi	zero,at,694
 800a15c:	0800ada0 	cmpeqi	zero,at,694
 800a160:	0800ada0 	cmpeqi	zero,at,694
 800a164:	0800ada0 	cmpeqi	zero,at,694
 800a168:	0800ada0 	cmpeqi	zero,at,694
 800a16c:	0800ada0 	cmpeqi	zero,at,694
 800a170:	0800ada0 	cmpeqi	zero,at,694
 800a174:	0800ada0 	cmpeqi	zero,at,694
 800a178:	0800ada0 	cmpeqi	zero,at,694
 800a17c:	0800ada0 	cmpeqi	zero,at,694
 800a180:	0800a45c 	xori	zero,at,657
 800a184:	0800a524 	muli	zero,at,660
 800a188:	0800ada0 	cmpeqi	zero,at,694
 800a18c:	0800a524 	muli	zero,at,660
 800a190:	0800ada0 	cmpeqi	zero,at,694
 800a194:	0800ada0 	cmpeqi	zero,at,694
 800a198:	0800ada0 	cmpeqi	zero,at,694
 800a19c:	0800ada0 	cmpeqi	zero,at,694
 800a1a0:	0800a5d0 	cmplti	zero,at,663
 800a1a4:	0800ada0 	cmpeqi	zero,at,694
 800a1a8:	0800ada0 	cmpeqi	zero,at,694
 800a1ac:	0800a5dc 	xori	zero,at,663
 800a1b0:	0800ada0 	cmpeqi	zero,at,694
 800a1b4:	0800ada0 	cmpeqi	zero,at,694
 800a1b8:	0800ada0 	cmpeqi	zero,at,694
 800a1bc:	0800ada0 	cmpeqi	zero,at,694
 800a1c0:	0800ada0 	cmpeqi	zero,at,694
 800a1c4:	0800aa60 	cmpeqi	zero,at,681
 800a1c8:	0800ada0 	cmpeqi	zero,at,694
 800a1cc:	0800ada0 	cmpeqi	zero,at,694
 800a1d0:	0800aacc 	andi	zero,at,683
 800a1d4:	0800ada0 	cmpeqi	zero,at,694
 800a1d8:	0800ada0 	cmpeqi	zero,at,694
 800a1dc:	0800ada0 	cmpeqi	zero,at,694
 800a1e0:	0800ada0 	cmpeqi	zero,at,694
 800a1e4:	0800ada0 	cmpeqi	zero,at,694
 800a1e8:	0800ada0 	cmpeqi	zero,at,694
 800a1ec:	0800ada0 	cmpeqi	zero,at,694
 800a1f0:	0800ada0 	cmpeqi	zero,at,694
 800a1f4:	0800ada0 	cmpeqi	zero,at,694
 800a1f8:	0800ada0 	cmpeqi	zero,at,694
 800a1fc:	0800ad44 	addi	zero,at,693
 800a200:	0800acc4 	addi	zero,at,691
 800a204:	0800a524 	muli	zero,at,660
 800a208:	0800a524 	muli	zero,at,660
 800a20c:	0800a524 	muli	zero,at,660
 800a210:	0800ace4 	muli	zero,at,691
 800a214:	0800acc4 	addi	zero,at,691
 800a218:	0800ada0 	cmpeqi	zero,at,694
 800a21c:	0800ada0 	cmpeqi	zero,at,694
 800a220:	0800acf0 	cmpltui	zero,at,691
 800a224:	0800ada0 	cmpeqi	zero,at,694
 800a228:	0800ad04 	addi	zero,at,692
 800a22c:	0800ab88 	cmpgei	zero,at,686
 800a230:	0800a270 	cmpltui	zero,at,649
 800a234:	0800abc0 	call	800abc <__alt_mem_sdram-0x77ff544>
 800a238:	0800ada0 	cmpeqi	zero,at,694
 800a23c:	0800abcc 	andi	zero,at,687
 800a240:	0800ada0 	cmpeqi	zero,at,694
 800a244:	0800ac30 	cmpltui	zero,at,688
 800a248:	0800ada0 	cmpeqi	zero,at,694
 800a24c:	0800ada0 	cmpeqi	zero,at,694
 800a250:	0800ac50 	cmplti	zero,at,689
 800a254:	d8c03117 	ldw	r3,196(sp)
 800a258:	d8802e15 	stw	r2,184(sp)
 800a25c:	00c7c83a 	sub	r3,zero,r3
 800a260:	d8c03115 	stw	r3,196(sp)
 800a264:	84000114 	ori	r16,r16,4
 800a268:	ac400007 	ldb	r17,0(r21)
 800a26c:	003f9706 	br	800a0cc <___vfprintf_internal_r+0x188>
 800a270:	00800c04 	movi	r2,48
 800a274:	d8802705 	stb	r2,156(sp)
 800a278:	00801e04 	movi	r2,120
 800a27c:	d8802745 	stb	r2,157(sp)
 800a280:	d9002a17 	ldw	r4,168(sp)
 800a284:	d8802e17 	ldw	r2,184(sp)
 800a288:	d8002785 	stb	zero,158(sp)
 800a28c:	e011883a 	mov	r8,fp
 800a290:	10c00104 	addi	r3,r2,4
 800a294:	14c00017 	ldw	r19,0(r2)
 800a298:	002d883a 	mov	r22,zero
 800a29c:	80800094 	ori	r2,r16,2
 800a2a0:	2002ca16 	blt	r4,zero,800adcc <___vfprintf_internal_r+0xe88>
 800a2a4:	00bfdfc4 	movi	r2,-129
 800a2a8:	80a4703a 	and	r18,r16,r2
 800a2ac:	d8c02e15 	stw	r3,184(sp)
 800a2b0:	94800094 	ori	r18,r18,2
 800a2b4:	9802b41e 	bne	r19,zero,800ad88 <___vfprintf_internal_r+0xe44>
 800a2b8:	014200b4 	movhi	r5,2050
 800a2bc:	29685b04 	addi	r5,r5,-24212
 800a2c0:	d9403915 	stw	r5,228(sp)
 800a2c4:	04401e04 	movi	r17,120
 800a2c8:	d8802a17 	ldw	r2,168(sp)
 800a2cc:	0039883a 	mov	fp,zero
 800a2d0:	1001fa26 	beq	r2,zero,800aabc <___vfprintf_internal_r+0xb78>
 800a2d4:	0027883a 	mov	r19,zero
 800a2d8:	002d883a 	mov	r22,zero
 800a2dc:	00021906 	br	800ab44 <___vfprintf_internal_r+0xc00>
 800a2e0:	d9002d17 	ldw	r4,180(sp)
 800a2e4:	b80b883a 	mov	r5,r23
 800a2e8:	800c3580 	call	800c358 <__swsetup_r>
 800a2ec:	1005dc1e 	bne	r2,zero,800ba60 <___vfprintf_internal_r+0x1b1c>
 800a2f0:	b880030b 	ldhu	r2,12(r23)
 800a2f4:	00c00284 	movi	r3,10
 800a2f8:	1080068c 	andi	r2,r2,26
 800a2fc:	10ff3a1e 	bne	r2,r3,8009fe8 <___vfprintf_internal_r+0xa4>
 800a300:	b880038f 	ldh	r2,14(r23)
 800a304:	103f3816 	blt	r2,zero,8009fe8 <___vfprintf_internal_r+0xa4>
 800a308:	d9c02e17 	ldw	r7,184(sp)
 800a30c:	d9002d17 	ldw	r4,180(sp)
 800a310:	a80d883a 	mov	r6,r21
 800a314:	b80b883a 	mov	r5,r23
 800a318:	800c23c0 	call	800c23c <__sbprintf>
 800a31c:	00001106 	br	800a364 <___vfprintf_internal_r+0x420>
 800a320:	d9002d17 	ldw	r4,180(sp)
 800a324:	d9801e04 	addi	r6,sp,120
 800a328:	b80b883a 	mov	r5,r23
 800a32c:	8010bd00 	call	8010bd0 <__sprint_r>
 800a330:	1000081e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800a334:	da000404 	addi	r8,sp,16
 800a338:	003f5106 	br	800a080 <___vfprintf_internal_r+0x13c>
 800a33c:	d8802017 	ldw	r2,128(sp)
 800a340:	10000426 	beq	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800a344:	d9002d17 	ldw	r4,180(sp)
 800a348:	d9801e04 	addi	r6,sp,120
 800a34c:	b80b883a 	mov	r5,r23
 800a350:	8010bd00 	call	8010bd0 <__sprint_r>
 800a354:	b880030b 	ldhu	r2,12(r23)
 800a358:	1080100c 	andi	r2,r2,64
 800a35c:	1005c01e 	bne	r2,zero,800ba60 <___vfprintf_internal_r+0x1b1c>
 800a360:	d8802f17 	ldw	r2,188(sp)
 800a364:	dfc04717 	ldw	ra,284(sp)
 800a368:	df004617 	ldw	fp,280(sp)
 800a36c:	ddc04517 	ldw	r23,276(sp)
 800a370:	dd804417 	ldw	r22,272(sp)
 800a374:	dd404317 	ldw	r21,268(sp)
 800a378:	dd004217 	ldw	r20,264(sp)
 800a37c:	dcc04117 	ldw	r19,260(sp)
 800a380:	dc804017 	ldw	r18,256(sp)
 800a384:	dc403f17 	ldw	r17,252(sp)
 800a388:	dc003e17 	ldw	r16,248(sp)
 800a38c:	dec04804 	addi	sp,sp,288
 800a390:	f800283a 	ret
 800a394:	d9002d17 	ldw	r4,180(sp)
 800a398:	800e3b80 	call	800e3b8 <__sinit>
 800a39c:	003f0206 	br	8009fa8 <___vfprintf_internal_r+0x64>
 800a3a0:	d9002e17 	ldw	r4,184(sp)
 800a3a4:	d9402e17 	ldw	r5,184(sp)
 800a3a8:	21000017 	ldw	r4,0(r4)
 800a3ac:	28800104 	addi	r2,r5,4
 800a3b0:	d9003115 	stw	r4,196(sp)
 800a3b4:	203fa716 	blt	r4,zero,800a254 <___vfprintf_internal_r+0x310>
 800a3b8:	d8802e15 	stw	r2,184(sp)
 800a3bc:	ac400007 	ldb	r17,0(r21)
 800a3c0:	003f4206 	br	800a0cc <___vfprintf_internal_r+0x188>
 800a3c4:	ac400007 	ldb	r17,0(r21)
 800a3c8:	01000a84 	movi	r4,42
 800a3cc:	a8c00044 	addi	r3,r21,1
 800a3d0:	89075826 	beq	r17,r4,800c134 <___vfprintf_internal_r+0x21f0>
 800a3d4:	8cbff404 	addi	r18,r17,-48
 800a3d8:	b486ae36 	bltu	r22,r18,800be94 <___vfprintf_internal_r+0x1f50>
 800a3dc:	0009883a 	mov	r4,zero
 800a3e0:	1823883a 	mov	r17,r3
 800a3e4:	01400284 	movi	r5,10
 800a3e8:	80086340 	call	8008634 <__mulsi3>
 800a3ec:	88c00007 	ldb	r3,0(r17)
 800a3f0:	1489883a 	add	r4,r2,r18
 800a3f4:	8d400044 	addi	r21,r17,1
 800a3f8:	1cbff404 	addi	r18,r3,-48
 800a3fc:	a823883a 	mov	r17,r21
 800a400:	b4bff82e 	bgeu	r22,r18,800a3e4 <___vfprintf_internal_r+0x4a0>
 800a404:	1823883a 	mov	r17,r3
 800a408:	2005f616 	blt	r4,zero,800bbe4 <___vfprintf_internal_r+0x1ca0>
 800a40c:	d9002a15 	stw	r4,168(sp)
 800a410:	003f2f06 	br	800a0d0 <___vfprintf_internal_r+0x18c>
 800a414:	84002014 	ori	r16,r16,128
 800a418:	ac400007 	ldb	r17,0(r21)
 800a41c:	003f2b06 	br	800a0cc <___vfprintf_internal_r+0x188>
 800a420:	8cbff404 	addi	r18,r17,-48
 800a424:	d8003115 	stw	zero,196(sp)
 800a428:	0009883a 	mov	r4,zero
 800a42c:	a823883a 	mov	r17,r21
 800a430:	01400284 	movi	r5,10
 800a434:	80086340 	call	8008634 <__mulsi3>
 800a438:	88c00007 	ldb	r3,0(r17)
 800a43c:	9089883a 	add	r4,r18,r2
 800a440:	ad400044 	addi	r21,r21,1
 800a444:	1cbff404 	addi	r18,r3,-48
 800a448:	a823883a 	mov	r17,r21
 800a44c:	b4bff82e 	bgeu	r22,r18,800a430 <___vfprintf_internal_r+0x4ec>
 800a450:	1823883a 	mov	r17,r3
 800a454:	d9003115 	stw	r4,196(sp)
 800a458:	003f1d06 	br	800a0d0 <___vfprintf_internal_r+0x18c>
 800a45c:	8025883a 	mov	r18,r16
 800a460:	dc002903 	ldbu	r16,164(sp)
 800a464:	e011883a 	mov	r8,fp
 800a468:	84003fcc 	andi	r16,r16,255
 800a46c:	8007531e 	bne	r16,zero,800c1bc <___vfprintf_internal_r+0x2278>
 800a470:	94800414 	ori	r18,r18,16
 800a474:	9080080c 	andi	r2,r18,32
 800a478:	1003a326 	beq	r2,zero,800b308 <___vfprintf_internal_r+0x13c4>
 800a47c:	d9002e17 	ldw	r4,184(sp)
 800a480:	20800117 	ldw	r2,4(r4)
 800a484:	24c00017 	ldw	r19,0(r4)
 800a488:	21000204 	addi	r4,r4,8
 800a48c:	d9002e15 	stw	r4,184(sp)
 800a490:	102d883a 	mov	r22,r2
 800a494:	10047316 	blt	r2,zero,800b664 <___vfprintf_internal_r+0x1720>
 800a498:	d9002a17 	ldw	r4,168(sp)
 800a49c:	df002783 	ldbu	fp,158(sp)
 800a4a0:	2003e416 	blt	r4,zero,800b434 <___vfprintf_internal_r+0x14f0>
 800a4a4:	00ffdfc4 	movi	r3,-129
 800a4a8:	9d84b03a 	or	r2,r19,r22
 800a4ac:	90e4703a 	and	r18,r18,r3
 800a4b0:	10018026 	beq	r2,zero,800aab4 <___vfprintf_internal_r+0xb70>
 800a4b4:	b003ab26 	beq	r22,zero,800b364 <___vfprintf_internal_r+0x1420>
 800a4b8:	dc402915 	stw	r17,164(sp)
 800a4bc:	dc001e04 	addi	r16,sp,120
 800a4c0:	b023883a 	mov	r17,r22
 800a4c4:	402d883a 	mov	r22,r8
 800a4c8:	9809883a 	mov	r4,r19
 800a4cc:	880b883a 	mov	r5,r17
 800a4d0:	01800284 	movi	r6,10
 800a4d4:	000f883a 	mov	r7,zero
 800a4d8:	8012ef00 	call	8012ef0 <__umoddi3>
 800a4dc:	10800c04 	addi	r2,r2,48
 800a4e0:	843fffc4 	addi	r16,r16,-1
 800a4e4:	9809883a 	mov	r4,r19
 800a4e8:	880b883a 	mov	r5,r17
 800a4ec:	80800005 	stb	r2,0(r16)
 800a4f0:	01800284 	movi	r6,10
 800a4f4:	000f883a 	mov	r7,zero
 800a4f8:	80128f40 	call	80128f4 <__udivdi3>
 800a4fc:	1027883a 	mov	r19,r2
 800a500:	10c4b03a 	or	r2,r2,r3
 800a504:	1823883a 	mov	r17,r3
 800a508:	103fef1e 	bne	r2,zero,800a4c8 <___vfprintf_internal_r+0x584>
 800a50c:	d8c02817 	ldw	r3,160(sp)
 800a510:	dc402917 	ldw	r17,164(sp)
 800a514:	b011883a 	mov	r8,r22
 800a518:	1c07c83a 	sub	r3,r3,r16
 800a51c:	d8c02b15 	stw	r3,172(sp)
 800a520:	00005f06 	br	800a6a0 <___vfprintf_internal_r+0x75c>
 800a524:	8025883a 	mov	r18,r16
 800a528:	dc002903 	ldbu	r16,164(sp)
 800a52c:	e011883a 	mov	r8,fp
 800a530:	84003fcc 	andi	r16,r16,255
 800a534:	80071e1e 	bne	r16,zero,800c1b0 <___vfprintf_internal_r+0x226c>
 800a538:	9080020c 	andi	r2,r18,8
 800a53c:	1004af26 	beq	r2,zero,800b7fc <___vfprintf_internal_r+0x18b8>
 800a540:	d9002e17 	ldw	r4,184(sp)
 800a544:	d9402e17 	ldw	r5,184(sp)
 800a548:	d8802e17 	ldw	r2,184(sp)
 800a54c:	21000017 	ldw	r4,0(r4)
 800a550:	29400117 	ldw	r5,4(r5)
 800a554:	10800204 	addi	r2,r2,8
 800a558:	d9003615 	stw	r4,216(sp)
 800a55c:	d9403815 	stw	r5,224(sp)
 800a560:	d8802e15 	stw	r2,184(sp)
 800a564:	d9003617 	ldw	r4,216(sp)
 800a568:	d9403817 	ldw	r5,224(sp)
 800a56c:	da003d15 	stw	r8,244(sp)
 800a570:	04000044 	movi	r16,1
 800a574:	80109840 	call	8010984 <__fpclassifyd>
 800a578:	da003d17 	ldw	r8,244(sp)
 800a57c:	1404441e 	bne	r2,r16,800b690 <___vfprintf_internal_r+0x174c>
 800a580:	d9003617 	ldw	r4,216(sp)
 800a584:	d9403817 	ldw	r5,224(sp)
 800a588:	000d883a 	mov	r6,zero
 800a58c:	000f883a 	mov	r7,zero
 800a590:	80148940 	call	8014894 <__ledf2>
 800a594:	da003d17 	ldw	r8,244(sp)
 800a598:	1005e316 	blt	r2,zero,800bd28 <___vfprintf_internal_r+0x1de4>
 800a59c:	df002783 	ldbu	fp,158(sp)
 800a5a0:	008011c4 	movi	r2,71
 800a5a4:	1445580e 	bge	r2,r17,800bb08 <___vfprintf_internal_r+0x1bc4>
 800a5a8:	040200b4 	movhi	r16,2050
 800a5ac:	84285304 	addi	r16,r16,-24244
 800a5b0:	00c000c4 	movi	r3,3
 800a5b4:	00bfdfc4 	movi	r2,-129
 800a5b8:	d8c02915 	stw	r3,164(sp)
 800a5bc:	90a4703a 	and	r18,r18,r2
 800a5c0:	d8c02b15 	stw	r3,172(sp)
 800a5c4:	d8002a15 	stw	zero,168(sp)
 800a5c8:	d8003215 	stw	zero,200(sp)
 800a5cc:	00003a06 	br	800a6b8 <___vfprintf_internal_r+0x774>
 800a5d0:	84000214 	ori	r16,r16,8
 800a5d4:	ac400007 	ldb	r17,0(r21)
 800a5d8:	003ebc06 	br	800a0cc <___vfprintf_internal_r+0x188>
 800a5dc:	8025883a 	mov	r18,r16
 800a5e0:	dc002903 	ldbu	r16,164(sp)
 800a5e4:	e011883a 	mov	r8,fp
 800a5e8:	84003fcc 	andi	r16,r16,255
 800a5ec:	8007001e 	bne	r16,zero,800c1f0 <___vfprintf_internal_r+0x22ac>
 800a5f0:	94800414 	ori	r18,r18,16
 800a5f4:	9080080c 	andi	r2,r18,32
 800a5f8:	1002fa26 	beq	r2,zero,800b1e4 <___vfprintf_internal_r+0x12a0>
 800a5fc:	d9002e17 	ldw	r4,184(sp)
 800a600:	d9402a17 	ldw	r5,168(sp)
 800a604:	d8002785 	stb	zero,158(sp)
 800a608:	20800204 	addi	r2,r4,8
 800a60c:	24c00017 	ldw	r19,0(r4)
 800a610:	25800117 	ldw	r22,4(r4)
 800a614:	2804b116 	blt	r5,zero,800b8dc <___vfprintf_internal_r+0x1998>
 800a618:	013fdfc4 	movi	r4,-129
 800a61c:	9d86b03a 	or	r3,r19,r22
 800a620:	d8802e15 	stw	r2,184(sp)
 800a624:	9124703a 	and	r18,r18,r4
 800a628:	1802fb1e 	bne	r3,zero,800b218 <___vfprintf_internal_r+0x12d4>
 800a62c:	d8c02a17 	ldw	r3,168(sp)
 800a630:	0039883a 	mov	fp,zero
 800a634:	1805e526 	beq	r3,zero,800bdcc <___vfprintf_internal_r+0x1e88>
 800a638:	0027883a 	mov	r19,zero
 800a63c:	002d883a 	mov	r22,zero
 800a640:	dc001e04 	addi	r16,sp,120
 800a644:	9806d0fa 	srli	r3,r19,3
 800a648:	b008977a 	slli	r4,r22,29
 800a64c:	b02cd0fa 	srli	r22,r22,3
 800a650:	9cc001cc 	andi	r19,r19,7
 800a654:	98800c04 	addi	r2,r19,48
 800a658:	843fffc4 	addi	r16,r16,-1
 800a65c:	20e6b03a 	or	r19,r4,r3
 800a660:	80800005 	stb	r2,0(r16)
 800a664:	9d86b03a 	or	r3,r19,r22
 800a668:	183ff61e 	bne	r3,zero,800a644 <___vfprintf_internal_r+0x700>
 800a66c:	90c0004c 	andi	r3,r18,1
 800a670:	18014126 	beq	r3,zero,800ab78 <___vfprintf_internal_r+0xc34>
 800a674:	10803fcc 	andi	r2,r2,255
 800a678:	1080201c 	xori	r2,r2,128
 800a67c:	10bfe004 	addi	r2,r2,-128
 800a680:	00c00c04 	movi	r3,48
 800a684:	10c13c26 	beq	r2,r3,800ab78 <___vfprintf_internal_r+0xc34>
 800a688:	80ffffc5 	stb	r3,-1(r16)
 800a68c:	d8c02817 	ldw	r3,160(sp)
 800a690:	80bfffc4 	addi	r2,r16,-1
 800a694:	1021883a 	mov	r16,r2
 800a698:	1887c83a 	sub	r3,r3,r2
 800a69c:	d8c02b15 	stw	r3,172(sp)
 800a6a0:	d8802b17 	ldw	r2,172(sp)
 800a6a4:	d9002a17 	ldw	r4,168(sp)
 800a6a8:	1100010e 	bge	r2,r4,800a6b0 <___vfprintf_internal_r+0x76c>
 800a6ac:	2005883a 	mov	r2,r4
 800a6b0:	d8802915 	stw	r2,164(sp)
 800a6b4:	d8003215 	stw	zero,200(sp)
 800a6b8:	e7003fcc 	andi	fp,fp,255
 800a6bc:	e700201c 	xori	fp,fp,128
 800a6c0:	e73fe004 	addi	fp,fp,-128
 800a6c4:	e0000326 	beq	fp,zero,800a6d4 <___vfprintf_internal_r+0x790>
 800a6c8:	d8c02917 	ldw	r3,164(sp)
 800a6cc:	18c00044 	addi	r3,r3,1
 800a6d0:	d8c02915 	stw	r3,164(sp)
 800a6d4:	90c0008c 	andi	r3,r18,2
 800a6d8:	d8c02c15 	stw	r3,176(sp)
 800a6dc:	18000326 	beq	r3,zero,800a6ec <___vfprintf_internal_r+0x7a8>
 800a6e0:	d8c02917 	ldw	r3,164(sp)
 800a6e4:	18c00084 	addi	r3,r3,2
 800a6e8:	d8c02915 	stw	r3,164(sp)
 800a6ec:	90c0210c 	andi	r3,r18,132
 800a6f0:	d8c03015 	stw	r3,192(sp)
 800a6f4:	1801c51e 	bne	r3,zero,800ae0c <___vfprintf_internal_r+0xec8>
 800a6f8:	d9003117 	ldw	r4,196(sp)
 800a6fc:	d8c02917 	ldw	r3,164(sp)
 800a700:	20e7c83a 	sub	r19,r4,r3
 800a704:	04c1c10e 	bge	zero,r19,800ae0c <___vfprintf_internal_r+0xec8>
 800a708:	02400404 	movi	r9,16
 800a70c:	d8c02017 	ldw	r3,128(sp)
 800a710:	d8801f17 	ldw	r2,124(sp)
 800a714:	4cc52f0e 	bge	r9,r19,800bbd4 <___vfprintf_internal_r+0x1c90>
 800a718:	014200b4 	movhi	r5,2050
 800a71c:	29686684 	addi	r5,r5,-24166
 800a720:	dc403b15 	stw	r17,236(sp)
 800a724:	d9403515 	stw	r5,212(sp)
 800a728:	9823883a 	mov	r17,r19
 800a72c:	482d883a 	mov	r22,r9
 800a730:	9027883a 	mov	r19,r18
 800a734:	070001c4 	movi	fp,7
 800a738:	8025883a 	mov	r18,r16
 800a73c:	dc002d17 	ldw	r16,180(sp)
 800a740:	00000306 	br	800a750 <___vfprintf_internal_r+0x80c>
 800a744:	8c7ffc04 	addi	r17,r17,-16
 800a748:	42000204 	addi	r8,r8,8
 800a74c:	b440130e 	bge	r22,r17,800a79c <___vfprintf_internal_r+0x858>
 800a750:	010200b4 	movhi	r4,2050
 800a754:	18c00404 	addi	r3,r3,16
 800a758:	10800044 	addi	r2,r2,1
 800a75c:	21286684 	addi	r4,r4,-24166
 800a760:	41000015 	stw	r4,0(r8)
 800a764:	45800115 	stw	r22,4(r8)
 800a768:	d8c02015 	stw	r3,128(sp)
 800a76c:	d8801f15 	stw	r2,124(sp)
 800a770:	e0bff40e 	bge	fp,r2,800a744 <___vfprintf_internal_r+0x800>
 800a774:	d9801e04 	addi	r6,sp,120
 800a778:	b80b883a 	mov	r5,r23
 800a77c:	8009883a 	mov	r4,r16
 800a780:	8010bd00 	call	8010bd0 <__sprint_r>
 800a784:	103ef31e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800a788:	8c7ffc04 	addi	r17,r17,-16
 800a78c:	d8c02017 	ldw	r3,128(sp)
 800a790:	d8801f17 	ldw	r2,124(sp)
 800a794:	da000404 	addi	r8,sp,16
 800a798:	b47fed16 	blt	r22,r17,800a750 <___vfprintf_internal_r+0x80c>
 800a79c:	9021883a 	mov	r16,r18
 800a7a0:	9825883a 	mov	r18,r19
 800a7a4:	8827883a 	mov	r19,r17
 800a7a8:	dc403b17 	ldw	r17,236(sp)
 800a7ac:	d9403517 	ldw	r5,212(sp)
 800a7b0:	98c7883a 	add	r3,r19,r3
 800a7b4:	10800044 	addi	r2,r2,1
 800a7b8:	41400015 	stw	r5,0(r8)
 800a7bc:	44c00115 	stw	r19,4(r8)
 800a7c0:	d8c02015 	stw	r3,128(sp)
 800a7c4:	d8801f15 	stw	r2,124(sp)
 800a7c8:	010001c4 	movi	r4,7
 800a7cc:	2082c516 	blt	r4,r2,800b2e4 <___vfprintf_internal_r+0x13a0>
 800a7d0:	df002787 	ldb	fp,158(sp)
 800a7d4:	42000204 	addi	r8,r8,8
 800a7d8:	e0000c26 	beq	fp,zero,800a80c <___vfprintf_internal_r+0x8c8>
 800a7dc:	d8801f17 	ldw	r2,124(sp)
 800a7e0:	d9002784 	addi	r4,sp,158
 800a7e4:	18c00044 	addi	r3,r3,1
 800a7e8:	10800044 	addi	r2,r2,1
 800a7ec:	41000015 	stw	r4,0(r8)
 800a7f0:	01000044 	movi	r4,1
 800a7f4:	41000115 	stw	r4,4(r8)
 800a7f8:	d8c02015 	stw	r3,128(sp)
 800a7fc:	d8801f15 	stw	r2,124(sp)
 800a800:	010001c4 	movi	r4,7
 800a804:	20825e16 	blt	r4,r2,800b180 <___vfprintf_internal_r+0x123c>
 800a808:	42000204 	addi	r8,r8,8
 800a80c:	d8802c17 	ldw	r2,176(sp)
 800a810:	10000c26 	beq	r2,zero,800a844 <___vfprintf_internal_r+0x900>
 800a814:	d8801f17 	ldw	r2,124(sp)
 800a818:	d9002704 	addi	r4,sp,156
 800a81c:	18c00084 	addi	r3,r3,2
 800a820:	10800044 	addi	r2,r2,1
 800a824:	41000015 	stw	r4,0(r8)
 800a828:	01000084 	movi	r4,2
 800a82c:	41000115 	stw	r4,4(r8)
 800a830:	d8c02015 	stw	r3,128(sp)
 800a834:	d8801f15 	stw	r2,124(sp)
 800a838:	010001c4 	movi	r4,7
 800a83c:	20825816 	blt	r4,r2,800b1a0 <___vfprintf_internal_r+0x125c>
 800a840:	42000204 	addi	r8,r8,8
 800a844:	d9003017 	ldw	r4,192(sp)
 800a848:	00802004 	movi	r2,128
 800a84c:	2081bb26 	beq	r4,r2,800af3c <___vfprintf_internal_r+0xff8>
 800a850:	d9402a17 	ldw	r5,168(sp)
 800a854:	d8802b17 	ldw	r2,172(sp)
 800a858:	28adc83a 	sub	r22,r5,r2
 800a85c:	0580310e 	bge	zero,r22,800a924 <___vfprintf_internal_r+0x9e0>
 800a860:	07000404 	movi	fp,16
 800a864:	d8801f17 	ldw	r2,124(sp)
 800a868:	e584360e 	bge	fp,r22,800b944 <___vfprintf_internal_r+0x1a00>
 800a86c:	014200b4 	movhi	r5,2050
 800a870:	29686284 	addi	r5,r5,-24182
 800a874:	dc402a15 	stw	r17,168(sp)
 800a878:	d9402c15 	stw	r5,176(sp)
 800a87c:	b023883a 	mov	r17,r22
 800a880:	04c001c4 	movi	r19,7
 800a884:	a82d883a 	mov	r22,r21
 800a888:	902b883a 	mov	r21,r18
 800a88c:	8025883a 	mov	r18,r16
 800a890:	dc002d17 	ldw	r16,180(sp)
 800a894:	00000306 	br	800a8a4 <___vfprintf_internal_r+0x960>
 800a898:	8c7ffc04 	addi	r17,r17,-16
 800a89c:	42000204 	addi	r8,r8,8
 800a8a0:	e440110e 	bge	fp,r17,800a8e8 <___vfprintf_internal_r+0x9a4>
 800a8a4:	18c00404 	addi	r3,r3,16
 800a8a8:	10800044 	addi	r2,r2,1
 800a8ac:	45000015 	stw	r20,0(r8)
 800a8b0:	47000115 	stw	fp,4(r8)
 800a8b4:	d8c02015 	stw	r3,128(sp)
 800a8b8:	d8801f15 	stw	r2,124(sp)
 800a8bc:	98bff60e 	bge	r19,r2,800a898 <___vfprintf_internal_r+0x954>
 800a8c0:	d9801e04 	addi	r6,sp,120
 800a8c4:	b80b883a 	mov	r5,r23
 800a8c8:	8009883a 	mov	r4,r16
 800a8cc:	8010bd00 	call	8010bd0 <__sprint_r>
 800a8d0:	103ea01e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800a8d4:	8c7ffc04 	addi	r17,r17,-16
 800a8d8:	d8c02017 	ldw	r3,128(sp)
 800a8dc:	d8801f17 	ldw	r2,124(sp)
 800a8e0:	da000404 	addi	r8,sp,16
 800a8e4:	e47fef16 	blt	fp,r17,800a8a4 <___vfprintf_internal_r+0x960>
 800a8e8:	9021883a 	mov	r16,r18
 800a8ec:	a825883a 	mov	r18,r21
 800a8f0:	b02b883a 	mov	r21,r22
 800a8f4:	882d883a 	mov	r22,r17
 800a8f8:	dc402a17 	ldw	r17,168(sp)
 800a8fc:	d9002c17 	ldw	r4,176(sp)
 800a900:	1d87883a 	add	r3,r3,r22
 800a904:	10800044 	addi	r2,r2,1
 800a908:	41000015 	stw	r4,0(r8)
 800a90c:	45800115 	stw	r22,4(r8)
 800a910:	d8c02015 	stw	r3,128(sp)
 800a914:	d8801f15 	stw	r2,124(sp)
 800a918:	010001c4 	movi	r4,7
 800a91c:	20821016 	blt	r4,r2,800b160 <___vfprintf_internal_r+0x121c>
 800a920:	42000204 	addi	r8,r8,8
 800a924:	9080400c 	andi	r2,r18,256
 800a928:	10013a1e 	bne	r2,zero,800ae14 <___vfprintf_internal_r+0xed0>
 800a92c:	d9402b17 	ldw	r5,172(sp)
 800a930:	d8801f17 	ldw	r2,124(sp)
 800a934:	44000015 	stw	r16,0(r8)
 800a938:	1947883a 	add	r3,r3,r5
 800a93c:	10800044 	addi	r2,r2,1
 800a940:	41400115 	stw	r5,4(r8)
 800a944:	d8c02015 	stw	r3,128(sp)
 800a948:	d8801f15 	stw	r2,124(sp)
 800a94c:	010001c4 	movi	r4,7
 800a950:	2081f516 	blt	r4,r2,800b128 <___vfprintf_internal_r+0x11e4>
 800a954:	42000204 	addi	r8,r8,8
 800a958:	9480010c 	andi	r18,r18,4
 800a95c:	90003226 	beq	r18,zero,800aa28 <___vfprintf_internal_r+0xae4>
 800a960:	d9403117 	ldw	r5,196(sp)
 800a964:	d8802917 	ldw	r2,164(sp)
 800a968:	28a1c83a 	sub	r16,r5,r2
 800a96c:	04002e0e 	bge	zero,r16,800aa28 <___vfprintf_internal_r+0xae4>
 800a970:	04400404 	movi	r17,16
 800a974:	d8801f17 	ldw	r2,124(sp)
 800a978:	8c04c40e 	bge	r17,r16,800bc8c <___vfprintf_internal_r+0x1d48>
 800a97c:	014200b4 	movhi	r5,2050
 800a980:	29686684 	addi	r5,r5,-24166
 800a984:	d9403515 	stw	r5,212(sp)
 800a988:	048001c4 	movi	r18,7
 800a98c:	dcc02d17 	ldw	r19,180(sp)
 800a990:	00000306 	br	800a9a0 <___vfprintf_internal_r+0xa5c>
 800a994:	843ffc04 	addi	r16,r16,-16
 800a998:	42000204 	addi	r8,r8,8
 800a99c:	8c00130e 	bge	r17,r16,800a9ec <___vfprintf_internal_r+0xaa8>
 800a9a0:	010200b4 	movhi	r4,2050
 800a9a4:	18c00404 	addi	r3,r3,16
 800a9a8:	10800044 	addi	r2,r2,1
 800a9ac:	21286684 	addi	r4,r4,-24166
 800a9b0:	41000015 	stw	r4,0(r8)
 800a9b4:	44400115 	stw	r17,4(r8)
 800a9b8:	d8c02015 	stw	r3,128(sp)
 800a9bc:	d8801f15 	stw	r2,124(sp)
 800a9c0:	90bff40e 	bge	r18,r2,800a994 <___vfprintf_internal_r+0xa50>
 800a9c4:	d9801e04 	addi	r6,sp,120
 800a9c8:	b80b883a 	mov	r5,r23
 800a9cc:	9809883a 	mov	r4,r19
 800a9d0:	8010bd00 	call	8010bd0 <__sprint_r>
 800a9d4:	103e5f1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800a9d8:	843ffc04 	addi	r16,r16,-16
 800a9dc:	d8c02017 	ldw	r3,128(sp)
 800a9e0:	d8801f17 	ldw	r2,124(sp)
 800a9e4:	da000404 	addi	r8,sp,16
 800a9e8:	8c3fed16 	blt	r17,r16,800a9a0 <___vfprintf_internal_r+0xa5c>
 800a9ec:	d9403517 	ldw	r5,212(sp)
 800a9f0:	1c07883a 	add	r3,r3,r16
 800a9f4:	10800044 	addi	r2,r2,1
 800a9f8:	41400015 	stw	r5,0(r8)
 800a9fc:	44000115 	stw	r16,4(r8)
 800aa00:	d8c02015 	stw	r3,128(sp)
 800aa04:	d8801f15 	stw	r2,124(sp)
 800aa08:	010001c4 	movi	r4,7
 800aa0c:	2080060e 	bge	r4,r2,800aa28 <___vfprintf_internal_r+0xae4>
 800aa10:	d9002d17 	ldw	r4,180(sp)
 800aa14:	d9801e04 	addi	r6,sp,120
 800aa18:	b80b883a 	mov	r5,r23
 800aa1c:	8010bd00 	call	8010bd0 <__sprint_r>
 800aa20:	103e4c1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800aa24:	d8c02017 	ldw	r3,128(sp)
 800aa28:	d8803117 	ldw	r2,196(sp)
 800aa2c:	d9002917 	ldw	r4,164(sp)
 800aa30:	1100010e 	bge	r2,r4,800aa38 <___vfprintf_internal_r+0xaf4>
 800aa34:	2005883a 	mov	r2,r4
 800aa38:	d9402f17 	ldw	r5,188(sp)
 800aa3c:	288b883a 	add	r5,r5,r2
 800aa40:	d9402f15 	stw	r5,188(sp)
 800aa44:	1801c01e 	bne	r3,zero,800b148 <___vfprintf_internal_r+0x1204>
 800aa48:	a8800007 	ldb	r2,0(r21)
 800aa4c:	d8001f15 	stw	zero,124(sp)
 800aa50:	da000404 	addi	r8,sp,16
 800aa54:	103d751e 	bne	r2,zero,800a02c <___vfprintf_internal_r+0xe8>
 800aa58:	a823883a 	mov	r17,r21
 800aa5c:	003d8b06 	br	800a08c <___vfprintf_internal_r+0x148>
 800aa60:	8025883a 	mov	r18,r16
 800aa64:	dc002903 	ldbu	r16,164(sp)
 800aa68:	e011883a 	mov	r8,fp
 800aa6c:	84003fcc 	andi	r16,r16,255
 800aa70:	8005e51e 	bne	r16,zero,800c208 <___vfprintf_internal_r+0x22c4>
 800aa74:	94800414 	ori	r18,r18,16
 800aa78:	9080080c 	andi	r2,r18,32
 800aa7c:	10022b26 	beq	r2,zero,800b32c <___vfprintf_internal_r+0x13e8>
 800aa80:	d9002e17 	ldw	r4,184(sp)
 800aa84:	d9402a17 	ldw	r5,168(sp)
 800aa88:	d8002785 	stb	zero,158(sp)
 800aa8c:	20c00204 	addi	r3,r4,8
 800aa90:	24c00017 	ldw	r19,0(r4)
 800aa94:	25800117 	ldw	r22,4(r4)
 800aa98:	28042e16 	blt	r5,zero,800bb54 <___vfprintf_internal_r+0x1c10>
 800aa9c:	013fdfc4 	movi	r4,-129
 800aaa0:	9d84b03a 	or	r2,r19,r22
 800aaa4:	d8c02e15 	stw	r3,184(sp)
 800aaa8:	9124703a 	and	r18,r18,r4
 800aaac:	0039883a 	mov	fp,zero
 800aab0:	103e801e 	bne	r2,zero,800a4b4 <___vfprintf_internal_r+0x570>
 800aab4:	d9002a17 	ldw	r4,168(sp)
 800aab8:	2002e01e 	bne	r4,zero,800b63c <___vfprintf_internal_r+0x16f8>
 800aabc:	d8002a15 	stw	zero,168(sp)
 800aac0:	d8002b15 	stw	zero,172(sp)
 800aac4:	dc001e04 	addi	r16,sp,120
 800aac8:	003ef506 	br	800a6a0 <___vfprintf_internal_r+0x75c>
 800aacc:	8025883a 	mov	r18,r16
 800aad0:	dc002903 	ldbu	r16,164(sp)
 800aad4:	e011883a 	mov	r8,fp
 800aad8:	84003fcc 	andi	r16,r16,255
 800aadc:	8005ba1e 	bne	r16,zero,800c1c8 <___vfprintf_internal_r+0x2284>
 800aae0:	010200b4 	movhi	r4,2050
 800aae4:	21285604 	addi	r4,r4,-24232
 800aae8:	d9003915 	stw	r4,228(sp)
 800aaec:	9080080c 	andi	r2,r18,32
 800aaf0:	10006126 	beq	r2,zero,800ac78 <___vfprintf_internal_r+0xd34>
 800aaf4:	d9402e17 	ldw	r5,184(sp)
 800aaf8:	2cc00017 	ldw	r19,0(r5)
 800aafc:	2d800117 	ldw	r22,4(r5)
 800ab00:	29400204 	addi	r5,r5,8
 800ab04:	d9402e15 	stw	r5,184(sp)
 800ab08:	9080004c 	andi	r2,r18,1
 800ab0c:	1001ac26 	beq	r2,zero,800b1c0 <___vfprintf_internal_r+0x127c>
 800ab10:	9d84b03a 	or	r2,r19,r22
 800ab14:	10038526 	beq	r2,zero,800b92c <___vfprintf_internal_r+0x19e8>
 800ab18:	d8c02a17 	ldw	r3,168(sp)
 800ab1c:	00800c04 	movi	r2,48
 800ab20:	d8802705 	stb	r2,156(sp)
 800ab24:	dc402745 	stb	r17,157(sp)
 800ab28:	d8002785 	stb	zero,158(sp)
 800ab2c:	90800094 	ori	r2,r18,2
 800ab30:	18047916 	blt	r3,zero,800bd18 <___vfprintf_internal_r+0x1dd4>
 800ab34:	00bfdfc4 	movi	r2,-129
 800ab38:	90a4703a 	and	r18,r18,r2
 800ab3c:	94800094 	ori	r18,r18,2
 800ab40:	0039883a 	mov	fp,zero
 800ab44:	d9003917 	ldw	r4,228(sp)
 800ab48:	dc001e04 	addi	r16,sp,120
 800ab4c:	988003cc 	andi	r2,r19,15
 800ab50:	b006973a 	slli	r3,r22,28
 800ab54:	2085883a 	add	r2,r4,r2
 800ab58:	9826d13a 	srli	r19,r19,4
 800ab5c:	10800003 	ldbu	r2,0(r2)
 800ab60:	b02cd13a 	srli	r22,r22,4
 800ab64:	843fffc4 	addi	r16,r16,-1
 800ab68:	1ce6b03a 	or	r19,r3,r19
 800ab6c:	80800005 	stb	r2,0(r16)
 800ab70:	9d84b03a 	or	r2,r19,r22
 800ab74:	103ff51e 	bne	r2,zero,800ab4c <___vfprintf_internal_r+0xc08>
 800ab78:	d8c02817 	ldw	r3,160(sp)
 800ab7c:	1c07c83a 	sub	r3,r3,r16
 800ab80:	d8c02b15 	stw	r3,172(sp)
 800ab84:	003ec606 	br	800a6a0 <___vfprintf_internal_r+0x75c>
 800ab88:	8025883a 	mov	r18,r16
 800ab8c:	dc002903 	ldbu	r16,164(sp)
 800ab90:	e011883a 	mov	r8,fp
 800ab94:	84003fcc 	andi	r16,r16,255
 800ab98:	803e9626 	beq	r16,zero,800a5f4 <___vfprintf_internal_r+0x6b0>
 800ab9c:	d8c02b03 	ldbu	r3,172(sp)
 800aba0:	d8c02785 	stb	r3,158(sp)
 800aba4:	003e9306 	br	800a5f4 <___vfprintf_internal_r+0x6b0>
 800aba8:	00c00044 	movi	r3,1
 800abac:	d8c02905 	stb	r3,164(sp)
 800abb0:	00c00ac4 	movi	r3,43
 800abb4:	d8c02b05 	stb	r3,172(sp)
 800abb8:	ac400007 	ldb	r17,0(r21)
 800abbc:	003d4306 	br	800a0cc <___vfprintf_internal_r+0x188>
 800abc0:	84000814 	ori	r16,r16,32
 800abc4:	ac400007 	ldb	r17,0(r21)
 800abc8:	003d4006 	br	800a0cc <___vfprintf_internal_r+0x188>
 800abcc:	d8802e17 	ldw	r2,184(sp)
 800abd0:	8025883a 	mov	r18,r16
 800abd4:	d8002785 	stb	zero,158(sp)
 800abd8:	14000017 	ldw	r16,0(r2)
 800abdc:	e011883a 	mov	r8,fp
 800abe0:	14c00104 	addi	r19,r2,4
 800abe4:	80042d26 	beq	r16,zero,800bc9c <___vfprintf_internal_r+0x1d58>
 800abe8:	d8c02a17 	ldw	r3,168(sp)
 800abec:	1803e416 	blt	r3,zero,800bb80 <___vfprintf_internal_r+0x1c3c>
 800abf0:	180d883a 	mov	r6,r3
 800abf4:	000b883a 	mov	r5,zero
 800abf8:	8009883a 	mov	r4,r16
 800abfc:	df003d15 	stw	fp,244(sp)
 800ac00:	800f0c80 	call	800f0c8 <memchr>
 800ac04:	da003d17 	ldw	r8,244(sp)
 800ac08:	10046826 	beq	r2,zero,800bdac <___vfprintf_internal_r+0x1e68>
 800ac0c:	1405c83a 	sub	r2,r2,r16
 800ac10:	d8802b15 	stw	r2,172(sp)
 800ac14:	1003e016 	blt	r2,zero,800bb98 <___vfprintf_internal_r+0x1c54>
 800ac18:	df002783 	ldbu	fp,158(sp)
 800ac1c:	d8802915 	stw	r2,164(sp)
 800ac20:	dcc02e15 	stw	r19,184(sp)
 800ac24:	d8002a15 	stw	zero,168(sp)
 800ac28:	d8003215 	stw	zero,200(sp)
 800ac2c:	003ea206 	br	800a6b8 <___vfprintf_internal_r+0x774>
 800ac30:	8025883a 	mov	r18,r16
 800ac34:	dc002903 	ldbu	r16,164(sp)
 800ac38:	e011883a 	mov	r8,fp
 800ac3c:	84003fcc 	andi	r16,r16,255
 800ac40:	803f8d26 	beq	r16,zero,800aa78 <___vfprintf_internal_r+0xb34>
 800ac44:	d8c02b03 	ldbu	r3,172(sp)
 800ac48:	d8c02785 	stb	r3,158(sp)
 800ac4c:	003f8a06 	br	800aa78 <___vfprintf_internal_r+0xb34>
 800ac50:	8025883a 	mov	r18,r16
 800ac54:	dc002903 	ldbu	r16,164(sp)
 800ac58:	e011883a 	mov	r8,fp
 800ac5c:	84003fcc 	andi	r16,r16,255
 800ac60:	8005661e 	bne	r16,zero,800c1fc <___vfprintf_internal_r+0x22b8>
 800ac64:	010200b4 	movhi	r4,2050
 800ac68:	21285b04 	addi	r4,r4,-24212
 800ac6c:	d9003915 	stw	r4,228(sp)
 800ac70:	9080080c 	andi	r2,r18,32
 800ac74:	103f9f1e 	bne	r2,zero,800aaf4 <___vfprintf_internal_r+0xbb0>
 800ac78:	9080040c 	andi	r2,r18,16
 800ac7c:	1002eb26 	beq	r2,zero,800b82c <___vfprintf_internal_r+0x18e8>
 800ac80:	d8802e17 	ldw	r2,184(sp)
 800ac84:	002d883a 	mov	r22,zero
 800ac88:	14c00017 	ldw	r19,0(r2)
 800ac8c:	10800104 	addi	r2,r2,4
 800ac90:	d8802e15 	stw	r2,184(sp)
 800ac94:	003f9c06 	br	800ab08 <___vfprintf_internal_r+0xbc4>
 800ac98:	d8802b07 	ldb	r2,172(sp)
 800ac9c:	1002e11e 	bne	r2,zero,800b824 <___vfprintf_internal_r+0x18e0>
 800aca0:	00c00044 	movi	r3,1
 800aca4:	d8c02905 	stb	r3,164(sp)
 800aca8:	00c00804 	movi	r3,32
 800acac:	d8c02b05 	stb	r3,172(sp)
 800acb0:	ac400007 	ldb	r17,0(r21)
 800acb4:	003d0506 	br	800a0cc <___vfprintf_internal_r+0x188>
 800acb8:	84000054 	ori	r16,r16,1
 800acbc:	ac400007 	ldb	r17,0(r21)
 800acc0:	003d0206 	br	800a0cc <___vfprintf_internal_r+0x188>
 800acc4:	8025883a 	mov	r18,r16
 800acc8:	dc002903 	ldbu	r16,164(sp)
 800accc:	e011883a 	mov	r8,fp
 800acd0:	84003fcc 	andi	r16,r16,255
 800acd4:	803de726 	beq	r16,zero,800a474 <___vfprintf_internal_r+0x530>
 800acd8:	d8c02b03 	ldbu	r3,172(sp)
 800acdc:	d8c02785 	stb	r3,158(sp)
 800ace0:	003de406 	br	800a474 <___vfprintf_internal_r+0x530>
 800ace4:	84001014 	ori	r16,r16,64
 800ace8:	ac400007 	ldb	r17,0(r21)
 800acec:	003cf706 	br	800a0cc <___vfprintf_internal_r+0x188>
 800acf0:	ac400007 	ldb	r17,0(r21)
 800acf4:	00801b04 	movi	r2,108
 800acf8:	88838f26 	beq	r17,r2,800bb38 <___vfprintf_internal_r+0x1bf4>
 800acfc:	84000414 	ori	r16,r16,16
 800ad00:	003cf206 	br	800a0cc <___vfprintf_internal_r+0x188>
 800ad04:	8025883a 	mov	r18,r16
 800ad08:	dc002903 	ldbu	r16,164(sp)
 800ad0c:	e011883a 	mov	r8,fp
 800ad10:	84003fcc 	andi	r16,r16,255
 800ad14:	80053f1e 	bne	r16,zero,800c214 <___vfprintf_internal_r+0x22d0>
 800ad18:	9080080c 	andi	r2,r18,32
 800ad1c:	1002d226 	beq	r2,zero,800b868 <___vfprintf_internal_r+0x1924>
 800ad20:	d9002e17 	ldw	r4,184(sp)
 800ad24:	d9402f17 	ldw	r5,188(sp)
 800ad28:	20800017 	ldw	r2,0(r4)
 800ad2c:	2807d7fa 	srai	r3,r5,31
 800ad30:	21000104 	addi	r4,r4,4
 800ad34:	d9002e15 	stw	r4,184(sp)
 800ad38:	11400015 	stw	r5,0(r2)
 800ad3c:	10c00115 	stw	r3,4(r2)
 800ad40:	003cb806 	br	800a024 <___vfprintf_internal_r+0xe0>
 800ad44:	d8c02e17 	ldw	r3,184(sp)
 800ad48:	d9002e17 	ldw	r4,184(sp)
 800ad4c:	8025883a 	mov	r18,r16
 800ad50:	18800017 	ldw	r2,0(r3)
 800ad54:	21000104 	addi	r4,r4,4
 800ad58:	00c00044 	movi	r3,1
 800ad5c:	e011883a 	mov	r8,fp
 800ad60:	d8c02915 	stw	r3,164(sp)
 800ad64:	d8002785 	stb	zero,158(sp)
 800ad68:	d8801405 	stb	r2,80(sp)
 800ad6c:	d9002e15 	stw	r4,184(sp)
 800ad70:	d8c02b15 	stw	r3,172(sp)
 800ad74:	d8002a15 	stw	zero,168(sp)
 800ad78:	d8003215 	stw	zero,200(sp)
 800ad7c:	dc001404 	addi	r16,sp,80
 800ad80:	0039883a 	mov	fp,zero
 800ad84:	003e5306 	br	800a6d4 <___vfprintf_internal_r+0x790>
 800ad88:	010200b4 	movhi	r4,2050
 800ad8c:	21285b04 	addi	r4,r4,-24212
 800ad90:	0039883a 	mov	fp,zero
 800ad94:	d9003915 	stw	r4,228(sp)
 800ad98:	04401e04 	movi	r17,120
 800ad9c:	003f6906 	br	800ab44 <___vfprintf_internal_r+0xc00>
 800ada0:	8025883a 	mov	r18,r16
 800ada4:	dc002903 	ldbu	r16,164(sp)
 800ada8:	e011883a 	mov	r8,fp
 800adac:	84003fcc 	andi	r16,r16,255
 800adb0:	8005081e 	bne	r16,zero,800c1d4 <___vfprintf_internal_r+0x2290>
 800adb4:	883d6126 	beq	r17,zero,800a33c <___vfprintf_internal_r+0x3f8>
 800adb8:	00c00044 	movi	r3,1
 800adbc:	d8c02915 	stw	r3,164(sp)
 800adc0:	dc401405 	stb	r17,80(sp)
 800adc4:	d8002785 	stb	zero,158(sp)
 800adc8:	003fe906 	br	800ad70 <___vfprintf_internal_r+0xe2c>
 800adcc:	014200b4 	movhi	r5,2050
 800add0:	29685b04 	addi	r5,r5,-24212
 800add4:	d9403915 	stw	r5,228(sp)
 800add8:	d8c02e15 	stw	r3,184(sp)
 800addc:	1025883a 	mov	r18,r2
 800ade0:	04401e04 	movi	r17,120
 800ade4:	9d84b03a 	or	r2,r19,r22
 800ade8:	1000fc1e 	bne	r2,zero,800b1dc <___vfprintf_internal_r+0x1298>
 800adec:	0039883a 	mov	fp,zero
 800adf0:	00800084 	movi	r2,2
 800adf4:	10803fcc 	andi	r2,r2,255
 800adf8:	00c00044 	movi	r3,1
 800adfc:	10c20f26 	beq	r2,r3,800b63c <___vfprintf_internal_r+0x16f8>
 800ae00:	00c00084 	movi	r3,2
 800ae04:	10fd3326 	beq	r2,r3,800a2d4 <___vfprintf_internal_r+0x390>
 800ae08:	003e0b06 	br	800a638 <___vfprintf_internal_r+0x6f4>
 800ae0c:	d8c02017 	ldw	r3,128(sp)
 800ae10:	003e7106 	br	800a7d8 <___vfprintf_internal_r+0x894>
 800ae14:	00801944 	movi	r2,101
 800ae18:	14407e0e 	bge	r2,r17,800b014 <___vfprintf_internal_r+0x10d0>
 800ae1c:	d9003617 	ldw	r4,216(sp)
 800ae20:	d9403817 	ldw	r5,224(sp)
 800ae24:	000d883a 	mov	r6,zero
 800ae28:	000f883a 	mov	r7,zero
 800ae2c:	d8c03c15 	stw	r3,240(sp)
 800ae30:	da003d15 	stw	r8,244(sp)
 800ae34:	80147300 	call	8014730 <__eqdf2>
 800ae38:	d8c03c17 	ldw	r3,240(sp)
 800ae3c:	da003d17 	ldw	r8,244(sp)
 800ae40:	1000f71e 	bne	r2,zero,800b220 <___vfprintf_internal_r+0x12dc>
 800ae44:	d8801f17 	ldw	r2,124(sp)
 800ae48:	010200b4 	movhi	r4,2050
 800ae4c:	21286204 	addi	r4,r4,-24184
 800ae50:	18c00044 	addi	r3,r3,1
 800ae54:	10800044 	addi	r2,r2,1
 800ae58:	41000015 	stw	r4,0(r8)
 800ae5c:	01000044 	movi	r4,1
 800ae60:	41000115 	stw	r4,4(r8)
 800ae64:	d8c02015 	stw	r3,128(sp)
 800ae68:	d8801f15 	stw	r2,124(sp)
 800ae6c:	010001c4 	movi	r4,7
 800ae70:	2082b816 	blt	r4,r2,800b954 <___vfprintf_internal_r+0x1a10>
 800ae74:	42000204 	addi	r8,r8,8
 800ae78:	d8802617 	ldw	r2,152(sp)
 800ae7c:	d9403317 	ldw	r5,204(sp)
 800ae80:	11400216 	blt	r2,r5,800ae8c <___vfprintf_internal_r+0xf48>
 800ae84:	9080004c 	andi	r2,r18,1
 800ae88:	103eb326 	beq	r2,zero,800a958 <___vfprintf_internal_r+0xa14>
 800ae8c:	d8803717 	ldw	r2,220(sp)
 800ae90:	d9003417 	ldw	r4,208(sp)
 800ae94:	d9403717 	ldw	r5,220(sp)
 800ae98:	1887883a 	add	r3,r3,r2
 800ae9c:	d8801f17 	ldw	r2,124(sp)
 800aea0:	41000015 	stw	r4,0(r8)
 800aea4:	41400115 	stw	r5,4(r8)
 800aea8:	10800044 	addi	r2,r2,1
 800aeac:	d8c02015 	stw	r3,128(sp)
 800aeb0:	d8801f15 	stw	r2,124(sp)
 800aeb4:	010001c4 	movi	r4,7
 800aeb8:	20832916 	blt	r4,r2,800bb60 <___vfprintf_internal_r+0x1c1c>
 800aebc:	42000204 	addi	r8,r8,8
 800aec0:	d8803317 	ldw	r2,204(sp)
 800aec4:	143fffc4 	addi	r16,r2,-1
 800aec8:	043ea30e 	bge	zero,r16,800a958 <___vfprintf_internal_r+0xa14>
 800aecc:	04400404 	movi	r17,16
 800aed0:	d8801f17 	ldw	r2,124(sp)
 800aed4:	8c00880e 	bge	r17,r16,800b0f8 <___vfprintf_internal_r+0x11b4>
 800aed8:	014200b4 	movhi	r5,2050
 800aedc:	29686284 	addi	r5,r5,-24182
 800aee0:	d9402c15 	stw	r5,176(sp)
 800aee4:	058001c4 	movi	r22,7
 800aee8:	dcc02d17 	ldw	r19,180(sp)
 800aeec:	00000306 	br	800aefc <___vfprintf_internal_r+0xfb8>
 800aef0:	42000204 	addi	r8,r8,8
 800aef4:	843ffc04 	addi	r16,r16,-16
 800aef8:	8c00820e 	bge	r17,r16,800b104 <___vfprintf_internal_r+0x11c0>
 800aefc:	18c00404 	addi	r3,r3,16
 800af00:	10800044 	addi	r2,r2,1
 800af04:	45000015 	stw	r20,0(r8)
 800af08:	44400115 	stw	r17,4(r8)
 800af0c:	d8c02015 	stw	r3,128(sp)
 800af10:	d8801f15 	stw	r2,124(sp)
 800af14:	b0bff60e 	bge	r22,r2,800aef0 <___vfprintf_internal_r+0xfac>
 800af18:	d9801e04 	addi	r6,sp,120
 800af1c:	b80b883a 	mov	r5,r23
 800af20:	9809883a 	mov	r4,r19
 800af24:	8010bd00 	call	8010bd0 <__sprint_r>
 800af28:	103d0a1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800af2c:	d8c02017 	ldw	r3,128(sp)
 800af30:	d8801f17 	ldw	r2,124(sp)
 800af34:	da000404 	addi	r8,sp,16
 800af38:	003fee06 	br	800aef4 <___vfprintf_internal_r+0xfb0>
 800af3c:	d9403117 	ldw	r5,196(sp)
 800af40:	d8802917 	ldw	r2,164(sp)
 800af44:	28adc83a 	sub	r22,r5,r2
 800af48:	05be410e 	bge	zero,r22,800a850 <___vfprintf_internal_r+0x90c>
 800af4c:	07000404 	movi	fp,16
 800af50:	d8801f17 	ldw	r2,124(sp)
 800af54:	e5838f0e 	bge	fp,r22,800bd94 <___vfprintf_internal_r+0x1e50>
 800af58:	014200b4 	movhi	r5,2050
 800af5c:	29686284 	addi	r5,r5,-24182
 800af60:	dc403015 	stw	r17,192(sp)
 800af64:	d9402c15 	stw	r5,176(sp)
 800af68:	b023883a 	mov	r17,r22
 800af6c:	04c001c4 	movi	r19,7
 800af70:	a82d883a 	mov	r22,r21
 800af74:	902b883a 	mov	r21,r18
 800af78:	8025883a 	mov	r18,r16
 800af7c:	dc002d17 	ldw	r16,180(sp)
 800af80:	00000306 	br	800af90 <___vfprintf_internal_r+0x104c>
 800af84:	8c7ffc04 	addi	r17,r17,-16
 800af88:	42000204 	addi	r8,r8,8
 800af8c:	e440110e 	bge	fp,r17,800afd4 <___vfprintf_internal_r+0x1090>
 800af90:	18c00404 	addi	r3,r3,16
 800af94:	10800044 	addi	r2,r2,1
 800af98:	45000015 	stw	r20,0(r8)
 800af9c:	47000115 	stw	fp,4(r8)
 800afa0:	d8c02015 	stw	r3,128(sp)
 800afa4:	d8801f15 	stw	r2,124(sp)
 800afa8:	98bff60e 	bge	r19,r2,800af84 <___vfprintf_internal_r+0x1040>
 800afac:	d9801e04 	addi	r6,sp,120
 800afb0:	b80b883a 	mov	r5,r23
 800afb4:	8009883a 	mov	r4,r16
 800afb8:	8010bd00 	call	8010bd0 <__sprint_r>
 800afbc:	103ce51e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800afc0:	8c7ffc04 	addi	r17,r17,-16
 800afc4:	d8c02017 	ldw	r3,128(sp)
 800afc8:	d8801f17 	ldw	r2,124(sp)
 800afcc:	da000404 	addi	r8,sp,16
 800afd0:	e47fef16 	blt	fp,r17,800af90 <___vfprintf_internal_r+0x104c>
 800afd4:	9021883a 	mov	r16,r18
 800afd8:	a825883a 	mov	r18,r21
 800afdc:	b02b883a 	mov	r21,r22
 800afe0:	882d883a 	mov	r22,r17
 800afe4:	dc403017 	ldw	r17,192(sp)
 800afe8:	d9002c17 	ldw	r4,176(sp)
 800afec:	1d87883a 	add	r3,r3,r22
 800aff0:	10800044 	addi	r2,r2,1
 800aff4:	41000015 	stw	r4,0(r8)
 800aff8:	45800115 	stw	r22,4(r8)
 800affc:	d8c02015 	stw	r3,128(sp)
 800b000:	d8801f15 	stw	r2,124(sp)
 800b004:	010001c4 	movi	r4,7
 800b008:	20818e16 	blt	r4,r2,800b644 <___vfprintf_internal_r+0x1700>
 800b00c:	42000204 	addi	r8,r8,8
 800b010:	003e0f06 	br	800a850 <___vfprintf_internal_r+0x90c>
 800b014:	d9403317 	ldw	r5,204(sp)
 800b018:	00800044 	movi	r2,1
 800b01c:	18c00044 	addi	r3,r3,1
 800b020:	1141530e 	bge	r2,r5,800b570 <___vfprintf_internal_r+0x162c>
 800b024:	dc401f17 	ldw	r17,124(sp)
 800b028:	00800044 	movi	r2,1
 800b02c:	40800115 	stw	r2,4(r8)
 800b030:	8c400044 	addi	r17,r17,1
 800b034:	44000015 	stw	r16,0(r8)
 800b038:	d8c02015 	stw	r3,128(sp)
 800b03c:	dc401f15 	stw	r17,124(sp)
 800b040:	008001c4 	movi	r2,7
 800b044:	14416b16 	blt	r2,r17,800b5f4 <___vfprintf_internal_r+0x16b0>
 800b048:	42000204 	addi	r8,r8,8
 800b04c:	d8803717 	ldw	r2,220(sp)
 800b050:	d9003417 	ldw	r4,208(sp)
 800b054:	8c400044 	addi	r17,r17,1
 800b058:	10c7883a 	add	r3,r2,r3
 800b05c:	40800115 	stw	r2,4(r8)
 800b060:	41000015 	stw	r4,0(r8)
 800b064:	d8c02015 	stw	r3,128(sp)
 800b068:	dc401f15 	stw	r17,124(sp)
 800b06c:	008001c4 	movi	r2,7
 800b070:	14416916 	blt	r2,r17,800b618 <___vfprintf_internal_r+0x16d4>
 800b074:	45800204 	addi	r22,r8,8
 800b078:	d9003617 	ldw	r4,216(sp)
 800b07c:	d9403817 	ldw	r5,224(sp)
 800b080:	000d883a 	mov	r6,zero
 800b084:	000f883a 	mov	r7,zero
 800b088:	d8c03c15 	stw	r3,240(sp)
 800b08c:	80147300 	call	8014730 <__eqdf2>
 800b090:	d8c03c17 	ldw	r3,240(sp)
 800b094:	1000bc26 	beq	r2,zero,800b388 <___vfprintf_internal_r+0x1444>
 800b098:	d9403317 	ldw	r5,204(sp)
 800b09c:	84000044 	addi	r16,r16,1
 800b0a0:	8c400044 	addi	r17,r17,1
 800b0a4:	28bfffc4 	addi	r2,r5,-1
 800b0a8:	1887883a 	add	r3,r3,r2
 800b0ac:	b0800115 	stw	r2,4(r22)
 800b0b0:	b4000015 	stw	r16,0(r22)
 800b0b4:	d8c02015 	stw	r3,128(sp)
 800b0b8:	dc401f15 	stw	r17,124(sp)
 800b0bc:	008001c4 	movi	r2,7
 800b0c0:	14414316 	blt	r2,r17,800b5d0 <___vfprintf_internal_r+0x168c>
 800b0c4:	b5800204 	addi	r22,r22,8
 800b0c8:	d9003a17 	ldw	r4,232(sp)
 800b0cc:	df0022c4 	addi	fp,sp,139
 800b0d0:	8c400044 	addi	r17,r17,1
 800b0d4:	20c7883a 	add	r3,r4,r3
 800b0d8:	b7000015 	stw	fp,0(r22)
 800b0dc:	b1000115 	stw	r4,4(r22)
 800b0e0:	d8c02015 	stw	r3,128(sp)
 800b0e4:	dc401f15 	stw	r17,124(sp)
 800b0e8:	008001c4 	movi	r2,7
 800b0ec:	14400e16 	blt	r2,r17,800b128 <___vfprintf_internal_r+0x11e4>
 800b0f0:	b2000204 	addi	r8,r22,8
 800b0f4:	003e1806 	br	800a958 <___vfprintf_internal_r+0xa14>
 800b0f8:	010200b4 	movhi	r4,2050
 800b0fc:	21286284 	addi	r4,r4,-24182
 800b100:	d9002c15 	stw	r4,176(sp)
 800b104:	d9002c17 	ldw	r4,176(sp)
 800b108:	1c07883a 	add	r3,r3,r16
 800b10c:	44000115 	stw	r16,4(r8)
 800b110:	41000015 	stw	r4,0(r8)
 800b114:	10800044 	addi	r2,r2,1
 800b118:	d8c02015 	stw	r3,128(sp)
 800b11c:	d8801f15 	stw	r2,124(sp)
 800b120:	010001c4 	movi	r4,7
 800b124:	20be0b0e 	bge	r4,r2,800a954 <___vfprintf_internal_r+0xa10>
 800b128:	d9002d17 	ldw	r4,180(sp)
 800b12c:	d9801e04 	addi	r6,sp,120
 800b130:	b80b883a 	mov	r5,r23
 800b134:	8010bd00 	call	8010bd0 <__sprint_r>
 800b138:	103c861e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b13c:	d8c02017 	ldw	r3,128(sp)
 800b140:	da000404 	addi	r8,sp,16
 800b144:	003e0406 	br	800a958 <___vfprintf_internal_r+0xa14>
 800b148:	d9002d17 	ldw	r4,180(sp)
 800b14c:	d9801e04 	addi	r6,sp,120
 800b150:	b80b883a 	mov	r5,r23
 800b154:	8010bd00 	call	8010bd0 <__sprint_r>
 800b158:	103e3b26 	beq	r2,zero,800aa48 <___vfprintf_internal_r+0xb04>
 800b15c:	003c7d06 	br	800a354 <___vfprintf_internal_r+0x410>
 800b160:	d9002d17 	ldw	r4,180(sp)
 800b164:	d9801e04 	addi	r6,sp,120
 800b168:	b80b883a 	mov	r5,r23
 800b16c:	8010bd00 	call	8010bd0 <__sprint_r>
 800b170:	103c781e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b174:	d8c02017 	ldw	r3,128(sp)
 800b178:	da000404 	addi	r8,sp,16
 800b17c:	003de906 	br	800a924 <___vfprintf_internal_r+0x9e0>
 800b180:	d9002d17 	ldw	r4,180(sp)
 800b184:	d9801e04 	addi	r6,sp,120
 800b188:	b80b883a 	mov	r5,r23
 800b18c:	8010bd00 	call	8010bd0 <__sprint_r>
 800b190:	103c701e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b194:	d8c02017 	ldw	r3,128(sp)
 800b198:	da000404 	addi	r8,sp,16
 800b19c:	003d9b06 	br	800a80c <___vfprintf_internal_r+0x8c8>
 800b1a0:	d9002d17 	ldw	r4,180(sp)
 800b1a4:	d9801e04 	addi	r6,sp,120
 800b1a8:	b80b883a 	mov	r5,r23
 800b1ac:	8010bd00 	call	8010bd0 <__sprint_r>
 800b1b0:	103c681e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b1b4:	d8c02017 	ldw	r3,128(sp)
 800b1b8:	da000404 	addi	r8,sp,16
 800b1bc:	003da106 	br	800a844 <___vfprintf_internal_r+0x900>
 800b1c0:	d9402a17 	ldw	r5,168(sp)
 800b1c4:	d8002785 	stb	zero,158(sp)
 800b1c8:	283f0616 	blt	r5,zero,800ade4 <___vfprintf_internal_r+0xea0>
 800b1cc:	00ffdfc4 	movi	r3,-129
 800b1d0:	9d84b03a 	or	r2,r19,r22
 800b1d4:	90e4703a 	and	r18,r18,r3
 800b1d8:	103c3b26 	beq	r2,zero,800a2c8 <___vfprintf_internal_r+0x384>
 800b1dc:	0039883a 	mov	fp,zero
 800b1e0:	003e5806 	br	800ab44 <___vfprintf_internal_r+0xc00>
 800b1e4:	9080040c 	andi	r2,r18,16
 800b1e8:	1001b326 	beq	r2,zero,800b8b8 <___vfprintf_internal_r+0x1974>
 800b1ec:	d8c02e17 	ldw	r3,184(sp)
 800b1f0:	d9002a17 	ldw	r4,168(sp)
 800b1f4:	d8002785 	stb	zero,158(sp)
 800b1f8:	18800104 	addi	r2,r3,4
 800b1fc:	1cc00017 	ldw	r19,0(r3)
 800b200:	002d883a 	mov	r22,zero
 800b204:	2001b516 	blt	r4,zero,800b8dc <___vfprintf_internal_r+0x1998>
 800b208:	00ffdfc4 	movi	r3,-129
 800b20c:	d8802e15 	stw	r2,184(sp)
 800b210:	90e4703a 	and	r18,r18,r3
 800b214:	983d0526 	beq	r19,zero,800a62c <___vfprintf_internal_r+0x6e8>
 800b218:	0039883a 	mov	fp,zero
 800b21c:	003d0806 	br	800a640 <___vfprintf_internal_r+0x6fc>
 800b220:	dc402617 	ldw	r17,152(sp)
 800b224:	0441d30e 	bge	zero,r17,800b974 <___vfprintf_internal_r+0x1a30>
 800b228:	dc403217 	ldw	r17,200(sp)
 800b22c:	d8803317 	ldw	r2,204(sp)
 800b230:	1440010e 	bge	r2,r17,800b238 <___vfprintf_internal_r+0x12f4>
 800b234:	1023883a 	mov	r17,r2
 800b238:	04400a0e 	bge	zero,r17,800b264 <___vfprintf_internal_r+0x1320>
 800b23c:	d8801f17 	ldw	r2,124(sp)
 800b240:	1c47883a 	add	r3,r3,r17
 800b244:	44000015 	stw	r16,0(r8)
 800b248:	10800044 	addi	r2,r2,1
 800b24c:	44400115 	stw	r17,4(r8)
 800b250:	d8c02015 	stw	r3,128(sp)
 800b254:	d8801f15 	stw	r2,124(sp)
 800b258:	010001c4 	movi	r4,7
 800b25c:	20826516 	blt	r4,r2,800bbf4 <___vfprintf_internal_r+0x1cb0>
 800b260:	42000204 	addi	r8,r8,8
 800b264:	88026116 	blt	r17,zero,800bbec <___vfprintf_internal_r+0x1ca8>
 800b268:	d9003217 	ldw	r4,200(sp)
 800b26c:	2463c83a 	sub	r17,r4,r17
 800b270:	04407b0e 	bge	zero,r17,800b460 <___vfprintf_internal_r+0x151c>
 800b274:	05800404 	movi	r22,16
 800b278:	d8801f17 	ldw	r2,124(sp)
 800b27c:	b4419d0e 	bge	r22,r17,800b8f4 <___vfprintf_internal_r+0x19b0>
 800b280:	010200b4 	movhi	r4,2050
 800b284:	21286284 	addi	r4,r4,-24182
 800b288:	d9002c15 	stw	r4,176(sp)
 800b28c:	070001c4 	movi	fp,7
 800b290:	dcc02d17 	ldw	r19,180(sp)
 800b294:	00000306 	br	800b2a4 <___vfprintf_internal_r+0x1360>
 800b298:	42000204 	addi	r8,r8,8
 800b29c:	8c7ffc04 	addi	r17,r17,-16
 800b2a0:	b441970e 	bge	r22,r17,800b900 <___vfprintf_internal_r+0x19bc>
 800b2a4:	18c00404 	addi	r3,r3,16
 800b2a8:	10800044 	addi	r2,r2,1
 800b2ac:	45000015 	stw	r20,0(r8)
 800b2b0:	45800115 	stw	r22,4(r8)
 800b2b4:	d8c02015 	stw	r3,128(sp)
 800b2b8:	d8801f15 	stw	r2,124(sp)
 800b2bc:	e0bff60e 	bge	fp,r2,800b298 <___vfprintf_internal_r+0x1354>
 800b2c0:	d9801e04 	addi	r6,sp,120
 800b2c4:	b80b883a 	mov	r5,r23
 800b2c8:	9809883a 	mov	r4,r19
 800b2cc:	8010bd00 	call	8010bd0 <__sprint_r>
 800b2d0:	103c201e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b2d4:	d8c02017 	ldw	r3,128(sp)
 800b2d8:	d8801f17 	ldw	r2,124(sp)
 800b2dc:	da000404 	addi	r8,sp,16
 800b2e0:	003fee06 	br	800b29c <___vfprintf_internal_r+0x1358>
 800b2e4:	d9002d17 	ldw	r4,180(sp)
 800b2e8:	d9801e04 	addi	r6,sp,120
 800b2ec:	b80b883a 	mov	r5,r23
 800b2f0:	8010bd00 	call	8010bd0 <__sprint_r>
 800b2f4:	103c171e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b2f8:	d8c02017 	ldw	r3,128(sp)
 800b2fc:	df002787 	ldb	fp,158(sp)
 800b300:	da000404 	addi	r8,sp,16
 800b304:	003d3406 	br	800a7d8 <___vfprintf_internal_r+0x894>
 800b308:	9080040c 	andi	r2,r18,16
 800b30c:	10016126 	beq	r2,zero,800b894 <___vfprintf_internal_r+0x1950>
 800b310:	d9402e17 	ldw	r5,184(sp)
 800b314:	2cc00017 	ldw	r19,0(r5)
 800b318:	29400104 	addi	r5,r5,4
 800b31c:	d9402e15 	stw	r5,184(sp)
 800b320:	982dd7fa 	srai	r22,r19,31
 800b324:	b005883a 	mov	r2,r22
 800b328:	003c5a06 	br	800a494 <___vfprintf_internal_r+0x550>
 800b32c:	9080040c 	andi	r2,r18,16
 800b330:	10003526 	beq	r2,zero,800b408 <___vfprintf_internal_r+0x14c4>
 800b334:	d8c02e17 	ldw	r3,184(sp)
 800b338:	d9002a17 	ldw	r4,168(sp)
 800b33c:	d8002785 	stb	zero,158(sp)
 800b340:	18800104 	addi	r2,r3,4
 800b344:	1cc00017 	ldw	r19,0(r3)
 800b348:	002d883a 	mov	r22,zero
 800b34c:	20003716 	blt	r4,zero,800b42c <___vfprintf_internal_r+0x14e8>
 800b350:	00ffdfc4 	movi	r3,-129
 800b354:	d8802e15 	stw	r2,184(sp)
 800b358:	90e4703a 	and	r18,r18,r3
 800b35c:	0039883a 	mov	fp,zero
 800b360:	983dd426 	beq	r19,zero,800aab4 <___vfprintf_internal_r+0xb70>
 800b364:	00800244 	movi	r2,9
 800b368:	14fc5336 	bltu	r2,r19,800a4b8 <___vfprintf_internal_r+0x574>
 800b36c:	d8c02817 	ldw	r3,160(sp)
 800b370:	dc001dc4 	addi	r16,sp,119
 800b374:	9cc00c04 	addi	r19,r19,48
 800b378:	1c07c83a 	sub	r3,r3,r16
 800b37c:	dcc01dc5 	stb	r19,119(sp)
 800b380:	d8c02b15 	stw	r3,172(sp)
 800b384:	003cc606 	br	800a6a0 <___vfprintf_internal_r+0x75c>
 800b388:	d8803317 	ldw	r2,204(sp)
 800b38c:	143fffc4 	addi	r16,r2,-1
 800b390:	043f4d0e 	bge	zero,r16,800b0c8 <___vfprintf_internal_r+0x1184>
 800b394:	07000404 	movi	fp,16
 800b398:	e400810e 	bge	fp,r16,800b5a0 <___vfprintf_internal_r+0x165c>
 800b39c:	014200b4 	movhi	r5,2050
 800b3a0:	29686284 	addi	r5,r5,-24182
 800b3a4:	d9402c15 	stw	r5,176(sp)
 800b3a8:	01c001c4 	movi	r7,7
 800b3ac:	dcc02d17 	ldw	r19,180(sp)
 800b3b0:	00000306 	br	800b3c0 <___vfprintf_internal_r+0x147c>
 800b3b4:	b5800204 	addi	r22,r22,8
 800b3b8:	843ffc04 	addi	r16,r16,-16
 800b3bc:	e4007b0e 	bge	fp,r16,800b5ac <___vfprintf_internal_r+0x1668>
 800b3c0:	18c00404 	addi	r3,r3,16
 800b3c4:	8c400044 	addi	r17,r17,1
 800b3c8:	b5000015 	stw	r20,0(r22)
 800b3cc:	b7000115 	stw	fp,4(r22)
 800b3d0:	d8c02015 	stw	r3,128(sp)
 800b3d4:	dc401f15 	stw	r17,124(sp)
 800b3d8:	3c7ff60e 	bge	r7,r17,800b3b4 <___vfprintf_internal_r+0x1470>
 800b3dc:	d9801e04 	addi	r6,sp,120
 800b3e0:	b80b883a 	mov	r5,r23
 800b3e4:	9809883a 	mov	r4,r19
 800b3e8:	d9c03c15 	stw	r7,240(sp)
 800b3ec:	8010bd00 	call	8010bd0 <__sprint_r>
 800b3f0:	d9c03c17 	ldw	r7,240(sp)
 800b3f4:	103bd71e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b3f8:	d8c02017 	ldw	r3,128(sp)
 800b3fc:	dc401f17 	ldw	r17,124(sp)
 800b400:	dd800404 	addi	r22,sp,16
 800b404:	003fec06 	br	800b3b8 <___vfprintf_internal_r+0x1474>
 800b408:	9080100c 	andi	r2,r18,64
 800b40c:	d8002785 	stb	zero,158(sp)
 800b410:	10010e26 	beq	r2,zero,800b84c <___vfprintf_internal_r+0x1908>
 800b414:	d9402e17 	ldw	r5,184(sp)
 800b418:	d8c02a17 	ldw	r3,168(sp)
 800b41c:	002d883a 	mov	r22,zero
 800b420:	28800104 	addi	r2,r5,4
 800b424:	2cc0000b 	ldhu	r19,0(r5)
 800b428:	183fc90e 	bge	r3,zero,800b350 <___vfprintf_internal_r+0x140c>
 800b42c:	d8802e15 	stw	r2,184(sp)
 800b430:	0039883a 	mov	fp,zero
 800b434:	9d84b03a 	or	r2,r19,r22
 800b438:	103c1e1e 	bne	r2,zero,800a4b4 <___vfprintf_internal_r+0x570>
 800b43c:	00800044 	movi	r2,1
 800b440:	003e6c06 	br	800adf4 <___vfprintf_internal_r+0xeb0>
 800b444:	d9002d17 	ldw	r4,180(sp)
 800b448:	d9801e04 	addi	r6,sp,120
 800b44c:	b80b883a 	mov	r5,r23
 800b450:	8010bd00 	call	8010bd0 <__sprint_r>
 800b454:	103bbf1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b458:	d8c02017 	ldw	r3,128(sp)
 800b45c:	da000404 	addi	r8,sp,16
 800b460:	d9003217 	ldw	r4,200(sp)
 800b464:	d8802617 	ldw	r2,152(sp)
 800b468:	d9403317 	ldw	r5,204(sp)
 800b46c:	8123883a 	add	r17,r16,r4
 800b470:	11400216 	blt	r2,r5,800b47c <___vfprintf_internal_r+0x1538>
 800b474:	9100004c 	andi	r4,r18,1
 800b478:	20000d26 	beq	r4,zero,800b4b0 <___vfprintf_internal_r+0x156c>
 800b47c:	d9003717 	ldw	r4,220(sp)
 800b480:	d9403417 	ldw	r5,208(sp)
 800b484:	1907883a 	add	r3,r3,r4
 800b488:	d9001f17 	ldw	r4,124(sp)
 800b48c:	41400015 	stw	r5,0(r8)
 800b490:	d9403717 	ldw	r5,220(sp)
 800b494:	21000044 	addi	r4,r4,1
 800b498:	d8c02015 	stw	r3,128(sp)
 800b49c:	41400115 	stw	r5,4(r8)
 800b4a0:	d9001f15 	stw	r4,124(sp)
 800b4a4:	014001c4 	movi	r5,7
 800b4a8:	2901e816 	blt	r5,r4,800bc4c <___vfprintf_internal_r+0x1d08>
 800b4ac:	42000204 	addi	r8,r8,8
 800b4b0:	d9003317 	ldw	r4,204(sp)
 800b4b4:	8121883a 	add	r16,r16,r4
 800b4b8:	2085c83a 	sub	r2,r4,r2
 800b4bc:	8461c83a 	sub	r16,r16,r17
 800b4c0:	1400010e 	bge	r2,r16,800b4c8 <___vfprintf_internal_r+0x1584>
 800b4c4:	1021883a 	mov	r16,r2
 800b4c8:	04000a0e 	bge	zero,r16,800b4f4 <___vfprintf_internal_r+0x15b0>
 800b4cc:	d9001f17 	ldw	r4,124(sp)
 800b4d0:	1c07883a 	add	r3,r3,r16
 800b4d4:	44400015 	stw	r17,0(r8)
 800b4d8:	21000044 	addi	r4,r4,1
 800b4dc:	44000115 	stw	r16,4(r8)
 800b4e0:	d8c02015 	stw	r3,128(sp)
 800b4e4:	d9001f15 	stw	r4,124(sp)
 800b4e8:	014001c4 	movi	r5,7
 800b4ec:	2901fb16 	blt	r5,r4,800bcdc <___vfprintf_internal_r+0x1d98>
 800b4f0:	42000204 	addi	r8,r8,8
 800b4f4:	8001f716 	blt	r16,zero,800bcd4 <___vfprintf_internal_r+0x1d90>
 800b4f8:	1421c83a 	sub	r16,r2,r16
 800b4fc:	043d160e 	bge	zero,r16,800a958 <___vfprintf_internal_r+0xa14>
 800b500:	04400404 	movi	r17,16
 800b504:	d8801f17 	ldw	r2,124(sp)
 800b508:	8c3efb0e 	bge	r17,r16,800b0f8 <___vfprintf_internal_r+0x11b4>
 800b50c:	014200b4 	movhi	r5,2050
 800b510:	29686284 	addi	r5,r5,-24182
 800b514:	d9402c15 	stw	r5,176(sp)
 800b518:	058001c4 	movi	r22,7
 800b51c:	dcc02d17 	ldw	r19,180(sp)
 800b520:	00000306 	br	800b530 <___vfprintf_internal_r+0x15ec>
 800b524:	42000204 	addi	r8,r8,8
 800b528:	843ffc04 	addi	r16,r16,-16
 800b52c:	8c3ef50e 	bge	r17,r16,800b104 <___vfprintf_internal_r+0x11c0>
 800b530:	18c00404 	addi	r3,r3,16
 800b534:	10800044 	addi	r2,r2,1
 800b538:	45000015 	stw	r20,0(r8)
 800b53c:	44400115 	stw	r17,4(r8)
 800b540:	d8c02015 	stw	r3,128(sp)
 800b544:	d8801f15 	stw	r2,124(sp)
 800b548:	b0bff60e 	bge	r22,r2,800b524 <___vfprintf_internal_r+0x15e0>
 800b54c:	d9801e04 	addi	r6,sp,120
 800b550:	b80b883a 	mov	r5,r23
 800b554:	9809883a 	mov	r4,r19
 800b558:	8010bd00 	call	8010bd0 <__sprint_r>
 800b55c:	103b7d1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b560:	d8c02017 	ldw	r3,128(sp)
 800b564:	d8801f17 	ldw	r2,124(sp)
 800b568:	da000404 	addi	r8,sp,16
 800b56c:	003fee06 	br	800b528 <___vfprintf_internal_r+0x15e4>
 800b570:	9088703a 	and	r4,r18,r2
 800b574:	203eab1e 	bne	r4,zero,800b024 <___vfprintf_internal_r+0x10e0>
 800b578:	dc401f17 	ldw	r17,124(sp)
 800b57c:	40800115 	stw	r2,4(r8)
 800b580:	44000015 	stw	r16,0(r8)
 800b584:	8c400044 	addi	r17,r17,1
 800b588:	d8c02015 	stw	r3,128(sp)
 800b58c:	dc401f15 	stw	r17,124(sp)
 800b590:	008001c4 	movi	r2,7
 800b594:	14400e16 	blt	r2,r17,800b5d0 <___vfprintf_internal_r+0x168c>
 800b598:	45800204 	addi	r22,r8,8
 800b59c:	003eca06 	br	800b0c8 <___vfprintf_internal_r+0x1184>
 800b5a0:	010200b4 	movhi	r4,2050
 800b5a4:	21286284 	addi	r4,r4,-24182
 800b5a8:	d9002c15 	stw	r4,176(sp)
 800b5ac:	d8802c17 	ldw	r2,176(sp)
 800b5b0:	1c07883a 	add	r3,r3,r16
 800b5b4:	8c400044 	addi	r17,r17,1
 800b5b8:	b0800015 	stw	r2,0(r22)
 800b5bc:	b4000115 	stw	r16,4(r22)
 800b5c0:	d8c02015 	stw	r3,128(sp)
 800b5c4:	dc401f15 	stw	r17,124(sp)
 800b5c8:	008001c4 	movi	r2,7
 800b5cc:	147ebd0e 	bge	r2,r17,800b0c4 <___vfprintf_internal_r+0x1180>
 800b5d0:	d9002d17 	ldw	r4,180(sp)
 800b5d4:	d9801e04 	addi	r6,sp,120
 800b5d8:	b80b883a 	mov	r5,r23
 800b5dc:	8010bd00 	call	8010bd0 <__sprint_r>
 800b5e0:	103b5c1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b5e4:	d8c02017 	ldw	r3,128(sp)
 800b5e8:	dc401f17 	ldw	r17,124(sp)
 800b5ec:	dd800404 	addi	r22,sp,16
 800b5f0:	003eb506 	br	800b0c8 <___vfprintf_internal_r+0x1184>
 800b5f4:	d9002d17 	ldw	r4,180(sp)
 800b5f8:	d9801e04 	addi	r6,sp,120
 800b5fc:	b80b883a 	mov	r5,r23
 800b600:	8010bd00 	call	8010bd0 <__sprint_r>
 800b604:	103b531e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b608:	d8c02017 	ldw	r3,128(sp)
 800b60c:	dc401f17 	ldw	r17,124(sp)
 800b610:	da000404 	addi	r8,sp,16
 800b614:	003e8d06 	br	800b04c <___vfprintf_internal_r+0x1108>
 800b618:	d9002d17 	ldw	r4,180(sp)
 800b61c:	d9801e04 	addi	r6,sp,120
 800b620:	b80b883a 	mov	r5,r23
 800b624:	8010bd00 	call	8010bd0 <__sprint_r>
 800b628:	103b4a1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b62c:	d8c02017 	ldw	r3,128(sp)
 800b630:	dc401f17 	ldw	r17,124(sp)
 800b634:	dd800404 	addi	r22,sp,16
 800b638:	003e8f06 	br	800b078 <___vfprintf_internal_r+0x1134>
 800b63c:	0027883a 	mov	r19,zero
 800b640:	003f4a06 	br	800b36c <___vfprintf_internal_r+0x1428>
 800b644:	d9002d17 	ldw	r4,180(sp)
 800b648:	d9801e04 	addi	r6,sp,120
 800b64c:	b80b883a 	mov	r5,r23
 800b650:	8010bd00 	call	8010bd0 <__sprint_r>
 800b654:	103b3f1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b658:	d8c02017 	ldw	r3,128(sp)
 800b65c:	da000404 	addi	r8,sp,16
 800b660:	003c7b06 	br	800a850 <___vfprintf_internal_r+0x90c>
 800b664:	d9402a17 	ldw	r5,168(sp)
 800b668:	04e7c83a 	sub	r19,zero,r19
 800b66c:	07000b44 	movi	fp,45
 800b670:	9804c03a 	cmpne	r2,r19,zero
 800b674:	05adc83a 	sub	r22,zero,r22
 800b678:	df002785 	stb	fp,158(sp)
 800b67c:	b0adc83a 	sub	r22,r22,r2
 800b680:	28017b16 	blt	r5,zero,800bc70 <___vfprintf_internal_r+0x1d2c>
 800b684:	00bfdfc4 	movi	r2,-129
 800b688:	90a4703a 	and	r18,r18,r2
 800b68c:	003b8906 	br	800a4b4 <___vfprintf_internal_r+0x570>
 800b690:	d9003617 	ldw	r4,216(sp)
 800b694:	d9403817 	ldw	r5,224(sp)
 800b698:	da003d15 	stw	r8,244(sp)
 800b69c:	80109840 	call	8010984 <__fpclassifyd>
 800b6a0:	da003d17 	ldw	r8,244(sp)
 800b6a4:	1000f026 	beq	r2,zero,800ba68 <___vfprintf_internal_r+0x1b24>
 800b6a8:	d9002a17 	ldw	r4,168(sp)
 800b6ac:	05bff7c4 	movi	r22,-33
 800b6b0:	00bfffc4 	movi	r2,-1
 800b6b4:	8dac703a 	and	r22,r17,r22
 800b6b8:	20820026 	beq	r4,r2,800bebc <___vfprintf_internal_r+0x1f78>
 800b6bc:	008011c4 	movi	r2,71
 800b6c0:	b081f726 	beq	r22,r2,800bea0 <___vfprintf_internal_r+0x1f5c>
 800b6c4:	d9003817 	ldw	r4,224(sp)
 800b6c8:	90c04014 	ori	r3,r18,256
 800b6cc:	d8c02c15 	stw	r3,176(sp)
 800b6d0:	20021516 	blt	r4,zero,800bf28 <___vfprintf_internal_r+0x1fe4>
 800b6d4:	dcc03817 	ldw	r19,224(sp)
 800b6d8:	d8002905 	stb	zero,164(sp)
 800b6dc:	00801984 	movi	r2,102
 800b6e0:	8881f926 	beq	r17,r2,800bec8 <___vfprintf_internal_r+0x1f84>
 800b6e4:	00801184 	movi	r2,70
 800b6e8:	88821c26 	beq	r17,r2,800bf5c <___vfprintf_internal_r+0x2018>
 800b6ec:	00801144 	movi	r2,69
 800b6f0:	b081ef26 	beq	r22,r2,800beb0 <___vfprintf_internal_r+0x1f6c>
 800b6f4:	d8c02a17 	ldw	r3,168(sp)
 800b6f8:	d8802104 	addi	r2,sp,132
 800b6fc:	d8800315 	stw	r2,12(sp)
 800b700:	d9403617 	ldw	r5,216(sp)
 800b704:	d8802504 	addi	r2,sp,148
 800b708:	d9002d17 	ldw	r4,180(sp)
 800b70c:	d8800215 	stw	r2,8(sp)
 800b710:	d8802604 	addi	r2,sp,152
 800b714:	d8c00015 	stw	r3,0(sp)
 800b718:	d8800115 	stw	r2,4(sp)
 800b71c:	01c00084 	movi	r7,2
 800b720:	980d883a 	mov	r6,r19
 800b724:	d8c03c15 	stw	r3,240(sp)
 800b728:	da003d15 	stw	r8,244(sp)
 800b72c:	800c7280 	call	800c728 <_dtoa_r>
 800b730:	1021883a 	mov	r16,r2
 800b734:	008019c4 	movi	r2,103
 800b738:	d8c03c17 	ldw	r3,240(sp)
 800b73c:	da003d17 	ldw	r8,244(sp)
 800b740:	88817126 	beq	r17,r2,800bd08 <___vfprintf_internal_r+0x1dc4>
 800b744:	008011c4 	movi	r2,71
 800b748:	88829126 	beq	r17,r2,800c190 <___vfprintf_internal_r+0x224c>
 800b74c:	80f9883a 	add	fp,r16,r3
 800b750:	d9003617 	ldw	r4,216(sp)
 800b754:	000d883a 	mov	r6,zero
 800b758:	000f883a 	mov	r7,zero
 800b75c:	980b883a 	mov	r5,r19
 800b760:	da003d15 	stw	r8,244(sp)
 800b764:	80147300 	call	8014730 <__eqdf2>
 800b768:	da003d17 	ldw	r8,244(sp)
 800b76c:	10018d26 	beq	r2,zero,800bda4 <___vfprintf_internal_r+0x1e60>
 800b770:	d8802117 	ldw	r2,132(sp)
 800b774:	1700062e 	bgeu	r2,fp,800b790 <___vfprintf_internal_r+0x184c>
 800b778:	01000c04 	movi	r4,48
 800b77c:	10c00044 	addi	r3,r2,1
 800b780:	d8c02115 	stw	r3,132(sp)
 800b784:	11000005 	stb	r4,0(r2)
 800b788:	d8802117 	ldw	r2,132(sp)
 800b78c:	173ffb36 	bltu	r2,fp,800b77c <___vfprintf_internal_r+0x1838>
 800b790:	1405c83a 	sub	r2,r2,r16
 800b794:	d8803315 	stw	r2,204(sp)
 800b798:	008011c4 	movi	r2,71
 800b79c:	b0817626 	beq	r22,r2,800bd78 <___vfprintf_internal_r+0x1e34>
 800b7a0:	00801944 	movi	r2,101
 800b7a4:	1442800e 	bge	r2,r17,800c1a8 <___vfprintf_internal_r+0x2264>
 800b7a8:	d8c02617 	ldw	r3,152(sp)
 800b7ac:	00801984 	movi	r2,102
 800b7b0:	d8c03215 	stw	r3,200(sp)
 800b7b4:	8881fe26 	beq	r17,r2,800bfb0 <___vfprintf_internal_r+0x206c>
 800b7b8:	d8c03217 	ldw	r3,200(sp)
 800b7bc:	d9003317 	ldw	r4,204(sp)
 800b7c0:	1901dd16 	blt	r3,r4,800bf38 <___vfprintf_internal_r+0x1ff4>
 800b7c4:	9480004c 	andi	r18,r18,1
 800b7c8:	90022b1e 	bne	r18,zero,800c078 <___vfprintf_internal_r+0x2134>
 800b7cc:	1805883a 	mov	r2,r3
 800b7d0:	18028316 	blt	r3,zero,800c1e0 <___vfprintf_internal_r+0x229c>
 800b7d4:	d8c03217 	ldw	r3,200(sp)
 800b7d8:	044019c4 	movi	r17,103
 800b7dc:	d8c02b15 	stw	r3,172(sp)
 800b7e0:	df002907 	ldb	fp,164(sp)
 800b7e4:	e001531e 	bne	fp,zero,800bd34 <___vfprintf_internal_r+0x1df0>
 800b7e8:	df002783 	ldbu	fp,158(sp)
 800b7ec:	d8802915 	stw	r2,164(sp)
 800b7f0:	dc802c17 	ldw	r18,176(sp)
 800b7f4:	d8002a15 	stw	zero,168(sp)
 800b7f8:	003baf06 	br	800a6b8 <___vfprintf_internal_r+0x774>
 800b7fc:	d8c02e17 	ldw	r3,184(sp)
 800b800:	d9002e17 	ldw	r4,184(sp)
 800b804:	d9402e17 	ldw	r5,184(sp)
 800b808:	18c00017 	ldw	r3,0(r3)
 800b80c:	21000117 	ldw	r4,4(r4)
 800b810:	29400204 	addi	r5,r5,8
 800b814:	d8c03615 	stw	r3,216(sp)
 800b818:	d9003815 	stw	r4,224(sp)
 800b81c:	d9402e15 	stw	r5,184(sp)
 800b820:	003b5006 	br	800a564 <___vfprintf_internal_r+0x620>
 800b824:	ac400007 	ldb	r17,0(r21)
 800b828:	003a2806 	br	800a0cc <___vfprintf_internal_r+0x188>
 800b82c:	9080100c 	andi	r2,r18,64
 800b830:	1000a826 	beq	r2,zero,800bad4 <___vfprintf_internal_r+0x1b90>
 800b834:	d8c02e17 	ldw	r3,184(sp)
 800b838:	002d883a 	mov	r22,zero
 800b83c:	1cc0000b 	ldhu	r19,0(r3)
 800b840:	18c00104 	addi	r3,r3,4
 800b844:	d8c02e15 	stw	r3,184(sp)
 800b848:	003caf06 	br	800ab08 <___vfprintf_internal_r+0xbc4>
 800b84c:	d9002e17 	ldw	r4,184(sp)
 800b850:	d9402a17 	ldw	r5,168(sp)
 800b854:	002d883a 	mov	r22,zero
 800b858:	20800104 	addi	r2,r4,4
 800b85c:	24c00017 	ldw	r19,0(r4)
 800b860:	283ebb0e 	bge	r5,zero,800b350 <___vfprintf_internal_r+0x140c>
 800b864:	003ef106 	br	800b42c <___vfprintf_internal_r+0x14e8>
 800b868:	9080040c 	andi	r2,r18,16
 800b86c:	1000921e 	bne	r2,zero,800bab8 <___vfprintf_internal_r+0x1b74>
 800b870:	9480100c 	andi	r18,r18,64
 800b874:	90013926 	beq	r18,zero,800bd5c <___vfprintf_internal_r+0x1e18>
 800b878:	d9402e17 	ldw	r5,184(sp)
 800b87c:	d8c02f17 	ldw	r3,188(sp)
 800b880:	28800017 	ldw	r2,0(r5)
 800b884:	29400104 	addi	r5,r5,4
 800b888:	d9402e15 	stw	r5,184(sp)
 800b88c:	10c0000d 	sth	r3,0(r2)
 800b890:	0039e406 	br	800a024 <___vfprintf_internal_r+0xe0>
 800b894:	9080100c 	andi	r2,r18,64
 800b898:	10008026 	beq	r2,zero,800ba9c <___vfprintf_internal_r+0x1b58>
 800b89c:	d8802e17 	ldw	r2,184(sp)
 800b8a0:	14c0000f 	ldh	r19,0(r2)
 800b8a4:	10800104 	addi	r2,r2,4
 800b8a8:	d8802e15 	stw	r2,184(sp)
 800b8ac:	982dd7fa 	srai	r22,r19,31
 800b8b0:	b005883a 	mov	r2,r22
 800b8b4:	003af706 	br	800a494 <___vfprintf_internal_r+0x550>
 800b8b8:	9080100c 	andi	r2,r18,64
 800b8bc:	d8002785 	stb	zero,158(sp)
 800b8c0:	10008a1e 	bne	r2,zero,800baec <___vfprintf_internal_r+0x1ba8>
 800b8c4:	d9002e17 	ldw	r4,184(sp)
 800b8c8:	d9402a17 	ldw	r5,168(sp)
 800b8cc:	002d883a 	mov	r22,zero
 800b8d0:	20800104 	addi	r2,r4,4
 800b8d4:	24c00017 	ldw	r19,0(r4)
 800b8d8:	283e4b0e 	bge	r5,zero,800b208 <___vfprintf_internal_r+0x12c4>
 800b8dc:	9d86b03a 	or	r3,r19,r22
 800b8e0:	d8802e15 	stw	r2,184(sp)
 800b8e4:	183e4c1e 	bne	r3,zero,800b218 <___vfprintf_internal_r+0x12d4>
 800b8e8:	0039883a 	mov	fp,zero
 800b8ec:	0005883a 	mov	r2,zero
 800b8f0:	003d4006 	br	800adf4 <___vfprintf_internal_r+0xeb0>
 800b8f4:	014200b4 	movhi	r5,2050
 800b8f8:	29686284 	addi	r5,r5,-24182
 800b8fc:	d9402c15 	stw	r5,176(sp)
 800b900:	d9402c17 	ldw	r5,176(sp)
 800b904:	1c47883a 	add	r3,r3,r17
 800b908:	10800044 	addi	r2,r2,1
 800b90c:	41400015 	stw	r5,0(r8)
 800b910:	44400115 	stw	r17,4(r8)
 800b914:	d8c02015 	stw	r3,128(sp)
 800b918:	d8801f15 	stw	r2,124(sp)
 800b91c:	010001c4 	movi	r4,7
 800b920:	20bec816 	blt	r4,r2,800b444 <___vfprintf_internal_r+0x1500>
 800b924:	42000204 	addi	r8,r8,8
 800b928:	003ecd06 	br	800b460 <___vfprintf_internal_r+0x151c>
 800b92c:	d9002a17 	ldw	r4,168(sp)
 800b930:	d8002785 	stb	zero,158(sp)
 800b934:	203d2d16 	blt	r4,zero,800adec <___vfprintf_internal_r+0xea8>
 800b938:	00bfdfc4 	movi	r2,-129
 800b93c:	90a4703a 	and	r18,r18,r2
 800b940:	003a6106 	br	800a2c8 <___vfprintf_internal_r+0x384>
 800b944:	010200b4 	movhi	r4,2050
 800b948:	21286284 	addi	r4,r4,-24182
 800b94c:	d9002c15 	stw	r4,176(sp)
 800b950:	003bea06 	br	800a8fc <___vfprintf_internal_r+0x9b8>
 800b954:	d9002d17 	ldw	r4,180(sp)
 800b958:	d9801e04 	addi	r6,sp,120
 800b95c:	b80b883a 	mov	r5,r23
 800b960:	8010bd00 	call	8010bd0 <__sprint_r>
 800b964:	103a7b1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800b968:	d8c02017 	ldw	r3,128(sp)
 800b96c:	da000404 	addi	r8,sp,16
 800b970:	003d4106 	br	800ae78 <___vfprintf_internal_r+0xf34>
 800b974:	d8801f17 	ldw	r2,124(sp)
 800b978:	014200b4 	movhi	r5,2050
 800b97c:	01000044 	movi	r4,1
 800b980:	18c00044 	addi	r3,r3,1
 800b984:	10800044 	addi	r2,r2,1
 800b988:	29686204 	addi	r5,r5,-24184
 800b98c:	41000115 	stw	r4,4(r8)
 800b990:	41400015 	stw	r5,0(r8)
 800b994:	d8c02015 	stw	r3,128(sp)
 800b998:	d8801f15 	stw	r2,124(sp)
 800b99c:	010001c4 	movi	r4,7
 800b9a0:	20805c16 	blt	r4,r2,800bb14 <___vfprintf_internal_r+0x1bd0>
 800b9a4:	42000204 	addi	r8,r8,8
 800b9a8:	8800041e 	bne	r17,zero,800b9bc <___vfprintf_internal_r+0x1a78>
 800b9ac:	d8803317 	ldw	r2,204(sp)
 800b9b0:	1000021e 	bne	r2,zero,800b9bc <___vfprintf_internal_r+0x1a78>
 800b9b4:	9080004c 	andi	r2,r18,1
 800b9b8:	103be726 	beq	r2,zero,800a958 <___vfprintf_internal_r+0xa14>
 800b9bc:	d9003717 	ldw	r4,220(sp)
 800b9c0:	d8801f17 	ldw	r2,124(sp)
 800b9c4:	d9403417 	ldw	r5,208(sp)
 800b9c8:	20c7883a 	add	r3,r4,r3
 800b9cc:	10800044 	addi	r2,r2,1
 800b9d0:	41000115 	stw	r4,4(r8)
 800b9d4:	41400015 	stw	r5,0(r8)
 800b9d8:	d8c02015 	stw	r3,128(sp)
 800b9dc:	d8801f15 	stw	r2,124(sp)
 800b9e0:	010001c4 	movi	r4,7
 800b9e4:	20812116 	blt	r4,r2,800be6c <___vfprintf_internal_r+0x1f28>
 800b9e8:	42000204 	addi	r8,r8,8
 800b9ec:	0463c83a 	sub	r17,zero,r17
 800b9f0:	0440730e 	bge	zero,r17,800bbc0 <___vfprintf_internal_r+0x1c7c>
 800b9f4:	05800404 	movi	r22,16
 800b9f8:	b440860e 	bge	r22,r17,800bc14 <___vfprintf_internal_r+0x1cd0>
 800b9fc:	014200b4 	movhi	r5,2050
 800ba00:	29686284 	addi	r5,r5,-24182
 800ba04:	d9402c15 	stw	r5,176(sp)
 800ba08:	070001c4 	movi	fp,7
 800ba0c:	dcc02d17 	ldw	r19,180(sp)
 800ba10:	00000306 	br	800ba20 <___vfprintf_internal_r+0x1adc>
 800ba14:	42000204 	addi	r8,r8,8
 800ba18:	8c7ffc04 	addi	r17,r17,-16
 800ba1c:	b440800e 	bge	r22,r17,800bc20 <___vfprintf_internal_r+0x1cdc>
 800ba20:	18c00404 	addi	r3,r3,16
 800ba24:	10800044 	addi	r2,r2,1
 800ba28:	45000015 	stw	r20,0(r8)
 800ba2c:	45800115 	stw	r22,4(r8)
 800ba30:	d8c02015 	stw	r3,128(sp)
 800ba34:	d8801f15 	stw	r2,124(sp)
 800ba38:	e0bff60e 	bge	fp,r2,800ba14 <___vfprintf_internal_r+0x1ad0>
 800ba3c:	d9801e04 	addi	r6,sp,120
 800ba40:	b80b883a 	mov	r5,r23
 800ba44:	9809883a 	mov	r4,r19
 800ba48:	8010bd00 	call	8010bd0 <__sprint_r>
 800ba4c:	103a411e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800ba50:	d8c02017 	ldw	r3,128(sp)
 800ba54:	d8801f17 	ldw	r2,124(sp)
 800ba58:	da000404 	addi	r8,sp,16
 800ba5c:	003fee06 	br	800ba18 <___vfprintf_internal_r+0x1ad4>
 800ba60:	00bfffc4 	movi	r2,-1
 800ba64:	003a3f06 	br	800a364 <___vfprintf_internal_r+0x420>
 800ba68:	008011c4 	movi	r2,71
 800ba6c:	1440b816 	blt	r2,r17,800bd50 <___vfprintf_internal_r+0x1e0c>
 800ba70:	040200b4 	movhi	r16,2050
 800ba74:	84285404 	addi	r16,r16,-24240
 800ba78:	00c000c4 	movi	r3,3
 800ba7c:	00bfdfc4 	movi	r2,-129
 800ba80:	d8c02915 	stw	r3,164(sp)
 800ba84:	90a4703a 	and	r18,r18,r2
 800ba88:	df002783 	ldbu	fp,158(sp)
 800ba8c:	d8c02b15 	stw	r3,172(sp)
 800ba90:	d8002a15 	stw	zero,168(sp)
 800ba94:	d8003215 	stw	zero,200(sp)
 800ba98:	003b0706 	br	800a6b8 <___vfprintf_internal_r+0x774>
 800ba9c:	d8c02e17 	ldw	r3,184(sp)
 800baa0:	1cc00017 	ldw	r19,0(r3)
 800baa4:	18c00104 	addi	r3,r3,4
 800baa8:	d8c02e15 	stw	r3,184(sp)
 800baac:	982dd7fa 	srai	r22,r19,31
 800bab0:	b005883a 	mov	r2,r22
 800bab4:	003a7706 	br	800a494 <___vfprintf_internal_r+0x550>
 800bab8:	d8c02e17 	ldw	r3,184(sp)
 800babc:	d9002f17 	ldw	r4,188(sp)
 800bac0:	18800017 	ldw	r2,0(r3)
 800bac4:	18c00104 	addi	r3,r3,4
 800bac8:	d8c02e15 	stw	r3,184(sp)
 800bacc:	11000015 	stw	r4,0(r2)
 800bad0:	00395406 	br	800a024 <___vfprintf_internal_r+0xe0>
 800bad4:	d9002e17 	ldw	r4,184(sp)
 800bad8:	002d883a 	mov	r22,zero
 800badc:	24c00017 	ldw	r19,0(r4)
 800bae0:	21000104 	addi	r4,r4,4
 800bae4:	d9002e15 	stw	r4,184(sp)
 800bae8:	003c0706 	br	800ab08 <___vfprintf_internal_r+0xbc4>
 800baec:	d9402e17 	ldw	r5,184(sp)
 800baf0:	d8c02a17 	ldw	r3,168(sp)
 800baf4:	002d883a 	mov	r22,zero
 800baf8:	28800104 	addi	r2,r5,4
 800bafc:	2cc0000b 	ldhu	r19,0(r5)
 800bb00:	183dc10e 	bge	r3,zero,800b208 <___vfprintf_internal_r+0x12c4>
 800bb04:	003f7506 	br	800b8dc <___vfprintf_internal_r+0x1998>
 800bb08:	040200b4 	movhi	r16,2050
 800bb0c:	84285204 	addi	r16,r16,-24248
 800bb10:	003aa706 	br	800a5b0 <___vfprintf_internal_r+0x66c>
 800bb14:	d9002d17 	ldw	r4,180(sp)
 800bb18:	d9801e04 	addi	r6,sp,120
 800bb1c:	b80b883a 	mov	r5,r23
 800bb20:	8010bd00 	call	8010bd0 <__sprint_r>
 800bb24:	103a0b1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800bb28:	dc402617 	ldw	r17,152(sp)
 800bb2c:	d8c02017 	ldw	r3,128(sp)
 800bb30:	da000404 	addi	r8,sp,16
 800bb34:	003f9c06 	br	800b9a8 <___vfprintf_internal_r+0x1a64>
 800bb38:	ac400043 	ldbu	r17,1(r21)
 800bb3c:	84000814 	ori	r16,r16,32
 800bb40:	ad400044 	addi	r21,r21,1
 800bb44:	8c403fcc 	andi	r17,r17,255
 800bb48:	8c40201c 	xori	r17,r17,128
 800bb4c:	8c7fe004 	addi	r17,r17,-128
 800bb50:	00395e06 	br	800a0cc <___vfprintf_internal_r+0x188>
 800bb54:	d8c02e15 	stw	r3,184(sp)
 800bb58:	0039883a 	mov	fp,zero
 800bb5c:	003e3506 	br	800b434 <___vfprintf_internal_r+0x14f0>
 800bb60:	d9002d17 	ldw	r4,180(sp)
 800bb64:	d9801e04 	addi	r6,sp,120
 800bb68:	b80b883a 	mov	r5,r23
 800bb6c:	8010bd00 	call	8010bd0 <__sprint_r>
 800bb70:	1039f81e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800bb74:	d8c02017 	ldw	r3,128(sp)
 800bb78:	da000404 	addi	r8,sp,16
 800bb7c:	003cd006 	br	800aec0 <___vfprintf_internal_r+0xf7c>
 800bb80:	8009883a 	mov	r4,r16
 800bb84:	df003d15 	stw	fp,244(sp)
 800bb88:	8009eac0 	call	8009eac <strlen>
 800bb8c:	d8802b15 	stw	r2,172(sp)
 800bb90:	da003d17 	ldw	r8,244(sp)
 800bb94:	103c200e 	bge	r2,zero,800ac18 <___vfprintf_internal_r+0xcd4>
 800bb98:	0005883a 	mov	r2,zero
 800bb9c:	003c1e06 	br	800ac18 <___vfprintf_internal_r+0xcd4>
 800bba0:	d9002d17 	ldw	r4,180(sp)
 800bba4:	d9801e04 	addi	r6,sp,120
 800bba8:	b80b883a 	mov	r5,r23
 800bbac:	8010bd00 	call	8010bd0 <__sprint_r>
 800bbb0:	1039e81e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800bbb4:	d8c02017 	ldw	r3,128(sp)
 800bbb8:	d8801f17 	ldw	r2,124(sp)
 800bbbc:	da000404 	addi	r8,sp,16
 800bbc0:	d9403317 	ldw	r5,204(sp)
 800bbc4:	10800044 	addi	r2,r2,1
 800bbc8:	44000015 	stw	r16,0(r8)
 800bbcc:	28c7883a 	add	r3,r5,r3
 800bbd0:	003b5b06 	br	800a940 <___vfprintf_internal_r+0x9fc>
 800bbd4:	010200b4 	movhi	r4,2050
 800bbd8:	21286684 	addi	r4,r4,-24166
 800bbdc:	d9003515 	stw	r4,212(sp)
 800bbe0:	003af206 	br	800a7ac <___vfprintf_internal_r+0x868>
 800bbe4:	013fffc4 	movi	r4,-1
 800bbe8:	003a0806 	br	800a40c <___vfprintf_internal_r+0x4c8>
 800bbec:	0023883a 	mov	r17,zero
 800bbf0:	003d9d06 	br	800b268 <___vfprintf_internal_r+0x1324>
 800bbf4:	d9002d17 	ldw	r4,180(sp)
 800bbf8:	d9801e04 	addi	r6,sp,120
 800bbfc:	b80b883a 	mov	r5,r23
 800bc00:	8010bd00 	call	8010bd0 <__sprint_r>
 800bc04:	1039d31e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800bc08:	d8c02017 	ldw	r3,128(sp)
 800bc0c:	da000404 	addi	r8,sp,16
 800bc10:	003d9406 	br	800b264 <___vfprintf_internal_r+0x1320>
 800bc14:	010200b4 	movhi	r4,2050
 800bc18:	21286284 	addi	r4,r4,-24182
 800bc1c:	d9002c15 	stw	r4,176(sp)
 800bc20:	d9002c17 	ldw	r4,176(sp)
 800bc24:	1c47883a 	add	r3,r3,r17
 800bc28:	10800044 	addi	r2,r2,1
 800bc2c:	41000015 	stw	r4,0(r8)
 800bc30:	44400115 	stw	r17,4(r8)
 800bc34:	d8c02015 	stw	r3,128(sp)
 800bc38:	d8801f15 	stw	r2,124(sp)
 800bc3c:	010001c4 	movi	r4,7
 800bc40:	20bfd716 	blt	r4,r2,800bba0 <___vfprintf_internal_r+0x1c5c>
 800bc44:	42000204 	addi	r8,r8,8
 800bc48:	003fdd06 	br	800bbc0 <___vfprintf_internal_r+0x1c7c>
 800bc4c:	d9002d17 	ldw	r4,180(sp)
 800bc50:	d9801e04 	addi	r6,sp,120
 800bc54:	b80b883a 	mov	r5,r23
 800bc58:	8010bd00 	call	8010bd0 <__sprint_r>
 800bc5c:	1039bd1e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800bc60:	d8802617 	ldw	r2,152(sp)
 800bc64:	d8c02017 	ldw	r3,128(sp)
 800bc68:	da000404 	addi	r8,sp,16
 800bc6c:	003e1006 	br	800b4b0 <___vfprintf_internal_r+0x156c>
 800bc70:	00800044 	movi	r2,1
 800bc74:	10803fcc 	andi	r2,r2,255
 800bc78:	00c00044 	movi	r3,1
 800bc7c:	10fa0d26 	beq	r2,r3,800a4b4 <___vfprintf_internal_r+0x570>
 800bc80:	00c00084 	movi	r3,2
 800bc84:	10fbaf26 	beq	r2,r3,800ab44 <___vfprintf_internal_r+0xc00>
 800bc88:	003a6d06 	br	800a640 <___vfprintf_internal_r+0x6fc>
 800bc8c:	010200b4 	movhi	r4,2050
 800bc90:	21286684 	addi	r4,r4,-24166
 800bc94:	d9003515 	stw	r4,212(sp)
 800bc98:	003b5406 	br	800a9ec <___vfprintf_internal_r+0xaa8>
 800bc9c:	d8802a17 	ldw	r2,168(sp)
 800bca0:	00c00184 	movi	r3,6
 800bca4:	1880012e 	bgeu	r3,r2,800bcac <___vfprintf_internal_r+0x1d68>
 800bca8:	1805883a 	mov	r2,r3
 800bcac:	d8802b15 	stw	r2,172(sp)
 800bcb0:	1000ef16 	blt	r2,zero,800c070 <___vfprintf_internal_r+0x212c>
 800bcb4:	040200b4 	movhi	r16,2050
 800bcb8:	d8802915 	stw	r2,164(sp)
 800bcbc:	dcc02e15 	stw	r19,184(sp)
 800bcc0:	d8002a15 	stw	zero,168(sp)
 800bcc4:	d8003215 	stw	zero,200(sp)
 800bcc8:	84286004 	addi	r16,r16,-24192
 800bccc:	0039883a 	mov	fp,zero
 800bcd0:	003a8006 	br	800a6d4 <___vfprintf_internal_r+0x790>
 800bcd4:	0021883a 	mov	r16,zero
 800bcd8:	003e0706 	br	800b4f8 <___vfprintf_internal_r+0x15b4>
 800bcdc:	d9002d17 	ldw	r4,180(sp)
 800bce0:	d9801e04 	addi	r6,sp,120
 800bce4:	b80b883a 	mov	r5,r23
 800bce8:	8010bd00 	call	8010bd0 <__sprint_r>
 800bcec:	1039991e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800bcf0:	d8802617 	ldw	r2,152(sp)
 800bcf4:	d9403317 	ldw	r5,204(sp)
 800bcf8:	d8c02017 	ldw	r3,128(sp)
 800bcfc:	da000404 	addi	r8,sp,16
 800bd00:	2885c83a 	sub	r2,r5,r2
 800bd04:	003dfb06 	br	800b4f4 <___vfprintf_internal_r+0x15b0>
 800bd08:	9080004c 	andi	r2,r18,1
 800bd0c:	103e8f1e 	bne	r2,zero,800b74c <___vfprintf_internal_r+0x1808>
 800bd10:	d8802117 	ldw	r2,132(sp)
 800bd14:	003e9e06 	br	800b790 <___vfprintf_internal_r+0x184c>
 800bd18:	1025883a 	mov	r18,r2
 800bd1c:	0039883a 	mov	fp,zero
 800bd20:	00800084 	movi	r2,2
 800bd24:	003fd306 	br	800bc74 <___vfprintf_internal_r+0x1d30>
 800bd28:	07000b44 	movi	fp,45
 800bd2c:	df002785 	stb	fp,158(sp)
 800bd30:	003a1b06 	br	800a5a0 <___vfprintf_internal_r+0x65c>
 800bd34:	00c00b44 	movi	r3,45
 800bd38:	d8c02785 	stb	r3,158(sp)
 800bd3c:	d8802915 	stw	r2,164(sp)
 800bd40:	dc802c17 	ldw	r18,176(sp)
 800bd44:	d8002a15 	stw	zero,168(sp)
 800bd48:	07000b44 	movi	fp,45
 800bd4c:	003a5e06 	br	800a6c8 <___vfprintf_internal_r+0x784>
 800bd50:	040200b4 	movhi	r16,2050
 800bd54:	84285504 	addi	r16,r16,-24236
 800bd58:	003f4706 	br	800ba78 <___vfprintf_internal_r+0x1b34>
 800bd5c:	d9002e17 	ldw	r4,184(sp)
 800bd60:	d9402f17 	ldw	r5,188(sp)
 800bd64:	20800017 	ldw	r2,0(r4)
 800bd68:	21000104 	addi	r4,r4,4
 800bd6c:	d9002e15 	stw	r4,184(sp)
 800bd70:	11400015 	stw	r5,0(r2)
 800bd74:	0038ab06 	br	800a024 <___vfprintf_internal_r+0xe0>
 800bd78:	dd802617 	ldw	r22,152(sp)
 800bd7c:	00bfff44 	movi	r2,-3
 800bd80:	b0801c16 	blt	r22,r2,800bdf4 <___vfprintf_internal_r+0x1eb0>
 800bd84:	d9402a17 	ldw	r5,168(sp)
 800bd88:	2d801a16 	blt	r5,r22,800bdf4 <___vfprintf_internal_r+0x1eb0>
 800bd8c:	dd803215 	stw	r22,200(sp)
 800bd90:	003e8906 	br	800b7b8 <___vfprintf_internal_r+0x1874>
 800bd94:	010200b4 	movhi	r4,2050
 800bd98:	21286284 	addi	r4,r4,-24182
 800bd9c:	d9002c15 	stw	r4,176(sp)
 800bda0:	003c9106 	br	800afe8 <___vfprintf_internal_r+0x10a4>
 800bda4:	e005883a 	mov	r2,fp
 800bda8:	003e7906 	br	800b790 <___vfprintf_internal_r+0x184c>
 800bdac:	d9002a17 	ldw	r4,168(sp)
 800bdb0:	df002783 	ldbu	fp,158(sp)
 800bdb4:	dcc02e15 	stw	r19,184(sp)
 800bdb8:	d9002915 	stw	r4,164(sp)
 800bdbc:	d9002b15 	stw	r4,172(sp)
 800bdc0:	d8002a15 	stw	zero,168(sp)
 800bdc4:	d8003215 	stw	zero,200(sp)
 800bdc8:	003a3b06 	br	800a6b8 <___vfprintf_internal_r+0x774>
 800bdcc:	9080004c 	andi	r2,r18,1
 800bdd0:	0039883a 	mov	fp,zero
 800bdd4:	10000426 	beq	r2,zero,800bde8 <___vfprintf_internal_r+0x1ea4>
 800bdd8:	00800c04 	movi	r2,48
 800bddc:	dc001dc4 	addi	r16,sp,119
 800bde0:	d8801dc5 	stb	r2,119(sp)
 800bde4:	003b6406 	br	800ab78 <___vfprintf_internal_r+0xc34>
 800bde8:	d8002b15 	stw	zero,172(sp)
 800bdec:	dc001e04 	addi	r16,sp,120
 800bdf0:	003a2b06 	br	800a6a0 <___vfprintf_internal_r+0x75c>
 800bdf4:	8c7fff84 	addi	r17,r17,-2
 800bdf8:	b5bfffc4 	addi	r22,r22,-1
 800bdfc:	dd802615 	stw	r22,152(sp)
 800be00:	dc4022c5 	stb	r17,139(sp)
 800be04:	b000bf16 	blt	r22,zero,800c104 <___vfprintf_internal_r+0x21c0>
 800be08:	00800ac4 	movi	r2,43
 800be0c:	d8802305 	stb	r2,140(sp)
 800be10:	00800244 	movi	r2,9
 800be14:	15807016 	blt	r2,r22,800bfd8 <___vfprintf_internal_r+0x2094>
 800be18:	00800c04 	movi	r2,48
 800be1c:	b5800c04 	addi	r22,r22,48
 800be20:	d8802345 	stb	r2,141(sp)
 800be24:	dd802385 	stb	r22,142(sp)
 800be28:	d88023c4 	addi	r2,sp,143
 800be2c:	df0022c4 	addi	fp,sp,139
 800be30:	d8c03317 	ldw	r3,204(sp)
 800be34:	1739c83a 	sub	fp,r2,fp
 800be38:	d9003317 	ldw	r4,204(sp)
 800be3c:	e0c7883a 	add	r3,fp,r3
 800be40:	df003a15 	stw	fp,232(sp)
 800be44:	d8c02b15 	stw	r3,172(sp)
 800be48:	00800044 	movi	r2,1
 800be4c:	1100b30e 	bge	r2,r4,800c11c <___vfprintf_internal_r+0x21d8>
 800be50:	d8c02b17 	ldw	r3,172(sp)
 800be54:	18c00044 	addi	r3,r3,1
 800be58:	d8c02b15 	stw	r3,172(sp)
 800be5c:	1805883a 	mov	r2,r3
 800be60:	1800ac16 	blt	r3,zero,800c114 <___vfprintf_internal_r+0x21d0>
 800be64:	d8003215 	stw	zero,200(sp)
 800be68:	003e5d06 	br	800b7e0 <___vfprintf_internal_r+0x189c>
 800be6c:	d9002d17 	ldw	r4,180(sp)
 800be70:	d9801e04 	addi	r6,sp,120
 800be74:	b80b883a 	mov	r5,r23
 800be78:	8010bd00 	call	8010bd0 <__sprint_r>
 800be7c:	1039351e 	bne	r2,zero,800a354 <___vfprintf_internal_r+0x410>
 800be80:	dc402617 	ldw	r17,152(sp)
 800be84:	d8c02017 	ldw	r3,128(sp)
 800be88:	d8801f17 	ldw	r2,124(sp)
 800be8c:	da000404 	addi	r8,sp,16
 800be90:	003ed606 	br	800b9ec <___vfprintf_internal_r+0x1aa8>
 800be94:	182b883a 	mov	r21,r3
 800be98:	d8002a15 	stw	zero,168(sp)
 800be9c:	00388c06 	br	800a0d0 <___vfprintf_internal_r+0x18c>
 800bea0:	d8802a17 	ldw	r2,168(sp)
 800bea4:	103e071e 	bne	r2,zero,800b6c4 <___vfprintf_internal_r+0x1780>
 800bea8:	dc002a15 	stw	r16,168(sp)
 800beac:	003e0506 	br	800b6c4 <___vfprintf_internal_r+0x1780>
 800beb0:	d9002a17 	ldw	r4,168(sp)
 800beb4:	20c00044 	addi	r3,r4,1
 800beb8:	003e0f06 	br	800b6f8 <___vfprintf_internal_r+0x17b4>
 800bebc:	01400184 	movi	r5,6
 800bec0:	d9402a15 	stw	r5,168(sp)
 800bec4:	003dff06 	br	800b6c4 <___vfprintf_internal_r+0x1780>
 800bec8:	d8802104 	addi	r2,sp,132
 800becc:	d8800315 	stw	r2,12(sp)
 800bed0:	d8802504 	addi	r2,sp,148
 800bed4:	d8800215 	stw	r2,8(sp)
 800bed8:	d8802604 	addi	r2,sp,152
 800bedc:	d8800115 	stw	r2,4(sp)
 800bee0:	d8802a17 	ldw	r2,168(sp)
 800bee4:	d9403617 	ldw	r5,216(sp)
 800bee8:	d9002d17 	ldw	r4,180(sp)
 800beec:	d8800015 	stw	r2,0(sp)
 800bef0:	01c000c4 	movi	r7,3
 800bef4:	980d883a 	mov	r6,r19
 800bef8:	da003d15 	stw	r8,244(sp)
 800befc:	800c7280 	call	800c728 <_dtoa_r>
 800bf00:	d8c02a17 	ldw	r3,168(sp)
 800bf04:	da003d17 	ldw	r8,244(sp)
 800bf08:	1021883a 	mov	r16,r2
 800bf0c:	10f9883a 	add	fp,r2,r3
 800bf10:	81000007 	ldb	r4,0(r16)
 800bf14:	00800c04 	movi	r2,48
 800bf18:	20805e26 	beq	r4,r2,800c094 <___vfprintf_internal_r+0x2150>
 800bf1c:	d8c02617 	ldw	r3,152(sp)
 800bf20:	e0f9883a 	add	fp,fp,r3
 800bf24:	003e0a06 	br	800b750 <___vfprintf_internal_r+0x180c>
 800bf28:	00c00b44 	movi	r3,45
 800bf2c:	24e0003c 	xorhi	r19,r4,32768
 800bf30:	d8c02905 	stb	r3,164(sp)
 800bf34:	003de906 	br	800b6dc <___vfprintf_internal_r+0x1798>
 800bf38:	d8c03217 	ldw	r3,200(sp)
 800bf3c:	00c07a0e 	bge	zero,r3,800c128 <___vfprintf_internal_r+0x21e4>
 800bf40:	00800044 	movi	r2,1
 800bf44:	d9003317 	ldw	r4,204(sp)
 800bf48:	1105883a 	add	r2,r2,r4
 800bf4c:	d8802b15 	stw	r2,172(sp)
 800bf50:	10004e16 	blt	r2,zero,800c08c <___vfprintf_internal_r+0x2148>
 800bf54:	044019c4 	movi	r17,103
 800bf58:	003e2106 	br	800b7e0 <___vfprintf_internal_r+0x189c>
 800bf5c:	d9002a17 	ldw	r4,168(sp)
 800bf60:	d8802104 	addi	r2,sp,132
 800bf64:	d8800315 	stw	r2,12(sp)
 800bf68:	d9000015 	stw	r4,0(sp)
 800bf6c:	d8802504 	addi	r2,sp,148
 800bf70:	d9403617 	ldw	r5,216(sp)
 800bf74:	d9002d17 	ldw	r4,180(sp)
 800bf78:	d8800215 	stw	r2,8(sp)
 800bf7c:	d8802604 	addi	r2,sp,152
 800bf80:	d8800115 	stw	r2,4(sp)
 800bf84:	01c000c4 	movi	r7,3
 800bf88:	980d883a 	mov	r6,r19
 800bf8c:	da003d15 	stw	r8,244(sp)
 800bf90:	800c7280 	call	800c728 <_dtoa_r>
 800bf94:	d8c02a17 	ldw	r3,168(sp)
 800bf98:	da003d17 	ldw	r8,244(sp)
 800bf9c:	1021883a 	mov	r16,r2
 800bfa0:	00801184 	movi	r2,70
 800bfa4:	80f9883a 	add	fp,r16,r3
 800bfa8:	88bfd926 	beq	r17,r2,800bf10 <___vfprintf_internal_r+0x1fcc>
 800bfac:	003de806 	br	800b750 <___vfprintf_internal_r+0x180c>
 800bfb0:	d9002a17 	ldw	r4,168(sp)
 800bfb4:	00c04d0e 	bge	zero,r3,800c0ec <___vfprintf_internal_r+0x21a8>
 800bfb8:	2000441e 	bne	r4,zero,800c0cc <___vfprintf_internal_r+0x2188>
 800bfbc:	9480004c 	andi	r18,r18,1
 800bfc0:	9000421e 	bne	r18,zero,800c0cc <___vfprintf_internal_r+0x2188>
 800bfc4:	1805883a 	mov	r2,r3
 800bfc8:	18006f16 	blt	r3,zero,800c188 <___vfprintf_internal_r+0x2244>
 800bfcc:	d8c03217 	ldw	r3,200(sp)
 800bfd0:	d8c02b15 	stw	r3,172(sp)
 800bfd4:	003e0206 	br	800b7e0 <___vfprintf_internal_r+0x189c>
 800bfd8:	df0022c4 	addi	fp,sp,139
 800bfdc:	dc002a15 	stw	r16,168(sp)
 800bfe0:	4027883a 	mov	r19,r8
 800bfe4:	e021883a 	mov	r16,fp
 800bfe8:	b009883a 	mov	r4,r22
 800bfec:	01400284 	movi	r5,10
 800bff0:	80085040 	call	8008504 <__modsi3>
 800bff4:	10800c04 	addi	r2,r2,48
 800bff8:	843fffc4 	addi	r16,r16,-1
 800bffc:	b009883a 	mov	r4,r22
 800c000:	01400284 	movi	r5,10
 800c004:	80800005 	stb	r2,0(r16)
 800c008:	80084800 	call	8008480 <__divsi3>
 800c00c:	102d883a 	mov	r22,r2
 800c010:	00800244 	movi	r2,9
 800c014:	15bff416 	blt	r2,r22,800bfe8 <___vfprintf_internal_r+0x20a4>
 800c018:	9811883a 	mov	r8,r19
 800c01c:	b0800c04 	addi	r2,r22,48
 800c020:	8027883a 	mov	r19,r16
 800c024:	997fffc4 	addi	r5,r19,-1
 800c028:	98bfffc5 	stb	r2,-1(r19)
 800c02c:	dc002a17 	ldw	r16,168(sp)
 800c030:	2f006d2e 	bgeu	r5,fp,800c1e8 <___vfprintf_internal_r+0x22a4>
 800c034:	d9c02384 	addi	r7,sp,142
 800c038:	3ccfc83a 	sub	r7,r7,r19
 800c03c:	d9002344 	addi	r4,sp,141
 800c040:	e1cf883a 	add	r7,fp,r7
 800c044:	00000106 	br	800c04c <___vfprintf_internal_r+0x2108>
 800c048:	28800003 	ldbu	r2,0(r5)
 800c04c:	20800005 	stb	r2,0(r4)
 800c050:	21000044 	addi	r4,r4,1
 800c054:	29400044 	addi	r5,r5,1
 800c058:	393ffb1e 	bne	r7,r4,800c048 <___vfprintf_internal_r+0x2104>
 800c05c:	d8802304 	addi	r2,sp,140
 800c060:	14c5c83a 	sub	r2,r2,r19
 800c064:	d8c02344 	addi	r3,sp,141
 800c068:	1885883a 	add	r2,r3,r2
 800c06c:	003f7006 	br	800be30 <___vfprintf_internal_r+0x1eec>
 800c070:	0005883a 	mov	r2,zero
 800c074:	003f0f06 	br	800bcb4 <___vfprintf_internal_r+0x1d70>
 800c078:	d8c03217 	ldw	r3,200(sp)
 800c07c:	18c00044 	addi	r3,r3,1
 800c080:	d8c02b15 	stw	r3,172(sp)
 800c084:	1805883a 	mov	r2,r3
 800c088:	183fb20e 	bge	r3,zero,800bf54 <___vfprintf_internal_r+0x2010>
 800c08c:	0005883a 	mov	r2,zero
 800c090:	003fb006 	br	800bf54 <___vfprintf_internal_r+0x2010>
 800c094:	d9003617 	ldw	r4,216(sp)
 800c098:	000d883a 	mov	r6,zero
 800c09c:	000f883a 	mov	r7,zero
 800c0a0:	980b883a 	mov	r5,r19
 800c0a4:	d8c03c15 	stw	r3,240(sp)
 800c0a8:	da003d15 	stw	r8,244(sp)
 800c0ac:	80147300 	call	8014730 <__eqdf2>
 800c0b0:	d8c03c17 	ldw	r3,240(sp)
 800c0b4:	da003d17 	ldw	r8,244(sp)
 800c0b8:	103f9826 	beq	r2,zero,800bf1c <___vfprintf_internal_r+0x1fd8>
 800c0bc:	00800044 	movi	r2,1
 800c0c0:	10c7c83a 	sub	r3,r2,r3
 800c0c4:	d8c02615 	stw	r3,152(sp)
 800c0c8:	003f9506 	br	800bf20 <___vfprintf_internal_r+0x1fdc>
 800c0cc:	d9002a17 	ldw	r4,168(sp)
 800c0d0:	d8c03217 	ldw	r3,200(sp)
 800c0d4:	20800044 	addi	r2,r4,1
 800c0d8:	1885883a 	add	r2,r3,r2
 800c0dc:	d8802b15 	stw	r2,172(sp)
 800c0e0:	103dbf0e 	bge	r2,zero,800b7e0 <___vfprintf_internal_r+0x189c>
 800c0e4:	0005883a 	mov	r2,zero
 800c0e8:	003dbd06 	br	800b7e0 <___vfprintf_internal_r+0x189c>
 800c0ec:	2000201e 	bne	r4,zero,800c170 <___vfprintf_internal_r+0x222c>
 800c0f0:	9480004c 	andi	r18,r18,1
 800c0f4:	90001e1e 	bne	r18,zero,800c170 <___vfprintf_internal_r+0x222c>
 800c0f8:	00800044 	movi	r2,1
 800c0fc:	d8802b15 	stw	r2,172(sp)
 800c100:	003db706 	br	800b7e0 <___vfprintf_internal_r+0x189c>
 800c104:	00800b44 	movi	r2,45
 800c108:	05adc83a 	sub	r22,zero,r22
 800c10c:	d8802305 	stb	r2,140(sp)
 800c110:	003f3f06 	br	800be10 <___vfprintf_internal_r+0x1ecc>
 800c114:	0005883a 	mov	r2,zero
 800c118:	003f5206 	br	800be64 <___vfprintf_internal_r+0x1f20>
 800c11c:	90a4703a 	and	r18,r18,r2
 800c120:	903f4e26 	beq	r18,zero,800be5c <___vfprintf_internal_r+0x1f18>
 800c124:	003f4a06 	br	800be50 <___vfprintf_internal_r+0x1f0c>
 800c128:	00800084 	movi	r2,2
 800c12c:	10c5c83a 	sub	r2,r2,r3
 800c130:	003f8406 	br	800bf44 <___vfprintf_internal_r+0x2000>
 800c134:	d9402e17 	ldw	r5,184(sp)
 800c138:	d9002e17 	ldw	r4,184(sp)
 800c13c:	ac400043 	ldbu	r17,1(r21)
 800c140:	29400017 	ldw	r5,0(r5)
 800c144:	20800104 	addi	r2,r4,4
 800c148:	d8802e15 	stw	r2,184(sp)
 800c14c:	d9402a15 	stw	r5,168(sp)
 800c150:	182b883a 	mov	r21,r3
 800c154:	283e7b0e 	bge	r5,zero,800bb44 <___vfprintf_internal_r+0x1c00>
 800c158:	8c403fcc 	andi	r17,r17,255
 800c15c:	017fffc4 	movi	r5,-1
 800c160:	8c40201c 	xori	r17,r17,128
 800c164:	d9402a15 	stw	r5,168(sp)
 800c168:	8c7fe004 	addi	r17,r17,-128
 800c16c:	0037d706 	br	800a0cc <___vfprintf_internal_r+0x188>
 800c170:	d8c02a17 	ldw	r3,168(sp)
 800c174:	18c00084 	addi	r3,r3,2
 800c178:	d8c02b15 	stw	r3,172(sp)
 800c17c:	1805883a 	mov	r2,r3
 800c180:	183d970e 	bge	r3,zero,800b7e0 <___vfprintf_internal_r+0x189c>
 800c184:	003fd706 	br	800c0e4 <___vfprintf_internal_r+0x21a0>
 800c188:	0005883a 	mov	r2,zero
 800c18c:	003f8f06 	br	800bfcc <___vfprintf_internal_r+0x2088>
 800c190:	9080004c 	andi	r2,r18,1
 800c194:	103f821e 	bne	r2,zero,800bfa0 <___vfprintf_internal_r+0x205c>
 800c198:	d8802117 	ldw	r2,132(sp)
 800c19c:	1405c83a 	sub	r2,r2,r16
 800c1a0:	d8803315 	stw	r2,204(sp)
 800c1a4:	b47ef426 	beq	r22,r17,800bd78 <___vfprintf_internal_r+0x1e34>
 800c1a8:	dd802617 	ldw	r22,152(sp)
 800c1ac:	003f1206 	br	800bdf8 <___vfprintf_internal_r+0x1eb4>
 800c1b0:	d8c02b03 	ldbu	r3,172(sp)
 800c1b4:	d8c02785 	stb	r3,158(sp)
 800c1b8:	0038df06 	br	800a538 <___vfprintf_internal_r+0x5f4>
 800c1bc:	d8c02b03 	ldbu	r3,172(sp)
 800c1c0:	d8c02785 	stb	r3,158(sp)
 800c1c4:	0038aa06 	br	800a470 <___vfprintf_internal_r+0x52c>
 800c1c8:	d8c02b03 	ldbu	r3,172(sp)
 800c1cc:	d8c02785 	stb	r3,158(sp)
 800c1d0:	003a4306 	br	800aae0 <___vfprintf_internal_r+0xb9c>
 800c1d4:	d8c02b03 	ldbu	r3,172(sp)
 800c1d8:	d8c02785 	stb	r3,158(sp)
 800c1dc:	003af506 	br	800adb4 <___vfprintf_internal_r+0xe70>
 800c1e0:	0005883a 	mov	r2,zero
 800c1e4:	003d7b06 	br	800b7d4 <___vfprintf_internal_r+0x1890>
 800c1e8:	d8802344 	addi	r2,sp,141
 800c1ec:	003f1006 	br	800be30 <___vfprintf_internal_r+0x1eec>
 800c1f0:	d8c02b03 	ldbu	r3,172(sp)
 800c1f4:	d8c02785 	stb	r3,158(sp)
 800c1f8:	0038fd06 	br	800a5f0 <___vfprintf_internal_r+0x6ac>
 800c1fc:	d8c02b03 	ldbu	r3,172(sp)
 800c200:	d8c02785 	stb	r3,158(sp)
 800c204:	003a9706 	br	800ac64 <___vfprintf_internal_r+0xd20>
 800c208:	d8c02b03 	ldbu	r3,172(sp)
 800c20c:	d8c02785 	stb	r3,158(sp)
 800c210:	003a1806 	br	800aa74 <___vfprintf_internal_r+0xb30>
 800c214:	d8c02b03 	ldbu	r3,172(sp)
 800c218:	d8c02785 	stb	r3,158(sp)
 800c21c:	003abe06 	br	800ad18 <___vfprintf_internal_r+0xdd4>

0800c220 <__vfprintf_internal>:
 800c220:	008200b4 	movhi	r2,2050
 800c224:	10b14b04 	addi	r2,r2,-15060
 800c228:	300f883a 	mov	r7,r6
 800c22c:	280d883a 	mov	r6,r5
 800c230:	200b883a 	mov	r5,r4
 800c234:	11000017 	ldw	r4,0(r2)
 800c238:	8009f441 	jmpi	8009f44 <___vfprintf_internal_r>

0800c23c <__sbprintf>:
 800c23c:	2880030b 	ldhu	r2,12(r5)
 800c240:	2ac01917 	ldw	r11,100(r5)
 800c244:	2a80038b 	ldhu	r10,14(r5)
 800c248:	2a400717 	ldw	r9,28(r5)
 800c24c:	2a000917 	ldw	r8,36(r5)
 800c250:	defee204 	addi	sp,sp,-1144
 800c254:	00c10004 	movi	r3,1024
 800c258:	dc011a15 	stw	r16,1128(sp)
 800c25c:	10bfff4c 	andi	r2,r2,65533
 800c260:	2821883a 	mov	r16,r5
 800c264:	d8cb883a 	add	r5,sp,r3
 800c268:	dc811c15 	stw	r18,1136(sp)
 800c26c:	dc411b15 	stw	r17,1132(sp)
 800c270:	dfc11d15 	stw	ra,1140(sp)
 800c274:	2025883a 	mov	r18,r4
 800c278:	d881030d 	sth	r2,1036(sp)
 800c27c:	dac11915 	stw	r11,1124(sp)
 800c280:	da81038d 	sth	r10,1038(sp)
 800c284:	da410715 	stw	r9,1052(sp)
 800c288:	da010915 	stw	r8,1060(sp)
 800c28c:	dec10015 	stw	sp,1024(sp)
 800c290:	dec10415 	stw	sp,1040(sp)
 800c294:	d8c10215 	stw	r3,1032(sp)
 800c298:	d8c10515 	stw	r3,1044(sp)
 800c29c:	d8010615 	stw	zero,1048(sp)
 800c2a0:	8009f440 	call	8009f44 <___vfprintf_internal_r>
 800c2a4:	1023883a 	mov	r17,r2
 800c2a8:	10000416 	blt	r2,zero,800c2bc <__sbprintf+0x80>
 800c2ac:	d9410004 	addi	r5,sp,1024
 800c2b0:	9009883a 	mov	r4,r18
 800c2b4:	800dfcc0 	call	800dfcc <_fflush_r>
 800c2b8:	10000d1e 	bne	r2,zero,800c2f0 <__sbprintf+0xb4>
 800c2bc:	d881030b 	ldhu	r2,1036(sp)
 800c2c0:	1080100c 	andi	r2,r2,64
 800c2c4:	10000326 	beq	r2,zero,800c2d4 <__sbprintf+0x98>
 800c2c8:	8080030b 	ldhu	r2,12(r16)
 800c2cc:	10801014 	ori	r2,r2,64
 800c2d0:	8080030d 	sth	r2,12(r16)
 800c2d4:	8805883a 	mov	r2,r17
 800c2d8:	dfc11d17 	ldw	ra,1140(sp)
 800c2dc:	dc811c17 	ldw	r18,1136(sp)
 800c2e0:	dc411b17 	ldw	r17,1132(sp)
 800c2e4:	dc011a17 	ldw	r16,1128(sp)
 800c2e8:	dec11e04 	addi	sp,sp,1144
 800c2ec:	f800283a 	ret
 800c2f0:	047fffc4 	movi	r17,-1
 800c2f4:	003ff106 	br	800c2bc <__sbprintf+0x80>

0800c2f8 <_write_r>:
 800c2f8:	defffd04 	addi	sp,sp,-12
 800c2fc:	2805883a 	mov	r2,r5
 800c300:	dc000015 	stw	r16,0(sp)
 800c304:	040200b4 	movhi	r16,2050
 800c308:	dc400115 	stw	r17,4(sp)
 800c30c:	300b883a 	mov	r5,r6
 800c310:	8439f604 	addi	r16,r16,-6184
 800c314:	2023883a 	mov	r17,r4
 800c318:	380d883a 	mov	r6,r7
 800c31c:	1009883a 	mov	r4,r2
 800c320:	dfc00215 	stw	ra,8(sp)
 800c324:	80000015 	stw	zero,0(r16)
 800c328:	8016c880 	call	8016c88 <write>
 800c32c:	00ffffc4 	movi	r3,-1
 800c330:	10c00526 	beq	r2,r3,800c348 <_write_r+0x50>
 800c334:	dfc00217 	ldw	ra,8(sp)
 800c338:	dc400117 	ldw	r17,4(sp)
 800c33c:	dc000017 	ldw	r16,0(sp)
 800c340:	dec00304 	addi	sp,sp,12
 800c344:	f800283a 	ret
 800c348:	80c00017 	ldw	r3,0(r16)
 800c34c:	183ff926 	beq	r3,zero,800c334 <_write_r+0x3c>
 800c350:	88c00015 	stw	r3,0(r17)
 800c354:	003ff706 	br	800c334 <_write_r+0x3c>

0800c358 <__swsetup_r>:
 800c358:	008200b4 	movhi	r2,2050
 800c35c:	defffd04 	addi	sp,sp,-12
 800c360:	10b14b04 	addi	r2,r2,-15060
 800c364:	dc400115 	stw	r17,4(sp)
 800c368:	2023883a 	mov	r17,r4
 800c36c:	11000017 	ldw	r4,0(r2)
 800c370:	dc000015 	stw	r16,0(sp)
 800c374:	dfc00215 	stw	ra,8(sp)
 800c378:	2821883a 	mov	r16,r5
 800c37c:	20000226 	beq	r4,zero,800c388 <__swsetup_r+0x30>
 800c380:	20800e17 	ldw	r2,56(r4)
 800c384:	10003126 	beq	r2,zero,800c44c <__swsetup_r+0xf4>
 800c388:	8080030b 	ldhu	r2,12(r16)
 800c38c:	10c0020c 	andi	r3,r2,8
 800c390:	1009883a 	mov	r4,r2
 800c394:	18000f26 	beq	r3,zero,800c3d4 <__swsetup_r+0x7c>
 800c398:	80c00417 	ldw	r3,16(r16)
 800c39c:	18001526 	beq	r3,zero,800c3f4 <__swsetup_r+0x9c>
 800c3a0:	1100004c 	andi	r4,r2,1
 800c3a4:	20001c1e 	bne	r4,zero,800c418 <__swsetup_r+0xc0>
 800c3a8:	1080008c 	andi	r2,r2,2
 800c3ac:	1000291e 	bne	r2,zero,800c454 <__swsetup_r+0xfc>
 800c3b0:	80800517 	ldw	r2,20(r16)
 800c3b4:	80800215 	stw	r2,8(r16)
 800c3b8:	18001c26 	beq	r3,zero,800c42c <__swsetup_r+0xd4>
 800c3bc:	0005883a 	mov	r2,zero
 800c3c0:	dfc00217 	ldw	ra,8(sp)
 800c3c4:	dc400117 	ldw	r17,4(sp)
 800c3c8:	dc000017 	ldw	r16,0(sp)
 800c3cc:	dec00304 	addi	sp,sp,12
 800c3d0:	f800283a 	ret
 800c3d4:	2080040c 	andi	r2,r4,16
 800c3d8:	10002e26 	beq	r2,zero,800c494 <__swsetup_r+0x13c>
 800c3dc:	2080010c 	andi	r2,r4,4
 800c3e0:	10001e1e 	bne	r2,zero,800c45c <__swsetup_r+0x104>
 800c3e4:	80c00417 	ldw	r3,16(r16)
 800c3e8:	20800214 	ori	r2,r4,8
 800c3ec:	8080030d 	sth	r2,12(r16)
 800c3f0:	183feb1e 	bne	r3,zero,800c3a0 <__swsetup_r+0x48>
 800c3f4:	1100a00c 	andi	r4,r2,640
 800c3f8:	01408004 	movi	r5,512
 800c3fc:	217fe826 	beq	r4,r5,800c3a0 <__swsetup_r+0x48>
 800c400:	800b883a 	mov	r5,r16
 800c404:	8809883a 	mov	r4,r17
 800c408:	8008d540 	call	8008d54 <__smakebuf_r>
 800c40c:	8080030b 	ldhu	r2,12(r16)
 800c410:	80c00417 	ldw	r3,16(r16)
 800c414:	003fe206 	br	800c3a0 <__swsetup_r+0x48>
 800c418:	80800517 	ldw	r2,20(r16)
 800c41c:	80000215 	stw	zero,8(r16)
 800c420:	0085c83a 	sub	r2,zero,r2
 800c424:	80800615 	stw	r2,24(r16)
 800c428:	183fe41e 	bne	r3,zero,800c3bc <__swsetup_r+0x64>
 800c42c:	80c0030b 	ldhu	r3,12(r16)
 800c430:	0005883a 	mov	r2,zero
 800c434:	1900200c 	andi	r4,r3,128
 800c438:	203fe126 	beq	r4,zero,800c3c0 <__swsetup_r+0x68>
 800c43c:	18c01014 	ori	r3,r3,64
 800c440:	80c0030d 	sth	r3,12(r16)
 800c444:	00bfffc4 	movi	r2,-1
 800c448:	003fdd06 	br	800c3c0 <__swsetup_r+0x68>
 800c44c:	800e3b80 	call	800e3b8 <__sinit>
 800c450:	003fcd06 	br	800c388 <__swsetup_r+0x30>
 800c454:	0005883a 	mov	r2,zero
 800c458:	003fd606 	br	800c3b4 <__swsetup_r+0x5c>
 800c45c:	81400c17 	ldw	r5,48(r16)
 800c460:	28000626 	beq	r5,zero,800c47c <__swsetup_r+0x124>
 800c464:	80801004 	addi	r2,r16,64
 800c468:	28800326 	beq	r5,r2,800c478 <__swsetup_r+0x120>
 800c46c:	8809883a 	mov	r4,r17
 800c470:	800e5d80 	call	800e5d8 <_free_r>
 800c474:	8100030b 	ldhu	r4,12(r16)
 800c478:	80000c15 	stw	zero,48(r16)
 800c47c:	80c00417 	ldw	r3,16(r16)
 800c480:	00bff6c4 	movi	r2,-37
 800c484:	1108703a 	and	r4,r2,r4
 800c488:	80000115 	stw	zero,4(r16)
 800c48c:	80c00015 	stw	r3,0(r16)
 800c490:	003fd506 	br	800c3e8 <__swsetup_r+0x90>
 800c494:	00800244 	movi	r2,9
 800c498:	88800015 	stw	r2,0(r17)
 800c49c:	20801014 	ori	r2,r4,64
 800c4a0:	8080030d 	sth	r2,12(r16)
 800c4a4:	00bfffc4 	movi	r2,-1
 800c4a8:	003fc506 	br	800c3c0 <__swsetup_r+0x68>

0800c4ac <_close_r>:
 800c4ac:	defffd04 	addi	sp,sp,-12
 800c4b0:	dc000015 	stw	r16,0(sp)
 800c4b4:	040200b4 	movhi	r16,2050
 800c4b8:	dc400115 	stw	r17,4(sp)
 800c4bc:	8439f604 	addi	r16,r16,-6184
 800c4c0:	2023883a 	mov	r17,r4
 800c4c4:	2809883a 	mov	r4,r5
 800c4c8:	dfc00215 	stw	ra,8(sp)
 800c4cc:	80000015 	stw	zero,0(r16)
 800c4d0:	8015d940 	call	8015d94 <close>
 800c4d4:	00ffffc4 	movi	r3,-1
 800c4d8:	10c00526 	beq	r2,r3,800c4f0 <_close_r+0x44>
 800c4dc:	dfc00217 	ldw	ra,8(sp)
 800c4e0:	dc400117 	ldw	r17,4(sp)
 800c4e4:	dc000017 	ldw	r16,0(sp)
 800c4e8:	dec00304 	addi	sp,sp,12
 800c4ec:	f800283a 	ret
 800c4f0:	80c00017 	ldw	r3,0(r16)
 800c4f4:	183ff926 	beq	r3,zero,800c4dc <_close_r+0x30>
 800c4f8:	88c00015 	stw	r3,0(r17)
 800c4fc:	003ff706 	br	800c4dc <_close_r+0x30>

0800c500 <quorem>:
 800c500:	defff204 	addi	sp,sp,-56
 800c504:	ddc00b15 	stw	r23,44(sp)
 800c508:	20800417 	ldw	r2,16(r4)
 800c50c:	2dc00417 	ldw	r23,16(r5)
 800c510:	dfc00d15 	stw	ra,52(sp)
 800c514:	df000c15 	stw	fp,48(sp)
 800c518:	dd800a15 	stw	r22,40(sp)
 800c51c:	dd400915 	stw	r21,36(sp)
 800c520:	dd000815 	stw	r20,32(sp)
 800c524:	dcc00715 	stw	r19,28(sp)
 800c528:	dc800615 	stw	r18,24(sp)
 800c52c:	dc400515 	stw	r17,20(sp)
 800c530:	dc000415 	stw	r16,16(sp)
 800c534:	15c07a16 	blt	r2,r23,800c720 <quorem+0x220>
 800c538:	bdffffc4 	addi	r23,r23,-1
 800c53c:	bde9883a 	add	r20,r23,r23
 800c540:	28c00504 	addi	r3,r5,20
 800c544:	a529883a 	add	r20,r20,r20
 800c548:	1d39883a 	add	fp,r3,r20
 800c54c:	24c00504 	addi	r19,r4,20
 800c550:	d9400215 	stw	r5,8(sp)
 800c554:	9d29883a 	add	r20,r19,r20
 800c558:	e1400017 	ldw	r5,0(fp)
 800c55c:	d9000015 	stw	r4,0(sp)
 800c560:	a1000017 	ldw	r4,0(r20)
 800c564:	29400044 	addi	r5,r5,1
 800c568:	d8c00115 	stw	r3,4(sp)
 800c56c:	dd000315 	stw	r20,12(sp)
 800c570:	80085780 	call	8008578 <__udivsi3>
 800c574:	1025883a 	mov	r18,r2
 800c578:	10003026 	beq	r2,zero,800c63c <quorem+0x13c>
 800c57c:	dc400117 	ldw	r17,4(sp)
 800c580:	9829883a 	mov	r20,r19
 800c584:	002d883a 	mov	r22,zero
 800c588:	0021883a 	mov	r16,zero
 800c58c:	8d400017 	ldw	r21,0(r17)
 800c590:	900b883a 	mov	r5,r18
 800c594:	8c400104 	addi	r17,r17,4
 800c598:	a93fffcc 	andi	r4,r21,65535
 800c59c:	80086340 	call	8008634 <__mulsi3>
 800c5a0:	a808d43a 	srli	r4,r21,16
 800c5a4:	900b883a 	mov	r5,r18
 800c5a8:	15ad883a 	add	r22,r2,r22
 800c5ac:	80086340 	call	8008634 <__mulsi3>
 800c5b0:	a1000017 	ldw	r4,0(r20)
 800c5b4:	b00cd43a 	srli	r6,r22,16
 800c5b8:	b0ffffcc 	andi	r3,r22,65535
 800c5bc:	217fffcc 	andi	r5,r4,65535
 800c5c0:	2c21883a 	add	r16,r5,r16
 800c5c4:	80c7c83a 	sub	r3,r16,r3
 800c5c8:	2008d43a 	srli	r4,r4,16
 800c5cc:	1185883a 	add	r2,r2,r6
 800c5d0:	1821d43a 	srai	r16,r3,16
 800c5d4:	117fffcc 	andi	r5,r2,65535
 800c5d8:	2149c83a 	sub	r4,r4,r5
 800c5dc:	2421883a 	add	r16,r4,r16
 800c5e0:	8008943a 	slli	r4,r16,16
 800c5e4:	18ffffcc 	andi	r3,r3,65535
 800c5e8:	102cd43a 	srli	r22,r2,16
 800c5ec:	20c8b03a 	or	r4,r4,r3
 800c5f0:	a1000015 	stw	r4,0(r20)
 800c5f4:	8021d43a 	srai	r16,r16,16
 800c5f8:	a5000104 	addi	r20,r20,4
 800c5fc:	e47fe32e 	bgeu	fp,r17,800c58c <quorem+0x8c>
 800c600:	d8c00317 	ldw	r3,12(sp)
 800c604:	18800017 	ldw	r2,0(r3)
 800c608:	10000c1e 	bne	r2,zero,800c63c <quorem+0x13c>
 800c60c:	18bfff04 	addi	r2,r3,-4
 800c610:	9880082e 	bgeu	r19,r2,800c634 <quorem+0x134>
 800c614:	18ffff17 	ldw	r3,-4(r3)
 800c618:	18000326 	beq	r3,zero,800c628 <quorem+0x128>
 800c61c:	00000506 	br	800c634 <quorem+0x134>
 800c620:	10c00017 	ldw	r3,0(r2)
 800c624:	1800031e 	bne	r3,zero,800c634 <quorem+0x134>
 800c628:	10bfff04 	addi	r2,r2,-4
 800c62c:	bdffffc4 	addi	r23,r23,-1
 800c630:	98bffb36 	bltu	r19,r2,800c620 <quorem+0x120>
 800c634:	d8c00017 	ldw	r3,0(sp)
 800c638:	1dc00415 	stw	r23,16(r3)
 800c63c:	d9400217 	ldw	r5,8(sp)
 800c640:	d9000017 	ldw	r4,0(sp)
 800c644:	800fc8c0 	call	800fc8c <__mcmp>
 800c648:	10002816 	blt	r2,zero,800c6ec <quorem+0x1ec>
 800c64c:	dc400117 	ldw	r17,4(sp)
 800c650:	94800044 	addi	r18,r18,1
 800c654:	980d883a 	mov	r6,r19
 800c658:	0007883a 	mov	r3,zero
 800c65c:	31000017 	ldw	r4,0(r6)
 800c660:	89400017 	ldw	r5,0(r17)
 800c664:	31800104 	addi	r6,r6,4
 800c668:	20bfffcc 	andi	r2,r4,65535
 800c66c:	10c7883a 	add	r3,r2,r3
 800c670:	28bfffcc 	andi	r2,r5,65535
 800c674:	1885c83a 	sub	r2,r3,r2
 800c678:	280ad43a 	srli	r5,r5,16
 800c67c:	2008d43a 	srli	r4,r4,16
 800c680:	1007d43a 	srai	r3,r2,16
 800c684:	10bfffcc 	andi	r2,r2,65535
 800c688:	2149c83a 	sub	r4,r4,r5
 800c68c:	20c9883a 	add	r4,r4,r3
 800c690:	200a943a 	slli	r5,r4,16
 800c694:	8c400104 	addi	r17,r17,4
 800c698:	2007d43a 	srai	r3,r4,16
 800c69c:	2884b03a 	or	r2,r5,r2
 800c6a0:	30bfff15 	stw	r2,-4(r6)
 800c6a4:	e47fed2e 	bgeu	fp,r17,800c65c <quorem+0x15c>
 800c6a8:	bdc5883a 	add	r2,r23,r23
 800c6ac:	1085883a 	add	r2,r2,r2
 800c6b0:	9887883a 	add	r3,r19,r2
 800c6b4:	18800017 	ldw	r2,0(r3)
 800c6b8:	10000c1e 	bne	r2,zero,800c6ec <quorem+0x1ec>
 800c6bc:	18bfff04 	addi	r2,r3,-4
 800c6c0:	9880082e 	bgeu	r19,r2,800c6e4 <quorem+0x1e4>
 800c6c4:	18ffff17 	ldw	r3,-4(r3)
 800c6c8:	18000326 	beq	r3,zero,800c6d8 <quorem+0x1d8>
 800c6cc:	00000506 	br	800c6e4 <quorem+0x1e4>
 800c6d0:	10c00017 	ldw	r3,0(r2)
 800c6d4:	1800031e 	bne	r3,zero,800c6e4 <quorem+0x1e4>
 800c6d8:	10bfff04 	addi	r2,r2,-4
 800c6dc:	bdffffc4 	addi	r23,r23,-1
 800c6e0:	98bffb36 	bltu	r19,r2,800c6d0 <quorem+0x1d0>
 800c6e4:	d8c00017 	ldw	r3,0(sp)
 800c6e8:	1dc00415 	stw	r23,16(r3)
 800c6ec:	9005883a 	mov	r2,r18
 800c6f0:	dfc00d17 	ldw	ra,52(sp)
 800c6f4:	df000c17 	ldw	fp,48(sp)
 800c6f8:	ddc00b17 	ldw	r23,44(sp)
 800c6fc:	dd800a17 	ldw	r22,40(sp)
 800c700:	dd400917 	ldw	r21,36(sp)
 800c704:	dd000817 	ldw	r20,32(sp)
 800c708:	dcc00717 	ldw	r19,28(sp)
 800c70c:	dc800617 	ldw	r18,24(sp)
 800c710:	dc400517 	ldw	r17,20(sp)
 800c714:	dc000417 	ldw	r16,16(sp)
 800c718:	dec00e04 	addi	sp,sp,56
 800c71c:	f800283a 	ret
 800c720:	0005883a 	mov	r2,zero
 800c724:	003ff206 	br	800c6f0 <quorem+0x1f0>

0800c728 <_dtoa_r>:
 800c728:	20801017 	ldw	r2,64(r4)
 800c72c:	deffde04 	addi	sp,sp,-136
 800c730:	df002015 	stw	fp,128(sp)
 800c734:	dcc01b15 	stw	r19,108(sp)
 800c738:	dc801a15 	stw	r18,104(sp)
 800c73c:	dc401915 	stw	r17,100(sp)
 800c740:	dc001815 	stw	r16,96(sp)
 800c744:	dfc02115 	stw	ra,132(sp)
 800c748:	ddc01f15 	stw	r23,124(sp)
 800c74c:	dd801e15 	stw	r22,120(sp)
 800c750:	dd401d15 	stw	r21,116(sp)
 800c754:	dd001c15 	stw	r20,112(sp)
 800c758:	d9c00315 	stw	r7,12(sp)
 800c75c:	2039883a 	mov	fp,r4
 800c760:	3023883a 	mov	r17,r6
 800c764:	2825883a 	mov	r18,r5
 800c768:	dc002417 	ldw	r16,144(sp)
 800c76c:	3027883a 	mov	r19,r6
 800c770:	10000826 	beq	r2,zero,800c794 <_dtoa_r+0x6c>
 800c774:	21801117 	ldw	r6,68(r4)
 800c778:	00c00044 	movi	r3,1
 800c77c:	100b883a 	mov	r5,r2
 800c780:	1986983a 	sll	r3,r3,r6
 800c784:	11800115 	stw	r6,4(r2)
 800c788:	10c00215 	stw	r3,8(r2)
 800c78c:	800f3b00 	call	800f3b0 <_Bfree>
 800c790:	e0001015 	stw	zero,64(fp)
 800c794:	88002e16 	blt	r17,zero,800c850 <_dtoa_r+0x128>
 800c798:	80000015 	stw	zero,0(r16)
 800c79c:	889ffc2c 	andhi	r2,r17,32752
 800c7a0:	00dffc34 	movhi	r3,32752
 800c7a4:	10c01c26 	beq	r2,r3,800c818 <_dtoa_r+0xf0>
 800c7a8:	000d883a 	mov	r6,zero
 800c7ac:	000f883a 	mov	r7,zero
 800c7b0:	9009883a 	mov	r4,r18
 800c7b4:	980b883a 	mov	r5,r19
 800c7b8:	80147300 	call	8014730 <__eqdf2>
 800c7bc:	10002b1e 	bne	r2,zero,800c86c <_dtoa_r+0x144>
 800c7c0:	d9c02317 	ldw	r7,140(sp)
 800c7c4:	00800044 	movi	r2,1
 800c7c8:	38800015 	stw	r2,0(r7)
 800c7cc:	d8802517 	ldw	r2,148(sp)
 800c7d0:	10019e26 	beq	r2,zero,800ce4c <_dtoa_r+0x724>
 800c7d4:	d8c02517 	ldw	r3,148(sp)
 800c7d8:	008200b4 	movhi	r2,2050
 800c7dc:	10a86244 	addi	r2,r2,-24183
 800c7e0:	18800015 	stw	r2,0(r3)
 800c7e4:	10bfffc4 	addi	r2,r2,-1
 800c7e8:	dfc02117 	ldw	ra,132(sp)
 800c7ec:	df002017 	ldw	fp,128(sp)
 800c7f0:	ddc01f17 	ldw	r23,124(sp)
 800c7f4:	dd801e17 	ldw	r22,120(sp)
 800c7f8:	dd401d17 	ldw	r21,116(sp)
 800c7fc:	dd001c17 	ldw	r20,112(sp)
 800c800:	dcc01b17 	ldw	r19,108(sp)
 800c804:	dc801a17 	ldw	r18,104(sp)
 800c808:	dc401917 	ldw	r17,100(sp)
 800c80c:	dc001817 	ldw	r16,96(sp)
 800c810:	dec02204 	addi	sp,sp,136
 800c814:	f800283a 	ret
 800c818:	d8c02317 	ldw	r3,140(sp)
 800c81c:	0089c3c4 	movi	r2,9999
 800c820:	18800015 	stw	r2,0(r3)
 800c824:	90017726 	beq	r18,zero,800ce04 <_dtoa_r+0x6dc>
 800c828:	008200b4 	movhi	r2,2050
 800c82c:	10a86e04 	addi	r2,r2,-24136
 800c830:	d9002517 	ldw	r4,148(sp)
 800c834:	203fec26 	beq	r4,zero,800c7e8 <_dtoa_r+0xc0>
 800c838:	10c000c7 	ldb	r3,3(r2)
 800c83c:	1801781e 	bne	r3,zero,800ce20 <_dtoa_r+0x6f8>
 800c840:	10c000c4 	addi	r3,r2,3
 800c844:	d9802517 	ldw	r6,148(sp)
 800c848:	30c00015 	stw	r3,0(r6)
 800c84c:	003fe606 	br	800c7e8 <_dtoa_r+0xc0>
 800c850:	04e00034 	movhi	r19,32768
 800c854:	9cffffc4 	addi	r19,r19,-1
 800c858:	00800044 	movi	r2,1
 800c85c:	8ce6703a 	and	r19,r17,r19
 800c860:	80800015 	stw	r2,0(r16)
 800c864:	9823883a 	mov	r17,r19
 800c868:	003fcc06 	br	800c79c <_dtoa_r+0x74>
 800c86c:	d8800204 	addi	r2,sp,8
 800c870:	d8800015 	stw	r2,0(sp)
 800c874:	d9c00104 	addi	r7,sp,4
 800c878:	900b883a 	mov	r5,r18
 800c87c:	980d883a 	mov	r6,r19
 800c880:	e009883a 	mov	r4,fp
 800c884:	8820d53a 	srli	r16,r17,20
 800c888:	80100580 	call	8010058 <__d2b>
 800c88c:	d8800915 	stw	r2,36(sp)
 800c890:	8001651e 	bne	r16,zero,800ce28 <_dtoa_r+0x700>
 800c894:	dd800217 	ldw	r22,8(sp)
 800c898:	dc000117 	ldw	r16,4(sp)
 800c89c:	00800804 	movi	r2,32
 800c8a0:	b421883a 	add	r16,r22,r16
 800c8a4:	80c10c84 	addi	r3,r16,1074
 800c8a8:	10c2d10e 	bge	r2,r3,800d3f0 <_dtoa_r+0xcc8>
 800c8ac:	00801004 	movi	r2,64
 800c8b0:	81010484 	addi	r4,r16,1042
 800c8b4:	10c7c83a 	sub	r3,r2,r3
 800c8b8:	9108d83a 	srl	r4,r18,r4
 800c8bc:	88e2983a 	sll	r17,r17,r3
 800c8c0:	2448b03a 	or	r4,r4,r17
 800c8c4:	8015c4c0 	call	8015c4c <__floatunsidf>
 800c8c8:	017f8434 	movhi	r5,65040
 800c8cc:	01800044 	movi	r6,1
 800c8d0:	1009883a 	mov	r4,r2
 800c8d4:	194b883a 	add	r5,r3,r5
 800c8d8:	843fffc4 	addi	r16,r16,-1
 800c8dc:	d9801115 	stw	r6,68(sp)
 800c8e0:	000d883a 	mov	r6,zero
 800c8e4:	01cffe34 	movhi	r7,16376
 800c8e8:	80151f40 	call	80151f4 <__subdf3>
 800c8ec:	0198dbf4 	movhi	r6,25455
 800c8f0:	01cff4f4 	movhi	r7,16339
 800c8f4:	3190d844 	addi	r6,r6,17249
 800c8f8:	39e1e9c4 	addi	r7,r7,-30809
 800c8fc:	1009883a 	mov	r4,r2
 800c900:	180b883a 	mov	r5,r3
 800c904:	80149880 	call	8014988 <__muldf3>
 800c908:	01a2d874 	movhi	r6,35681
 800c90c:	01cff1f4 	movhi	r7,16327
 800c910:	31b22cc4 	addi	r6,r6,-14157
 800c914:	39e28a04 	addi	r7,r7,-30168
 800c918:	180b883a 	mov	r5,r3
 800c91c:	1009883a 	mov	r4,r2
 800c920:	80134b40 	call	80134b4 <__adddf3>
 800c924:	8009883a 	mov	r4,r16
 800c928:	1029883a 	mov	r20,r2
 800c92c:	1823883a 	mov	r17,r3
 800c930:	8015b700 	call	8015b70 <__floatsidf>
 800c934:	019427f4 	movhi	r6,20639
 800c938:	01cff4f4 	movhi	r7,16339
 800c93c:	319e7ec4 	addi	r6,r6,31227
 800c940:	39d104c4 	addi	r7,r7,17427
 800c944:	1009883a 	mov	r4,r2
 800c948:	180b883a 	mov	r5,r3
 800c94c:	80149880 	call	8014988 <__muldf3>
 800c950:	100d883a 	mov	r6,r2
 800c954:	180f883a 	mov	r7,r3
 800c958:	a009883a 	mov	r4,r20
 800c95c:	880b883a 	mov	r5,r17
 800c960:	80134b40 	call	80134b4 <__adddf3>
 800c964:	1009883a 	mov	r4,r2
 800c968:	180b883a 	mov	r5,r3
 800c96c:	1029883a 	mov	r20,r2
 800c970:	1823883a 	mov	r17,r3
 800c974:	8015af00 	call	8015af0 <__fixdfsi>
 800c978:	000d883a 	mov	r6,zero
 800c97c:	000f883a 	mov	r7,zero
 800c980:	a009883a 	mov	r4,r20
 800c984:	880b883a 	mov	r5,r17
 800c988:	d8800515 	stw	r2,20(sp)
 800c98c:	80148940 	call	8014894 <__ledf2>
 800c990:	10028716 	blt	r2,zero,800d3b0 <_dtoa_r+0xc88>
 800c994:	d8c00517 	ldw	r3,20(sp)
 800c998:	00800584 	movi	r2,22
 800c99c:	10c27536 	bltu	r2,r3,800d374 <_dtoa_r+0xc4c>
 800c9a0:	180490fa 	slli	r2,r3,3
 800c9a4:	00c200b4 	movhi	r3,2050
 800c9a8:	18e88904 	addi	r3,r3,-24028
 800c9ac:	1885883a 	add	r2,r3,r2
 800c9b0:	11000017 	ldw	r4,0(r2)
 800c9b4:	11400117 	ldw	r5,4(r2)
 800c9b8:	900d883a 	mov	r6,r18
 800c9bc:	980f883a 	mov	r7,r19
 800c9c0:	80147b80 	call	80147b8 <__gedf2>
 800c9c4:	00828d0e 	bge	zero,r2,800d3fc <_dtoa_r+0xcd4>
 800c9c8:	d9000517 	ldw	r4,20(sp)
 800c9cc:	d8000e15 	stw	zero,56(sp)
 800c9d0:	213fffc4 	addi	r4,r4,-1
 800c9d4:	d9000515 	stw	r4,20(sp)
 800c9d8:	b42dc83a 	sub	r22,r22,r16
 800c9dc:	b5bfffc4 	addi	r22,r22,-1
 800c9e0:	b0026f16 	blt	r22,zero,800d3a0 <_dtoa_r+0xc78>
 800c9e4:	d8000815 	stw	zero,32(sp)
 800c9e8:	d9c00517 	ldw	r7,20(sp)
 800c9ec:	38026416 	blt	r7,zero,800d380 <_dtoa_r+0xc58>
 800c9f0:	b1ed883a 	add	r22,r22,r7
 800c9f4:	d9c00d15 	stw	r7,52(sp)
 800c9f8:	d8000a15 	stw	zero,40(sp)
 800c9fc:	d9800317 	ldw	r6,12(sp)
 800ca00:	00800244 	movi	r2,9
 800ca04:	11811436 	bltu	r2,r6,800ce58 <_dtoa_r+0x730>
 800ca08:	00800144 	movi	r2,5
 800ca0c:	1184e10e 	bge	r2,r6,800dd94 <_dtoa_r+0x166c>
 800ca10:	31bfff04 	addi	r6,r6,-4
 800ca14:	d9800315 	stw	r6,12(sp)
 800ca18:	0023883a 	mov	r17,zero
 800ca1c:	d9800317 	ldw	r6,12(sp)
 800ca20:	008000c4 	movi	r2,3
 800ca24:	30836726 	beq	r6,r2,800d7c4 <_dtoa_r+0x109c>
 800ca28:	1183410e 	bge	r2,r6,800d730 <_dtoa_r+0x1008>
 800ca2c:	d9c00317 	ldw	r7,12(sp)
 800ca30:	00800104 	movi	r2,4
 800ca34:	38827c26 	beq	r7,r2,800d428 <_dtoa_r+0xd00>
 800ca38:	00800144 	movi	r2,5
 800ca3c:	3884c41e 	bne	r7,r2,800dd50 <_dtoa_r+0x1628>
 800ca40:	00800044 	movi	r2,1
 800ca44:	d8800b15 	stw	r2,44(sp)
 800ca48:	d8c00517 	ldw	r3,20(sp)
 800ca4c:	d9002217 	ldw	r4,136(sp)
 800ca50:	1907883a 	add	r3,r3,r4
 800ca54:	19800044 	addi	r6,r3,1
 800ca58:	d8c00c15 	stw	r3,48(sp)
 800ca5c:	d9800615 	stw	r6,24(sp)
 800ca60:	0183a40e 	bge	zero,r6,800d8f4 <_dtoa_r+0x11cc>
 800ca64:	d9800617 	ldw	r6,24(sp)
 800ca68:	3021883a 	mov	r16,r6
 800ca6c:	e0001115 	stw	zero,68(fp)
 800ca70:	008005c4 	movi	r2,23
 800ca74:	1184c92e 	bgeu	r2,r6,800dd9c <_dtoa_r+0x1674>
 800ca78:	00c00044 	movi	r3,1
 800ca7c:	00800104 	movi	r2,4
 800ca80:	1085883a 	add	r2,r2,r2
 800ca84:	11000504 	addi	r4,r2,20
 800ca88:	180b883a 	mov	r5,r3
 800ca8c:	18c00044 	addi	r3,r3,1
 800ca90:	313ffb2e 	bgeu	r6,r4,800ca80 <_dtoa_r+0x358>
 800ca94:	e1401115 	stw	r5,68(fp)
 800ca98:	e009883a 	mov	r4,fp
 800ca9c:	800f3080 	call	800f308 <_Balloc>
 800caa0:	d8800715 	stw	r2,28(sp)
 800caa4:	e0801015 	stw	r2,64(fp)
 800caa8:	00800384 	movi	r2,14
 800caac:	1400f736 	bltu	r2,r16,800ce8c <_dtoa_r+0x764>
 800cab0:	8800f626 	beq	r17,zero,800ce8c <_dtoa_r+0x764>
 800cab4:	d9c00517 	ldw	r7,20(sp)
 800cab8:	01c39a0e 	bge	zero,r7,800d924 <_dtoa_r+0x11fc>
 800cabc:	388003cc 	andi	r2,r7,15
 800cac0:	100490fa 	slli	r2,r2,3
 800cac4:	382bd13a 	srai	r21,r7,4
 800cac8:	00c200b4 	movhi	r3,2050
 800cacc:	18e88904 	addi	r3,r3,-24028
 800cad0:	1885883a 	add	r2,r3,r2
 800cad4:	a8c0040c 	andi	r3,r21,16
 800cad8:	12400017 	ldw	r9,0(r2)
 800cadc:	12000117 	ldw	r8,4(r2)
 800cae0:	18037926 	beq	r3,zero,800d8c8 <_dtoa_r+0x11a0>
 800cae4:	008200b4 	movhi	r2,2050
 800cae8:	10a87f04 	addi	r2,r2,-24068
 800caec:	11800817 	ldw	r6,32(r2)
 800caf0:	11c00917 	ldw	r7,36(r2)
 800caf4:	9009883a 	mov	r4,r18
 800caf8:	980b883a 	mov	r5,r19
 800cafc:	da001715 	stw	r8,92(sp)
 800cb00:	da401615 	stw	r9,88(sp)
 800cb04:	8013d600 	call	8013d60 <__divdf3>
 800cb08:	da001717 	ldw	r8,92(sp)
 800cb0c:	da401617 	ldw	r9,88(sp)
 800cb10:	ad4003cc 	andi	r21,r21,15
 800cb14:	040000c4 	movi	r16,3
 800cb18:	1023883a 	mov	r17,r2
 800cb1c:	1829883a 	mov	r20,r3
 800cb20:	a8001126 	beq	r21,zero,800cb68 <_dtoa_r+0x440>
 800cb24:	05c200b4 	movhi	r23,2050
 800cb28:	bde87f04 	addi	r23,r23,-24068
 800cb2c:	4805883a 	mov	r2,r9
 800cb30:	4007883a 	mov	r3,r8
 800cb34:	a980004c 	andi	r6,r21,1
 800cb38:	1009883a 	mov	r4,r2
 800cb3c:	a82bd07a 	srai	r21,r21,1
 800cb40:	180b883a 	mov	r5,r3
 800cb44:	30000426 	beq	r6,zero,800cb58 <_dtoa_r+0x430>
 800cb48:	b9800017 	ldw	r6,0(r23)
 800cb4c:	b9c00117 	ldw	r7,4(r23)
 800cb50:	84000044 	addi	r16,r16,1
 800cb54:	80149880 	call	8014988 <__muldf3>
 800cb58:	bdc00204 	addi	r23,r23,8
 800cb5c:	a83ff51e 	bne	r21,zero,800cb34 <_dtoa_r+0x40c>
 800cb60:	1013883a 	mov	r9,r2
 800cb64:	1811883a 	mov	r8,r3
 800cb68:	480d883a 	mov	r6,r9
 800cb6c:	400f883a 	mov	r7,r8
 800cb70:	8809883a 	mov	r4,r17
 800cb74:	a00b883a 	mov	r5,r20
 800cb78:	8013d600 	call	8013d60 <__divdf3>
 800cb7c:	d8800f15 	stw	r2,60(sp)
 800cb80:	d8c01015 	stw	r3,64(sp)
 800cb84:	d8c00e17 	ldw	r3,56(sp)
 800cb88:	18000626 	beq	r3,zero,800cba4 <_dtoa_r+0x47c>
 800cb8c:	d9000f17 	ldw	r4,60(sp)
 800cb90:	d9401017 	ldw	r5,64(sp)
 800cb94:	000d883a 	mov	r6,zero
 800cb98:	01cffc34 	movhi	r7,16368
 800cb9c:	80148940 	call	8014894 <__ledf2>
 800cba0:	10040b16 	blt	r2,zero,800dbd0 <_dtoa_r+0x14a8>
 800cba4:	8009883a 	mov	r4,r16
 800cba8:	8015b700 	call	8015b70 <__floatsidf>
 800cbac:	d9800f17 	ldw	r6,60(sp)
 800cbb0:	d9c01017 	ldw	r7,64(sp)
 800cbb4:	1009883a 	mov	r4,r2
 800cbb8:	180b883a 	mov	r5,r3
 800cbbc:	80149880 	call	8014988 <__muldf3>
 800cbc0:	000d883a 	mov	r6,zero
 800cbc4:	01d00734 	movhi	r7,16412
 800cbc8:	1009883a 	mov	r4,r2
 800cbcc:	180b883a 	mov	r5,r3
 800cbd0:	80134b40 	call	80134b4 <__adddf3>
 800cbd4:	1021883a 	mov	r16,r2
 800cbd8:	d8800617 	ldw	r2,24(sp)
 800cbdc:	047f3034 	movhi	r17,64704
 800cbe0:	1c63883a 	add	r17,r3,r17
 800cbe4:	10031826 	beq	r2,zero,800d848 <_dtoa_r+0x1120>
 800cbe8:	d8c00517 	ldw	r3,20(sp)
 800cbec:	db000617 	ldw	r12,24(sp)
 800cbf0:	d8c01315 	stw	r3,76(sp)
 800cbf4:	d9000b17 	ldw	r4,44(sp)
 800cbf8:	20038f26 	beq	r4,zero,800da38 <_dtoa_r+0x1310>
 800cbfc:	60bfffc4 	addi	r2,r12,-1
 800cc00:	100490fa 	slli	r2,r2,3
 800cc04:	00c200b4 	movhi	r3,2050
 800cc08:	18e88904 	addi	r3,r3,-24028
 800cc0c:	1885883a 	add	r2,r3,r2
 800cc10:	11800017 	ldw	r6,0(r2)
 800cc14:	11c00117 	ldw	r7,4(r2)
 800cc18:	d8800717 	ldw	r2,28(sp)
 800cc1c:	0009883a 	mov	r4,zero
 800cc20:	014ff834 	movhi	r5,16352
 800cc24:	db001615 	stw	r12,88(sp)
 800cc28:	15c00044 	addi	r23,r2,1
 800cc2c:	8013d600 	call	8013d60 <__divdf3>
 800cc30:	800d883a 	mov	r6,r16
 800cc34:	880f883a 	mov	r7,r17
 800cc38:	1009883a 	mov	r4,r2
 800cc3c:	180b883a 	mov	r5,r3
 800cc40:	80151f40 	call	80151f4 <__subdf3>
 800cc44:	d9401017 	ldw	r5,64(sp)
 800cc48:	d9000f17 	ldw	r4,60(sp)
 800cc4c:	102b883a 	mov	r21,r2
 800cc50:	d8c01215 	stw	r3,72(sp)
 800cc54:	8015af00 	call	8015af0 <__fixdfsi>
 800cc58:	1009883a 	mov	r4,r2
 800cc5c:	1029883a 	mov	r20,r2
 800cc60:	8015b700 	call	8015b70 <__floatsidf>
 800cc64:	d9000f17 	ldw	r4,60(sp)
 800cc68:	d9401017 	ldw	r5,64(sp)
 800cc6c:	100d883a 	mov	r6,r2
 800cc70:	180f883a 	mov	r7,r3
 800cc74:	80151f40 	call	80151f4 <__subdf3>
 800cc78:	1823883a 	mov	r17,r3
 800cc7c:	d8c00717 	ldw	r3,28(sp)
 800cc80:	d9401217 	ldw	r5,72(sp)
 800cc84:	a2000c04 	addi	r8,r20,48
 800cc88:	1021883a 	mov	r16,r2
 800cc8c:	1a000005 	stb	r8,0(r3)
 800cc90:	800d883a 	mov	r6,r16
 800cc94:	880f883a 	mov	r7,r17
 800cc98:	a809883a 	mov	r4,r21
 800cc9c:	4029883a 	mov	r20,r8
 800cca0:	80147b80 	call	80147b8 <__gedf2>
 800cca4:	00841d16 	blt	zero,r2,800dd1c <_dtoa_r+0x15f4>
 800cca8:	800d883a 	mov	r6,r16
 800ccac:	880f883a 	mov	r7,r17
 800ccb0:	0009883a 	mov	r4,zero
 800ccb4:	014ffc34 	movhi	r5,16368
 800ccb8:	80151f40 	call	80151f4 <__subdf3>
 800ccbc:	d9401217 	ldw	r5,72(sp)
 800ccc0:	100d883a 	mov	r6,r2
 800ccc4:	180f883a 	mov	r7,r3
 800ccc8:	a809883a 	mov	r4,r21
 800cccc:	80147b80 	call	80147b8 <__gedf2>
 800ccd0:	db001617 	ldw	r12,88(sp)
 800ccd4:	00840e16 	blt	zero,r2,800dd10 <_dtoa_r+0x15e8>
 800ccd8:	00800044 	movi	r2,1
 800ccdc:	13006b0e 	bge	r2,r12,800ce8c <_dtoa_r+0x764>
 800cce0:	d9000717 	ldw	r4,28(sp)
 800cce4:	dd800f15 	stw	r22,60(sp)
 800cce8:	dcc01015 	stw	r19,64(sp)
 800ccec:	2319883a 	add	r12,r4,r12
 800ccf0:	dcc01217 	ldw	r19,72(sp)
 800ccf4:	602d883a 	mov	r22,r12
 800ccf8:	dc801215 	stw	r18,72(sp)
 800ccfc:	b825883a 	mov	r18,r23
 800cd00:	00000906 	br	800cd28 <_dtoa_r+0x600>
 800cd04:	80151f40 	call	80151f4 <__subdf3>
 800cd08:	a80d883a 	mov	r6,r21
 800cd0c:	980f883a 	mov	r7,r19
 800cd10:	1009883a 	mov	r4,r2
 800cd14:	180b883a 	mov	r5,r3
 800cd18:	80148940 	call	8014894 <__ledf2>
 800cd1c:	1003e816 	blt	r2,zero,800dcc0 <_dtoa_r+0x1598>
 800cd20:	b825883a 	mov	r18,r23
 800cd24:	bd83e926 	beq	r23,r22,800dccc <_dtoa_r+0x15a4>
 800cd28:	a809883a 	mov	r4,r21
 800cd2c:	980b883a 	mov	r5,r19
 800cd30:	000d883a 	mov	r6,zero
 800cd34:	01d00934 	movhi	r7,16420
 800cd38:	80149880 	call	8014988 <__muldf3>
 800cd3c:	000d883a 	mov	r6,zero
 800cd40:	01d00934 	movhi	r7,16420
 800cd44:	8009883a 	mov	r4,r16
 800cd48:	880b883a 	mov	r5,r17
 800cd4c:	102b883a 	mov	r21,r2
 800cd50:	1827883a 	mov	r19,r3
 800cd54:	80149880 	call	8014988 <__muldf3>
 800cd58:	180b883a 	mov	r5,r3
 800cd5c:	1009883a 	mov	r4,r2
 800cd60:	1821883a 	mov	r16,r3
 800cd64:	1023883a 	mov	r17,r2
 800cd68:	8015af00 	call	8015af0 <__fixdfsi>
 800cd6c:	1009883a 	mov	r4,r2
 800cd70:	1029883a 	mov	r20,r2
 800cd74:	8015b700 	call	8015b70 <__floatsidf>
 800cd78:	8809883a 	mov	r4,r17
 800cd7c:	800b883a 	mov	r5,r16
 800cd80:	100d883a 	mov	r6,r2
 800cd84:	180f883a 	mov	r7,r3
 800cd88:	80151f40 	call	80151f4 <__subdf3>
 800cd8c:	a5000c04 	addi	r20,r20,48
 800cd90:	a80d883a 	mov	r6,r21
 800cd94:	980f883a 	mov	r7,r19
 800cd98:	1009883a 	mov	r4,r2
 800cd9c:	180b883a 	mov	r5,r3
 800cda0:	95000005 	stb	r20,0(r18)
 800cda4:	1021883a 	mov	r16,r2
 800cda8:	1823883a 	mov	r17,r3
 800cdac:	80148940 	call	8014894 <__ledf2>
 800cdb0:	bdc00044 	addi	r23,r23,1
 800cdb4:	800d883a 	mov	r6,r16
 800cdb8:	880f883a 	mov	r7,r17
 800cdbc:	0009883a 	mov	r4,zero
 800cdc0:	014ffc34 	movhi	r5,16368
 800cdc4:	103fcf0e 	bge	r2,zero,800cd04 <_dtoa_r+0x5dc>
 800cdc8:	d8c01317 	ldw	r3,76(sp)
 800cdcc:	d8c00515 	stw	r3,20(sp)
 800cdd0:	d9400917 	ldw	r5,36(sp)
 800cdd4:	e009883a 	mov	r4,fp
 800cdd8:	800f3b00 	call	800f3b0 <_Bfree>
 800cddc:	d9000517 	ldw	r4,20(sp)
 800cde0:	d9802317 	ldw	r6,140(sp)
 800cde4:	d9c02517 	ldw	r7,148(sp)
 800cde8:	b8000005 	stb	zero,0(r23)
 800cdec:	20800044 	addi	r2,r4,1
 800cdf0:	30800015 	stw	r2,0(r6)
 800cdf4:	3802aa26 	beq	r7,zero,800d8a0 <_dtoa_r+0x1178>
 800cdf8:	3dc00015 	stw	r23,0(r7)
 800cdfc:	d8800717 	ldw	r2,28(sp)
 800ce00:	003e7906 	br	800c7e8 <_dtoa_r+0xc0>
 800ce04:	00800434 	movhi	r2,16
 800ce08:	10bfffc4 	addi	r2,r2,-1
 800ce0c:	88a2703a 	and	r17,r17,r2
 800ce10:	883e851e 	bne	r17,zero,800c828 <_dtoa_r+0x100>
 800ce14:	008200b4 	movhi	r2,2050
 800ce18:	10a86b04 	addi	r2,r2,-24148
 800ce1c:	003e8406 	br	800c830 <_dtoa_r+0x108>
 800ce20:	10c00204 	addi	r3,r2,8
 800ce24:	003e8706 	br	800c844 <_dtoa_r+0x11c>
 800ce28:	01400434 	movhi	r5,16
 800ce2c:	297fffc4 	addi	r5,r5,-1
 800ce30:	994a703a 	and	r5,r19,r5
 800ce34:	9009883a 	mov	r4,r18
 800ce38:	843f0044 	addi	r16,r16,-1023
 800ce3c:	294ffc34 	orhi	r5,r5,16368
 800ce40:	dd800217 	ldw	r22,8(sp)
 800ce44:	d8001115 	stw	zero,68(sp)
 800ce48:	003ea506 	br	800c8e0 <_dtoa_r+0x1b8>
 800ce4c:	008200b4 	movhi	r2,2050
 800ce50:	10a86204 	addi	r2,r2,-24184
 800ce54:	003e6406 	br	800c7e8 <_dtoa_r+0xc0>
 800ce58:	e0001115 	stw	zero,68(fp)
 800ce5c:	000b883a 	mov	r5,zero
 800ce60:	e009883a 	mov	r4,fp
 800ce64:	800f3080 	call	800f308 <_Balloc>
 800ce68:	01bfffc4 	movi	r6,-1
 800ce6c:	01c00044 	movi	r7,1
 800ce70:	d8800715 	stw	r2,28(sp)
 800ce74:	d9800c15 	stw	r6,48(sp)
 800ce78:	e0801015 	stw	r2,64(fp)
 800ce7c:	d8000315 	stw	zero,12(sp)
 800ce80:	d9c00b15 	stw	r7,44(sp)
 800ce84:	d9800615 	stw	r6,24(sp)
 800ce88:	d8002215 	stw	zero,136(sp)
 800ce8c:	d8800117 	ldw	r2,4(sp)
 800ce90:	10008916 	blt	r2,zero,800d0b8 <_dtoa_r+0x990>
 800ce94:	d9000517 	ldw	r4,20(sp)
 800ce98:	00c00384 	movi	r3,14
 800ce9c:	19008616 	blt	r3,r4,800d0b8 <_dtoa_r+0x990>
 800cea0:	200490fa 	slli	r2,r4,3
 800cea4:	00c200b4 	movhi	r3,2050
 800cea8:	d9802217 	ldw	r6,136(sp)
 800ceac:	18e88904 	addi	r3,r3,-24028
 800ceb0:	1885883a 	add	r2,r3,r2
 800ceb4:	14000017 	ldw	r16,0(r2)
 800ceb8:	14400117 	ldw	r17,4(r2)
 800cebc:	30016316 	blt	r6,zero,800d44c <_dtoa_r+0xd24>
 800cec0:	800d883a 	mov	r6,r16
 800cec4:	880f883a 	mov	r7,r17
 800cec8:	9009883a 	mov	r4,r18
 800cecc:	980b883a 	mov	r5,r19
 800ced0:	8013d600 	call	8013d60 <__divdf3>
 800ced4:	180b883a 	mov	r5,r3
 800ced8:	1009883a 	mov	r4,r2
 800cedc:	8015af00 	call	8015af0 <__fixdfsi>
 800cee0:	1009883a 	mov	r4,r2
 800cee4:	102b883a 	mov	r21,r2
 800cee8:	8015b700 	call	8015b70 <__floatsidf>
 800ceec:	800d883a 	mov	r6,r16
 800cef0:	880f883a 	mov	r7,r17
 800cef4:	1009883a 	mov	r4,r2
 800cef8:	180b883a 	mov	r5,r3
 800cefc:	80149880 	call	8014988 <__muldf3>
 800cf00:	100d883a 	mov	r6,r2
 800cf04:	180f883a 	mov	r7,r3
 800cf08:	9009883a 	mov	r4,r18
 800cf0c:	980b883a 	mov	r5,r19
 800cf10:	80151f40 	call	80151f4 <__subdf3>
 800cf14:	d9c00717 	ldw	r7,28(sp)
 800cf18:	1009883a 	mov	r4,r2
 800cf1c:	a8800c04 	addi	r2,r21,48
 800cf20:	38800005 	stb	r2,0(r7)
 800cf24:	3dc00044 	addi	r23,r7,1
 800cf28:	d9c00617 	ldw	r7,24(sp)
 800cf2c:	01800044 	movi	r6,1
 800cf30:	180b883a 	mov	r5,r3
 800cf34:	2005883a 	mov	r2,r4
 800cf38:	39803826 	beq	r7,r6,800d01c <_dtoa_r+0x8f4>
 800cf3c:	000d883a 	mov	r6,zero
 800cf40:	01d00934 	movhi	r7,16420
 800cf44:	80149880 	call	8014988 <__muldf3>
 800cf48:	000d883a 	mov	r6,zero
 800cf4c:	000f883a 	mov	r7,zero
 800cf50:	1009883a 	mov	r4,r2
 800cf54:	180b883a 	mov	r5,r3
 800cf58:	1025883a 	mov	r18,r2
 800cf5c:	1827883a 	mov	r19,r3
 800cf60:	80147300 	call	8014730 <__eqdf2>
 800cf64:	103f9a26 	beq	r2,zero,800cdd0 <_dtoa_r+0x6a8>
 800cf68:	d9c00617 	ldw	r7,24(sp)
 800cf6c:	d8c00717 	ldw	r3,28(sp)
 800cf70:	b829883a 	mov	r20,r23
 800cf74:	38bfffc4 	addi	r2,r7,-1
 800cf78:	18ad883a 	add	r22,r3,r2
 800cf7c:	00000a06 	br	800cfa8 <_dtoa_r+0x880>
 800cf80:	80149880 	call	8014988 <__muldf3>
 800cf84:	000d883a 	mov	r6,zero
 800cf88:	000f883a 	mov	r7,zero
 800cf8c:	1009883a 	mov	r4,r2
 800cf90:	180b883a 	mov	r5,r3
 800cf94:	1025883a 	mov	r18,r2
 800cf98:	1827883a 	mov	r19,r3
 800cf9c:	b829883a 	mov	r20,r23
 800cfa0:	80147300 	call	8014730 <__eqdf2>
 800cfa4:	103f8a26 	beq	r2,zero,800cdd0 <_dtoa_r+0x6a8>
 800cfa8:	800d883a 	mov	r6,r16
 800cfac:	880f883a 	mov	r7,r17
 800cfb0:	9009883a 	mov	r4,r18
 800cfb4:	980b883a 	mov	r5,r19
 800cfb8:	8013d600 	call	8013d60 <__divdf3>
 800cfbc:	180b883a 	mov	r5,r3
 800cfc0:	1009883a 	mov	r4,r2
 800cfc4:	8015af00 	call	8015af0 <__fixdfsi>
 800cfc8:	1009883a 	mov	r4,r2
 800cfcc:	102b883a 	mov	r21,r2
 800cfd0:	8015b700 	call	8015b70 <__floatsidf>
 800cfd4:	800d883a 	mov	r6,r16
 800cfd8:	880f883a 	mov	r7,r17
 800cfdc:	1009883a 	mov	r4,r2
 800cfe0:	180b883a 	mov	r5,r3
 800cfe4:	80149880 	call	8014988 <__muldf3>
 800cfe8:	100d883a 	mov	r6,r2
 800cfec:	180f883a 	mov	r7,r3
 800cff0:	9009883a 	mov	r4,r18
 800cff4:	980b883a 	mov	r5,r19
 800cff8:	80151f40 	call	80151f4 <__subdf3>
 800cffc:	aa000c04 	addi	r8,r21,48
 800d000:	a2000005 	stb	r8,0(r20)
 800d004:	000d883a 	mov	r6,zero
 800d008:	01d00934 	movhi	r7,16420
 800d00c:	1009883a 	mov	r4,r2
 800d010:	180b883a 	mov	r5,r3
 800d014:	a5c00044 	addi	r23,r20,1
 800d018:	b53fd91e 	bne	r22,r20,800cf80 <_dtoa_r+0x858>
 800d01c:	100d883a 	mov	r6,r2
 800d020:	180f883a 	mov	r7,r3
 800d024:	1009883a 	mov	r4,r2
 800d028:	180b883a 	mov	r5,r3
 800d02c:	80134b40 	call	80134b4 <__adddf3>
 800d030:	100d883a 	mov	r6,r2
 800d034:	180f883a 	mov	r7,r3
 800d038:	8009883a 	mov	r4,r16
 800d03c:	880b883a 	mov	r5,r17
 800d040:	1027883a 	mov	r19,r2
 800d044:	1825883a 	mov	r18,r3
 800d048:	80148940 	call	8014894 <__ledf2>
 800d04c:	10000816 	blt	r2,zero,800d070 <_dtoa_r+0x948>
 800d050:	980d883a 	mov	r6,r19
 800d054:	900f883a 	mov	r7,r18
 800d058:	8009883a 	mov	r4,r16
 800d05c:	880b883a 	mov	r5,r17
 800d060:	80147300 	call	8014730 <__eqdf2>
 800d064:	103f5a1e 	bne	r2,zero,800cdd0 <_dtoa_r+0x6a8>
 800d068:	ad40004c 	andi	r21,r21,1
 800d06c:	a83f5826 	beq	r21,zero,800cdd0 <_dtoa_r+0x6a8>
 800d070:	bd3fffc3 	ldbu	r20,-1(r23)
 800d074:	b8bfffc4 	addi	r2,r23,-1
 800d078:	1007883a 	mov	r3,r2
 800d07c:	01400e44 	movi	r5,57
 800d080:	d9800717 	ldw	r6,28(sp)
 800d084:	00000506 	br	800d09c <_dtoa_r+0x974>
 800d088:	18ffffc4 	addi	r3,r3,-1
 800d08c:	11824726 	beq	r2,r6,800d9ac <_dtoa_r+0x1284>
 800d090:	1d000003 	ldbu	r20,0(r3)
 800d094:	102f883a 	mov	r23,r2
 800d098:	10bfffc4 	addi	r2,r2,-1
 800d09c:	a1003fcc 	andi	r4,r20,255
 800d0a0:	2100201c 	xori	r4,r4,128
 800d0a4:	213fe004 	addi	r4,r4,-128
 800d0a8:	217ff726 	beq	r4,r5,800d088 <_dtoa_r+0x960>
 800d0ac:	a2000044 	addi	r8,r20,1
 800d0b0:	12000005 	stb	r8,0(r2)
 800d0b4:	003f4606 	br	800cdd0 <_dtoa_r+0x6a8>
 800d0b8:	d9000b17 	ldw	r4,44(sp)
 800d0bc:	2000c826 	beq	r4,zero,800d3e0 <_dtoa_r+0xcb8>
 800d0c0:	d9800317 	ldw	r6,12(sp)
 800d0c4:	00c00044 	movi	r3,1
 800d0c8:	1980f90e 	bge	r3,r6,800d4b0 <_dtoa_r+0xd88>
 800d0cc:	d8800617 	ldw	r2,24(sp)
 800d0d0:	d8c00a17 	ldw	r3,40(sp)
 800d0d4:	157fffc4 	addi	r21,r2,-1
 800d0d8:	1d41f316 	blt	r3,r21,800d8a8 <_dtoa_r+0x1180>
 800d0dc:	1d6bc83a 	sub	r21,r3,r21
 800d0e0:	d9c00617 	ldw	r7,24(sp)
 800d0e4:	3802aa16 	blt	r7,zero,800db90 <_dtoa_r+0x1468>
 800d0e8:	dd000817 	ldw	r20,32(sp)
 800d0ec:	d8800617 	ldw	r2,24(sp)
 800d0f0:	d8c00817 	ldw	r3,32(sp)
 800d0f4:	01400044 	movi	r5,1
 800d0f8:	e009883a 	mov	r4,fp
 800d0fc:	1887883a 	add	r3,r3,r2
 800d100:	d8c00815 	stw	r3,32(sp)
 800d104:	b0ad883a 	add	r22,r22,r2
 800d108:	800f73c0 	call	800f73c <__i2b>
 800d10c:	1023883a 	mov	r17,r2
 800d110:	a0000826 	beq	r20,zero,800d134 <_dtoa_r+0xa0c>
 800d114:	0580070e 	bge	zero,r22,800d134 <_dtoa_r+0xa0c>
 800d118:	a005883a 	mov	r2,r20
 800d11c:	b500b916 	blt	r22,r20,800d404 <_dtoa_r+0xcdc>
 800d120:	d9000817 	ldw	r4,32(sp)
 800d124:	a0a9c83a 	sub	r20,r20,r2
 800d128:	b0adc83a 	sub	r22,r22,r2
 800d12c:	2089c83a 	sub	r4,r4,r2
 800d130:	d9000815 	stw	r4,32(sp)
 800d134:	d9800a17 	ldw	r6,40(sp)
 800d138:	0181810e 	bge	zero,r6,800d740 <_dtoa_r+0x1018>
 800d13c:	d9c00b17 	ldw	r7,44(sp)
 800d140:	3800b326 	beq	r7,zero,800d410 <_dtoa_r+0xce8>
 800d144:	a800b226 	beq	r21,zero,800d410 <_dtoa_r+0xce8>
 800d148:	880b883a 	mov	r5,r17
 800d14c:	a80d883a 	mov	r6,r21
 800d150:	e009883a 	mov	r4,fp
 800d154:	800fa040 	call	800fa04 <__pow5mult>
 800d158:	d9800917 	ldw	r6,36(sp)
 800d15c:	100b883a 	mov	r5,r2
 800d160:	e009883a 	mov	r4,fp
 800d164:	1023883a 	mov	r17,r2
 800d168:	800f7780 	call	800f778 <__multiply>
 800d16c:	1021883a 	mov	r16,r2
 800d170:	d8800a17 	ldw	r2,40(sp)
 800d174:	d9400917 	ldw	r5,36(sp)
 800d178:	e009883a 	mov	r4,fp
 800d17c:	1545c83a 	sub	r2,r2,r21
 800d180:	d8800a15 	stw	r2,40(sp)
 800d184:	800f3b00 	call	800f3b0 <_Bfree>
 800d188:	d8c00a17 	ldw	r3,40(sp)
 800d18c:	18009f1e 	bne	r3,zero,800d40c <_dtoa_r+0xce4>
 800d190:	05c00044 	movi	r23,1
 800d194:	e009883a 	mov	r4,fp
 800d198:	b80b883a 	mov	r5,r23
 800d19c:	800f73c0 	call	800f73c <__i2b>
 800d1a0:	d9000d17 	ldw	r4,52(sp)
 800d1a4:	102b883a 	mov	r21,r2
 800d1a8:	2000ce26 	beq	r4,zero,800d4e4 <_dtoa_r+0xdbc>
 800d1ac:	200d883a 	mov	r6,r4
 800d1b0:	100b883a 	mov	r5,r2
 800d1b4:	e009883a 	mov	r4,fp
 800d1b8:	800fa040 	call	800fa04 <__pow5mult>
 800d1bc:	d9800317 	ldw	r6,12(sp)
 800d1c0:	102b883a 	mov	r21,r2
 800d1c4:	b981810e 	bge	r23,r6,800d7cc <_dtoa_r+0x10a4>
 800d1c8:	0027883a 	mov	r19,zero
 800d1cc:	a8800417 	ldw	r2,16(r21)
 800d1d0:	05c00804 	movi	r23,32
 800d1d4:	10800104 	addi	r2,r2,4
 800d1d8:	1085883a 	add	r2,r2,r2
 800d1dc:	1085883a 	add	r2,r2,r2
 800d1e0:	a885883a 	add	r2,r21,r2
 800d1e4:	11000017 	ldw	r4,0(r2)
 800d1e8:	800f6240 	call	800f624 <__hi0bits>
 800d1ec:	b885c83a 	sub	r2,r23,r2
 800d1f0:	1585883a 	add	r2,r2,r22
 800d1f4:	108007cc 	andi	r2,r2,31
 800d1f8:	1000b326 	beq	r2,zero,800d4c8 <_dtoa_r+0xda0>
 800d1fc:	00c00804 	movi	r3,32
 800d200:	1887c83a 	sub	r3,r3,r2
 800d204:	01000104 	movi	r4,4
 800d208:	20c2cd0e 	bge	r4,r3,800dd40 <_dtoa_r+0x1618>
 800d20c:	00c00704 	movi	r3,28
 800d210:	1885c83a 	sub	r2,r3,r2
 800d214:	d8c00817 	ldw	r3,32(sp)
 800d218:	a0a9883a 	add	r20,r20,r2
 800d21c:	b0ad883a 	add	r22,r22,r2
 800d220:	1887883a 	add	r3,r3,r2
 800d224:	d8c00815 	stw	r3,32(sp)
 800d228:	d9800817 	ldw	r6,32(sp)
 800d22c:	0180040e 	bge	zero,r6,800d240 <_dtoa_r+0xb18>
 800d230:	800b883a 	mov	r5,r16
 800d234:	e009883a 	mov	r4,fp
 800d238:	800fb440 	call	800fb44 <__lshift>
 800d23c:	1021883a 	mov	r16,r2
 800d240:	0580050e 	bge	zero,r22,800d258 <_dtoa_r+0xb30>
 800d244:	a80b883a 	mov	r5,r21
 800d248:	b00d883a 	mov	r6,r22
 800d24c:	e009883a 	mov	r4,fp
 800d250:	800fb440 	call	800fb44 <__lshift>
 800d254:	102b883a 	mov	r21,r2
 800d258:	d9c00e17 	ldw	r7,56(sp)
 800d25c:	3801211e 	bne	r7,zero,800d6e4 <_dtoa_r+0xfbc>
 800d260:	d9800617 	ldw	r6,24(sp)
 800d264:	0181380e 	bge	zero,r6,800d748 <_dtoa_r+0x1020>
 800d268:	d8c00b17 	ldw	r3,44(sp)
 800d26c:	1800ab1e 	bne	r3,zero,800d51c <_dtoa_r+0xdf4>
 800d270:	dc800717 	ldw	r18,28(sp)
 800d274:	dcc00617 	ldw	r19,24(sp)
 800d278:	9029883a 	mov	r20,r18
 800d27c:	00000206 	br	800d288 <_dtoa_r+0xb60>
 800d280:	800f3d80 	call	800f3d8 <__multadd>
 800d284:	1021883a 	mov	r16,r2
 800d288:	a80b883a 	mov	r5,r21
 800d28c:	8009883a 	mov	r4,r16
 800d290:	800c5000 	call	800c500 <quorem>
 800d294:	10800c04 	addi	r2,r2,48
 800d298:	90800005 	stb	r2,0(r18)
 800d29c:	94800044 	addi	r18,r18,1
 800d2a0:	9507c83a 	sub	r3,r18,r20
 800d2a4:	000f883a 	mov	r7,zero
 800d2a8:	01800284 	movi	r6,10
 800d2ac:	800b883a 	mov	r5,r16
 800d2b0:	e009883a 	mov	r4,fp
 800d2b4:	1cfff216 	blt	r3,r19,800d280 <_dtoa_r+0xb58>
 800d2b8:	1011883a 	mov	r8,r2
 800d2bc:	d8800617 	ldw	r2,24(sp)
 800d2c0:	0082370e 	bge	zero,r2,800dba0 <_dtoa_r+0x1478>
 800d2c4:	d9000717 	ldw	r4,28(sp)
 800d2c8:	0025883a 	mov	r18,zero
 800d2cc:	20af883a 	add	r23,r4,r2
 800d2d0:	01800044 	movi	r6,1
 800d2d4:	800b883a 	mov	r5,r16
 800d2d8:	e009883a 	mov	r4,fp
 800d2dc:	da001715 	stw	r8,92(sp)
 800d2e0:	800fb440 	call	800fb44 <__lshift>
 800d2e4:	a80b883a 	mov	r5,r21
 800d2e8:	1009883a 	mov	r4,r2
 800d2ec:	d8800915 	stw	r2,36(sp)
 800d2f0:	800fc8c0 	call	800fc8c <__mcmp>
 800d2f4:	da001717 	ldw	r8,92(sp)
 800d2f8:	0081800e 	bge	zero,r2,800d8fc <_dtoa_r+0x11d4>
 800d2fc:	b93fffc3 	ldbu	r4,-1(r23)
 800d300:	b8bfffc4 	addi	r2,r23,-1
 800d304:	1007883a 	mov	r3,r2
 800d308:	01800e44 	movi	r6,57
 800d30c:	d9c00717 	ldw	r7,28(sp)
 800d310:	00000506 	br	800d328 <_dtoa_r+0xc00>
 800d314:	18ffffc4 	addi	r3,r3,-1
 800d318:	11c12326 	beq	r2,r7,800d7a8 <_dtoa_r+0x1080>
 800d31c:	19000003 	ldbu	r4,0(r3)
 800d320:	102f883a 	mov	r23,r2
 800d324:	10bfffc4 	addi	r2,r2,-1
 800d328:	21403fcc 	andi	r5,r4,255
 800d32c:	2940201c 	xori	r5,r5,128
 800d330:	297fe004 	addi	r5,r5,-128
 800d334:	29bff726 	beq	r5,r6,800d314 <_dtoa_r+0xbec>
 800d338:	21000044 	addi	r4,r4,1
 800d33c:	11000005 	stb	r4,0(r2)
 800d340:	a80b883a 	mov	r5,r21
 800d344:	e009883a 	mov	r4,fp
 800d348:	800f3b00 	call	800f3b0 <_Bfree>
 800d34c:	883ea026 	beq	r17,zero,800cdd0 <_dtoa_r+0x6a8>
 800d350:	90000426 	beq	r18,zero,800d364 <_dtoa_r+0xc3c>
 800d354:	94400326 	beq	r18,r17,800d364 <_dtoa_r+0xc3c>
 800d358:	900b883a 	mov	r5,r18
 800d35c:	e009883a 	mov	r4,fp
 800d360:	800f3b00 	call	800f3b0 <_Bfree>
 800d364:	880b883a 	mov	r5,r17
 800d368:	e009883a 	mov	r4,fp
 800d36c:	800f3b00 	call	800f3b0 <_Bfree>
 800d370:	003e9706 	br	800cdd0 <_dtoa_r+0x6a8>
 800d374:	01800044 	movi	r6,1
 800d378:	d9800e15 	stw	r6,56(sp)
 800d37c:	003d9606 	br	800c9d8 <_dtoa_r+0x2b0>
 800d380:	d8800817 	ldw	r2,32(sp)
 800d384:	d8c00517 	ldw	r3,20(sp)
 800d388:	d8000d15 	stw	zero,52(sp)
 800d38c:	10c5c83a 	sub	r2,r2,r3
 800d390:	00c9c83a 	sub	r4,zero,r3
 800d394:	d8800815 	stw	r2,32(sp)
 800d398:	d9000a15 	stw	r4,40(sp)
 800d39c:	003d9706 	br	800c9fc <_dtoa_r+0x2d4>
 800d3a0:	05adc83a 	sub	r22,zero,r22
 800d3a4:	dd800815 	stw	r22,32(sp)
 800d3a8:	002d883a 	mov	r22,zero
 800d3ac:	003d8e06 	br	800c9e8 <_dtoa_r+0x2c0>
 800d3b0:	d9000517 	ldw	r4,20(sp)
 800d3b4:	8015b700 	call	8015b70 <__floatsidf>
 800d3b8:	100d883a 	mov	r6,r2
 800d3bc:	180f883a 	mov	r7,r3
 800d3c0:	a009883a 	mov	r4,r20
 800d3c4:	880b883a 	mov	r5,r17
 800d3c8:	80147300 	call	8014730 <__eqdf2>
 800d3cc:	103d7126 	beq	r2,zero,800c994 <_dtoa_r+0x26c>
 800d3d0:	d9c00517 	ldw	r7,20(sp)
 800d3d4:	39ffffc4 	addi	r7,r7,-1
 800d3d8:	d9c00515 	stw	r7,20(sp)
 800d3dc:	003d6d06 	br	800c994 <_dtoa_r+0x26c>
 800d3e0:	dd400a17 	ldw	r21,40(sp)
 800d3e4:	dd000817 	ldw	r20,32(sp)
 800d3e8:	0023883a 	mov	r17,zero
 800d3ec:	003f4806 	br	800d110 <_dtoa_r+0x9e8>
 800d3f0:	10e3c83a 	sub	r17,r2,r3
 800d3f4:	9448983a 	sll	r4,r18,r17
 800d3f8:	003d3206 	br	800c8c4 <_dtoa_r+0x19c>
 800d3fc:	d8000e15 	stw	zero,56(sp)
 800d400:	003d7506 	br	800c9d8 <_dtoa_r+0x2b0>
 800d404:	b005883a 	mov	r2,r22
 800d408:	003f4506 	br	800d120 <_dtoa_r+0x9f8>
 800d40c:	dc000915 	stw	r16,36(sp)
 800d410:	d9800a17 	ldw	r6,40(sp)
 800d414:	d9400917 	ldw	r5,36(sp)
 800d418:	e009883a 	mov	r4,fp
 800d41c:	800fa040 	call	800fa04 <__pow5mult>
 800d420:	1021883a 	mov	r16,r2
 800d424:	003f5a06 	br	800d190 <_dtoa_r+0xa68>
 800d428:	01c00044 	movi	r7,1
 800d42c:	d9c00b15 	stw	r7,44(sp)
 800d430:	d8802217 	ldw	r2,136(sp)
 800d434:	0081280e 	bge	zero,r2,800d8d8 <_dtoa_r+0x11b0>
 800d438:	100d883a 	mov	r6,r2
 800d43c:	1021883a 	mov	r16,r2
 800d440:	d8800c15 	stw	r2,48(sp)
 800d444:	d8800615 	stw	r2,24(sp)
 800d448:	003d8806 	br	800ca6c <_dtoa_r+0x344>
 800d44c:	d8800617 	ldw	r2,24(sp)
 800d450:	00be9b16 	blt	zero,r2,800cec0 <_dtoa_r+0x798>
 800d454:	10010f1e 	bne	r2,zero,800d894 <_dtoa_r+0x116c>
 800d458:	880b883a 	mov	r5,r17
 800d45c:	000d883a 	mov	r6,zero
 800d460:	01d00534 	movhi	r7,16404
 800d464:	8009883a 	mov	r4,r16
 800d468:	80149880 	call	8014988 <__muldf3>
 800d46c:	900d883a 	mov	r6,r18
 800d470:	980f883a 	mov	r7,r19
 800d474:	1009883a 	mov	r4,r2
 800d478:	180b883a 	mov	r5,r3
 800d47c:	80147b80 	call	80147b8 <__gedf2>
 800d480:	002b883a 	mov	r21,zero
 800d484:	0023883a 	mov	r17,zero
 800d488:	1000bf16 	blt	r2,zero,800d788 <_dtoa_r+0x1060>
 800d48c:	d9802217 	ldw	r6,136(sp)
 800d490:	ddc00717 	ldw	r23,28(sp)
 800d494:	018c303a 	nor	r6,zero,r6
 800d498:	d9800515 	stw	r6,20(sp)
 800d49c:	a80b883a 	mov	r5,r21
 800d4a0:	e009883a 	mov	r4,fp
 800d4a4:	800f3b00 	call	800f3b0 <_Bfree>
 800d4a8:	883e4926 	beq	r17,zero,800cdd0 <_dtoa_r+0x6a8>
 800d4ac:	003fad06 	br	800d364 <_dtoa_r+0xc3c>
 800d4b0:	d9c01117 	ldw	r7,68(sp)
 800d4b4:	3801bc26 	beq	r7,zero,800dba8 <_dtoa_r+0x1480>
 800d4b8:	10810cc4 	addi	r2,r2,1075
 800d4bc:	dd400a17 	ldw	r21,40(sp)
 800d4c0:	dd000817 	ldw	r20,32(sp)
 800d4c4:	003f0a06 	br	800d0f0 <_dtoa_r+0x9c8>
 800d4c8:	00800704 	movi	r2,28
 800d4cc:	d9000817 	ldw	r4,32(sp)
 800d4d0:	a0a9883a 	add	r20,r20,r2
 800d4d4:	b0ad883a 	add	r22,r22,r2
 800d4d8:	2089883a 	add	r4,r4,r2
 800d4dc:	d9000815 	stw	r4,32(sp)
 800d4e0:	003f5106 	br	800d228 <_dtoa_r+0xb00>
 800d4e4:	d8c00317 	ldw	r3,12(sp)
 800d4e8:	b8c1fc0e 	bge	r23,r3,800dcdc <_dtoa_r+0x15b4>
 800d4ec:	0027883a 	mov	r19,zero
 800d4f0:	b805883a 	mov	r2,r23
 800d4f4:	003f3e06 	br	800d1f0 <_dtoa_r+0xac8>
 800d4f8:	880b883a 	mov	r5,r17
 800d4fc:	e009883a 	mov	r4,fp
 800d500:	000f883a 	mov	r7,zero
 800d504:	01800284 	movi	r6,10
 800d508:	800f3d80 	call	800f3d8 <__multadd>
 800d50c:	d9000c17 	ldw	r4,48(sp)
 800d510:	1023883a 	mov	r17,r2
 800d514:	0102040e 	bge	zero,r4,800dd28 <_dtoa_r+0x1600>
 800d518:	d9000615 	stw	r4,24(sp)
 800d51c:	0500050e 	bge	zero,r20,800d534 <_dtoa_r+0xe0c>
 800d520:	880b883a 	mov	r5,r17
 800d524:	a00d883a 	mov	r6,r20
 800d528:	e009883a 	mov	r4,fp
 800d52c:	800fb440 	call	800fb44 <__lshift>
 800d530:	1023883a 	mov	r17,r2
 800d534:	9801241e 	bne	r19,zero,800d9c8 <_dtoa_r+0x12a0>
 800d538:	8829883a 	mov	r20,r17
 800d53c:	d9000617 	ldw	r4,24(sp)
 800d540:	dcc00717 	ldw	r19,28(sp)
 800d544:	9480004c 	andi	r18,r18,1
 800d548:	20bfffc4 	addi	r2,r4,-1
 800d54c:	9885883a 	add	r2,r19,r2
 800d550:	d8800415 	stw	r2,16(sp)
 800d554:	dc800615 	stw	r18,24(sp)
 800d558:	a80b883a 	mov	r5,r21
 800d55c:	8009883a 	mov	r4,r16
 800d560:	800c5000 	call	800c500 <quorem>
 800d564:	880b883a 	mov	r5,r17
 800d568:	8009883a 	mov	r4,r16
 800d56c:	102f883a 	mov	r23,r2
 800d570:	800fc8c0 	call	800fc8c <__mcmp>
 800d574:	a80b883a 	mov	r5,r21
 800d578:	a00d883a 	mov	r6,r20
 800d57c:	e009883a 	mov	r4,fp
 800d580:	102d883a 	mov	r22,r2
 800d584:	800fcec0 	call	800fcec <__mdiff>
 800d588:	1007883a 	mov	r3,r2
 800d58c:	10800317 	ldw	r2,12(r2)
 800d590:	bc800c04 	addi	r18,r23,48
 800d594:	180b883a 	mov	r5,r3
 800d598:	10004e1e 	bne	r2,zero,800d6d4 <_dtoa_r+0xfac>
 800d59c:	8009883a 	mov	r4,r16
 800d5a0:	d8c01615 	stw	r3,88(sp)
 800d5a4:	800fc8c0 	call	800fc8c <__mcmp>
 800d5a8:	d8c01617 	ldw	r3,88(sp)
 800d5ac:	e009883a 	mov	r4,fp
 800d5b0:	d8801615 	stw	r2,88(sp)
 800d5b4:	180b883a 	mov	r5,r3
 800d5b8:	800f3b00 	call	800f3b0 <_Bfree>
 800d5bc:	d8801617 	ldw	r2,88(sp)
 800d5c0:	1000041e 	bne	r2,zero,800d5d4 <_dtoa_r+0xeac>
 800d5c4:	d9800317 	ldw	r6,12(sp)
 800d5c8:	3000021e 	bne	r6,zero,800d5d4 <_dtoa_r+0xeac>
 800d5cc:	d8c00617 	ldw	r3,24(sp)
 800d5d0:	18003726 	beq	r3,zero,800d6b0 <_dtoa_r+0xf88>
 800d5d4:	b0002016 	blt	r22,zero,800d658 <_dtoa_r+0xf30>
 800d5d8:	b000041e 	bne	r22,zero,800d5ec <_dtoa_r+0xec4>
 800d5dc:	d9000317 	ldw	r4,12(sp)
 800d5e0:	2000021e 	bne	r4,zero,800d5ec <_dtoa_r+0xec4>
 800d5e4:	d8c00617 	ldw	r3,24(sp)
 800d5e8:	18001b26 	beq	r3,zero,800d658 <_dtoa_r+0xf30>
 800d5ec:	00810716 	blt	zero,r2,800da0c <_dtoa_r+0x12e4>
 800d5f0:	d8c00417 	ldw	r3,16(sp)
 800d5f4:	9d800044 	addi	r22,r19,1
 800d5f8:	9c800005 	stb	r18,0(r19)
 800d5fc:	b02f883a 	mov	r23,r22
 800d600:	98c10626 	beq	r19,r3,800da1c <_dtoa_r+0x12f4>
 800d604:	800b883a 	mov	r5,r16
 800d608:	000f883a 	mov	r7,zero
 800d60c:	01800284 	movi	r6,10
 800d610:	e009883a 	mov	r4,fp
 800d614:	800f3d80 	call	800f3d8 <__multadd>
 800d618:	1021883a 	mov	r16,r2
 800d61c:	000f883a 	mov	r7,zero
 800d620:	01800284 	movi	r6,10
 800d624:	880b883a 	mov	r5,r17
 800d628:	e009883a 	mov	r4,fp
 800d62c:	8d002526 	beq	r17,r20,800d6c4 <_dtoa_r+0xf9c>
 800d630:	800f3d80 	call	800f3d8 <__multadd>
 800d634:	a00b883a 	mov	r5,r20
 800d638:	000f883a 	mov	r7,zero
 800d63c:	01800284 	movi	r6,10
 800d640:	e009883a 	mov	r4,fp
 800d644:	1023883a 	mov	r17,r2
 800d648:	800f3d80 	call	800f3d8 <__multadd>
 800d64c:	1029883a 	mov	r20,r2
 800d650:	b027883a 	mov	r19,r22
 800d654:	003fc006 	br	800d558 <_dtoa_r+0xe30>
 800d658:	9011883a 	mov	r8,r18
 800d65c:	00800e0e 	bge	zero,r2,800d698 <_dtoa_r+0xf70>
 800d660:	800b883a 	mov	r5,r16
 800d664:	01800044 	movi	r6,1
 800d668:	e009883a 	mov	r4,fp
 800d66c:	da001715 	stw	r8,92(sp)
 800d670:	800fb440 	call	800fb44 <__lshift>
 800d674:	a80b883a 	mov	r5,r21
 800d678:	1009883a 	mov	r4,r2
 800d67c:	1021883a 	mov	r16,r2
 800d680:	800fc8c0 	call	800fc8c <__mcmp>
 800d684:	da001717 	ldw	r8,92(sp)
 800d688:	0081960e 	bge	zero,r2,800dce4 <_dtoa_r+0x15bc>
 800d68c:	00800e44 	movi	r2,57
 800d690:	40817026 	beq	r8,r2,800dc54 <_dtoa_r+0x152c>
 800d694:	ba000c44 	addi	r8,r23,49
 800d698:	8825883a 	mov	r18,r17
 800d69c:	9dc00044 	addi	r23,r19,1
 800d6a0:	9a000005 	stb	r8,0(r19)
 800d6a4:	a023883a 	mov	r17,r20
 800d6a8:	dc000915 	stw	r16,36(sp)
 800d6ac:	003f2406 	br	800d340 <_dtoa_r+0xc18>
 800d6b0:	00800e44 	movi	r2,57
 800d6b4:	9011883a 	mov	r8,r18
 800d6b8:	90816626 	beq	r18,r2,800dc54 <_dtoa_r+0x152c>
 800d6bc:	05bff516 	blt	zero,r22,800d694 <_dtoa_r+0xf6c>
 800d6c0:	003ff506 	br	800d698 <_dtoa_r+0xf70>
 800d6c4:	800f3d80 	call	800f3d8 <__multadd>
 800d6c8:	1023883a 	mov	r17,r2
 800d6cc:	1029883a 	mov	r20,r2
 800d6d0:	003fdf06 	br	800d650 <_dtoa_r+0xf28>
 800d6d4:	e009883a 	mov	r4,fp
 800d6d8:	800f3b00 	call	800f3b0 <_Bfree>
 800d6dc:	00800044 	movi	r2,1
 800d6e0:	003fbc06 	br	800d5d4 <_dtoa_r+0xeac>
 800d6e4:	a80b883a 	mov	r5,r21
 800d6e8:	8009883a 	mov	r4,r16
 800d6ec:	800fc8c0 	call	800fc8c <__mcmp>
 800d6f0:	103edb0e 	bge	r2,zero,800d260 <_dtoa_r+0xb38>
 800d6f4:	800b883a 	mov	r5,r16
 800d6f8:	000f883a 	mov	r7,zero
 800d6fc:	01800284 	movi	r6,10
 800d700:	e009883a 	mov	r4,fp
 800d704:	800f3d80 	call	800f3d8 <__multadd>
 800d708:	1021883a 	mov	r16,r2
 800d70c:	d8800517 	ldw	r2,20(sp)
 800d710:	d8c00b17 	ldw	r3,44(sp)
 800d714:	10bfffc4 	addi	r2,r2,-1
 800d718:	d8800515 	stw	r2,20(sp)
 800d71c:	183f761e 	bne	r3,zero,800d4f8 <_dtoa_r+0xdd0>
 800d720:	d9000c17 	ldw	r4,48(sp)
 800d724:	0101730e 	bge	zero,r4,800dcf4 <_dtoa_r+0x15cc>
 800d728:	d9000615 	stw	r4,24(sp)
 800d72c:	003ed006 	br	800d270 <_dtoa_r+0xb48>
 800d730:	00800084 	movi	r2,2
 800d734:	3081861e 	bne	r6,r2,800dd50 <_dtoa_r+0x1628>
 800d738:	d8000b15 	stw	zero,44(sp)
 800d73c:	003f3c06 	br	800d430 <_dtoa_r+0xd08>
 800d740:	dc000917 	ldw	r16,36(sp)
 800d744:	003e9206 	br	800d190 <_dtoa_r+0xa68>
 800d748:	d9c00317 	ldw	r7,12(sp)
 800d74c:	00800084 	movi	r2,2
 800d750:	11fec50e 	bge	r2,r7,800d268 <_dtoa_r+0xb40>
 800d754:	d9000617 	ldw	r4,24(sp)
 800d758:	20013c1e 	bne	r4,zero,800dc4c <_dtoa_r+0x1524>
 800d75c:	a80b883a 	mov	r5,r21
 800d760:	000f883a 	mov	r7,zero
 800d764:	01800144 	movi	r6,5
 800d768:	e009883a 	mov	r4,fp
 800d76c:	800f3d80 	call	800f3d8 <__multadd>
 800d770:	100b883a 	mov	r5,r2
 800d774:	8009883a 	mov	r4,r16
 800d778:	102b883a 	mov	r21,r2
 800d77c:	800fc8c0 	call	800fc8c <__mcmp>
 800d780:	dc000915 	stw	r16,36(sp)
 800d784:	00bf410e 	bge	zero,r2,800d48c <_dtoa_r+0xd64>
 800d788:	d9c00717 	ldw	r7,28(sp)
 800d78c:	00800c44 	movi	r2,49
 800d790:	38800005 	stb	r2,0(r7)
 800d794:	d8800517 	ldw	r2,20(sp)
 800d798:	3dc00044 	addi	r23,r7,1
 800d79c:	10800044 	addi	r2,r2,1
 800d7a0:	d8800515 	stw	r2,20(sp)
 800d7a4:	003f3d06 	br	800d49c <_dtoa_r+0xd74>
 800d7a8:	d9800517 	ldw	r6,20(sp)
 800d7ac:	d9c00717 	ldw	r7,28(sp)
 800d7b0:	00800c44 	movi	r2,49
 800d7b4:	31800044 	addi	r6,r6,1
 800d7b8:	d9800515 	stw	r6,20(sp)
 800d7bc:	38800005 	stb	r2,0(r7)
 800d7c0:	003edf06 	br	800d340 <_dtoa_r+0xc18>
 800d7c4:	d8000b15 	stw	zero,44(sp)
 800d7c8:	003c9f06 	br	800ca48 <_dtoa_r+0x320>
 800d7cc:	903e7e1e 	bne	r18,zero,800d1c8 <_dtoa_r+0xaa0>
 800d7d0:	00800434 	movhi	r2,16
 800d7d4:	10bfffc4 	addi	r2,r2,-1
 800d7d8:	9884703a 	and	r2,r19,r2
 800d7dc:	1000ea1e 	bne	r2,zero,800db88 <_dtoa_r+0x1460>
 800d7e0:	9cdffc2c 	andhi	r19,r19,32752
 800d7e4:	9800e826 	beq	r19,zero,800db88 <_dtoa_r+0x1460>
 800d7e8:	d9c00817 	ldw	r7,32(sp)
 800d7ec:	b5800044 	addi	r22,r22,1
 800d7f0:	04c00044 	movi	r19,1
 800d7f4:	39c00044 	addi	r7,r7,1
 800d7f8:	d9c00815 	stw	r7,32(sp)
 800d7fc:	d8800d17 	ldw	r2,52(sp)
 800d800:	103e721e 	bne	r2,zero,800d1cc <_dtoa_r+0xaa4>
 800d804:	00800044 	movi	r2,1
 800d808:	003e7906 	br	800d1f0 <_dtoa_r+0xac8>
 800d80c:	8009883a 	mov	r4,r16
 800d810:	8015b700 	call	8015b70 <__floatsidf>
 800d814:	d9800f17 	ldw	r6,60(sp)
 800d818:	d9c01017 	ldw	r7,64(sp)
 800d81c:	1009883a 	mov	r4,r2
 800d820:	180b883a 	mov	r5,r3
 800d824:	80149880 	call	8014988 <__muldf3>
 800d828:	000d883a 	mov	r6,zero
 800d82c:	01d00734 	movhi	r7,16412
 800d830:	1009883a 	mov	r4,r2
 800d834:	180b883a 	mov	r5,r3
 800d838:	80134b40 	call	80134b4 <__adddf3>
 800d83c:	047f3034 	movhi	r17,64704
 800d840:	1021883a 	mov	r16,r2
 800d844:	1c63883a 	add	r17,r3,r17
 800d848:	d9000f17 	ldw	r4,60(sp)
 800d84c:	d9401017 	ldw	r5,64(sp)
 800d850:	000d883a 	mov	r6,zero
 800d854:	01d00534 	movhi	r7,16404
 800d858:	80151f40 	call	80151f4 <__subdf3>
 800d85c:	800d883a 	mov	r6,r16
 800d860:	880f883a 	mov	r7,r17
 800d864:	1009883a 	mov	r4,r2
 800d868:	180b883a 	mov	r5,r3
 800d86c:	102b883a 	mov	r21,r2
 800d870:	1829883a 	mov	r20,r3
 800d874:	80147b80 	call	80147b8 <__gedf2>
 800d878:	00806c16 	blt	zero,r2,800da2c <_dtoa_r+0x1304>
 800d87c:	89e0003c 	xorhi	r7,r17,32768
 800d880:	800d883a 	mov	r6,r16
 800d884:	a809883a 	mov	r4,r21
 800d888:	a00b883a 	mov	r5,r20
 800d88c:	80148940 	call	8014894 <__ledf2>
 800d890:	103d7e0e 	bge	r2,zero,800ce8c <_dtoa_r+0x764>
 800d894:	002b883a 	mov	r21,zero
 800d898:	0023883a 	mov	r17,zero
 800d89c:	003efb06 	br	800d48c <_dtoa_r+0xd64>
 800d8a0:	d8800717 	ldw	r2,28(sp)
 800d8a4:	003bd006 	br	800c7e8 <_dtoa_r+0xc0>
 800d8a8:	d9000a17 	ldw	r4,40(sp)
 800d8ac:	d9800d17 	ldw	r6,52(sp)
 800d8b0:	dd400a15 	stw	r21,40(sp)
 800d8b4:	a905c83a 	sub	r2,r21,r4
 800d8b8:	308d883a 	add	r6,r6,r2
 800d8bc:	d9800d15 	stw	r6,52(sp)
 800d8c0:	002b883a 	mov	r21,zero
 800d8c4:	003e0606 	br	800d0e0 <_dtoa_r+0x9b8>
 800d8c8:	9023883a 	mov	r17,r18
 800d8cc:	9829883a 	mov	r20,r19
 800d8d0:	04000084 	movi	r16,2
 800d8d4:	003c9206 	br	800cb20 <_dtoa_r+0x3f8>
 800d8d8:	04000044 	movi	r16,1
 800d8dc:	dc000c15 	stw	r16,48(sp)
 800d8e0:	dc000615 	stw	r16,24(sp)
 800d8e4:	dc002215 	stw	r16,136(sp)
 800d8e8:	e0001115 	stw	zero,68(fp)
 800d8ec:	000b883a 	mov	r5,zero
 800d8f0:	003c6906 	br	800ca98 <_dtoa_r+0x370>
 800d8f4:	3021883a 	mov	r16,r6
 800d8f8:	003ffb06 	br	800d8e8 <_dtoa_r+0x11c0>
 800d8fc:	1000021e 	bne	r2,zero,800d908 <_dtoa_r+0x11e0>
 800d900:	4200004c 	andi	r8,r8,1
 800d904:	403e7d1e 	bne	r8,zero,800d2fc <_dtoa_r+0xbd4>
 800d908:	01000c04 	movi	r4,48
 800d90c:	00000106 	br	800d914 <_dtoa_r+0x11ec>
 800d910:	102f883a 	mov	r23,r2
 800d914:	b8bfffc4 	addi	r2,r23,-1
 800d918:	10c00007 	ldb	r3,0(r2)
 800d91c:	193ffc26 	beq	r3,r4,800d910 <_dtoa_r+0x11e8>
 800d920:	003e8706 	br	800d340 <_dtoa_r+0xc18>
 800d924:	d8800517 	ldw	r2,20(sp)
 800d928:	00a3c83a 	sub	r17,zero,r2
 800d92c:	8800a426 	beq	r17,zero,800dbc0 <_dtoa_r+0x1498>
 800d930:	888003cc 	andi	r2,r17,15
 800d934:	100490fa 	slli	r2,r2,3
 800d938:	00c200b4 	movhi	r3,2050
 800d93c:	18e88904 	addi	r3,r3,-24028
 800d940:	1885883a 	add	r2,r3,r2
 800d944:	11800017 	ldw	r6,0(r2)
 800d948:	11c00117 	ldw	r7,4(r2)
 800d94c:	9009883a 	mov	r4,r18
 800d950:	980b883a 	mov	r5,r19
 800d954:	8823d13a 	srai	r17,r17,4
 800d958:	80149880 	call	8014988 <__muldf3>
 800d95c:	d8800f15 	stw	r2,60(sp)
 800d960:	d8c01015 	stw	r3,64(sp)
 800d964:	8800e826 	beq	r17,zero,800dd08 <_dtoa_r+0x15e0>
 800d968:	050200b4 	movhi	r20,2050
 800d96c:	a5287f04 	addi	r20,r20,-24068
 800d970:	04000084 	movi	r16,2
 800d974:	8980004c 	andi	r6,r17,1
 800d978:	1009883a 	mov	r4,r2
 800d97c:	8823d07a 	srai	r17,r17,1
 800d980:	180b883a 	mov	r5,r3
 800d984:	30000426 	beq	r6,zero,800d998 <_dtoa_r+0x1270>
 800d988:	a1800017 	ldw	r6,0(r20)
 800d98c:	a1c00117 	ldw	r7,4(r20)
 800d990:	84000044 	addi	r16,r16,1
 800d994:	80149880 	call	8014988 <__muldf3>
 800d998:	a5000204 	addi	r20,r20,8
 800d99c:	883ff51e 	bne	r17,zero,800d974 <_dtoa_r+0x124c>
 800d9a0:	d8800f15 	stw	r2,60(sp)
 800d9a4:	d8c01015 	stw	r3,64(sp)
 800d9a8:	003c7606 	br	800cb84 <_dtoa_r+0x45c>
 800d9ac:	00c00c04 	movi	r3,48
 800d9b0:	10c00005 	stb	r3,0(r2)
 800d9b4:	d8c00517 	ldw	r3,20(sp)
 800d9b8:	bd3fffc3 	ldbu	r20,-1(r23)
 800d9bc:	18c00044 	addi	r3,r3,1
 800d9c0:	d8c00515 	stw	r3,20(sp)
 800d9c4:	003db906 	br	800d0ac <_dtoa_r+0x984>
 800d9c8:	89400117 	ldw	r5,4(r17)
 800d9cc:	e009883a 	mov	r4,fp
 800d9d0:	800f3080 	call	800f308 <_Balloc>
 800d9d4:	89800417 	ldw	r6,16(r17)
 800d9d8:	89400304 	addi	r5,r17,12
 800d9dc:	11000304 	addi	r4,r2,12
 800d9e0:	31800084 	addi	r6,r6,2
 800d9e4:	318d883a 	add	r6,r6,r6
 800d9e8:	318d883a 	add	r6,r6,r6
 800d9ec:	1027883a 	mov	r19,r2
 800d9f0:	800971c0 	call	800971c <memcpy>
 800d9f4:	01800044 	movi	r6,1
 800d9f8:	980b883a 	mov	r5,r19
 800d9fc:	e009883a 	mov	r4,fp
 800da00:	800fb440 	call	800fb44 <__lshift>
 800da04:	1029883a 	mov	r20,r2
 800da08:	003ecc06 	br	800d53c <_dtoa_r+0xe14>
 800da0c:	00800e44 	movi	r2,57
 800da10:	90809026 	beq	r18,r2,800dc54 <_dtoa_r+0x152c>
 800da14:	92000044 	addi	r8,r18,1
 800da18:	003f1f06 	br	800d698 <_dtoa_r+0xf70>
 800da1c:	9011883a 	mov	r8,r18
 800da20:	8825883a 	mov	r18,r17
 800da24:	a023883a 	mov	r17,r20
 800da28:	003e2906 	br	800d2d0 <_dtoa_r+0xba8>
 800da2c:	002b883a 	mov	r21,zero
 800da30:	0023883a 	mov	r17,zero
 800da34:	003f5406 	br	800d788 <_dtoa_r+0x1060>
 800da38:	61bfffc4 	addi	r6,r12,-1
 800da3c:	300490fa 	slli	r2,r6,3
 800da40:	00c200b4 	movhi	r3,2050
 800da44:	18e88904 	addi	r3,r3,-24028
 800da48:	1885883a 	add	r2,r3,r2
 800da4c:	11000017 	ldw	r4,0(r2)
 800da50:	11400117 	ldw	r5,4(r2)
 800da54:	d8800717 	ldw	r2,28(sp)
 800da58:	880f883a 	mov	r7,r17
 800da5c:	d9801215 	stw	r6,72(sp)
 800da60:	800d883a 	mov	r6,r16
 800da64:	db001615 	stw	r12,88(sp)
 800da68:	15c00044 	addi	r23,r2,1
 800da6c:	80149880 	call	8014988 <__muldf3>
 800da70:	d9401017 	ldw	r5,64(sp)
 800da74:	d9000f17 	ldw	r4,60(sp)
 800da78:	d8c01515 	stw	r3,84(sp)
 800da7c:	d8801415 	stw	r2,80(sp)
 800da80:	8015af00 	call	8015af0 <__fixdfsi>
 800da84:	1009883a 	mov	r4,r2
 800da88:	1021883a 	mov	r16,r2
 800da8c:	8015b700 	call	8015b70 <__floatsidf>
 800da90:	d9000f17 	ldw	r4,60(sp)
 800da94:	d9401017 	ldw	r5,64(sp)
 800da98:	100d883a 	mov	r6,r2
 800da9c:	180f883a 	mov	r7,r3
 800daa0:	80151f40 	call	80151f4 <__subdf3>
 800daa4:	1829883a 	mov	r20,r3
 800daa8:	d8c00717 	ldw	r3,28(sp)
 800daac:	84000c04 	addi	r16,r16,48
 800dab0:	1023883a 	mov	r17,r2
 800dab4:	1c000005 	stb	r16,0(r3)
 800dab8:	db001617 	ldw	r12,88(sp)
 800dabc:	00800044 	movi	r2,1
 800dac0:	60802226 	beq	r12,r2,800db4c <_dtoa_r+0x1424>
 800dac4:	d9c00717 	ldw	r7,28(sp)
 800dac8:	8805883a 	mov	r2,r17
 800dacc:	b82b883a 	mov	r21,r23
 800dad0:	3b19883a 	add	r12,r7,r12
 800dad4:	6023883a 	mov	r17,r12
 800dad8:	a007883a 	mov	r3,r20
 800dadc:	dc800f15 	stw	r18,60(sp)
 800dae0:	000d883a 	mov	r6,zero
 800dae4:	01d00934 	movhi	r7,16420
 800dae8:	1009883a 	mov	r4,r2
 800daec:	180b883a 	mov	r5,r3
 800daf0:	80149880 	call	8014988 <__muldf3>
 800daf4:	180b883a 	mov	r5,r3
 800daf8:	1009883a 	mov	r4,r2
 800dafc:	1829883a 	mov	r20,r3
 800db00:	1025883a 	mov	r18,r2
 800db04:	8015af00 	call	8015af0 <__fixdfsi>
 800db08:	1009883a 	mov	r4,r2
 800db0c:	1021883a 	mov	r16,r2
 800db10:	8015b700 	call	8015b70 <__floatsidf>
 800db14:	100d883a 	mov	r6,r2
 800db18:	180f883a 	mov	r7,r3
 800db1c:	9009883a 	mov	r4,r18
 800db20:	a00b883a 	mov	r5,r20
 800db24:	84000c04 	addi	r16,r16,48
 800db28:	80151f40 	call	80151f4 <__subdf3>
 800db2c:	ad400044 	addi	r21,r21,1
 800db30:	ac3fffc5 	stb	r16,-1(r21)
 800db34:	ac7fea1e 	bne	r21,r17,800dae0 <_dtoa_r+0x13b8>
 800db38:	1023883a 	mov	r17,r2
 800db3c:	d8801217 	ldw	r2,72(sp)
 800db40:	dc800f17 	ldw	r18,60(sp)
 800db44:	1829883a 	mov	r20,r3
 800db48:	b8af883a 	add	r23,r23,r2
 800db4c:	d9001417 	ldw	r4,80(sp)
 800db50:	d9401517 	ldw	r5,84(sp)
 800db54:	000d883a 	mov	r6,zero
 800db58:	01cff834 	movhi	r7,16352
 800db5c:	80134b40 	call	80134b4 <__adddf3>
 800db60:	880d883a 	mov	r6,r17
 800db64:	a00f883a 	mov	r7,r20
 800db68:	1009883a 	mov	r4,r2
 800db6c:	180b883a 	mov	r5,r3
 800db70:	80148940 	call	8014894 <__ledf2>
 800db74:	10003e0e 	bge	r2,zero,800dc70 <_dtoa_r+0x1548>
 800db78:	d9001317 	ldw	r4,76(sp)
 800db7c:	bd3fffc3 	ldbu	r20,-1(r23)
 800db80:	d9000515 	stw	r4,20(sp)
 800db84:	003d3b06 	br	800d074 <_dtoa_r+0x94c>
 800db88:	0027883a 	mov	r19,zero
 800db8c:	003f1b06 	br	800d7fc <_dtoa_r+0x10d4>
 800db90:	d8800817 	ldw	r2,32(sp)
 800db94:	11e9c83a 	sub	r20,r2,r7
 800db98:	0005883a 	mov	r2,zero
 800db9c:	003d5406 	br	800d0f0 <_dtoa_r+0x9c8>
 800dba0:	00800044 	movi	r2,1
 800dba4:	003dc706 	br	800d2c4 <_dtoa_r+0xb9c>
 800dba8:	d8c00217 	ldw	r3,8(sp)
 800dbac:	00800d84 	movi	r2,54
 800dbb0:	dd400a17 	ldw	r21,40(sp)
 800dbb4:	10c5c83a 	sub	r2,r2,r3
 800dbb8:	dd000817 	ldw	r20,32(sp)
 800dbbc:	003d4c06 	br	800d0f0 <_dtoa_r+0x9c8>
 800dbc0:	dc800f15 	stw	r18,60(sp)
 800dbc4:	dcc01015 	stw	r19,64(sp)
 800dbc8:	04000084 	movi	r16,2
 800dbcc:	003bed06 	br	800cb84 <_dtoa_r+0x45c>
 800dbd0:	d9000617 	ldw	r4,24(sp)
 800dbd4:	203f0d26 	beq	r4,zero,800d80c <_dtoa_r+0x10e4>
 800dbd8:	d9800c17 	ldw	r6,48(sp)
 800dbdc:	01bcab0e 	bge	zero,r6,800ce8c <_dtoa_r+0x764>
 800dbe0:	d9401017 	ldw	r5,64(sp)
 800dbe4:	d9000f17 	ldw	r4,60(sp)
 800dbe8:	000d883a 	mov	r6,zero
 800dbec:	01d00934 	movhi	r7,16420
 800dbf0:	80149880 	call	8014988 <__muldf3>
 800dbf4:	81000044 	addi	r4,r16,1
 800dbf8:	d8800f15 	stw	r2,60(sp)
 800dbfc:	d8c01015 	stw	r3,64(sp)
 800dc00:	8015b700 	call	8015b70 <__floatsidf>
 800dc04:	d9800f17 	ldw	r6,60(sp)
 800dc08:	d9c01017 	ldw	r7,64(sp)
 800dc0c:	1009883a 	mov	r4,r2
 800dc10:	180b883a 	mov	r5,r3
 800dc14:	80149880 	call	8014988 <__muldf3>
 800dc18:	01d00734 	movhi	r7,16412
 800dc1c:	000d883a 	mov	r6,zero
 800dc20:	1009883a 	mov	r4,r2
 800dc24:	180b883a 	mov	r5,r3
 800dc28:	80134b40 	call	80134b4 <__adddf3>
 800dc2c:	d9c00517 	ldw	r7,20(sp)
 800dc30:	047f3034 	movhi	r17,64704
 800dc34:	1021883a 	mov	r16,r2
 800dc38:	39ffffc4 	addi	r7,r7,-1
 800dc3c:	d9c01315 	stw	r7,76(sp)
 800dc40:	1c63883a 	add	r17,r3,r17
 800dc44:	db000c17 	ldw	r12,48(sp)
 800dc48:	003bea06 	br	800cbf4 <_dtoa_r+0x4cc>
 800dc4c:	dc000915 	stw	r16,36(sp)
 800dc50:	003e0e06 	br	800d48c <_dtoa_r+0xd64>
 800dc54:	01000e44 	movi	r4,57
 800dc58:	8825883a 	mov	r18,r17
 800dc5c:	9dc00044 	addi	r23,r19,1
 800dc60:	99000005 	stb	r4,0(r19)
 800dc64:	a023883a 	mov	r17,r20
 800dc68:	dc000915 	stw	r16,36(sp)
 800dc6c:	003da406 	br	800d300 <_dtoa_r+0xbd8>
 800dc70:	d9801417 	ldw	r6,80(sp)
 800dc74:	d9c01517 	ldw	r7,84(sp)
 800dc78:	0009883a 	mov	r4,zero
 800dc7c:	014ff834 	movhi	r5,16352
 800dc80:	80151f40 	call	80151f4 <__subdf3>
 800dc84:	880d883a 	mov	r6,r17
 800dc88:	a00f883a 	mov	r7,r20
 800dc8c:	1009883a 	mov	r4,r2
 800dc90:	180b883a 	mov	r5,r3
 800dc94:	80147b80 	call	80147b8 <__gedf2>
 800dc98:	00bc7c0e 	bge	zero,r2,800ce8c <_dtoa_r+0x764>
 800dc9c:	01000c04 	movi	r4,48
 800dca0:	00000106 	br	800dca8 <_dtoa_r+0x1580>
 800dca4:	102f883a 	mov	r23,r2
 800dca8:	b8bfffc4 	addi	r2,r23,-1
 800dcac:	10c00007 	ldb	r3,0(r2)
 800dcb0:	193ffc26 	beq	r3,r4,800dca4 <_dtoa_r+0x157c>
 800dcb4:	d9801317 	ldw	r6,76(sp)
 800dcb8:	d9800515 	stw	r6,20(sp)
 800dcbc:	003c4406 	br	800cdd0 <_dtoa_r+0x6a8>
 800dcc0:	d9801317 	ldw	r6,76(sp)
 800dcc4:	d9800515 	stw	r6,20(sp)
 800dcc8:	003cea06 	br	800d074 <_dtoa_r+0x94c>
 800dccc:	dd800f17 	ldw	r22,60(sp)
 800dcd0:	dcc01017 	ldw	r19,64(sp)
 800dcd4:	dc801217 	ldw	r18,72(sp)
 800dcd8:	003c6c06 	br	800ce8c <_dtoa_r+0x764>
 800dcdc:	903e031e 	bne	r18,zero,800d4ec <_dtoa_r+0xdc4>
 800dce0:	003ebb06 	br	800d7d0 <_dtoa_r+0x10a8>
 800dce4:	103e6c1e 	bne	r2,zero,800d698 <_dtoa_r+0xf70>
 800dce8:	4080004c 	andi	r2,r8,1
 800dcec:	103e6a26 	beq	r2,zero,800d698 <_dtoa_r+0xf70>
 800dcf0:	003e6606 	br	800d68c <_dtoa_r+0xf64>
 800dcf4:	d8c00317 	ldw	r3,12(sp)
 800dcf8:	00800084 	movi	r2,2
 800dcfc:	10c02916 	blt	r2,r3,800dda4 <_dtoa_r+0x167c>
 800dd00:	d9000c17 	ldw	r4,48(sp)
 800dd04:	003e8806 	br	800d728 <_dtoa_r+0x1000>
 800dd08:	04000084 	movi	r16,2
 800dd0c:	003b9d06 	br	800cb84 <_dtoa_r+0x45c>
 800dd10:	d9001317 	ldw	r4,76(sp)
 800dd14:	d9000515 	stw	r4,20(sp)
 800dd18:	003cd606 	br	800d074 <_dtoa_r+0x94c>
 800dd1c:	d8801317 	ldw	r2,76(sp)
 800dd20:	d8800515 	stw	r2,20(sp)
 800dd24:	003c2a06 	br	800cdd0 <_dtoa_r+0x6a8>
 800dd28:	d9800317 	ldw	r6,12(sp)
 800dd2c:	00800084 	movi	r2,2
 800dd30:	11801516 	blt	r2,r6,800dd88 <_dtoa_r+0x1660>
 800dd34:	d9c00c17 	ldw	r7,48(sp)
 800dd38:	d9c00615 	stw	r7,24(sp)
 800dd3c:	003df706 	br	800d51c <_dtoa_r+0xdf4>
 800dd40:	193d3926 	beq	r3,r4,800d228 <_dtoa_r+0xb00>
 800dd44:	00c00f04 	movi	r3,60
 800dd48:	1885c83a 	sub	r2,r3,r2
 800dd4c:	003ddf06 	br	800d4cc <_dtoa_r+0xda4>
 800dd50:	e009883a 	mov	r4,fp
 800dd54:	e0001115 	stw	zero,68(fp)
 800dd58:	000b883a 	mov	r5,zero
 800dd5c:	800f3080 	call	800f308 <_Balloc>
 800dd60:	d8800715 	stw	r2,28(sp)
 800dd64:	d8c00717 	ldw	r3,28(sp)
 800dd68:	00bfffc4 	movi	r2,-1
 800dd6c:	01000044 	movi	r4,1
 800dd70:	d8800c15 	stw	r2,48(sp)
 800dd74:	e0c01015 	stw	r3,64(fp)
 800dd78:	d9000b15 	stw	r4,44(sp)
 800dd7c:	d8800615 	stw	r2,24(sp)
 800dd80:	d8002215 	stw	zero,136(sp)
 800dd84:	003c4106 	br	800ce8c <_dtoa_r+0x764>
 800dd88:	d8c00c17 	ldw	r3,48(sp)
 800dd8c:	d8c00615 	stw	r3,24(sp)
 800dd90:	003e7006 	br	800d754 <_dtoa_r+0x102c>
 800dd94:	04400044 	movi	r17,1
 800dd98:	003b2006 	br	800ca1c <_dtoa_r+0x2f4>
 800dd9c:	000b883a 	mov	r5,zero
 800dda0:	003b3d06 	br	800ca98 <_dtoa_r+0x370>
 800dda4:	d8800c17 	ldw	r2,48(sp)
 800dda8:	d8800615 	stw	r2,24(sp)
 800ddac:	003e6906 	br	800d754 <_dtoa_r+0x102c>

0800ddb0 <__sflush_r>:
 800ddb0:	2880030b 	ldhu	r2,12(r5)
 800ddb4:	defffb04 	addi	sp,sp,-20
 800ddb8:	dcc00315 	stw	r19,12(sp)
 800ddbc:	dc400115 	stw	r17,4(sp)
 800ddc0:	dfc00415 	stw	ra,16(sp)
 800ddc4:	dc800215 	stw	r18,8(sp)
 800ddc8:	dc000015 	stw	r16,0(sp)
 800ddcc:	10c0020c 	andi	r3,r2,8
 800ddd0:	2823883a 	mov	r17,r5
 800ddd4:	2027883a 	mov	r19,r4
 800ddd8:	1800311e 	bne	r3,zero,800dea0 <__sflush_r+0xf0>
 800dddc:	28c00117 	ldw	r3,4(r5)
 800dde0:	10820014 	ori	r2,r2,2048
 800dde4:	2880030d 	sth	r2,12(r5)
 800dde8:	00c04b0e 	bge	zero,r3,800df18 <__sflush_r+0x168>
 800ddec:	8a000a17 	ldw	r8,40(r17)
 800ddf0:	40002326 	beq	r8,zero,800de80 <__sflush_r+0xd0>
 800ddf4:	9c000017 	ldw	r16,0(r19)
 800ddf8:	10c4000c 	andi	r3,r2,4096
 800ddfc:	98000015 	stw	zero,0(r19)
 800de00:	18004826 	beq	r3,zero,800df24 <__sflush_r+0x174>
 800de04:	89801417 	ldw	r6,80(r17)
 800de08:	10c0010c 	andi	r3,r2,4
 800de0c:	18000626 	beq	r3,zero,800de28 <__sflush_r+0x78>
 800de10:	88c00117 	ldw	r3,4(r17)
 800de14:	88800c17 	ldw	r2,48(r17)
 800de18:	30cdc83a 	sub	r6,r6,r3
 800de1c:	10000226 	beq	r2,zero,800de28 <__sflush_r+0x78>
 800de20:	88800f17 	ldw	r2,60(r17)
 800de24:	308dc83a 	sub	r6,r6,r2
 800de28:	89400717 	ldw	r5,28(r17)
 800de2c:	000f883a 	mov	r7,zero
 800de30:	9809883a 	mov	r4,r19
 800de34:	403ee83a 	callr	r8
 800de38:	00ffffc4 	movi	r3,-1
 800de3c:	10c04426 	beq	r2,r3,800df50 <__sflush_r+0x1a0>
 800de40:	88c0030b 	ldhu	r3,12(r17)
 800de44:	89000417 	ldw	r4,16(r17)
 800de48:	88000115 	stw	zero,4(r17)
 800de4c:	197dffcc 	andi	r5,r3,63487
 800de50:	8940030d 	sth	r5,12(r17)
 800de54:	89000015 	stw	r4,0(r17)
 800de58:	18c4000c 	andi	r3,r3,4096
 800de5c:	18002c1e 	bne	r3,zero,800df10 <__sflush_r+0x160>
 800de60:	89400c17 	ldw	r5,48(r17)
 800de64:	9c000015 	stw	r16,0(r19)
 800de68:	28000526 	beq	r5,zero,800de80 <__sflush_r+0xd0>
 800de6c:	88801004 	addi	r2,r17,64
 800de70:	28800226 	beq	r5,r2,800de7c <__sflush_r+0xcc>
 800de74:	9809883a 	mov	r4,r19
 800de78:	800e5d80 	call	800e5d8 <_free_r>
 800de7c:	88000c15 	stw	zero,48(r17)
 800de80:	0005883a 	mov	r2,zero
 800de84:	dfc00417 	ldw	ra,16(sp)
 800de88:	dcc00317 	ldw	r19,12(sp)
 800de8c:	dc800217 	ldw	r18,8(sp)
 800de90:	dc400117 	ldw	r17,4(sp)
 800de94:	dc000017 	ldw	r16,0(sp)
 800de98:	dec00504 	addi	sp,sp,20
 800de9c:	f800283a 	ret
 800dea0:	2c800417 	ldw	r18,16(r5)
 800dea4:	903ff626 	beq	r18,zero,800de80 <__sflush_r+0xd0>
 800dea8:	2c000017 	ldw	r16,0(r5)
 800deac:	108000cc 	andi	r2,r2,3
 800deb0:	2c800015 	stw	r18,0(r5)
 800deb4:	84a1c83a 	sub	r16,r16,r18
 800deb8:	1000131e 	bne	r2,zero,800df08 <__sflush_r+0x158>
 800debc:	28800517 	ldw	r2,20(r5)
 800dec0:	88800215 	stw	r2,8(r17)
 800dec4:	04000316 	blt	zero,r16,800ded4 <__sflush_r+0x124>
 800dec8:	003fed06 	br	800de80 <__sflush_r+0xd0>
 800decc:	90a5883a 	add	r18,r18,r2
 800ded0:	043feb0e 	bge	zero,r16,800de80 <__sflush_r+0xd0>
 800ded4:	88800917 	ldw	r2,36(r17)
 800ded8:	89400717 	ldw	r5,28(r17)
 800dedc:	800f883a 	mov	r7,r16
 800dee0:	900d883a 	mov	r6,r18
 800dee4:	9809883a 	mov	r4,r19
 800dee8:	103ee83a 	callr	r2
 800deec:	80a1c83a 	sub	r16,r16,r2
 800def0:	00bff616 	blt	zero,r2,800decc <__sflush_r+0x11c>
 800def4:	88c0030b 	ldhu	r3,12(r17)
 800def8:	00bfffc4 	movi	r2,-1
 800defc:	18c01014 	ori	r3,r3,64
 800df00:	88c0030d 	sth	r3,12(r17)
 800df04:	003fdf06 	br	800de84 <__sflush_r+0xd4>
 800df08:	0005883a 	mov	r2,zero
 800df0c:	003fec06 	br	800dec0 <__sflush_r+0x110>
 800df10:	88801415 	stw	r2,80(r17)
 800df14:	003fd206 	br	800de60 <__sflush_r+0xb0>
 800df18:	28c00f17 	ldw	r3,60(r5)
 800df1c:	00ffb316 	blt	zero,r3,800ddec <__sflush_r+0x3c>
 800df20:	003fd706 	br	800de80 <__sflush_r+0xd0>
 800df24:	89400717 	ldw	r5,28(r17)
 800df28:	000d883a 	mov	r6,zero
 800df2c:	01c00044 	movi	r7,1
 800df30:	9809883a 	mov	r4,r19
 800df34:	403ee83a 	callr	r8
 800df38:	100d883a 	mov	r6,r2
 800df3c:	00bfffc4 	movi	r2,-1
 800df40:	30801426 	beq	r6,r2,800df94 <__sflush_r+0x1e4>
 800df44:	8880030b 	ldhu	r2,12(r17)
 800df48:	8a000a17 	ldw	r8,40(r17)
 800df4c:	003fae06 	br	800de08 <__sflush_r+0x58>
 800df50:	98c00017 	ldw	r3,0(r19)
 800df54:	183fba26 	beq	r3,zero,800de40 <__sflush_r+0x90>
 800df58:	01000744 	movi	r4,29
 800df5c:	19000626 	beq	r3,r4,800df78 <__sflush_r+0x1c8>
 800df60:	01000584 	movi	r4,22
 800df64:	19000426 	beq	r3,r4,800df78 <__sflush_r+0x1c8>
 800df68:	88c0030b 	ldhu	r3,12(r17)
 800df6c:	18c01014 	ori	r3,r3,64
 800df70:	88c0030d 	sth	r3,12(r17)
 800df74:	003fc306 	br	800de84 <__sflush_r+0xd4>
 800df78:	8880030b 	ldhu	r2,12(r17)
 800df7c:	88c00417 	ldw	r3,16(r17)
 800df80:	88000115 	stw	zero,4(r17)
 800df84:	10bdffcc 	andi	r2,r2,63487
 800df88:	8880030d 	sth	r2,12(r17)
 800df8c:	88c00015 	stw	r3,0(r17)
 800df90:	003fb306 	br	800de60 <__sflush_r+0xb0>
 800df94:	98800017 	ldw	r2,0(r19)
 800df98:	103fea26 	beq	r2,zero,800df44 <__sflush_r+0x194>
 800df9c:	00c00744 	movi	r3,29
 800dfa0:	10c00226 	beq	r2,r3,800dfac <__sflush_r+0x1fc>
 800dfa4:	00c00584 	movi	r3,22
 800dfa8:	10c0031e 	bne	r2,r3,800dfb8 <__sflush_r+0x208>
 800dfac:	9c000015 	stw	r16,0(r19)
 800dfb0:	0005883a 	mov	r2,zero
 800dfb4:	003fb306 	br	800de84 <__sflush_r+0xd4>
 800dfb8:	88c0030b 	ldhu	r3,12(r17)
 800dfbc:	3005883a 	mov	r2,r6
 800dfc0:	18c01014 	ori	r3,r3,64
 800dfc4:	88c0030d 	sth	r3,12(r17)
 800dfc8:	003fae06 	br	800de84 <__sflush_r+0xd4>

0800dfcc <_fflush_r>:
 800dfcc:	defffd04 	addi	sp,sp,-12
 800dfd0:	dc000115 	stw	r16,4(sp)
 800dfd4:	dfc00215 	stw	ra,8(sp)
 800dfd8:	2021883a 	mov	r16,r4
 800dfdc:	20000226 	beq	r4,zero,800dfe8 <_fflush_r+0x1c>
 800dfe0:	20800e17 	ldw	r2,56(r4)
 800dfe4:	10000c26 	beq	r2,zero,800e018 <_fflush_r+0x4c>
 800dfe8:	2880030f 	ldh	r2,12(r5)
 800dfec:	1000051e 	bne	r2,zero,800e004 <_fflush_r+0x38>
 800dff0:	0005883a 	mov	r2,zero
 800dff4:	dfc00217 	ldw	ra,8(sp)
 800dff8:	dc000117 	ldw	r16,4(sp)
 800dffc:	dec00304 	addi	sp,sp,12
 800e000:	f800283a 	ret
 800e004:	8009883a 	mov	r4,r16
 800e008:	dfc00217 	ldw	ra,8(sp)
 800e00c:	dc000117 	ldw	r16,4(sp)
 800e010:	dec00304 	addi	sp,sp,12
 800e014:	800ddb01 	jmpi	800ddb0 <__sflush_r>
 800e018:	d9400015 	stw	r5,0(sp)
 800e01c:	800e3b80 	call	800e3b8 <__sinit>
 800e020:	d9400017 	ldw	r5,0(sp)
 800e024:	003ff006 	br	800dfe8 <_fflush_r+0x1c>

0800e028 <fflush>:
 800e028:	20000526 	beq	r4,zero,800e040 <fflush+0x18>
 800e02c:	008200b4 	movhi	r2,2050
 800e030:	10b14b04 	addi	r2,r2,-15060
 800e034:	200b883a 	mov	r5,r4
 800e038:	11000017 	ldw	r4,0(r2)
 800e03c:	800dfcc1 	jmpi	800dfcc <_fflush_r>
 800e040:	008200b4 	movhi	r2,2050
 800e044:	10b14a04 	addi	r2,r2,-15064
 800e048:	11000017 	ldw	r4,0(r2)
 800e04c:	01420074 	movhi	r5,2049
 800e050:	2977f304 	addi	r5,r5,-8244
 800e054:	800ee741 	jmpi	800ee74 <_fwalk_reent>

0800e058 <__fp_unlock>:
 800e058:	0005883a 	mov	r2,zero
 800e05c:	f800283a 	ret

0800e060 <_cleanup_r>:
 800e060:	01420074 	movhi	r5,2049
 800e064:	2948aa04 	addi	r5,r5,8872
 800e068:	800ee741 	jmpi	800ee74 <_fwalk_reent>

0800e06c <__sinit.part.1>:
 800e06c:	defff704 	addi	sp,sp,-36
 800e070:	00c20074 	movhi	r3,2049
 800e074:	dfc00815 	stw	ra,32(sp)
 800e078:	ddc00715 	stw	r23,28(sp)
 800e07c:	dd800615 	stw	r22,24(sp)
 800e080:	dd400515 	stw	r21,20(sp)
 800e084:	dd000415 	stw	r20,16(sp)
 800e088:	dcc00315 	stw	r19,12(sp)
 800e08c:	dc800215 	stw	r18,8(sp)
 800e090:	dc400115 	stw	r17,4(sp)
 800e094:	dc000015 	stw	r16,0(sp)
 800e098:	18f81804 	addi	r3,r3,-8096
 800e09c:	24000117 	ldw	r16,4(r4)
 800e0a0:	20c00f15 	stw	r3,60(r4)
 800e0a4:	2080bb04 	addi	r2,r4,748
 800e0a8:	00c000c4 	movi	r3,3
 800e0ac:	20c0b915 	stw	r3,740(r4)
 800e0b0:	2080ba15 	stw	r2,744(r4)
 800e0b4:	2000b815 	stw	zero,736(r4)
 800e0b8:	05c00204 	movi	r23,8
 800e0bc:	00800104 	movi	r2,4
 800e0c0:	2025883a 	mov	r18,r4
 800e0c4:	b80d883a 	mov	r6,r23
 800e0c8:	81001704 	addi	r4,r16,92
 800e0cc:	000b883a 	mov	r5,zero
 800e0d0:	80000015 	stw	zero,0(r16)
 800e0d4:	80000115 	stw	zero,4(r16)
 800e0d8:	80000215 	stw	zero,8(r16)
 800e0dc:	8080030d 	sth	r2,12(r16)
 800e0e0:	80001915 	stw	zero,100(r16)
 800e0e4:	8000038d 	sth	zero,14(r16)
 800e0e8:	80000415 	stw	zero,16(r16)
 800e0ec:	80000515 	stw	zero,20(r16)
 800e0f0:	80000615 	stw	zero,24(r16)
 800e0f4:	80098640 	call	8009864 <memset>
 800e0f8:	05820074 	movhi	r22,2049
 800e0fc:	94400217 	ldw	r17,8(r18)
 800e100:	05420074 	movhi	r21,2049
 800e104:	05020074 	movhi	r20,2049
 800e108:	04c20074 	movhi	r19,2049
 800e10c:	b5a75c04 	addi	r22,r22,-25232
 800e110:	ad677304 	addi	r21,r21,-25140
 800e114:	a5279204 	addi	r20,r20,-25016
 800e118:	9ce7a904 	addi	r19,r19,-24924
 800e11c:	85800815 	stw	r22,32(r16)
 800e120:	85400915 	stw	r21,36(r16)
 800e124:	85000a15 	stw	r20,40(r16)
 800e128:	84c00b15 	stw	r19,44(r16)
 800e12c:	84000715 	stw	r16,28(r16)
 800e130:	00800284 	movi	r2,10
 800e134:	8880030d 	sth	r2,12(r17)
 800e138:	00800044 	movi	r2,1
 800e13c:	b80d883a 	mov	r6,r23
 800e140:	89001704 	addi	r4,r17,92
 800e144:	000b883a 	mov	r5,zero
 800e148:	88000015 	stw	zero,0(r17)
 800e14c:	88000115 	stw	zero,4(r17)
 800e150:	88000215 	stw	zero,8(r17)
 800e154:	88001915 	stw	zero,100(r17)
 800e158:	8880038d 	sth	r2,14(r17)
 800e15c:	88000415 	stw	zero,16(r17)
 800e160:	88000515 	stw	zero,20(r17)
 800e164:	88000615 	stw	zero,24(r17)
 800e168:	80098640 	call	8009864 <memset>
 800e16c:	94000317 	ldw	r16,12(r18)
 800e170:	00800484 	movi	r2,18
 800e174:	8c400715 	stw	r17,28(r17)
 800e178:	8d800815 	stw	r22,32(r17)
 800e17c:	8d400915 	stw	r21,36(r17)
 800e180:	8d000a15 	stw	r20,40(r17)
 800e184:	8cc00b15 	stw	r19,44(r17)
 800e188:	8080030d 	sth	r2,12(r16)
 800e18c:	00800084 	movi	r2,2
 800e190:	80000015 	stw	zero,0(r16)
 800e194:	80000115 	stw	zero,4(r16)
 800e198:	80000215 	stw	zero,8(r16)
 800e19c:	80001915 	stw	zero,100(r16)
 800e1a0:	8080038d 	sth	r2,14(r16)
 800e1a4:	80000415 	stw	zero,16(r16)
 800e1a8:	80000515 	stw	zero,20(r16)
 800e1ac:	80000615 	stw	zero,24(r16)
 800e1b0:	b80d883a 	mov	r6,r23
 800e1b4:	000b883a 	mov	r5,zero
 800e1b8:	81001704 	addi	r4,r16,92
 800e1bc:	80098640 	call	8009864 <memset>
 800e1c0:	00800044 	movi	r2,1
 800e1c4:	84000715 	stw	r16,28(r16)
 800e1c8:	85800815 	stw	r22,32(r16)
 800e1cc:	85400915 	stw	r21,36(r16)
 800e1d0:	85000a15 	stw	r20,40(r16)
 800e1d4:	84c00b15 	stw	r19,44(r16)
 800e1d8:	90800e15 	stw	r2,56(r18)
 800e1dc:	dfc00817 	ldw	ra,32(sp)
 800e1e0:	ddc00717 	ldw	r23,28(sp)
 800e1e4:	dd800617 	ldw	r22,24(sp)
 800e1e8:	dd400517 	ldw	r21,20(sp)
 800e1ec:	dd000417 	ldw	r20,16(sp)
 800e1f0:	dcc00317 	ldw	r19,12(sp)
 800e1f4:	dc800217 	ldw	r18,8(sp)
 800e1f8:	dc400117 	ldw	r17,4(sp)
 800e1fc:	dc000017 	ldw	r16,0(sp)
 800e200:	dec00904 	addi	sp,sp,36
 800e204:	f800283a 	ret

0800e208 <__fp_lock>:
 800e208:	0005883a 	mov	r2,zero
 800e20c:	f800283a 	ret

0800e210 <__sfmoreglue>:
 800e210:	defffc04 	addi	sp,sp,-16
 800e214:	dc800215 	stw	r18,8(sp)
 800e218:	2825883a 	mov	r18,r5
 800e21c:	dc000015 	stw	r16,0(sp)
 800e220:	01401a04 	movi	r5,104
 800e224:	2021883a 	mov	r16,r4
 800e228:	913fffc4 	addi	r4,r18,-1
 800e22c:	dfc00315 	stw	ra,12(sp)
 800e230:	dc400115 	stw	r17,4(sp)
 800e234:	80086340 	call	8008634 <__mulsi3>
 800e238:	8009883a 	mov	r4,r16
 800e23c:	11401d04 	addi	r5,r2,116
 800e240:	1023883a 	mov	r17,r2
 800e244:	8008f100 	call	8008f10 <_malloc_r>
 800e248:	1021883a 	mov	r16,r2
 800e24c:	10000726 	beq	r2,zero,800e26c <__sfmoreglue+0x5c>
 800e250:	11000304 	addi	r4,r2,12
 800e254:	10000015 	stw	zero,0(r2)
 800e258:	14800115 	stw	r18,4(r2)
 800e25c:	11000215 	stw	r4,8(r2)
 800e260:	89801a04 	addi	r6,r17,104
 800e264:	000b883a 	mov	r5,zero
 800e268:	80098640 	call	8009864 <memset>
 800e26c:	8005883a 	mov	r2,r16
 800e270:	dfc00317 	ldw	ra,12(sp)
 800e274:	dc800217 	ldw	r18,8(sp)
 800e278:	dc400117 	ldw	r17,4(sp)
 800e27c:	dc000017 	ldw	r16,0(sp)
 800e280:	dec00404 	addi	sp,sp,16
 800e284:	f800283a 	ret

0800e288 <__sfp>:
 800e288:	defffb04 	addi	sp,sp,-20
 800e28c:	dc000015 	stw	r16,0(sp)
 800e290:	040200b4 	movhi	r16,2050
 800e294:	84314a04 	addi	r16,r16,-15064
 800e298:	dcc00315 	stw	r19,12(sp)
 800e29c:	2027883a 	mov	r19,r4
 800e2a0:	81000017 	ldw	r4,0(r16)
 800e2a4:	dfc00415 	stw	ra,16(sp)
 800e2a8:	dc800215 	stw	r18,8(sp)
 800e2ac:	20800e17 	ldw	r2,56(r4)
 800e2b0:	dc400115 	stw	r17,4(sp)
 800e2b4:	1000021e 	bne	r2,zero,800e2c0 <__sfp+0x38>
 800e2b8:	800e06c0 	call	800e06c <__sinit.part.1>
 800e2bc:	81000017 	ldw	r4,0(r16)
 800e2c0:	2480b804 	addi	r18,r4,736
 800e2c4:	047fffc4 	movi	r17,-1
 800e2c8:	91000117 	ldw	r4,4(r18)
 800e2cc:	94000217 	ldw	r16,8(r18)
 800e2d0:	213fffc4 	addi	r4,r4,-1
 800e2d4:	20000a16 	blt	r4,zero,800e300 <__sfp+0x78>
 800e2d8:	8080030f 	ldh	r2,12(r16)
 800e2dc:	10000c26 	beq	r2,zero,800e310 <__sfp+0x88>
 800e2e0:	80c01d04 	addi	r3,r16,116
 800e2e4:	00000206 	br	800e2f0 <__sfp+0x68>
 800e2e8:	18bfe60f 	ldh	r2,-104(r3)
 800e2ec:	10000826 	beq	r2,zero,800e310 <__sfp+0x88>
 800e2f0:	213fffc4 	addi	r4,r4,-1
 800e2f4:	1c3ffd04 	addi	r16,r3,-12
 800e2f8:	18c01a04 	addi	r3,r3,104
 800e2fc:	247ffa1e 	bne	r4,r17,800e2e8 <__sfp+0x60>
 800e300:	90800017 	ldw	r2,0(r18)
 800e304:	10001d26 	beq	r2,zero,800e37c <__sfp+0xf4>
 800e308:	1025883a 	mov	r18,r2
 800e30c:	003fee06 	br	800e2c8 <__sfp+0x40>
 800e310:	00bfffc4 	movi	r2,-1
 800e314:	8080038d 	sth	r2,14(r16)
 800e318:	00800044 	movi	r2,1
 800e31c:	8080030d 	sth	r2,12(r16)
 800e320:	80001915 	stw	zero,100(r16)
 800e324:	80000015 	stw	zero,0(r16)
 800e328:	80000215 	stw	zero,8(r16)
 800e32c:	80000115 	stw	zero,4(r16)
 800e330:	80000415 	stw	zero,16(r16)
 800e334:	80000515 	stw	zero,20(r16)
 800e338:	80000615 	stw	zero,24(r16)
 800e33c:	01800204 	movi	r6,8
 800e340:	000b883a 	mov	r5,zero
 800e344:	81001704 	addi	r4,r16,92
 800e348:	80098640 	call	8009864 <memset>
 800e34c:	8005883a 	mov	r2,r16
 800e350:	80000c15 	stw	zero,48(r16)
 800e354:	80000d15 	stw	zero,52(r16)
 800e358:	80001115 	stw	zero,68(r16)
 800e35c:	80001215 	stw	zero,72(r16)
 800e360:	dfc00417 	ldw	ra,16(sp)
 800e364:	dcc00317 	ldw	r19,12(sp)
 800e368:	dc800217 	ldw	r18,8(sp)
 800e36c:	dc400117 	ldw	r17,4(sp)
 800e370:	dc000017 	ldw	r16,0(sp)
 800e374:	dec00504 	addi	sp,sp,20
 800e378:	f800283a 	ret
 800e37c:	01400104 	movi	r5,4
 800e380:	9809883a 	mov	r4,r19
 800e384:	800e2100 	call	800e210 <__sfmoreglue>
 800e388:	90800015 	stw	r2,0(r18)
 800e38c:	103fde1e 	bne	r2,zero,800e308 <__sfp+0x80>
 800e390:	00800304 	movi	r2,12
 800e394:	98800015 	stw	r2,0(r19)
 800e398:	0005883a 	mov	r2,zero
 800e39c:	003ff006 	br	800e360 <__sfp+0xd8>

0800e3a0 <_cleanup>:
 800e3a0:	008200b4 	movhi	r2,2050
 800e3a4:	10b14a04 	addi	r2,r2,-15064
 800e3a8:	11000017 	ldw	r4,0(r2)
 800e3ac:	01420074 	movhi	r5,2049
 800e3b0:	2948aa04 	addi	r5,r5,8872
 800e3b4:	800ee741 	jmpi	800ee74 <_fwalk_reent>

0800e3b8 <__sinit>:
 800e3b8:	20800e17 	ldw	r2,56(r4)
 800e3bc:	10000126 	beq	r2,zero,800e3c4 <__sinit+0xc>
 800e3c0:	f800283a 	ret
 800e3c4:	800e06c1 	jmpi	800e06c <__sinit.part.1>

0800e3c8 <__sfp_lock_acquire>:
 800e3c8:	f800283a 	ret

0800e3cc <__sfp_lock_release>:
 800e3cc:	f800283a 	ret

0800e3d0 <__sinit_lock_acquire>:
 800e3d0:	f800283a 	ret

0800e3d4 <__sinit_lock_release>:
 800e3d4:	f800283a 	ret

0800e3d8 <__fp_lock_all>:
 800e3d8:	008200b4 	movhi	r2,2050
 800e3dc:	10b14b04 	addi	r2,r2,-15060
 800e3e0:	11000017 	ldw	r4,0(r2)
 800e3e4:	01420074 	movhi	r5,2049
 800e3e8:	29788204 	addi	r5,r5,-7672
 800e3ec:	800edb01 	jmpi	800edb0 <_fwalk>

0800e3f0 <__fp_unlock_all>:
 800e3f0:	008200b4 	movhi	r2,2050
 800e3f4:	10b14b04 	addi	r2,r2,-15060
 800e3f8:	11000017 	ldw	r4,0(r2)
 800e3fc:	01420074 	movhi	r5,2049
 800e400:	29781604 	addi	r5,r5,-8104
 800e404:	800edb01 	jmpi	800edb0 <_fwalk>

0800e408 <__sflags>:
 800e408:	28800007 	ldb	r2,0(r5)
 800e40c:	00c01c84 	movi	r3,114
 800e410:	10c02426 	beq	r2,r3,800e4a4 <__sflags+0x9c>
 800e414:	00c01dc4 	movi	r3,119
 800e418:	10c01e26 	beq	r2,r3,800e494 <__sflags+0x8c>
 800e41c:	00c01844 	movi	r3,97
 800e420:	10c00426 	beq	r2,r3,800e434 <__sflags+0x2c>
 800e424:	00800584 	movi	r2,22
 800e428:	20800015 	stw	r2,0(r4)
 800e42c:	0005883a 	mov	r2,zero
 800e430:	f800283a 	ret
 800e434:	02c08204 	movi	r11,520
 800e438:	01000044 	movi	r4,1
 800e43c:	00804204 	movi	r2,264
 800e440:	01c00ac4 	movi	r7,43
 800e444:	02bff8c4 	movi	r10,-29
 800e448:	027fff04 	movi	r9,-4
 800e44c:	02001e04 	movi	r8,120
 800e450:	29400044 	addi	r5,r5,1
 800e454:	28c00007 	ldb	r3,0(r5)
 800e458:	18000626 	beq	r3,zero,800e474 <__sflags+0x6c>
 800e45c:	19c00826 	beq	r3,r7,800e480 <__sflags+0x78>
 800e460:	1a3ffb1e 	bne	r3,r8,800e450 <__sflags+0x48>
 800e464:	29400044 	addi	r5,r5,1
 800e468:	28c00007 	ldb	r3,0(r5)
 800e46c:	21020014 	ori	r4,r4,2048
 800e470:	183ffa1e 	bne	r3,zero,800e45c <__sflags+0x54>
 800e474:	22c8b03a 	or	r4,r4,r11
 800e478:	31000015 	stw	r4,0(r6)
 800e47c:	f800283a 	ret
 800e480:	1284703a 	and	r2,r2,r10
 800e484:	2248703a 	and	r4,r4,r9
 800e488:	10800414 	ori	r2,r2,16
 800e48c:	21000094 	ori	r4,r4,2
 800e490:	003fef06 	br	800e450 <__sflags+0x48>
 800e494:	02c18004 	movi	r11,1536
 800e498:	01000044 	movi	r4,1
 800e49c:	00800204 	movi	r2,8
 800e4a0:	003fe706 	br	800e440 <__sflags+0x38>
 800e4a4:	0017883a 	mov	r11,zero
 800e4a8:	0009883a 	mov	r4,zero
 800e4ac:	00800104 	movi	r2,4
 800e4b0:	003fe306 	br	800e440 <__sflags+0x38>

0800e4b4 <_malloc_trim_r>:
 800e4b4:	defffb04 	addi	sp,sp,-20
 800e4b8:	dcc00315 	stw	r19,12(sp)
 800e4bc:	04c200b4 	movhi	r19,2050
 800e4c0:	dc800215 	stw	r18,8(sp)
 800e4c4:	dc400115 	stw	r17,4(sp)
 800e4c8:	dc000015 	stw	r16,0(sp)
 800e4cc:	dfc00415 	stw	ra,16(sp)
 800e4d0:	2821883a 	mov	r16,r5
 800e4d4:	9ceb2f04 	addi	r19,r19,-21316
 800e4d8:	2025883a 	mov	r18,r4
 800e4dc:	80164a40 	call	80164a4 <__malloc_lock>
 800e4e0:	98800217 	ldw	r2,8(r19)
 800e4e4:	14400117 	ldw	r17,4(r2)
 800e4e8:	00bfff04 	movi	r2,-4
 800e4ec:	88a2703a 	and	r17,r17,r2
 800e4f0:	8c21c83a 	sub	r16,r17,r16
 800e4f4:	8403fbc4 	addi	r16,r16,4079
 800e4f8:	8020d33a 	srli	r16,r16,12
 800e4fc:	0083ffc4 	movi	r2,4095
 800e500:	843fffc4 	addi	r16,r16,-1
 800e504:	8020933a 	slli	r16,r16,12
 800e508:	1400060e 	bge	r2,r16,800e524 <_malloc_trim_r+0x70>
 800e50c:	000b883a 	mov	r5,zero
 800e510:	9009883a 	mov	r4,r18
 800e514:	8009d1c0 	call	8009d1c <_sbrk_r>
 800e518:	98c00217 	ldw	r3,8(r19)
 800e51c:	1c47883a 	add	r3,r3,r17
 800e520:	10c00a26 	beq	r2,r3,800e54c <_malloc_trim_r+0x98>
 800e524:	9009883a 	mov	r4,r18
 800e528:	80164c80 	call	80164c8 <__malloc_unlock>
 800e52c:	0005883a 	mov	r2,zero
 800e530:	dfc00417 	ldw	ra,16(sp)
 800e534:	dcc00317 	ldw	r19,12(sp)
 800e538:	dc800217 	ldw	r18,8(sp)
 800e53c:	dc400117 	ldw	r17,4(sp)
 800e540:	dc000017 	ldw	r16,0(sp)
 800e544:	dec00504 	addi	sp,sp,20
 800e548:	f800283a 	ret
 800e54c:	040bc83a 	sub	r5,zero,r16
 800e550:	9009883a 	mov	r4,r18
 800e554:	8009d1c0 	call	8009d1c <_sbrk_r>
 800e558:	00ffffc4 	movi	r3,-1
 800e55c:	10c00d26 	beq	r2,r3,800e594 <_malloc_trim_r+0xe0>
 800e560:	00c220b4 	movhi	r3,2178
 800e564:	18fc3b04 	addi	r3,r3,-3860
 800e568:	18800017 	ldw	r2,0(r3)
 800e56c:	99000217 	ldw	r4,8(r19)
 800e570:	8c23c83a 	sub	r17,r17,r16
 800e574:	8c400054 	ori	r17,r17,1
 800e578:	1421c83a 	sub	r16,r2,r16
 800e57c:	24400115 	stw	r17,4(r4)
 800e580:	9009883a 	mov	r4,r18
 800e584:	1c000015 	stw	r16,0(r3)
 800e588:	80164c80 	call	80164c8 <__malloc_unlock>
 800e58c:	00800044 	movi	r2,1
 800e590:	003fe706 	br	800e530 <_malloc_trim_r+0x7c>
 800e594:	000b883a 	mov	r5,zero
 800e598:	9009883a 	mov	r4,r18
 800e59c:	8009d1c0 	call	8009d1c <_sbrk_r>
 800e5a0:	99000217 	ldw	r4,8(r19)
 800e5a4:	014003c4 	movi	r5,15
 800e5a8:	1107c83a 	sub	r3,r2,r4
 800e5ac:	28ffdd0e 	bge	r5,r3,800e524 <_malloc_trim_r+0x70>
 800e5b0:	014200b4 	movhi	r5,2050
 800e5b4:	29714c04 	addi	r5,r5,-15056
 800e5b8:	29400017 	ldw	r5,0(r5)
 800e5bc:	18c00054 	ori	r3,r3,1
 800e5c0:	20c00115 	stw	r3,4(r4)
 800e5c4:	00c220b4 	movhi	r3,2178
 800e5c8:	1145c83a 	sub	r2,r2,r5
 800e5cc:	18fc3b04 	addi	r3,r3,-3860
 800e5d0:	18800015 	stw	r2,0(r3)
 800e5d4:	003fd306 	br	800e524 <_malloc_trim_r+0x70>

0800e5d8 <_free_r>:
 800e5d8:	28004126 	beq	r5,zero,800e6e0 <_free_r+0x108>
 800e5dc:	defffd04 	addi	sp,sp,-12
 800e5e0:	dc400115 	stw	r17,4(sp)
 800e5e4:	dc000015 	stw	r16,0(sp)
 800e5e8:	2023883a 	mov	r17,r4
 800e5ec:	2821883a 	mov	r16,r5
 800e5f0:	dfc00215 	stw	ra,8(sp)
 800e5f4:	80164a40 	call	80164a4 <__malloc_lock>
 800e5f8:	81ffff17 	ldw	r7,-4(r16)
 800e5fc:	00bfff84 	movi	r2,-2
 800e600:	010200b4 	movhi	r4,2050
 800e604:	81bffe04 	addi	r6,r16,-8
 800e608:	3884703a 	and	r2,r7,r2
 800e60c:	212b2f04 	addi	r4,r4,-21316
 800e610:	308b883a 	add	r5,r6,r2
 800e614:	2a400117 	ldw	r9,4(r5)
 800e618:	22000217 	ldw	r8,8(r4)
 800e61c:	00ffff04 	movi	r3,-4
 800e620:	48c6703a 	and	r3,r9,r3
 800e624:	2a005726 	beq	r5,r8,800e784 <_free_r+0x1ac>
 800e628:	28c00115 	stw	r3,4(r5)
 800e62c:	39c0004c 	andi	r7,r7,1
 800e630:	3800091e 	bne	r7,zero,800e658 <_free_r+0x80>
 800e634:	823ffe17 	ldw	r8,-8(r16)
 800e638:	22400204 	addi	r9,r4,8
 800e63c:	320dc83a 	sub	r6,r6,r8
 800e640:	31c00217 	ldw	r7,8(r6)
 800e644:	1205883a 	add	r2,r2,r8
 800e648:	3a406526 	beq	r7,r9,800e7e0 <_free_r+0x208>
 800e64c:	32000317 	ldw	r8,12(r6)
 800e650:	3a000315 	stw	r8,12(r7)
 800e654:	41c00215 	stw	r7,8(r8)
 800e658:	28cf883a 	add	r7,r5,r3
 800e65c:	39c00117 	ldw	r7,4(r7)
 800e660:	39c0004c 	andi	r7,r7,1
 800e664:	38003a26 	beq	r7,zero,800e750 <_free_r+0x178>
 800e668:	10c00054 	ori	r3,r2,1
 800e66c:	30c00115 	stw	r3,4(r6)
 800e670:	3087883a 	add	r3,r6,r2
 800e674:	18800015 	stw	r2,0(r3)
 800e678:	00c07fc4 	movi	r3,511
 800e67c:	18801936 	bltu	r3,r2,800e6e4 <_free_r+0x10c>
 800e680:	1004d0fa 	srli	r2,r2,3
 800e684:	01c00044 	movi	r7,1
 800e688:	21400117 	ldw	r5,4(r4)
 800e68c:	10c00044 	addi	r3,r2,1
 800e690:	18c7883a 	add	r3,r3,r3
 800e694:	1005d0ba 	srai	r2,r2,2
 800e698:	18c7883a 	add	r3,r3,r3
 800e69c:	18c7883a 	add	r3,r3,r3
 800e6a0:	1907883a 	add	r3,r3,r4
 800e6a4:	3884983a 	sll	r2,r7,r2
 800e6a8:	19c00017 	ldw	r7,0(r3)
 800e6ac:	1a3ffe04 	addi	r8,r3,-8
 800e6b0:	1144b03a 	or	r2,r2,r5
 800e6b4:	32000315 	stw	r8,12(r6)
 800e6b8:	31c00215 	stw	r7,8(r6)
 800e6bc:	20800115 	stw	r2,4(r4)
 800e6c0:	19800015 	stw	r6,0(r3)
 800e6c4:	39800315 	stw	r6,12(r7)
 800e6c8:	8809883a 	mov	r4,r17
 800e6cc:	dfc00217 	ldw	ra,8(sp)
 800e6d0:	dc400117 	ldw	r17,4(sp)
 800e6d4:	dc000017 	ldw	r16,0(sp)
 800e6d8:	dec00304 	addi	sp,sp,12
 800e6dc:	80164c81 	jmpi	80164c8 <__malloc_unlock>
 800e6e0:	f800283a 	ret
 800e6e4:	100ad27a 	srli	r5,r2,9
 800e6e8:	00c00104 	movi	r3,4
 800e6ec:	19404a36 	bltu	r3,r5,800e818 <_free_r+0x240>
 800e6f0:	100ad1ba 	srli	r5,r2,6
 800e6f4:	28c00e44 	addi	r3,r5,57
 800e6f8:	18c7883a 	add	r3,r3,r3
 800e6fc:	29400e04 	addi	r5,r5,56
 800e700:	18c7883a 	add	r3,r3,r3
 800e704:	18c7883a 	add	r3,r3,r3
 800e708:	1909883a 	add	r4,r3,r4
 800e70c:	20c00017 	ldw	r3,0(r4)
 800e710:	01c200b4 	movhi	r7,2050
 800e714:	213ffe04 	addi	r4,r4,-8
 800e718:	39eb2f04 	addi	r7,r7,-21316
 800e71c:	20c04426 	beq	r4,r3,800e830 <_free_r+0x258>
 800e720:	01ffff04 	movi	r7,-4
 800e724:	19400117 	ldw	r5,4(r3)
 800e728:	29ca703a 	and	r5,r5,r7
 800e72c:	1140022e 	bgeu	r2,r5,800e738 <_free_r+0x160>
 800e730:	18c00217 	ldw	r3,8(r3)
 800e734:	20fffb1e 	bne	r4,r3,800e724 <_free_r+0x14c>
 800e738:	19000317 	ldw	r4,12(r3)
 800e73c:	31000315 	stw	r4,12(r6)
 800e740:	30c00215 	stw	r3,8(r6)
 800e744:	21800215 	stw	r6,8(r4)
 800e748:	19800315 	stw	r6,12(r3)
 800e74c:	003fde06 	br	800e6c8 <_free_r+0xf0>
 800e750:	29c00217 	ldw	r7,8(r5)
 800e754:	10c5883a 	add	r2,r2,r3
 800e758:	00c200b4 	movhi	r3,2050
 800e75c:	18eb3104 	addi	r3,r3,-21308
 800e760:	38c03b26 	beq	r7,r3,800e850 <_free_r+0x278>
 800e764:	2a000317 	ldw	r8,12(r5)
 800e768:	11400054 	ori	r5,r2,1
 800e76c:	3087883a 	add	r3,r6,r2
 800e770:	3a000315 	stw	r8,12(r7)
 800e774:	41c00215 	stw	r7,8(r8)
 800e778:	31400115 	stw	r5,4(r6)
 800e77c:	18800015 	stw	r2,0(r3)
 800e780:	003fbd06 	br	800e678 <_free_r+0xa0>
 800e784:	39c0004c 	andi	r7,r7,1
 800e788:	10c5883a 	add	r2,r2,r3
 800e78c:	3800071e 	bne	r7,zero,800e7ac <_free_r+0x1d4>
 800e790:	81fffe17 	ldw	r7,-8(r16)
 800e794:	31cdc83a 	sub	r6,r6,r7
 800e798:	30c00317 	ldw	r3,12(r6)
 800e79c:	31400217 	ldw	r5,8(r6)
 800e7a0:	11c5883a 	add	r2,r2,r7
 800e7a4:	28c00315 	stw	r3,12(r5)
 800e7a8:	19400215 	stw	r5,8(r3)
 800e7ac:	10c00054 	ori	r3,r2,1
 800e7b0:	30c00115 	stw	r3,4(r6)
 800e7b4:	00c200b4 	movhi	r3,2050
 800e7b8:	18f14d04 	addi	r3,r3,-15052
 800e7bc:	18c00017 	ldw	r3,0(r3)
 800e7c0:	21800215 	stw	r6,8(r4)
 800e7c4:	10ffc036 	bltu	r2,r3,800e6c8 <_free_r+0xf0>
 800e7c8:	008200b4 	movhi	r2,2050
 800e7cc:	10b9f904 	addi	r2,r2,-6172
 800e7d0:	11400017 	ldw	r5,0(r2)
 800e7d4:	8809883a 	mov	r4,r17
 800e7d8:	800e4b40 	call	800e4b4 <_malloc_trim_r>
 800e7dc:	003fba06 	br	800e6c8 <_free_r+0xf0>
 800e7e0:	28c9883a 	add	r4,r5,r3
 800e7e4:	21000117 	ldw	r4,4(r4)
 800e7e8:	2100004c 	andi	r4,r4,1
 800e7ec:	2000391e 	bne	r4,zero,800e8d4 <_free_r+0x2fc>
 800e7f0:	29c00217 	ldw	r7,8(r5)
 800e7f4:	29000317 	ldw	r4,12(r5)
 800e7f8:	1885883a 	add	r2,r3,r2
 800e7fc:	10c00054 	ori	r3,r2,1
 800e800:	39000315 	stw	r4,12(r7)
 800e804:	21c00215 	stw	r7,8(r4)
 800e808:	30c00115 	stw	r3,4(r6)
 800e80c:	308d883a 	add	r6,r6,r2
 800e810:	30800015 	stw	r2,0(r6)
 800e814:	003fac06 	br	800e6c8 <_free_r+0xf0>
 800e818:	00c00504 	movi	r3,20
 800e81c:	19401536 	bltu	r3,r5,800e874 <_free_r+0x29c>
 800e820:	28c01704 	addi	r3,r5,92
 800e824:	18c7883a 	add	r3,r3,r3
 800e828:	294016c4 	addi	r5,r5,91
 800e82c:	003fb406 	br	800e700 <_free_r+0x128>
 800e830:	280bd0ba 	srai	r5,r5,2
 800e834:	00c00044 	movi	r3,1
 800e838:	38800117 	ldw	r2,4(r7)
 800e83c:	194a983a 	sll	r5,r3,r5
 800e840:	2007883a 	mov	r3,r4
 800e844:	2884b03a 	or	r2,r5,r2
 800e848:	38800115 	stw	r2,4(r7)
 800e84c:	003fbb06 	br	800e73c <_free_r+0x164>
 800e850:	21800515 	stw	r6,20(r4)
 800e854:	21800415 	stw	r6,16(r4)
 800e858:	10c00054 	ori	r3,r2,1
 800e85c:	31c00315 	stw	r7,12(r6)
 800e860:	31c00215 	stw	r7,8(r6)
 800e864:	30c00115 	stw	r3,4(r6)
 800e868:	308d883a 	add	r6,r6,r2
 800e86c:	30800015 	stw	r2,0(r6)
 800e870:	003f9506 	br	800e6c8 <_free_r+0xf0>
 800e874:	00c01504 	movi	r3,84
 800e878:	19400536 	bltu	r3,r5,800e890 <_free_r+0x2b8>
 800e87c:	100ad33a 	srli	r5,r2,12
 800e880:	28c01bc4 	addi	r3,r5,111
 800e884:	18c7883a 	add	r3,r3,r3
 800e888:	29401b84 	addi	r5,r5,110
 800e88c:	003f9c06 	br	800e700 <_free_r+0x128>
 800e890:	00c05504 	movi	r3,340
 800e894:	19400536 	bltu	r3,r5,800e8ac <_free_r+0x2d4>
 800e898:	100ad3fa 	srli	r5,r2,15
 800e89c:	28c01e04 	addi	r3,r5,120
 800e8a0:	18c7883a 	add	r3,r3,r3
 800e8a4:	29401dc4 	addi	r5,r5,119
 800e8a8:	003f9506 	br	800e700 <_free_r+0x128>
 800e8ac:	00c15504 	movi	r3,1364
 800e8b0:	19400536 	bltu	r3,r5,800e8c8 <_free_r+0x2f0>
 800e8b4:	100ad4ba 	srli	r5,r2,18
 800e8b8:	28c01f44 	addi	r3,r5,125
 800e8bc:	18c7883a 	add	r3,r3,r3
 800e8c0:	29401f04 	addi	r5,r5,124
 800e8c4:	003f8e06 	br	800e700 <_free_r+0x128>
 800e8c8:	00c03f84 	movi	r3,254
 800e8cc:	01401f84 	movi	r5,126
 800e8d0:	003f8b06 	br	800e700 <_free_r+0x128>
 800e8d4:	10c00054 	ori	r3,r2,1
 800e8d8:	30c00115 	stw	r3,4(r6)
 800e8dc:	308d883a 	add	r6,r6,r2
 800e8e0:	30800015 	stw	r2,0(r6)
 800e8e4:	003f7806 	br	800e6c8 <_free_r+0xf0>

0800e8e8 <__sfvwrite_r>:
 800e8e8:	30800217 	ldw	r2,8(r6)
 800e8ec:	10006726 	beq	r2,zero,800ea8c <__sfvwrite_r+0x1a4>
 800e8f0:	28c0030b 	ldhu	r3,12(r5)
 800e8f4:	defff404 	addi	sp,sp,-48
 800e8f8:	dd400715 	stw	r21,28(sp)
 800e8fc:	dd000615 	stw	r20,24(sp)
 800e900:	dc000215 	stw	r16,8(sp)
 800e904:	dfc00b15 	stw	ra,44(sp)
 800e908:	df000a15 	stw	fp,40(sp)
 800e90c:	ddc00915 	stw	r23,36(sp)
 800e910:	dd800815 	stw	r22,32(sp)
 800e914:	dcc00515 	stw	r19,20(sp)
 800e918:	dc800415 	stw	r18,16(sp)
 800e91c:	dc400315 	stw	r17,12(sp)
 800e920:	1880020c 	andi	r2,r3,8
 800e924:	2821883a 	mov	r16,r5
 800e928:	202b883a 	mov	r21,r4
 800e92c:	3029883a 	mov	r20,r6
 800e930:	10002726 	beq	r2,zero,800e9d0 <__sfvwrite_r+0xe8>
 800e934:	28800417 	ldw	r2,16(r5)
 800e938:	10002526 	beq	r2,zero,800e9d0 <__sfvwrite_r+0xe8>
 800e93c:	1880008c 	andi	r2,r3,2
 800e940:	a4400017 	ldw	r17,0(r20)
 800e944:	10002a26 	beq	r2,zero,800e9f0 <__sfvwrite_r+0x108>
 800e948:	05a00034 	movhi	r22,32768
 800e94c:	0027883a 	mov	r19,zero
 800e950:	0025883a 	mov	r18,zero
 800e954:	b5bf0004 	addi	r22,r22,-1024
 800e958:	980d883a 	mov	r6,r19
 800e95c:	a809883a 	mov	r4,r21
 800e960:	90004626 	beq	r18,zero,800ea7c <__sfvwrite_r+0x194>
 800e964:	900f883a 	mov	r7,r18
 800e968:	b480022e 	bgeu	r22,r18,800e974 <__sfvwrite_r+0x8c>
 800e96c:	01e00034 	movhi	r7,32768
 800e970:	39ff0004 	addi	r7,r7,-1024
 800e974:	80800917 	ldw	r2,36(r16)
 800e978:	81400717 	ldw	r5,28(r16)
 800e97c:	103ee83a 	callr	r2
 800e980:	00805a0e 	bge	zero,r2,800eaec <__sfvwrite_r+0x204>
 800e984:	a0c00217 	ldw	r3,8(r20)
 800e988:	98a7883a 	add	r19,r19,r2
 800e98c:	90a5c83a 	sub	r18,r18,r2
 800e990:	1885c83a 	sub	r2,r3,r2
 800e994:	a0800215 	stw	r2,8(r20)
 800e998:	103fef1e 	bne	r2,zero,800e958 <__sfvwrite_r+0x70>
 800e99c:	0005883a 	mov	r2,zero
 800e9a0:	dfc00b17 	ldw	ra,44(sp)
 800e9a4:	df000a17 	ldw	fp,40(sp)
 800e9a8:	ddc00917 	ldw	r23,36(sp)
 800e9ac:	dd800817 	ldw	r22,32(sp)
 800e9b0:	dd400717 	ldw	r21,28(sp)
 800e9b4:	dd000617 	ldw	r20,24(sp)
 800e9b8:	dcc00517 	ldw	r19,20(sp)
 800e9bc:	dc800417 	ldw	r18,16(sp)
 800e9c0:	dc400317 	ldw	r17,12(sp)
 800e9c4:	dc000217 	ldw	r16,8(sp)
 800e9c8:	dec00c04 	addi	sp,sp,48
 800e9cc:	f800283a 	ret
 800e9d0:	800b883a 	mov	r5,r16
 800e9d4:	a809883a 	mov	r4,r21
 800e9d8:	800c3580 	call	800c358 <__swsetup_r>
 800e9dc:	1000ee1e 	bne	r2,zero,800ed98 <__sfvwrite_r+0x4b0>
 800e9e0:	80c0030b 	ldhu	r3,12(r16)
 800e9e4:	a4400017 	ldw	r17,0(r20)
 800e9e8:	1880008c 	andi	r2,r3,2
 800e9ec:	103fd61e 	bne	r2,zero,800e948 <__sfvwrite_r+0x60>
 800e9f0:	1880004c 	andi	r2,r3,1
 800e9f4:	1000421e 	bne	r2,zero,800eb00 <__sfvwrite_r+0x218>
 800e9f8:	0039883a 	mov	fp,zero
 800e9fc:	0025883a 	mov	r18,zero
 800ea00:	90001a26 	beq	r18,zero,800ea6c <__sfvwrite_r+0x184>
 800ea04:	1880800c 	andi	r2,r3,512
 800ea08:	84c00217 	ldw	r19,8(r16)
 800ea0c:	10002126 	beq	r2,zero,800ea94 <__sfvwrite_r+0x1ac>
 800ea10:	982f883a 	mov	r23,r19
 800ea14:	94c09636 	bltu	r18,r19,800ec70 <__sfvwrite_r+0x388>
 800ea18:	1881200c 	andi	r2,r3,1152
 800ea1c:	1000a11e 	bne	r2,zero,800eca4 <__sfvwrite_r+0x3bc>
 800ea20:	81000017 	ldw	r4,0(r16)
 800ea24:	b80d883a 	mov	r6,r23
 800ea28:	e00b883a 	mov	r5,fp
 800ea2c:	800f1ac0 	call	800f1ac <memmove>
 800ea30:	80c00217 	ldw	r3,8(r16)
 800ea34:	81000017 	ldw	r4,0(r16)
 800ea38:	9005883a 	mov	r2,r18
 800ea3c:	1ce7c83a 	sub	r19,r3,r19
 800ea40:	25cf883a 	add	r7,r4,r23
 800ea44:	84c00215 	stw	r19,8(r16)
 800ea48:	81c00015 	stw	r7,0(r16)
 800ea4c:	a0c00217 	ldw	r3,8(r20)
 800ea50:	e0b9883a 	add	fp,fp,r2
 800ea54:	90a5c83a 	sub	r18,r18,r2
 800ea58:	18a7c83a 	sub	r19,r3,r2
 800ea5c:	a4c00215 	stw	r19,8(r20)
 800ea60:	983fce26 	beq	r19,zero,800e99c <__sfvwrite_r+0xb4>
 800ea64:	80c0030b 	ldhu	r3,12(r16)
 800ea68:	903fe61e 	bne	r18,zero,800ea04 <__sfvwrite_r+0x11c>
 800ea6c:	8f000017 	ldw	fp,0(r17)
 800ea70:	8c800117 	ldw	r18,4(r17)
 800ea74:	8c400204 	addi	r17,r17,8
 800ea78:	003fe106 	br	800ea00 <__sfvwrite_r+0x118>
 800ea7c:	8cc00017 	ldw	r19,0(r17)
 800ea80:	8c800117 	ldw	r18,4(r17)
 800ea84:	8c400204 	addi	r17,r17,8
 800ea88:	003fb306 	br	800e958 <__sfvwrite_r+0x70>
 800ea8c:	0005883a 	mov	r2,zero
 800ea90:	f800283a 	ret
 800ea94:	81000017 	ldw	r4,0(r16)
 800ea98:	80800417 	ldw	r2,16(r16)
 800ea9c:	11005a36 	bltu	r2,r4,800ec08 <__sfvwrite_r+0x320>
 800eaa0:	85c00517 	ldw	r23,20(r16)
 800eaa4:	95c05836 	bltu	r18,r23,800ec08 <__sfvwrite_r+0x320>
 800eaa8:	00a00034 	movhi	r2,32768
 800eaac:	10bfffc4 	addi	r2,r2,-1
 800eab0:	9009883a 	mov	r4,r18
 800eab4:	1480012e 	bgeu	r2,r18,800eabc <__sfvwrite_r+0x1d4>
 800eab8:	1009883a 	mov	r4,r2
 800eabc:	b80b883a 	mov	r5,r23
 800eac0:	80084800 	call	8008480 <__divsi3>
 800eac4:	b80b883a 	mov	r5,r23
 800eac8:	1009883a 	mov	r4,r2
 800eacc:	80086340 	call	8008634 <__mulsi3>
 800ead0:	81400717 	ldw	r5,28(r16)
 800ead4:	80c00917 	ldw	r3,36(r16)
 800ead8:	100f883a 	mov	r7,r2
 800eadc:	e00d883a 	mov	r6,fp
 800eae0:	a809883a 	mov	r4,r21
 800eae4:	183ee83a 	callr	r3
 800eae8:	00bfd816 	blt	zero,r2,800ea4c <__sfvwrite_r+0x164>
 800eaec:	8080030b 	ldhu	r2,12(r16)
 800eaf0:	10801014 	ori	r2,r2,64
 800eaf4:	8080030d 	sth	r2,12(r16)
 800eaf8:	00bfffc4 	movi	r2,-1
 800eafc:	003fa806 	br	800e9a0 <__sfvwrite_r+0xb8>
 800eb00:	0027883a 	mov	r19,zero
 800eb04:	0011883a 	mov	r8,zero
 800eb08:	0039883a 	mov	fp,zero
 800eb0c:	0025883a 	mov	r18,zero
 800eb10:	90001f26 	beq	r18,zero,800eb90 <__sfvwrite_r+0x2a8>
 800eb14:	40005a26 	beq	r8,zero,800ec80 <__sfvwrite_r+0x398>
 800eb18:	982d883a 	mov	r22,r19
 800eb1c:	94c0012e 	bgeu	r18,r19,800eb24 <__sfvwrite_r+0x23c>
 800eb20:	902d883a 	mov	r22,r18
 800eb24:	81000017 	ldw	r4,0(r16)
 800eb28:	80800417 	ldw	r2,16(r16)
 800eb2c:	b02f883a 	mov	r23,r22
 800eb30:	81c00517 	ldw	r7,20(r16)
 800eb34:	1100032e 	bgeu	r2,r4,800eb44 <__sfvwrite_r+0x25c>
 800eb38:	80c00217 	ldw	r3,8(r16)
 800eb3c:	38c7883a 	add	r3,r7,r3
 800eb40:	1d801816 	blt	r3,r22,800eba4 <__sfvwrite_r+0x2bc>
 800eb44:	b1c03e16 	blt	r22,r7,800ec40 <__sfvwrite_r+0x358>
 800eb48:	80800917 	ldw	r2,36(r16)
 800eb4c:	81400717 	ldw	r5,28(r16)
 800eb50:	e00d883a 	mov	r6,fp
 800eb54:	da000115 	stw	r8,4(sp)
 800eb58:	a809883a 	mov	r4,r21
 800eb5c:	103ee83a 	callr	r2
 800eb60:	102f883a 	mov	r23,r2
 800eb64:	da000117 	ldw	r8,4(sp)
 800eb68:	00bfe00e 	bge	zero,r2,800eaec <__sfvwrite_r+0x204>
 800eb6c:	9de7c83a 	sub	r19,r19,r23
 800eb70:	98001f26 	beq	r19,zero,800ebf0 <__sfvwrite_r+0x308>
 800eb74:	a0800217 	ldw	r2,8(r20)
 800eb78:	e5f9883a 	add	fp,fp,r23
 800eb7c:	95e5c83a 	sub	r18,r18,r23
 800eb80:	15efc83a 	sub	r23,r2,r23
 800eb84:	a5c00215 	stw	r23,8(r20)
 800eb88:	b83f8426 	beq	r23,zero,800e99c <__sfvwrite_r+0xb4>
 800eb8c:	903fe11e 	bne	r18,zero,800eb14 <__sfvwrite_r+0x22c>
 800eb90:	8f000017 	ldw	fp,0(r17)
 800eb94:	8c800117 	ldw	r18,4(r17)
 800eb98:	0011883a 	mov	r8,zero
 800eb9c:	8c400204 	addi	r17,r17,8
 800eba0:	003fdb06 	br	800eb10 <__sfvwrite_r+0x228>
 800eba4:	180d883a 	mov	r6,r3
 800eba8:	e00b883a 	mov	r5,fp
 800ebac:	da000115 	stw	r8,4(sp)
 800ebb0:	d8c00015 	stw	r3,0(sp)
 800ebb4:	800f1ac0 	call	800f1ac <memmove>
 800ebb8:	d8c00017 	ldw	r3,0(sp)
 800ebbc:	80800017 	ldw	r2,0(r16)
 800ebc0:	800b883a 	mov	r5,r16
 800ebc4:	a809883a 	mov	r4,r21
 800ebc8:	10c5883a 	add	r2,r2,r3
 800ebcc:	80800015 	stw	r2,0(r16)
 800ebd0:	d8c00015 	stw	r3,0(sp)
 800ebd4:	800dfcc0 	call	800dfcc <_fflush_r>
 800ebd8:	d8c00017 	ldw	r3,0(sp)
 800ebdc:	da000117 	ldw	r8,4(sp)
 800ebe0:	103fc21e 	bne	r2,zero,800eaec <__sfvwrite_r+0x204>
 800ebe4:	182f883a 	mov	r23,r3
 800ebe8:	9de7c83a 	sub	r19,r19,r23
 800ebec:	983fe11e 	bne	r19,zero,800eb74 <__sfvwrite_r+0x28c>
 800ebf0:	800b883a 	mov	r5,r16
 800ebf4:	a809883a 	mov	r4,r21
 800ebf8:	800dfcc0 	call	800dfcc <_fflush_r>
 800ebfc:	103fbb1e 	bne	r2,zero,800eaec <__sfvwrite_r+0x204>
 800ec00:	0011883a 	mov	r8,zero
 800ec04:	003fdb06 	br	800eb74 <__sfvwrite_r+0x28c>
 800ec08:	94c0012e 	bgeu	r18,r19,800ec10 <__sfvwrite_r+0x328>
 800ec0c:	9027883a 	mov	r19,r18
 800ec10:	980d883a 	mov	r6,r19
 800ec14:	e00b883a 	mov	r5,fp
 800ec18:	800f1ac0 	call	800f1ac <memmove>
 800ec1c:	80800217 	ldw	r2,8(r16)
 800ec20:	80c00017 	ldw	r3,0(r16)
 800ec24:	14c5c83a 	sub	r2,r2,r19
 800ec28:	1cc7883a 	add	r3,r3,r19
 800ec2c:	80800215 	stw	r2,8(r16)
 800ec30:	80c00015 	stw	r3,0(r16)
 800ec34:	10004326 	beq	r2,zero,800ed44 <__sfvwrite_r+0x45c>
 800ec38:	9805883a 	mov	r2,r19
 800ec3c:	003f8306 	br	800ea4c <__sfvwrite_r+0x164>
 800ec40:	b00d883a 	mov	r6,r22
 800ec44:	e00b883a 	mov	r5,fp
 800ec48:	da000115 	stw	r8,4(sp)
 800ec4c:	800f1ac0 	call	800f1ac <memmove>
 800ec50:	80800217 	ldw	r2,8(r16)
 800ec54:	80c00017 	ldw	r3,0(r16)
 800ec58:	da000117 	ldw	r8,4(sp)
 800ec5c:	1585c83a 	sub	r2,r2,r22
 800ec60:	1dad883a 	add	r22,r3,r22
 800ec64:	80800215 	stw	r2,8(r16)
 800ec68:	85800015 	stw	r22,0(r16)
 800ec6c:	003fbf06 	br	800eb6c <__sfvwrite_r+0x284>
 800ec70:	81000017 	ldw	r4,0(r16)
 800ec74:	9027883a 	mov	r19,r18
 800ec78:	902f883a 	mov	r23,r18
 800ec7c:	003f6906 	br	800ea24 <__sfvwrite_r+0x13c>
 800ec80:	900d883a 	mov	r6,r18
 800ec84:	01400284 	movi	r5,10
 800ec88:	e009883a 	mov	r4,fp
 800ec8c:	800f0c80 	call	800f0c8 <memchr>
 800ec90:	10003e26 	beq	r2,zero,800ed8c <__sfvwrite_r+0x4a4>
 800ec94:	10800044 	addi	r2,r2,1
 800ec98:	1727c83a 	sub	r19,r2,fp
 800ec9c:	02000044 	movi	r8,1
 800eca0:	003f9d06 	br	800eb18 <__sfvwrite_r+0x230>
 800eca4:	80800517 	ldw	r2,20(r16)
 800eca8:	81400417 	ldw	r5,16(r16)
 800ecac:	81c00017 	ldw	r7,0(r16)
 800ecb0:	10a7883a 	add	r19,r2,r2
 800ecb4:	9885883a 	add	r2,r19,r2
 800ecb8:	1026d7fa 	srli	r19,r2,31
 800ecbc:	396dc83a 	sub	r22,r7,r5
 800ecc0:	b1000044 	addi	r4,r22,1
 800ecc4:	9885883a 	add	r2,r19,r2
 800ecc8:	1027d07a 	srai	r19,r2,1
 800eccc:	2485883a 	add	r2,r4,r18
 800ecd0:	980d883a 	mov	r6,r19
 800ecd4:	9880022e 	bgeu	r19,r2,800ece0 <__sfvwrite_r+0x3f8>
 800ecd8:	1027883a 	mov	r19,r2
 800ecdc:	100d883a 	mov	r6,r2
 800ece0:	18c1000c 	andi	r3,r3,1024
 800ece4:	18001c26 	beq	r3,zero,800ed58 <__sfvwrite_r+0x470>
 800ece8:	300b883a 	mov	r5,r6
 800ecec:	a809883a 	mov	r4,r21
 800ecf0:	8008f100 	call	8008f10 <_malloc_r>
 800ecf4:	102f883a 	mov	r23,r2
 800ecf8:	10002926 	beq	r2,zero,800eda0 <__sfvwrite_r+0x4b8>
 800ecfc:	81400417 	ldw	r5,16(r16)
 800ed00:	b00d883a 	mov	r6,r22
 800ed04:	1009883a 	mov	r4,r2
 800ed08:	800971c0 	call	800971c <memcpy>
 800ed0c:	8080030b 	ldhu	r2,12(r16)
 800ed10:	00fedfc4 	movi	r3,-1153
 800ed14:	10c4703a 	and	r2,r2,r3
 800ed18:	10802014 	ori	r2,r2,128
 800ed1c:	8080030d 	sth	r2,12(r16)
 800ed20:	bd89883a 	add	r4,r23,r22
 800ed24:	9d8fc83a 	sub	r7,r19,r22
 800ed28:	85c00415 	stw	r23,16(r16)
 800ed2c:	84c00515 	stw	r19,20(r16)
 800ed30:	81000015 	stw	r4,0(r16)
 800ed34:	9027883a 	mov	r19,r18
 800ed38:	81c00215 	stw	r7,8(r16)
 800ed3c:	902f883a 	mov	r23,r18
 800ed40:	003f3806 	br	800ea24 <__sfvwrite_r+0x13c>
 800ed44:	800b883a 	mov	r5,r16
 800ed48:	a809883a 	mov	r4,r21
 800ed4c:	800dfcc0 	call	800dfcc <_fflush_r>
 800ed50:	103fb926 	beq	r2,zero,800ec38 <__sfvwrite_r+0x350>
 800ed54:	003f6506 	br	800eaec <__sfvwrite_r+0x204>
 800ed58:	a809883a 	mov	r4,r21
 800ed5c:	80104200 	call	8010420 <_realloc_r>
 800ed60:	102f883a 	mov	r23,r2
 800ed64:	103fee1e 	bne	r2,zero,800ed20 <__sfvwrite_r+0x438>
 800ed68:	81400417 	ldw	r5,16(r16)
 800ed6c:	a809883a 	mov	r4,r21
 800ed70:	800e5d80 	call	800e5d8 <_free_r>
 800ed74:	8080030b 	ldhu	r2,12(r16)
 800ed78:	00ffdfc4 	movi	r3,-129
 800ed7c:	1884703a 	and	r2,r3,r2
 800ed80:	00c00304 	movi	r3,12
 800ed84:	a8c00015 	stw	r3,0(r21)
 800ed88:	003f5906 	br	800eaf0 <__sfvwrite_r+0x208>
 800ed8c:	94c00044 	addi	r19,r18,1
 800ed90:	02000044 	movi	r8,1
 800ed94:	003f6006 	br	800eb18 <__sfvwrite_r+0x230>
 800ed98:	00bfffc4 	movi	r2,-1
 800ed9c:	003f0006 	br	800e9a0 <__sfvwrite_r+0xb8>
 800eda0:	00800304 	movi	r2,12
 800eda4:	a8800015 	stw	r2,0(r21)
 800eda8:	8080030b 	ldhu	r2,12(r16)
 800edac:	003f5006 	br	800eaf0 <__sfvwrite_r+0x208>

0800edb0 <_fwalk>:
 800edb0:	defff704 	addi	sp,sp,-36
 800edb4:	dd000415 	stw	r20,16(sp)
 800edb8:	dfc00815 	stw	ra,32(sp)
 800edbc:	ddc00715 	stw	r23,28(sp)
 800edc0:	dd800615 	stw	r22,24(sp)
 800edc4:	dd400515 	stw	r21,20(sp)
 800edc8:	dcc00315 	stw	r19,12(sp)
 800edcc:	dc800215 	stw	r18,8(sp)
 800edd0:	dc400115 	stw	r17,4(sp)
 800edd4:	dc000015 	stw	r16,0(sp)
 800edd8:	2500b804 	addi	r20,r4,736
 800eddc:	a0002326 	beq	r20,zero,800ee6c <_fwalk+0xbc>
 800ede0:	282b883a 	mov	r21,r5
 800ede4:	002f883a 	mov	r23,zero
 800ede8:	05800044 	movi	r22,1
 800edec:	04ffffc4 	movi	r19,-1
 800edf0:	a4400117 	ldw	r17,4(r20)
 800edf4:	a4800217 	ldw	r18,8(r20)
 800edf8:	8c7fffc4 	addi	r17,r17,-1
 800edfc:	88000d16 	blt	r17,zero,800ee34 <_fwalk+0x84>
 800ee00:	94000304 	addi	r16,r18,12
 800ee04:	94800384 	addi	r18,r18,14
 800ee08:	8080000b 	ldhu	r2,0(r16)
 800ee0c:	8c7fffc4 	addi	r17,r17,-1
 800ee10:	813ffd04 	addi	r4,r16,-12
 800ee14:	b080042e 	bgeu	r22,r2,800ee28 <_fwalk+0x78>
 800ee18:	9080000f 	ldh	r2,0(r18)
 800ee1c:	14c00226 	beq	r2,r19,800ee28 <_fwalk+0x78>
 800ee20:	a83ee83a 	callr	r21
 800ee24:	b8aeb03a 	or	r23,r23,r2
 800ee28:	84001a04 	addi	r16,r16,104
 800ee2c:	94801a04 	addi	r18,r18,104
 800ee30:	8cfff51e 	bne	r17,r19,800ee08 <_fwalk+0x58>
 800ee34:	a5000017 	ldw	r20,0(r20)
 800ee38:	a03fed1e 	bne	r20,zero,800edf0 <_fwalk+0x40>
 800ee3c:	b805883a 	mov	r2,r23
 800ee40:	dfc00817 	ldw	ra,32(sp)
 800ee44:	ddc00717 	ldw	r23,28(sp)
 800ee48:	dd800617 	ldw	r22,24(sp)
 800ee4c:	dd400517 	ldw	r21,20(sp)
 800ee50:	dd000417 	ldw	r20,16(sp)
 800ee54:	dcc00317 	ldw	r19,12(sp)
 800ee58:	dc800217 	ldw	r18,8(sp)
 800ee5c:	dc400117 	ldw	r17,4(sp)
 800ee60:	dc000017 	ldw	r16,0(sp)
 800ee64:	dec00904 	addi	sp,sp,36
 800ee68:	f800283a 	ret
 800ee6c:	002f883a 	mov	r23,zero
 800ee70:	003ff206 	br	800ee3c <_fwalk+0x8c>

0800ee74 <_fwalk_reent>:
 800ee74:	defff704 	addi	sp,sp,-36
 800ee78:	dd000415 	stw	r20,16(sp)
 800ee7c:	dfc00815 	stw	ra,32(sp)
 800ee80:	ddc00715 	stw	r23,28(sp)
 800ee84:	dd800615 	stw	r22,24(sp)
 800ee88:	dd400515 	stw	r21,20(sp)
 800ee8c:	dcc00315 	stw	r19,12(sp)
 800ee90:	dc800215 	stw	r18,8(sp)
 800ee94:	dc400115 	stw	r17,4(sp)
 800ee98:	dc000015 	stw	r16,0(sp)
 800ee9c:	2500b804 	addi	r20,r4,736
 800eea0:	a0002326 	beq	r20,zero,800ef30 <_fwalk_reent+0xbc>
 800eea4:	282b883a 	mov	r21,r5
 800eea8:	2027883a 	mov	r19,r4
 800eeac:	002f883a 	mov	r23,zero
 800eeb0:	05800044 	movi	r22,1
 800eeb4:	04bfffc4 	movi	r18,-1
 800eeb8:	a4400117 	ldw	r17,4(r20)
 800eebc:	a4000217 	ldw	r16,8(r20)
 800eec0:	8c7fffc4 	addi	r17,r17,-1
 800eec4:	88000c16 	blt	r17,zero,800eef8 <_fwalk_reent+0x84>
 800eec8:	84000304 	addi	r16,r16,12
 800eecc:	8080000b 	ldhu	r2,0(r16)
 800eed0:	8c7fffc4 	addi	r17,r17,-1
 800eed4:	817ffd04 	addi	r5,r16,-12
 800eed8:	b080052e 	bgeu	r22,r2,800eef0 <_fwalk_reent+0x7c>
 800eedc:	8080008f 	ldh	r2,2(r16)
 800eee0:	9809883a 	mov	r4,r19
 800eee4:	14800226 	beq	r2,r18,800eef0 <_fwalk_reent+0x7c>
 800eee8:	a83ee83a 	callr	r21
 800eeec:	b8aeb03a 	or	r23,r23,r2
 800eef0:	84001a04 	addi	r16,r16,104
 800eef4:	8cbff51e 	bne	r17,r18,800eecc <_fwalk_reent+0x58>
 800eef8:	a5000017 	ldw	r20,0(r20)
 800eefc:	a03fee1e 	bne	r20,zero,800eeb8 <_fwalk_reent+0x44>
 800ef00:	b805883a 	mov	r2,r23
 800ef04:	dfc00817 	ldw	ra,32(sp)
 800ef08:	ddc00717 	ldw	r23,28(sp)
 800ef0c:	dd800617 	ldw	r22,24(sp)
 800ef10:	dd400517 	ldw	r21,20(sp)
 800ef14:	dd000417 	ldw	r20,16(sp)
 800ef18:	dcc00317 	ldw	r19,12(sp)
 800ef1c:	dc800217 	ldw	r18,8(sp)
 800ef20:	dc400117 	ldw	r17,4(sp)
 800ef24:	dc000017 	ldw	r16,0(sp)
 800ef28:	dec00904 	addi	sp,sp,36
 800ef2c:	f800283a 	ret
 800ef30:	002f883a 	mov	r23,zero
 800ef34:	003ff206 	br	800ef00 <_fwalk_reent+0x8c>

0800ef38 <_isatty_r>:
 800ef38:	defffd04 	addi	sp,sp,-12
 800ef3c:	dc000015 	stw	r16,0(sp)
 800ef40:	040200b4 	movhi	r16,2050
 800ef44:	dc400115 	stw	r17,4(sp)
 800ef48:	8439f604 	addi	r16,r16,-6184
 800ef4c:	2023883a 	mov	r17,r4
 800ef50:	2809883a 	mov	r4,r5
 800ef54:	dfc00215 	stw	ra,8(sp)
 800ef58:	80000015 	stw	zero,0(r16)
 800ef5c:	80161780 	call	8016178 <isatty>
 800ef60:	00ffffc4 	movi	r3,-1
 800ef64:	10c00526 	beq	r2,r3,800ef7c <_isatty_r+0x44>
 800ef68:	dfc00217 	ldw	ra,8(sp)
 800ef6c:	dc400117 	ldw	r17,4(sp)
 800ef70:	dc000017 	ldw	r16,0(sp)
 800ef74:	dec00304 	addi	sp,sp,12
 800ef78:	f800283a 	ret
 800ef7c:	80c00017 	ldw	r3,0(r16)
 800ef80:	183ff926 	beq	r3,zero,800ef68 <_isatty_r+0x30>
 800ef84:	88c00015 	stw	r3,0(r17)
 800ef88:	003ff706 	br	800ef68 <_isatty_r+0x30>

0800ef8c <_setlocale_r>:
 800ef8c:	30001b26 	beq	r6,zero,800effc <_setlocale_r+0x70>
 800ef90:	014200b4 	movhi	r5,2050
 800ef94:	defffe04 	addi	sp,sp,-8
 800ef98:	29686f04 	addi	r5,r5,-24132
 800ef9c:	3009883a 	mov	r4,r6
 800efa0:	dc000015 	stw	r16,0(sp)
 800efa4:	dfc00115 	stw	ra,4(sp)
 800efa8:	3021883a 	mov	r16,r6
 800efac:	80109f80 	call	80109f8 <strcmp>
 800efb0:	1000061e 	bne	r2,zero,800efcc <_setlocale_r+0x40>
 800efb4:	008200b4 	movhi	r2,2050
 800efb8:	10a85004 	addi	r2,r2,-24256
 800efbc:	dfc00117 	ldw	ra,4(sp)
 800efc0:	dc000017 	ldw	r16,0(sp)
 800efc4:	dec00204 	addi	sp,sp,8
 800efc8:	f800283a 	ret
 800efcc:	014200b4 	movhi	r5,2050
 800efd0:	29685004 	addi	r5,r5,-24256
 800efd4:	8009883a 	mov	r4,r16
 800efd8:	80109f80 	call	80109f8 <strcmp>
 800efdc:	103ff526 	beq	r2,zero,800efb4 <_setlocale_r+0x28>
 800efe0:	014200b4 	movhi	r5,2050
 800efe4:	29685a04 	addi	r5,r5,-24216
 800efe8:	8009883a 	mov	r4,r16
 800efec:	80109f80 	call	80109f8 <strcmp>
 800eff0:	103ff026 	beq	r2,zero,800efb4 <_setlocale_r+0x28>
 800eff4:	0005883a 	mov	r2,zero
 800eff8:	003ff006 	br	800efbc <_setlocale_r+0x30>
 800effc:	008200b4 	movhi	r2,2050
 800f000:	10a85004 	addi	r2,r2,-24256
 800f004:	f800283a 	ret

0800f008 <__locale_charset>:
 800f008:	008200b4 	movhi	r2,2050
 800f00c:	10ac3904 	addi	r2,r2,-20252
 800f010:	f800283a 	ret

0800f014 <__locale_mb_cur_max>:
 800f014:	008200b4 	movhi	r2,2050
 800f018:	10b14e04 	addi	r2,r2,-15048
 800f01c:	10800017 	ldw	r2,0(r2)
 800f020:	f800283a 	ret

0800f024 <__locale_msgcharset>:
 800f024:	008200b4 	movhi	r2,2050
 800f028:	10ac3104 	addi	r2,r2,-20284
 800f02c:	f800283a 	ret

0800f030 <__locale_cjk_lang>:
 800f030:	0005883a 	mov	r2,zero
 800f034:	f800283a 	ret

0800f038 <_localeconv_r>:
 800f038:	008200b4 	movhi	r2,2050
 800f03c:	10ac4104 	addi	r2,r2,-20220
 800f040:	f800283a 	ret

0800f044 <setlocale>:
 800f044:	008200b4 	movhi	r2,2050
 800f048:	10b14b04 	addi	r2,r2,-15060
 800f04c:	280d883a 	mov	r6,r5
 800f050:	200b883a 	mov	r5,r4
 800f054:	11000017 	ldw	r4,0(r2)
 800f058:	800ef8c1 	jmpi	800ef8c <_setlocale_r>

0800f05c <localeconv>:
 800f05c:	008200b4 	movhi	r2,2050
 800f060:	10ac4104 	addi	r2,r2,-20220
 800f064:	f800283a 	ret

0800f068 <_lseek_r>:
 800f068:	defffd04 	addi	sp,sp,-12
 800f06c:	2805883a 	mov	r2,r5
 800f070:	dc000015 	stw	r16,0(sp)
 800f074:	040200b4 	movhi	r16,2050
 800f078:	dc400115 	stw	r17,4(sp)
 800f07c:	300b883a 	mov	r5,r6
 800f080:	8439f604 	addi	r16,r16,-6184
 800f084:	2023883a 	mov	r17,r4
 800f088:	380d883a 	mov	r6,r7
 800f08c:	1009883a 	mov	r4,r2
 800f090:	dfc00215 	stw	ra,8(sp)
 800f094:	80000015 	stw	zero,0(r16)
 800f098:	801634c0 	call	801634c <lseek>
 800f09c:	00ffffc4 	movi	r3,-1
 800f0a0:	10c00526 	beq	r2,r3,800f0b8 <_lseek_r+0x50>
 800f0a4:	dfc00217 	ldw	ra,8(sp)
 800f0a8:	dc400117 	ldw	r17,4(sp)
 800f0ac:	dc000017 	ldw	r16,0(sp)
 800f0b0:	dec00304 	addi	sp,sp,12
 800f0b4:	f800283a 	ret
 800f0b8:	80c00017 	ldw	r3,0(r16)
 800f0bc:	183ff926 	beq	r3,zero,800f0a4 <_lseek_r+0x3c>
 800f0c0:	88c00015 	stw	r3,0(r17)
 800f0c4:	003ff706 	br	800f0a4 <_lseek_r+0x3c>

0800f0c8 <memchr>:
 800f0c8:	208000cc 	andi	r2,r4,3
 800f0cc:	280f883a 	mov	r7,r5
 800f0d0:	10003426 	beq	r2,zero,800f1a4 <memchr+0xdc>
 800f0d4:	30bfffc4 	addi	r2,r6,-1
 800f0d8:	30001a26 	beq	r6,zero,800f144 <memchr+0x7c>
 800f0dc:	20c00003 	ldbu	r3,0(r4)
 800f0e0:	29803fcc 	andi	r6,r5,255
 800f0e4:	30c0051e 	bne	r6,r3,800f0fc <memchr+0x34>
 800f0e8:	00001806 	br	800f14c <memchr+0x84>
 800f0ec:	10001526 	beq	r2,zero,800f144 <memchr+0x7c>
 800f0f0:	20c00003 	ldbu	r3,0(r4)
 800f0f4:	10bfffc4 	addi	r2,r2,-1
 800f0f8:	30c01426 	beq	r6,r3,800f14c <memchr+0x84>
 800f0fc:	21000044 	addi	r4,r4,1
 800f100:	20c000cc 	andi	r3,r4,3
 800f104:	183ff91e 	bne	r3,zero,800f0ec <memchr+0x24>
 800f108:	020000c4 	movi	r8,3
 800f10c:	40801136 	bltu	r8,r2,800f154 <memchr+0x8c>
 800f110:	10000c26 	beq	r2,zero,800f144 <memchr+0x7c>
 800f114:	20c00003 	ldbu	r3,0(r4)
 800f118:	29403fcc 	andi	r5,r5,255
 800f11c:	28c00b26 	beq	r5,r3,800f14c <memchr+0x84>
 800f120:	20c00044 	addi	r3,r4,1
 800f124:	39803fcc 	andi	r6,r7,255
 800f128:	2089883a 	add	r4,r4,r2
 800f12c:	00000306 	br	800f13c <memchr+0x74>
 800f130:	18c00044 	addi	r3,r3,1
 800f134:	197fffc3 	ldbu	r5,-1(r3)
 800f138:	31400526 	beq	r6,r5,800f150 <memchr+0x88>
 800f13c:	1805883a 	mov	r2,r3
 800f140:	20fffb1e 	bne	r4,r3,800f130 <memchr+0x68>
 800f144:	0005883a 	mov	r2,zero
 800f148:	f800283a 	ret
 800f14c:	2005883a 	mov	r2,r4
 800f150:	f800283a 	ret
 800f154:	28c03fcc 	andi	r3,r5,255
 800f158:	1812923a 	slli	r9,r3,8
 800f15c:	02ffbff4 	movhi	r11,65279
 800f160:	02a02074 	movhi	r10,32897
 800f164:	48d2b03a 	or	r9,r9,r3
 800f168:	4806943a 	slli	r3,r9,16
 800f16c:	5affbfc4 	addi	r11,r11,-257
 800f170:	52a02004 	addi	r10,r10,-32640
 800f174:	48d2b03a 	or	r9,r9,r3
 800f178:	20c00017 	ldw	r3,0(r4)
 800f17c:	48c6f03a 	xor	r3,r9,r3
 800f180:	1acd883a 	add	r6,r3,r11
 800f184:	00c6303a 	nor	r3,zero,r3
 800f188:	30c6703a 	and	r3,r6,r3
 800f18c:	1a86703a 	and	r3,r3,r10
 800f190:	183fe01e 	bne	r3,zero,800f114 <memchr+0x4c>
 800f194:	10bfff04 	addi	r2,r2,-4
 800f198:	21000104 	addi	r4,r4,4
 800f19c:	40bff636 	bltu	r8,r2,800f178 <memchr+0xb0>
 800f1a0:	003fdb06 	br	800f110 <memchr+0x48>
 800f1a4:	3005883a 	mov	r2,r6
 800f1a8:	003fd706 	br	800f108 <memchr+0x40>

0800f1ac <memmove>:
 800f1ac:	2005883a 	mov	r2,r4
 800f1b0:	29000b2e 	bgeu	r5,r4,800f1e0 <memmove+0x34>
 800f1b4:	298f883a 	add	r7,r5,r6
 800f1b8:	21c0092e 	bgeu	r4,r7,800f1e0 <memmove+0x34>
 800f1bc:	2187883a 	add	r3,r4,r6
 800f1c0:	198bc83a 	sub	r5,r3,r6
 800f1c4:	30004826 	beq	r6,zero,800f2e8 <memmove+0x13c>
 800f1c8:	39ffffc4 	addi	r7,r7,-1
 800f1cc:	39000003 	ldbu	r4,0(r7)
 800f1d0:	18ffffc4 	addi	r3,r3,-1
 800f1d4:	19000005 	stb	r4,0(r3)
 800f1d8:	28fffb1e 	bne	r5,r3,800f1c8 <memmove+0x1c>
 800f1dc:	f800283a 	ret
 800f1e0:	00c003c4 	movi	r3,15
 800f1e4:	1980412e 	bgeu	r3,r6,800f2ec <memmove+0x140>
 800f1e8:	2886b03a 	or	r3,r5,r2
 800f1ec:	18c000cc 	andi	r3,r3,3
 800f1f0:	1800401e 	bne	r3,zero,800f2f4 <memmove+0x148>
 800f1f4:	33fffc04 	addi	r15,r6,-16
 800f1f8:	781ed13a 	srli	r15,r15,4
 800f1fc:	28c00104 	addi	r3,r5,4
 800f200:	13400104 	addi	r13,r2,4
 800f204:	781c913a 	slli	r14,r15,4
 800f208:	2b000204 	addi	r12,r5,8
 800f20c:	12c00204 	addi	r11,r2,8
 800f210:	73800504 	addi	r14,r14,20
 800f214:	2a800304 	addi	r10,r5,12
 800f218:	12400304 	addi	r9,r2,12
 800f21c:	2b9d883a 	add	r14,r5,r14
 800f220:	2811883a 	mov	r8,r5
 800f224:	100f883a 	mov	r7,r2
 800f228:	41000017 	ldw	r4,0(r8)
 800f22c:	39c00404 	addi	r7,r7,16
 800f230:	18c00404 	addi	r3,r3,16
 800f234:	393ffc15 	stw	r4,-16(r7)
 800f238:	193ffc17 	ldw	r4,-16(r3)
 800f23c:	6b400404 	addi	r13,r13,16
 800f240:	5ac00404 	addi	r11,r11,16
 800f244:	693ffc15 	stw	r4,-16(r13)
 800f248:	61000017 	ldw	r4,0(r12)
 800f24c:	4a400404 	addi	r9,r9,16
 800f250:	42000404 	addi	r8,r8,16
 800f254:	593ffc15 	stw	r4,-16(r11)
 800f258:	51000017 	ldw	r4,0(r10)
 800f25c:	63000404 	addi	r12,r12,16
 800f260:	52800404 	addi	r10,r10,16
 800f264:	493ffc15 	stw	r4,-16(r9)
 800f268:	1bbfef1e 	bne	r3,r14,800f228 <memmove+0x7c>
 800f26c:	79000044 	addi	r4,r15,1
 800f270:	2008913a 	slli	r4,r4,4
 800f274:	328003cc 	andi	r10,r6,15
 800f278:	02c000c4 	movi	r11,3
 800f27c:	1107883a 	add	r3,r2,r4
 800f280:	290b883a 	add	r5,r5,r4
 800f284:	5a801e2e 	bgeu	r11,r10,800f300 <memmove+0x154>
 800f288:	1813883a 	mov	r9,r3
 800f28c:	2811883a 	mov	r8,r5
 800f290:	500f883a 	mov	r7,r10
 800f294:	41000017 	ldw	r4,0(r8)
 800f298:	4a400104 	addi	r9,r9,4
 800f29c:	39ffff04 	addi	r7,r7,-4
 800f2a0:	493fff15 	stw	r4,-4(r9)
 800f2a4:	42000104 	addi	r8,r8,4
 800f2a8:	59fffa36 	bltu	r11,r7,800f294 <memmove+0xe8>
 800f2ac:	513fff04 	addi	r4,r10,-4
 800f2b0:	2008d0ba 	srli	r4,r4,2
 800f2b4:	318000cc 	andi	r6,r6,3
 800f2b8:	21000044 	addi	r4,r4,1
 800f2bc:	2109883a 	add	r4,r4,r4
 800f2c0:	2109883a 	add	r4,r4,r4
 800f2c4:	1907883a 	add	r3,r3,r4
 800f2c8:	290b883a 	add	r5,r5,r4
 800f2cc:	30000b26 	beq	r6,zero,800f2fc <memmove+0x150>
 800f2d0:	198d883a 	add	r6,r3,r6
 800f2d4:	29c00003 	ldbu	r7,0(r5)
 800f2d8:	18c00044 	addi	r3,r3,1
 800f2dc:	29400044 	addi	r5,r5,1
 800f2e0:	19ffffc5 	stb	r7,-1(r3)
 800f2e4:	19bffb1e 	bne	r3,r6,800f2d4 <memmove+0x128>
 800f2e8:	f800283a 	ret
 800f2ec:	1007883a 	mov	r3,r2
 800f2f0:	003ff606 	br	800f2cc <memmove+0x120>
 800f2f4:	1007883a 	mov	r3,r2
 800f2f8:	003ff506 	br	800f2d0 <memmove+0x124>
 800f2fc:	f800283a 	ret
 800f300:	500d883a 	mov	r6,r10
 800f304:	003ff106 	br	800f2cc <memmove+0x120>

0800f308 <_Balloc>:
 800f308:	20801317 	ldw	r2,76(r4)
 800f30c:	defffc04 	addi	sp,sp,-16
 800f310:	dc400115 	stw	r17,4(sp)
 800f314:	dc000015 	stw	r16,0(sp)
 800f318:	dfc00315 	stw	ra,12(sp)
 800f31c:	dc800215 	stw	r18,8(sp)
 800f320:	2023883a 	mov	r17,r4
 800f324:	2821883a 	mov	r16,r5
 800f328:	10000f26 	beq	r2,zero,800f368 <_Balloc+0x60>
 800f32c:	8407883a 	add	r3,r16,r16
 800f330:	18c7883a 	add	r3,r3,r3
 800f334:	10c7883a 	add	r3,r2,r3
 800f338:	18800017 	ldw	r2,0(r3)
 800f33c:	10001126 	beq	r2,zero,800f384 <_Balloc+0x7c>
 800f340:	11000017 	ldw	r4,0(r2)
 800f344:	19000015 	stw	r4,0(r3)
 800f348:	10000415 	stw	zero,16(r2)
 800f34c:	10000315 	stw	zero,12(r2)
 800f350:	dfc00317 	ldw	ra,12(sp)
 800f354:	dc800217 	ldw	r18,8(sp)
 800f358:	dc400117 	ldw	r17,4(sp)
 800f35c:	dc000017 	ldw	r16,0(sp)
 800f360:	dec00404 	addi	sp,sp,16
 800f364:	f800283a 	ret
 800f368:	01800844 	movi	r6,33
 800f36c:	01400104 	movi	r5,4
 800f370:	80121cc0 	call	80121cc <_calloc_r>
 800f374:	88801315 	stw	r2,76(r17)
 800f378:	103fec1e 	bne	r2,zero,800f32c <_Balloc+0x24>
 800f37c:	0005883a 	mov	r2,zero
 800f380:	003ff306 	br	800f350 <_Balloc+0x48>
 800f384:	01400044 	movi	r5,1
 800f388:	2c24983a 	sll	r18,r5,r16
 800f38c:	8809883a 	mov	r4,r17
 800f390:	91800144 	addi	r6,r18,5
 800f394:	318d883a 	add	r6,r6,r6
 800f398:	318d883a 	add	r6,r6,r6
 800f39c:	80121cc0 	call	80121cc <_calloc_r>
 800f3a0:	103ff626 	beq	r2,zero,800f37c <_Balloc+0x74>
 800f3a4:	14000115 	stw	r16,4(r2)
 800f3a8:	14800215 	stw	r18,8(r2)
 800f3ac:	003fe606 	br	800f348 <_Balloc+0x40>

0800f3b0 <_Bfree>:
 800f3b0:	28000826 	beq	r5,zero,800f3d4 <_Bfree+0x24>
 800f3b4:	28c00117 	ldw	r3,4(r5)
 800f3b8:	20801317 	ldw	r2,76(r4)
 800f3bc:	18c7883a 	add	r3,r3,r3
 800f3c0:	18c7883a 	add	r3,r3,r3
 800f3c4:	10c5883a 	add	r2,r2,r3
 800f3c8:	10c00017 	ldw	r3,0(r2)
 800f3cc:	28c00015 	stw	r3,0(r5)
 800f3d0:	11400015 	stw	r5,0(r2)
 800f3d4:	f800283a 	ret

0800f3d8 <__multadd>:
 800f3d8:	defff704 	addi	sp,sp,-36
 800f3dc:	dc800215 	stw	r18,8(sp)
 800f3e0:	2c800417 	ldw	r18,16(r5)
 800f3e4:	dd800615 	stw	r22,24(sp)
 800f3e8:	dd400515 	stw	r21,20(sp)
 800f3ec:	dd000415 	stw	r20,16(sp)
 800f3f0:	dcc00315 	stw	r19,12(sp)
 800f3f4:	dc400115 	stw	r17,4(sp)
 800f3f8:	dc000015 	stw	r16,0(sp)
 800f3fc:	dfc00815 	stw	ra,32(sp)
 800f400:	ddc00715 	stw	r23,28(sp)
 800f404:	2827883a 	mov	r19,r5
 800f408:	2029883a 	mov	r20,r4
 800f40c:	3023883a 	mov	r17,r6
 800f410:	3821883a 	mov	r16,r7
 800f414:	2d400504 	addi	r21,r5,20
 800f418:	002d883a 	mov	r22,zero
 800f41c:	adc00017 	ldw	r23,0(r21)
 800f420:	880b883a 	mov	r5,r17
 800f424:	ad400104 	addi	r21,r21,4
 800f428:	b93fffcc 	andi	r4,r23,65535
 800f42c:	80086340 	call	8008634 <__mulsi3>
 800f430:	b808d43a 	srli	r4,r23,16
 800f434:	880b883a 	mov	r5,r17
 800f438:	1421883a 	add	r16,r2,r16
 800f43c:	80086340 	call	8008634 <__mulsi3>
 800f440:	800ed43a 	srli	r7,r16,16
 800f444:	80ffffcc 	andi	r3,r16,65535
 800f448:	b5800044 	addi	r22,r22,1
 800f44c:	11c5883a 	add	r2,r2,r7
 800f450:	100e943a 	slli	r7,r2,16
 800f454:	1020d43a 	srli	r16,r2,16
 800f458:	38c7883a 	add	r3,r7,r3
 800f45c:	a8ffff15 	stw	r3,-4(r21)
 800f460:	b4bfee16 	blt	r22,r18,800f41c <__multadd+0x44>
 800f464:	80000926 	beq	r16,zero,800f48c <__multadd+0xb4>
 800f468:	98800217 	ldw	r2,8(r19)
 800f46c:	9080130e 	bge	r18,r2,800f4bc <__multadd+0xe4>
 800f470:	90800144 	addi	r2,r18,5
 800f474:	1085883a 	add	r2,r2,r2
 800f478:	1085883a 	add	r2,r2,r2
 800f47c:	9885883a 	add	r2,r19,r2
 800f480:	14000015 	stw	r16,0(r2)
 800f484:	94800044 	addi	r18,r18,1
 800f488:	9c800415 	stw	r18,16(r19)
 800f48c:	9805883a 	mov	r2,r19
 800f490:	dfc00817 	ldw	ra,32(sp)
 800f494:	ddc00717 	ldw	r23,28(sp)
 800f498:	dd800617 	ldw	r22,24(sp)
 800f49c:	dd400517 	ldw	r21,20(sp)
 800f4a0:	dd000417 	ldw	r20,16(sp)
 800f4a4:	dcc00317 	ldw	r19,12(sp)
 800f4a8:	dc800217 	ldw	r18,8(sp)
 800f4ac:	dc400117 	ldw	r17,4(sp)
 800f4b0:	dc000017 	ldw	r16,0(sp)
 800f4b4:	dec00904 	addi	sp,sp,36
 800f4b8:	f800283a 	ret
 800f4bc:	99400117 	ldw	r5,4(r19)
 800f4c0:	a009883a 	mov	r4,r20
 800f4c4:	29400044 	addi	r5,r5,1
 800f4c8:	800f3080 	call	800f308 <_Balloc>
 800f4cc:	99800417 	ldw	r6,16(r19)
 800f4d0:	99400304 	addi	r5,r19,12
 800f4d4:	11000304 	addi	r4,r2,12
 800f4d8:	31800084 	addi	r6,r6,2
 800f4dc:	318d883a 	add	r6,r6,r6
 800f4e0:	318d883a 	add	r6,r6,r6
 800f4e4:	1023883a 	mov	r17,r2
 800f4e8:	800971c0 	call	800971c <memcpy>
 800f4ec:	98000a26 	beq	r19,zero,800f518 <__multadd+0x140>
 800f4f0:	98c00117 	ldw	r3,4(r19)
 800f4f4:	a0801317 	ldw	r2,76(r20)
 800f4f8:	18c7883a 	add	r3,r3,r3
 800f4fc:	18c7883a 	add	r3,r3,r3
 800f500:	10c5883a 	add	r2,r2,r3
 800f504:	10c00017 	ldw	r3,0(r2)
 800f508:	98c00015 	stw	r3,0(r19)
 800f50c:	14c00015 	stw	r19,0(r2)
 800f510:	8827883a 	mov	r19,r17
 800f514:	003fd606 	br	800f470 <__multadd+0x98>
 800f518:	8827883a 	mov	r19,r17
 800f51c:	003fd406 	br	800f470 <__multadd+0x98>

0800f520 <__s2b>:
 800f520:	defff904 	addi	sp,sp,-28
 800f524:	dc400115 	stw	r17,4(sp)
 800f528:	dc000015 	stw	r16,0(sp)
 800f52c:	2023883a 	mov	r17,r4
 800f530:	2821883a 	mov	r16,r5
 800f534:	39000204 	addi	r4,r7,8
 800f538:	01400244 	movi	r5,9
 800f53c:	dcc00315 	stw	r19,12(sp)
 800f540:	dc800215 	stw	r18,8(sp)
 800f544:	dfc00615 	stw	ra,24(sp)
 800f548:	dd400515 	stw	r21,20(sp)
 800f54c:	dd000415 	stw	r20,16(sp)
 800f550:	3825883a 	mov	r18,r7
 800f554:	3027883a 	mov	r19,r6
 800f558:	80084800 	call	8008480 <__divsi3>
 800f55c:	00c00044 	movi	r3,1
 800f560:	000b883a 	mov	r5,zero
 800f564:	1880030e 	bge	r3,r2,800f574 <__s2b+0x54>
 800f568:	18c7883a 	add	r3,r3,r3
 800f56c:	29400044 	addi	r5,r5,1
 800f570:	18bffd16 	blt	r3,r2,800f568 <__s2b+0x48>
 800f574:	8809883a 	mov	r4,r17
 800f578:	800f3080 	call	800f308 <_Balloc>
 800f57c:	d8c00717 	ldw	r3,28(sp)
 800f580:	10c00515 	stw	r3,20(r2)
 800f584:	00c00044 	movi	r3,1
 800f588:	10c00415 	stw	r3,16(r2)
 800f58c:	00c00244 	movi	r3,9
 800f590:	1cc0210e 	bge	r3,r19,800f618 <__s2b+0xf8>
 800f594:	80eb883a 	add	r21,r16,r3
 800f598:	a829883a 	mov	r20,r21
 800f59c:	84e1883a 	add	r16,r16,r19
 800f5a0:	a1c00007 	ldb	r7,0(r20)
 800f5a4:	01800284 	movi	r6,10
 800f5a8:	a5000044 	addi	r20,r20,1
 800f5ac:	100b883a 	mov	r5,r2
 800f5b0:	39fff404 	addi	r7,r7,-48
 800f5b4:	8809883a 	mov	r4,r17
 800f5b8:	800f3d80 	call	800f3d8 <__multadd>
 800f5bc:	a43ff81e 	bne	r20,r16,800f5a0 <__s2b+0x80>
 800f5c0:	ace1883a 	add	r16,r21,r19
 800f5c4:	843ffe04 	addi	r16,r16,-8
 800f5c8:	9c800a0e 	bge	r19,r18,800f5f4 <__s2b+0xd4>
 800f5cc:	94e5c83a 	sub	r18,r18,r19
 800f5d0:	84a5883a 	add	r18,r16,r18
 800f5d4:	81c00007 	ldb	r7,0(r16)
 800f5d8:	01800284 	movi	r6,10
 800f5dc:	84000044 	addi	r16,r16,1
 800f5e0:	100b883a 	mov	r5,r2
 800f5e4:	39fff404 	addi	r7,r7,-48
 800f5e8:	8809883a 	mov	r4,r17
 800f5ec:	800f3d80 	call	800f3d8 <__multadd>
 800f5f0:	84bff81e 	bne	r16,r18,800f5d4 <__s2b+0xb4>
 800f5f4:	dfc00617 	ldw	ra,24(sp)
 800f5f8:	dd400517 	ldw	r21,20(sp)
 800f5fc:	dd000417 	ldw	r20,16(sp)
 800f600:	dcc00317 	ldw	r19,12(sp)
 800f604:	dc800217 	ldw	r18,8(sp)
 800f608:	dc400117 	ldw	r17,4(sp)
 800f60c:	dc000017 	ldw	r16,0(sp)
 800f610:	dec00704 	addi	sp,sp,28
 800f614:	f800283a 	ret
 800f618:	84000284 	addi	r16,r16,10
 800f61c:	1827883a 	mov	r19,r3
 800f620:	003fe906 	br	800f5c8 <__s2b+0xa8>

0800f624 <__hi0bits>:
 800f624:	20bfffec 	andhi	r2,r4,65535
 800f628:	1000141e 	bne	r2,zero,800f67c <__hi0bits+0x58>
 800f62c:	2008943a 	slli	r4,r4,16
 800f630:	00800404 	movi	r2,16
 800f634:	20ffc02c 	andhi	r3,r4,65280
 800f638:	1800021e 	bne	r3,zero,800f644 <__hi0bits+0x20>
 800f63c:	2008923a 	slli	r4,r4,8
 800f640:	10800204 	addi	r2,r2,8
 800f644:	20fc002c 	andhi	r3,r4,61440
 800f648:	1800021e 	bne	r3,zero,800f654 <__hi0bits+0x30>
 800f64c:	2008913a 	slli	r4,r4,4
 800f650:	10800104 	addi	r2,r2,4
 800f654:	20f0002c 	andhi	r3,r4,49152
 800f658:	1800031e 	bne	r3,zero,800f668 <__hi0bits+0x44>
 800f65c:	2109883a 	add	r4,r4,r4
 800f660:	10800084 	addi	r2,r2,2
 800f664:	2109883a 	add	r4,r4,r4
 800f668:	20000316 	blt	r4,zero,800f678 <__hi0bits+0x54>
 800f66c:	2110002c 	andhi	r4,r4,16384
 800f670:	2000041e 	bne	r4,zero,800f684 <__hi0bits+0x60>
 800f674:	00800804 	movi	r2,32
 800f678:	f800283a 	ret
 800f67c:	0005883a 	mov	r2,zero
 800f680:	003fec06 	br	800f634 <__hi0bits+0x10>
 800f684:	10800044 	addi	r2,r2,1
 800f688:	f800283a 	ret

0800f68c <__lo0bits>:
 800f68c:	20c00017 	ldw	r3,0(r4)
 800f690:	188001cc 	andi	r2,r3,7
 800f694:	10000826 	beq	r2,zero,800f6b8 <__lo0bits+0x2c>
 800f698:	1880004c 	andi	r2,r3,1
 800f69c:	1000211e 	bne	r2,zero,800f724 <__lo0bits+0x98>
 800f6a0:	1880008c 	andi	r2,r3,2
 800f6a4:	1000211e 	bne	r2,zero,800f72c <__lo0bits+0xa0>
 800f6a8:	1806d0ba 	srli	r3,r3,2
 800f6ac:	00800084 	movi	r2,2
 800f6b0:	20c00015 	stw	r3,0(r4)
 800f6b4:	f800283a 	ret
 800f6b8:	18bfffcc 	andi	r2,r3,65535
 800f6bc:	10001326 	beq	r2,zero,800f70c <__lo0bits+0x80>
 800f6c0:	0005883a 	mov	r2,zero
 800f6c4:	19403fcc 	andi	r5,r3,255
 800f6c8:	2800021e 	bne	r5,zero,800f6d4 <__lo0bits+0x48>
 800f6cc:	1806d23a 	srli	r3,r3,8
 800f6d0:	10800204 	addi	r2,r2,8
 800f6d4:	194003cc 	andi	r5,r3,15
 800f6d8:	2800021e 	bne	r5,zero,800f6e4 <__lo0bits+0x58>
 800f6dc:	1806d13a 	srli	r3,r3,4
 800f6e0:	10800104 	addi	r2,r2,4
 800f6e4:	194000cc 	andi	r5,r3,3
 800f6e8:	2800021e 	bne	r5,zero,800f6f4 <__lo0bits+0x68>
 800f6ec:	1806d0ba 	srli	r3,r3,2
 800f6f0:	10800084 	addi	r2,r2,2
 800f6f4:	1940004c 	andi	r5,r3,1
 800f6f8:	2800081e 	bne	r5,zero,800f71c <__lo0bits+0x90>
 800f6fc:	1806d07a 	srli	r3,r3,1
 800f700:	1800051e 	bne	r3,zero,800f718 <__lo0bits+0x8c>
 800f704:	00800804 	movi	r2,32
 800f708:	f800283a 	ret
 800f70c:	1806d43a 	srli	r3,r3,16
 800f710:	00800404 	movi	r2,16
 800f714:	003feb06 	br	800f6c4 <__lo0bits+0x38>
 800f718:	10800044 	addi	r2,r2,1
 800f71c:	20c00015 	stw	r3,0(r4)
 800f720:	f800283a 	ret
 800f724:	0005883a 	mov	r2,zero
 800f728:	f800283a 	ret
 800f72c:	1806d07a 	srli	r3,r3,1
 800f730:	00800044 	movi	r2,1
 800f734:	20c00015 	stw	r3,0(r4)
 800f738:	f800283a 	ret

0800f73c <__i2b>:
 800f73c:	defffd04 	addi	sp,sp,-12
 800f740:	dc000015 	stw	r16,0(sp)
 800f744:	04000044 	movi	r16,1
 800f748:	dc400115 	stw	r17,4(sp)
 800f74c:	2823883a 	mov	r17,r5
 800f750:	800b883a 	mov	r5,r16
 800f754:	dfc00215 	stw	ra,8(sp)
 800f758:	800f3080 	call	800f308 <_Balloc>
 800f75c:	14400515 	stw	r17,20(r2)
 800f760:	14000415 	stw	r16,16(r2)
 800f764:	dfc00217 	ldw	ra,8(sp)
 800f768:	dc400117 	ldw	r17,4(sp)
 800f76c:	dc000017 	ldw	r16,0(sp)
 800f770:	dec00304 	addi	sp,sp,12
 800f774:	f800283a 	ret

0800f778 <__multiply>:
 800f778:	deffef04 	addi	sp,sp,-68
 800f77c:	dc400815 	stw	r17,32(sp)
 800f780:	dc000715 	stw	r16,28(sp)
 800f784:	34400417 	ldw	r17,16(r6)
 800f788:	2c000417 	ldw	r16,16(r5)
 800f78c:	dd800d15 	stw	r22,52(sp)
 800f790:	dc800915 	stw	r18,36(sp)
 800f794:	dfc01015 	stw	ra,64(sp)
 800f798:	df000f15 	stw	fp,60(sp)
 800f79c:	ddc00e15 	stw	r23,56(sp)
 800f7a0:	dd400c15 	stw	r21,48(sp)
 800f7a4:	dd000b15 	stw	r20,44(sp)
 800f7a8:	dcc00a15 	stw	r19,40(sp)
 800f7ac:	2825883a 	mov	r18,r5
 800f7b0:	302d883a 	mov	r22,r6
 800f7b4:	8440050e 	bge	r16,r17,800f7cc <__multiply+0x54>
 800f7b8:	8007883a 	mov	r3,r16
 800f7bc:	3025883a 	mov	r18,r6
 800f7c0:	8821883a 	mov	r16,r17
 800f7c4:	282d883a 	mov	r22,r5
 800f7c8:	1823883a 	mov	r17,r3
 800f7cc:	90800217 	ldw	r2,8(r18)
 800f7d0:	8447883a 	add	r3,r16,r17
 800f7d4:	d8c00215 	stw	r3,8(sp)
 800f7d8:	91400117 	ldw	r5,4(r18)
 800f7dc:	10c0010e 	bge	r2,r3,800f7e4 <__multiply+0x6c>
 800f7e0:	29400044 	addi	r5,r5,1
 800f7e4:	800f3080 	call	800f308 <_Balloc>
 800f7e8:	d8c00217 	ldw	r3,8(sp)
 800f7ec:	d8800615 	stw	r2,24(sp)
 800f7f0:	18eb883a 	add	r21,r3,r3
 800f7f4:	ad6b883a 	add	r21,r21,r21
 800f7f8:	10c00504 	addi	r3,r2,20
 800f7fc:	1d6b883a 	add	r21,r3,r21
 800f800:	d8c00115 	stw	r3,4(sp)
 800f804:	dd400315 	stw	r21,12(sp)
 800f808:	1805883a 	mov	r2,r3
 800f80c:	1d40042e 	bgeu	r3,r21,800f820 <__multiply+0xa8>
 800f810:	d8c00317 	ldw	r3,12(sp)
 800f814:	10000015 	stw	zero,0(r2)
 800f818:	10800104 	addi	r2,r2,4
 800f81c:	10fffc36 	bltu	r2,r3,800f810 <__multiply+0x98>
 800f820:	8c63883a 	add	r17,r17,r17
 800f824:	b5800504 	addi	r22,r22,20
 800f828:	8c63883a 	add	r17,r17,r17
 800f82c:	94800504 	addi	r18,r18,20
 800f830:	8421883a 	add	r16,r16,r16
 800f834:	b463883a 	add	r17,r22,r17
 800f838:	8421883a 	add	r16,r16,r16
 800f83c:	dd800015 	stw	r22,0(sp)
 800f840:	dc800415 	stw	r18,16(sp)
 800f844:	dc400515 	stw	r17,20(sp)
 800f848:	9429883a 	add	r20,r18,r16
 800f84c:	b4404f2e 	bgeu	r22,r17,800f98c <__multiply+0x214>
 800f850:	d8c00017 	ldw	r3,0(sp)
 800f854:	1c800017 	ldw	r18,0(r3)
 800f858:	947fffcc 	andi	r17,r18,65535
 800f85c:	88001e26 	beq	r17,zero,800f8d8 <__multiply+0x160>
 800f860:	dd800117 	ldw	r22,4(sp)
 800f864:	dd400417 	ldw	r21,16(sp)
 800f868:	0027883a 	mov	r19,zero
 800f86c:	ac800017 	ldw	r18,0(r21)
 800f870:	b4000017 	ldw	r16,0(r22)
 800f874:	880b883a 	mov	r5,r17
 800f878:	913fffcc 	andi	r4,r18,65535
 800f87c:	80086340 	call	8008634 <__mulsi3>
 800f880:	9008d43a 	srli	r4,r18,16
 800f884:	84bfffcc 	andi	r18,r16,65535
 800f888:	1485883a 	add	r2,r2,r18
 800f88c:	14e5883a 	add	r18,r2,r19
 800f890:	8020d43a 	srli	r16,r16,16
 800f894:	9026d43a 	srli	r19,r18,16
 800f898:	880b883a 	mov	r5,r17
 800f89c:	80086340 	call	8008634 <__mulsi3>
 800f8a0:	1405883a 	add	r2,r2,r16
 800f8a4:	14e1883a 	add	r16,r2,r19
 800f8a8:	90ffffcc 	andi	r3,r18,65535
 800f8ac:	8024943a 	slli	r18,r16,16
 800f8b0:	ad400104 	addi	r21,r21,4
 800f8b4:	b005883a 	mov	r2,r22
 800f8b8:	90c6b03a 	or	r3,r18,r3
 800f8bc:	b0c00015 	stw	r3,0(r22)
 800f8c0:	8026d43a 	srli	r19,r16,16
 800f8c4:	b5800104 	addi	r22,r22,4
 800f8c8:	ad3fe836 	bltu	r21,r20,800f86c <__multiply+0xf4>
 800f8cc:	d8c00017 	ldw	r3,0(sp)
 800f8d0:	14c00115 	stw	r19,4(r2)
 800f8d4:	1c800017 	ldw	r18,0(r3)
 800f8d8:	9024d43a 	srli	r18,r18,16
 800f8dc:	90002226 	beq	r18,zero,800f968 <__multiply+0x1f0>
 800f8e0:	d8c00117 	ldw	r3,4(sp)
 800f8e4:	dd800417 	ldw	r22,16(sp)
 800f8e8:	002f883a 	mov	r23,zero
 800f8ec:	1f000017 	ldw	fp,0(r3)
 800f8f0:	1823883a 	mov	r17,r3
 800f8f4:	182b883a 	mov	r21,r3
 800f8f8:	e021883a 	mov	r16,fp
 800f8fc:	00000106 	br	800f904 <__multiply+0x18c>
 800f900:	982b883a 	mov	r21,r19
 800f904:	b100000b 	ldhu	r4,0(r22)
 800f908:	8020d43a 	srli	r16,r16,16
 800f90c:	900b883a 	mov	r5,r18
 800f910:	80086340 	call	8008634 <__mulsi3>
 800f914:	1405883a 	add	r2,r2,r16
 800f918:	15ef883a 	add	r23,r2,r23
 800f91c:	b804943a 	slli	r2,r23,16
 800f920:	e0ffffcc 	andi	r3,fp,65535
 800f924:	8c400104 	addi	r17,r17,4
 800f928:	10c6b03a 	or	r3,r2,r3
 800f92c:	88ffff15 	stw	r3,-4(r17)
 800f930:	b5800104 	addi	r22,r22,4
 800f934:	b13fff17 	ldw	r4,-4(r22)
 800f938:	acc00104 	addi	r19,r21,4
 800f93c:	900b883a 	mov	r5,r18
 800f940:	2008d43a 	srli	r4,r4,16
 800f944:	9c000017 	ldw	r16,0(r19)
 800f948:	80086340 	call	8008634 <__mulsi3>
 800f94c:	b806d43a 	srli	r3,r23,16
 800f950:	813fffcc 	andi	r4,r16,65535
 800f954:	1105883a 	add	r2,r2,r4
 800f958:	10f9883a 	add	fp,r2,r3
 800f95c:	e02ed43a 	srli	r23,fp,16
 800f960:	b53fe736 	bltu	r22,r20,800f900 <__multiply+0x188>
 800f964:	af000115 	stw	fp,4(r21)
 800f968:	d8c00017 	ldw	r3,0(sp)
 800f96c:	d9000517 	ldw	r4,20(sp)
 800f970:	18c00104 	addi	r3,r3,4
 800f974:	d8c00015 	stw	r3,0(sp)
 800f978:	d8c00117 	ldw	r3,4(sp)
 800f97c:	18c00104 	addi	r3,r3,4
 800f980:	d8c00115 	stw	r3,4(sp)
 800f984:	d8c00017 	ldw	r3,0(sp)
 800f988:	193fb136 	bltu	r3,r4,800f850 <__multiply+0xd8>
 800f98c:	d8c00217 	ldw	r3,8(sp)
 800f990:	00c00c0e 	bge	zero,r3,800f9c4 <__multiply+0x24c>
 800f994:	d8c00317 	ldw	r3,12(sp)
 800f998:	18bfff17 	ldw	r2,-4(r3)
 800f99c:	1d7fff04 	addi	r21,r3,-4
 800f9a0:	10000326 	beq	r2,zero,800f9b0 <__multiply+0x238>
 800f9a4:	00000706 	br	800f9c4 <__multiply+0x24c>
 800f9a8:	a8800017 	ldw	r2,0(r21)
 800f9ac:	1000051e 	bne	r2,zero,800f9c4 <__multiply+0x24c>
 800f9b0:	d8c00217 	ldw	r3,8(sp)
 800f9b4:	ad7fff04 	addi	r21,r21,-4
 800f9b8:	18ffffc4 	addi	r3,r3,-1
 800f9bc:	d8c00215 	stw	r3,8(sp)
 800f9c0:	183ff91e 	bne	r3,zero,800f9a8 <__multiply+0x230>
 800f9c4:	d8c00617 	ldw	r3,24(sp)
 800f9c8:	d9000217 	ldw	r4,8(sp)
 800f9cc:	1805883a 	mov	r2,r3
 800f9d0:	19000415 	stw	r4,16(r3)
 800f9d4:	dfc01017 	ldw	ra,64(sp)
 800f9d8:	df000f17 	ldw	fp,60(sp)
 800f9dc:	ddc00e17 	ldw	r23,56(sp)
 800f9e0:	dd800d17 	ldw	r22,52(sp)
 800f9e4:	dd400c17 	ldw	r21,48(sp)
 800f9e8:	dd000b17 	ldw	r20,44(sp)
 800f9ec:	dcc00a17 	ldw	r19,40(sp)
 800f9f0:	dc800917 	ldw	r18,36(sp)
 800f9f4:	dc400817 	ldw	r17,32(sp)
 800f9f8:	dc000717 	ldw	r16,28(sp)
 800f9fc:	dec01104 	addi	sp,sp,68
 800fa00:	f800283a 	ret

0800fa04 <__pow5mult>:
 800fa04:	defffa04 	addi	sp,sp,-24
 800fa08:	dcc00315 	stw	r19,12(sp)
 800fa0c:	dc000015 	stw	r16,0(sp)
 800fa10:	dfc00515 	stw	ra,20(sp)
 800fa14:	dd000415 	stw	r20,16(sp)
 800fa18:	dc800215 	stw	r18,8(sp)
 800fa1c:	dc400115 	stw	r17,4(sp)
 800fa20:	308000cc 	andi	r2,r6,3
 800fa24:	3021883a 	mov	r16,r6
 800fa28:	2027883a 	mov	r19,r4
 800fa2c:	10002f1e 	bne	r2,zero,800faec <__pow5mult+0xe8>
 800fa30:	2825883a 	mov	r18,r5
 800fa34:	8021d0ba 	srai	r16,r16,2
 800fa38:	80001a26 	beq	r16,zero,800faa4 <__pow5mult+0xa0>
 800fa3c:	9c401217 	ldw	r17,72(r19)
 800fa40:	8800061e 	bne	r17,zero,800fa5c <__pow5mult+0x58>
 800fa44:	00003406 	br	800fb18 <__pow5mult+0x114>
 800fa48:	8021d07a 	srai	r16,r16,1
 800fa4c:	80001526 	beq	r16,zero,800faa4 <__pow5mult+0xa0>
 800fa50:	88800017 	ldw	r2,0(r17)
 800fa54:	10001c26 	beq	r2,zero,800fac8 <__pow5mult+0xc4>
 800fa58:	1023883a 	mov	r17,r2
 800fa5c:	8080004c 	andi	r2,r16,1
 800fa60:	103ff926 	beq	r2,zero,800fa48 <__pow5mult+0x44>
 800fa64:	880d883a 	mov	r6,r17
 800fa68:	900b883a 	mov	r5,r18
 800fa6c:	9809883a 	mov	r4,r19
 800fa70:	800f7780 	call	800f778 <__multiply>
 800fa74:	90001b26 	beq	r18,zero,800fae4 <__pow5mult+0xe0>
 800fa78:	91000117 	ldw	r4,4(r18)
 800fa7c:	98c01317 	ldw	r3,76(r19)
 800fa80:	8021d07a 	srai	r16,r16,1
 800fa84:	2109883a 	add	r4,r4,r4
 800fa88:	2109883a 	add	r4,r4,r4
 800fa8c:	1907883a 	add	r3,r3,r4
 800fa90:	19000017 	ldw	r4,0(r3)
 800fa94:	91000015 	stw	r4,0(r18)
 800fa98:	1c800015 	stw	r18,0(r3)
 800fa9c:	1025883a 	mov	r18,r2
 800faa0:	803feb1e 	bne	r16,zero,800fa50 <__pow5mult+0x4c>
 800faa4:	9005883a 	mov	r2,r18
 800faa8:	dfc00517 	ldw	ra,20(sp)
 800faac:	dd000417 	ldw	r20,16(sp)
 800fab0:	dcc00317 	ldw	r19,12(sp)
 800fab4:	dc800217 	ldw	r18,8(sp)
 800fab8:	dc400117 	ldw	r17,4(sp)
 800fabc:	dc000017 	ldw	r16,0(sp)
 800fac0:	dec00604 	addi	sp,sp,24
 800fac4:	f800283a 	ret
 800fac8:	880d883a 	mov	r6,r17
 800facc:	880b883a 	mov	r5,r17
 800fad0:	9809883a 	mov	r4,r19
 800fad4:	800f7780 	call	800f778 <__multiply>
 800fad8:	88800015 	stw	r2,0(r17)
 800fadc:	10000015 	stw	zero,0(r2)
 800fae0:	003fdd06 	br	800fa58 <__pow5mult+0x54>
 800fae4:	1025883a 	mov	r18,r2
 800fae8:	003fd706 	br	800fa48 <__pow5mult+0x44>
 800faec:	10bfffc4 	addi	r2,r2,-1
 800faf0:	1085883a 	add	r2,r2,r2
 800faf4:	00c200b4 	movhi	r3,2050
 800faf8:	18e87204 	addi	r3,r3,-24120
 800fafc:	1085883a 	add	r2,r2,r2
 800fb00:	1885883a 	add	r2,r3,r2
 800fb04:	11800017 	ldw	r6,0(r2)
 800fb08:	000f883a 	mov	r7,zero
 800fb0c:	800f3d80 	call	800f3d8 <__multadd>
 800fb10:	1025883a 	mov	r18,r2
 800fb14:	003fc706 	br	800fa34 <__pow5mult+0x30>
 800fb18:	05000044 	movi	r20,1
 800fb1c:	a00b883a 	mov	r5,r20
 800fb20:	9809883a 	mov	r4,r19
 800fb24:	800f3080 	call	800f308 <_Balloc>
 800fb28:	1023883a 	mov	r17,r2
 800fb2c:	00809c44 	movi	r2,625
 800fb30:	88800515 	stw	r2,20(r17)
 800fb34:	8d000415 	stw	r20,16(r17)
 800fb38:	9c401215 	stw	r17,72(r19)
 800fb3c:	88000015 	stw	zero,0(r17)
 800fb40:	003fc606 	br	800fa5c <__pow5mult+0x58>

0800fb44 <__lshift>:
 800fb44:	defff904 	addi	sp,sp,-28
 800fb48:	dd400515 	stw	r21,20(sp)
 800fb4c:	dcc00315 	stw	r19,12(sp)
 800fb50:	302bd17a 	srai	r21,r6,5
 800fb54:	2cc00417 	ldw	r19,16(r5)
 800fb58:	28800217 	ldw	r2,8(r5)
 800fb5c:	dd000415 	stw	r20,16(sp)
 800fb60:	ace7883a 	add	r19,r21,r19
 800fb64:	dc800215 	stw	r18,8(sp)
 800fb68:	dc400115 	stw	r17,4(sp)
 800fb6c:	dc000015 	stw	r16,0(sp)
 800fb70:	dfc00615 	stw	ra,24(sp)
 800fb74:	9c000044 	addi	r16,r19,1
 800fb78:	2823883a 	mov	r17,r5
 800fb7c:	3029883a 	mov	r20,r6
 800fb80:	2025883a 	mov	r18,r4
 800fb84:	29400117 	ldw	r5,4(r5)
 800fb88:	1400030e 	bge	r2,r16,800fb98 <__lshift+0x54>
 800fb8c:	1085883a 	add	r2,r2,r2
 800fb90:	29400044 	addi	r5,r5,1
 800fb94:	143ffd16 	blt	r2,r16,800fb8c <__lshift+0x48>
 800fb98:	9009883a 	mov	r4,r18
 800fb9c:	800f3080 	call	800f308 <_Balloc>
 800fba0:	10c00504 	addi	r3,r2,20
 800fba4:	0540070e 	bge	zero,r21,800fbc4 <__lshift+0x80>
 800fba8:	ad6b883a 	add	r21,r21,r21
 800fbac:	ad6b883a 	add	r21,r21,r21
 800fbb0:	1809883a 	mov	r4,r3
 800fbb4:	1d47883a 	add	r3,r3,r21
 800fbb8:	20000015 	stw	zero,0(r4)
 800fbbc:	21000104 	addi	r4,r4,4
 800fbc0:	193ffd1e 	bne	r3,r4,800fbb8 <__lshift+0x74>
 800fbc4:	8a000417 	ldw	r8,16(r17)
 800fbc8:	89000504 	addi	r4,r17,20
 800fbcc:	a18007cc 	andi	r6,r20,31
 800fbd0:	4211883a 	add	r8,r8,r8
 800fbd4:	4211883a 	add	r8,r8,r8
 800fbd8:	2211883a 	add	r8,r4,r8
 800fbdc:	30002326 	beq	r6,zero,800fc6c <__lshift+0x128>
 800fbe0:	02400804 	movi	r9,32
 800fbe4:	4993c83a 	sub	r9,r9,r6
 800fbe8:	000b883a 	mov	r5,zero
 800fbec:	21c00017 	ldw	r7,0(r4)
 800fbf0:	1815883a 	mov	r10,r3
 800fbf4:	18c00104 	addi	r3,r3,4
 800fbf8:	398e983a 	sll	r7,r7,r6
 800fbfc:	21000104 	addi	r4,r4,4
 800fc00:	394ab03a 	or	r5,r7,r5
 800fc04:	197fff15 	stw	r5,-4(r3)
 800fc08:	217fff17 	ldw	r5,-4(r4)
 800fc0c:	2a4ad83a 	srl	r5,r5,r9
 800fc10:	223ff636 	bltu	r4,r8,800fbec <__lshift+0xa8>
 800fc14:	51400115 	stw	r5,4(r10)
 800fc18:	28001a1e 	bne	r5,zero,800fc84 <__lshift+0x140>
 800fc1c:	843fffc4 	addi	r16,r16,-1
 800fc20:	14000415 	stw	r16,16(r2)
 800fc24:	88000826 	beq	r17,zero,800fc48 <__lshift+0x104>
 800fc28:	89000117 	ldw	r4,4(r17)
 800fc2c:	90c01317 	ldw	r3,76(r18)
 800fc30:	2109883a 	add	r4,r4,r4
 800fc34:	2109883a 	add	r4,r4,r4
 800fc38:	1907883a 	add	r3,r3,r4
 800fc3c:	19000017 	ldw	r4,0(r3)
 800fc40:	89000015 	stw	r4,0(r17)
 800fc44:	1c400015 	stw	r17,0(r3)
 800fc48:	dfc00617 	ldw	ra,24(sp)
 800fc4c:	dd400517 	ldw	r21,20(sp)
 800fc50:	dd000417 	ldw	r20,16(sp)
 800fc54:	dcc00317 	ldw	r19,12(sp)
 800fc58:	dc800217 	ldw	r18,8(sp)
 800fc5c:	dc400117 	ldw	r17,4(sp)
 800fc60:	dc000017 	ldw	r16,0(sp)
 800fc64:	dec00704 	addi	sp,sp,28
 800fc68:	f800283a 	ret
 800fc6c:	21400017 	ldw	r5,0(r4)
 800fc70:	18c00104 	addi	r3,r3,4
 800fc74:	21000104 	addi	r4,r4,4
 800fc78:	197fff15 	stw	r5,-4(r3)
 800fc7c:	223ffb36 	bltu	r4,r8,800fc6c <__lshift+0x128>
 800fc80:	003fe606 	br	800fc1c <__lshift+0xd8>
 800fc84:	9c000084 	addi	r16,r19,2
 800fc88:	003fe406 	br	800fc1c <__lshift+0xd8>

0800fc8c <__mcmp>:
 800fc8c:	20800417 	ldw	r2,16(r4)
 800fc90:	28c00417 	ldw	r3,16(r5)
 800fc94:	10c5c83a 	sub	r2,r2,r3
 800fc98:	1000111e 	bne	r2,zero,800fce0 <__mcmp+0x54>
 800fc9c:	18c7883a 	add	r3,r3,r3
 800fca0:	18c7883a 	add	r3,r3,r3
 800fca4:	21000504 	addi	r4,r4,20
 800fca8:	29400504 	addi	r5,r5,20
 800fcac:	20c5883a 	add	r2,r4,r3
 800fcb0:	28cb883a 	add	r5,r5,r3
 800fcb4:	00000106 	br	800fcbc <__mcmp+0x30>
 800fcb8:	20800a2e 	bgeu	r4,r2,800fce4 <__mcmp+0x58>
 800fcbc:	10bfff04 	addi	r2,r2,-4
 800fcc0:	297fff04 	addi	r5,r5,-4
 800fcc4:	11800017 	ldw	r6,0(r2)
 800fcc8:	28c00017 	ldw	r3,0(r5)
 800fccc:	30fffa26 	beq	r6,r3,800fcb8 <__mcmp+0x2c>
 800fcd0:	30c00236 	bltu	r6,r3,800fcdc <__mcmp+0x50>
 800fcd4:	00800044 	movi	r2,1
 800fcd8:	f800283a 	ret
 800fcdc:	00bfffc4 	movi	r2,-1
 800fce0:	f800283a 	ret
 800fce4:	0005883a 	mov	r2,zero
 800fce8:	f800283a 	ret

0800fcec <__mdiff>:
 800fcec:	28c00417 	ldw	r3,16(r5)
 800fcf0:	30800417 	ldw	r2,16(r6)
 800fcf4:	defffa04 	addi	sp,sp,-24
 800fcf8:	dcc00315 	stw	r19,12(sp)
 800fcfc:	dc800215 	stw	r18,8(sp)
 800fd00:	dfc00515 	stw	ra,20(sp)
 800fd04:	dd000415 	stw	r20,16(sp)
 800fd08:	dc400115 	stw	r17,4(sp)
 800fd0c:	dc000015 	stw	r16,0(sp)
 800fd10:	1887c83a 	sub	r3,r3,r2
 800fd14:	2825883a 	mov	r18,r5
 800fd18:	3027883a 	mov	r19,r6
 800fd1c:	1800141e 	bne	r3,zero,800fd70 <__mdiff+0x84>
 800fd20:	1085883a 	add	r2,r2,r2
 800fd24:	1085883a 	add	r2,r2,r2
 800fd28:	2a000504 	addi	r8,r5,20
 800fd2c:	34000504 	addi	r16,r6,20
 800fd30:	4087883a 	add	r3,r8,r2
 800fd34:	8085883a 	add	r2,r16,r2
 800fd38:	00000106 	br	800fd40 <__mdiff+0x54>
 800fd3c:	40c0592e 	bgeu	r8,r3,800fea4 <__mdiff+0x1b8>
 800fd40:	18ffff04 	addi	r3,r3,-4
 800fd44:	10bfff04 	addi	r2,r2,-4
 800fd48:	19c00017 	ldw	r7,0(r3)
 800fd4c:	11400017 	ldw	r5,0(r2)
 800fd50:	397ffa26 	beq	r7,r5,800fd3c <__mdiff+0x50>
 800fd54:	3940592e 	bgeu	r7,r5,800febc <__mdiff+0x1d0>
 800fd58:	9005883a 	mov	r2,r18
 800fd5c:	4023883a 	mov	r17,r8
 800fd60:	9825883a 	mov	r18,r19
 800fd64:	05000044 	movi	r20,1
 800fd68:	1027883a 	mov	r19,r2
 800fd6c:	00000406 	br	800fd80 <__mdiff+0x94>
 800fd70:	18005616 	blt	r3,zero,800fecc <__mdiff+0x1e0>
 800fd74:	34400504 	addi	r17,r6,20
 800fd78:	2c000504 	addi	r16,r5,20
 800fd7c:	0029883a 	mov	r20,zero
 800fd80:	91400117 	ldw	r5,4(r18)
 800fd84:	800f3080 	call	800f308 <_Balloc>
 800fd88:	92400417 	ldw	r9,16(r18)
 800fd8c:	9b000417 	ldw	r12,16(r19)
 800fd90:	12c00504 	addi	r11,r2,20
 800fd94:	4a51883a 	add	r8,r9,r9
 800fd98:	6319883a 	add	r12,r12,r12
 800fd9c:	4211883a 	add	r8,r8,r8
 800fda0:	6319883a 	add	r12,r12,r12
 800fda4:	15000315 	stw	r20,12(r2)
 800fda8:	8211883a 	add	r8,r16,r8
 800fdac:	8b19883a 	add	r12,r17,r12
 800fdb0:	0007883a 	mov	r3,zero
 800fdb4:	81400017 	ldw	r5,0(r16)
 800fdb8:	89c00017 	ldw	r7,0(r17)
 800fdbc:	59800104 	addi	r6,r11,4
 800fdc0:	293fffcc 	andi	r4,r5,65535
 800fdc4:	20c7883a 	add	r3,r4,r3
 800fdc8:	393fffcc 	andi	r4,r7,65535
 800fdcc:	1909c83a 	sub	r4,r3,r4
 800fdd0:	280ad43a 	srli	r5,r5,16
 800fdd4:	380ed43a 	srli	r7,r7,16
 800fdd8:	2007d43a 	srai	r3,r4,16
 800fddc:	213fffcc 	andi	r4,r4,65535
 800fde0:	29cbc83a 	sub	r5,r5,r7
 800fde4:	28c7883a 	add	r3,r5,r3
 800fde8:	180a943a 	slli	r5,r3,16
 800fdec:	8c400104 	addi	r17,r17,4
 800fdf0:	84000104 	addi	r16,r16,4
 800fdf4:	2908b03a 	or	r4,r5,r4
 800fdf8:	59000015 	stw	r4,0(r11)
 800fdfc:	1807d43a 	srai	r3,r3,16
 800fe00:	3015883a 	mov	r10,r6
 800fe04:	3017883a 	mov	r11,r6
 800fe08:	8b3fea36 	bltu	r17,r12,800fdb4 <__mdiff+0xc8>
 800fe0c:	8200162e 	bgeu	r16,r8,800fe68 <__mdiff+0x17c>
 800fe10:	8017883a 	mov	r11,r16
 800fe14:	59400017 	ldw	r5,0(r11)
 800fe18:	31800104 	addi	r6,r6,4
 800fe1c:	5ac00104 	addi	r11,r11,4
 800fe20:	293fffcc 	andi	r4,r5,65535
 800fe24:	20c7883a 	add	r3,r4,r3
 800fe28:	280ed43a 	srli	r7,r5,16
 800fe2c:	180bd43a 	srai	r5,r3,16
 800fe30:	193fffcc 	andi	r4,r3,65535
 800fe34:	3947883a 	add	r3,r7,r5
 800fe38:	180a943a 	slli	r5,r3,16
 800fe3c:	1807d43a 	srai	r3,r3,16
 800fe40:	2908b03a 	or	r4,r5,r4
 800fe44:	313fff15 	stw	r4,-4(r6)
 800fe48:	5a3ff236 	bltu	r11,r8,800fe14 <__mdiff+0x128>
 800fe4c:	0406303a 	nor	r3,zero,r16
 800fe50:	1a07883a 	add	r3,r3,r8
 800fe54:	1806d0ba 	srli	r3,r3,2
 800fe58:	18c00044 	addi	r3,r3,1
 800fe5c:	18c7883a 	add	r3,r3,r3
 800fe60:	18c7883a 	add	r3,r3,r3
 800fe64:	50d5883a 	add	r10,r10,r3
 800fe68:	50ffff04 	addi	r3,r10,-4
 800fe6c:	2000041e 	bne	r4,zero,800fe80 <__mdiff+0x194>
 800fe70:	18ffff04 	addi	r3,r3,-4
 800fe74:	19000017 	ldw	r4,0(r3)
 800fe78:	4a7fffc4 	addi	r9,r9,-1
 800fe7c:	203ffc26 	beq	r4,zero,800fe70 <__mdiff+0x184>
 800fe80:	12400415 	stw	r9,16(r2)
 800fe84:	dfc00517 	ldw	ra,20(sp)
 800fe88:	dd000417 	ldw	r20,16(sp)
 800fe8c:	dcc00317 	ldw	r19,12(sp)
 800fe90:	dc800217 	ldw	r18,8(sp)
 800fe94:	dc400117 	ldw	r17,4(sp)
 800fe98:	dc000017 	ldw	r16,0(sp)
 800fe9c:	dec00604 	addi	sp,sp,24
 800fea0:	f800283a 	ret
 800fea4:	000b883a 	mov	r5,zero
 800fea8:	800f3080 	call	800f308 <_Balloc>
 800feac:	00c00044 	movi	r3,1
 800feb0:	10c00415 	stw	r3,16(r2)
 800feb4:	10000515 	stw	zero,20(r2)
 800feb8:	003ff206 	br	800fe84 <__mdiff+0x198>
 800febc:	8023883a 	mov	r17,r16
 800fec0:	0029883a 	mov	r20,zero
 800fec4:	4021883a 	mov	r16,r8
 800fec8:	003fad06 	br	800fd80 <__mdiff+0x94>
 800fecc:	9005883a 	mov	r2,r18
 800fed0:	94400504 	addi	r17,r18,20
 800fed4:	9c000504 	addi	r16,r19,20
 800fed8:	9825883a 	mov	r18,r19
 800fedc:	05000044 	movi	r20,1
 800fee0:	1027883a 	mov	r19,r2
 800fee4:	003fa606 	br	800fd80 <__mdiff+0x94>

0800fee8 <__ulp>:
 800fee8:	295ffc2c 	andhi	r5,r5,32752
 800feec:	00bf3034 	movhi	r2,64704
 800fef0:	2887883a 	add	r3,r5,r2
 800fef4:	00c0020e 	bge	zero,r3,800ff00 <__ulp+0x18>
 800fef8:	0005883a 	mov	r2,zero
 800fefc:	f800283a 	ret
 800ff00:	00c7c83a 	sub	r3,zero,r3
 800ff04:	1807d53a 	srai	r3,r3,20
 800ff08:	008004c4 	movi	r2,19
 800ff0c:	10c00b0e 	bge	r2,r3,800ff3c <__ulp+0x54>
 800ff10:	18bffb04 	addi	r2,r3,-20
 800ff14:	01000784 	movi	r4,30
 800ff18:	0007883a 	mov	r3,zero
 800ff1c:	20800516 	blt	r4,r2,800ff34 <__ulp+0x4c>
 800ff20:	010007c4 	movi	r4,31
 800ff24:	2089c83a 	sub	r4,r4,r2
 800ff28:	00800044 	movi	r2,1
 800ff2c:	1104983a 	sll	r2,r2,r4
 800ff30:	f800283a 	ret
 800ff34:	00800044 	movi	r2,1
 800ff38:	f800283a 	ret
 800ff3c:	01400234 	movhi	r5,8
 800ff40:	28c7d83a 	sra	r3,r5,r3
 800ff44:	0005883a 	mov	r2,zero
 800ff48:	f800283a 	ret

0800ff4c <__b2d>:
 800ff4c:	defffa04 	addi	sp,sp,-24
 800ff50:	dc000015 	stw	r16,0(sp)
 800ff54:	24000417 	ldw	r16,16(r4)
 800ff58:	dc400115 	stw	r17,4(sp)
 800ff5c:	24400504 	addi	r17,r4,20
 800ff60:	8421883a 	add	r16,r16,r16
 800ff64:	8421883a 	add	r16,r16,r16
 800ff68:	8c21883a 	add	r16,r17,r16
 800ff6c:	dc800215 	stw	r18,8(sp)
 800ff70:	84bfff17 	ldw	r18,-4(r16)
 800ff74:	dd000415 	stw	r20,16(sp)
 800ff78:	dcc00315 	stw	r19,12(sp)
 800ff7c:	9009883a 	mov	r4,r18
 800ff80:	2829883a 	mov	r20,r5
 800ff84:	dfc00515 	stw	ra,20(sp)
 800ff88:	800f6240 	call	800f624 <__hi0bits>
 800ff8c:	00c00804 	movi	r3,32
 800ff90:	1889c83a 	sub	r4,r3,r2
 800ff94:	a1000015 	stw	r4,0(r20)
 800ff98:	01000284 	movi	r4,10
 800ff9c:	84ffff04 	addi	r19,r16,-4
 800ffa0:	20801216 	blt	r4,r2,800ffec <__b2d+0xa0>
 800ffa4:	018002c4 	movi	r6,11
 800ffa8:	308dc83a 	sub	r6,r6,r2
 800ffac:	9186d83a 	srl	r3,r18,r6
 800ffb0:	18cffc34 	orhi	r3,r3,16368
 800ffb4:	8cc0212e 	bgeu	r17,r19,801003c <__b2d+0xf0>
 800ffb8:	813ffe17 	ldw	r4,-8(r16)
 800ffbc:	218cd83a 	srl	r6,r4,r6
 800ffc0:	10800544 	addi	r2,r2,21
 800ffc4:	9084983a 	sll	r2,r18,r2
 800ffc8:	1184b03a 	or	r2,r2,r6
 800ffcc:	dfc00517 	ldw	ra,20(sp)
 800ffd0:	dd000417 	ldw	r20,16(sp)
 800ffd4:	dcc00317 	ldw	r19,12(sp)
 800ffd8:	dc800217 	ldw	r18,8(sp)
 800ffdc:	dc400117 	ldw	r17,4(sp)
 800ffe0:	dc000017 	ldw	r16,0(sp)
 800ffe4:	dec00604 	addi	sp,sp,24
 800ffe8:	f800283a 	ret
 800ffec:	8cc00f2e 	bgeu	r17,r19,801002c <__b2d+0xe0>
 800fff0:	117ffd44 	addi	r5,r2,-11
 800fff4:	80bffe17 	ldw	r2,-8(r16)
 800fff8:	28000e26 	beq	r5,zero,8010034 <__b2d+0xe8>
 800fffc:	1949c83a 	sub	r4,r3,r5
 8010000:	9164983a 	sll	r18,r18,r5
 8010004:	1106d83a 	srl	r3,r2,r4
 8010008:	81bffe04 	addi	r6,r16,-8
 801000c:	948ffc34 	orhi	r18,r18,16368
 8010010:	90c6b03a 	or	r3,r18,r3
 8010014:	89800e2e 	bgeu	r17,r6,8010050 <__b2d+0x104>
 8010018:	81bffd17 	ldw	r6,-12(r16)
 801001c:	1144983a 	sll	r2,r2,r5
 8010020:	310ad83a 	srl	r5,r6,r4
 8010024:	2884b03a 	or	r2,r5,r2
 8010028:	003fe806 	br	800ffcc <__b2d+0x80>
 801002c:	10bffd44 	addi	r2,r2,-11
 8010030:	1000041e 	bne	r2,zero,8010044 <__b2d+0xf8>
 8010034:	90cffc34 	orhi	r3,r18,16368
 8010038:	003fe406 	br	800ffcc <__b2d+0x80>
 801003c:	000d883a 	mov	r6,zero
 8010040:	003fdf06 	br	800ffc0 <__b2d+0x74>
 8010044:	90a4983a 	sll	r18,r18,r2
 8010048:	0005883a 	mov	r2,zero
 801004c:	003ff906 	br	8010034 <__b2d+0xe8>
 8010050:	1144983a 	sll	r2,r2,r5
 8010054:	003fdd06 	br	800ffcc <__b2d+0x80>

08010058 <__d2b>:
 8010058:	defff804 	addi	sp,sp,-32
 801005c:	dc000215 	stw	r16,8(sp)
 8010060:	3021883a 	mov	r16,r6
 8010064:	dc400315 	stw	r17,12(sp)
 8010068:	8022907a 	slli	r17,r16,1
 801006c:	dd000615 	stw	r20,24(sp)
 8010070:	2829883a 	mov	r20,r5
 8010074:	01400044 	movi	r5,1
 8010078:	dcc00515 	stw	r19,20(sp)
 801007c:	dc800415 	stw	r18,16(sp)
 8010080:	dfc00715 	stw	ra,28(sp)
 8010084:	3825883a 	mov	r18,r7
 8010088:	8822d57a 	srli	r17,r17,21
 801008c:	800f3080 	call	800f308 <_Balloc>
 8010090:	1027883a 	mov	r19,r2
 8010094:	00800434 	movhi	r2,16
 8010098:	10bfffc4 	addi	r2,r2,-1
 801009c:	808c703a 	and	r6,r16,r2
 80100a0:	88000126 	beq	r17,zero,80100a8 <__d2b+0x50>
 80100a4:	31800434 	orhi	r6,r6,16
 80100a8:	d9800015 	stw	r6,0(sp)
 80100ac:	a0002426 	beq	r20,zero,8010140 <__d2b+0xe8>
 80100b0:	d9000104 	addi	r4,sp,4
 80100b4:	dd000115 	stw	r20,4(sp)
 80100b8:	800f68c0 	call	800f68c <__lo0bits>
 80100bc:	d8c00017 	ldw	r3,0(sp)
 80100c0:	10002f1e 	bne	r2,zero,8010180 <__d2b+0x128>
 80100c4:	d9000117 	ldw	r4,4(sp)
 80100c8:	99000515 	stw	r4,20(r19)
 80100cc:	1821003a 	cmpeq	r16,r3,zero
 80100d0:	01000084 	movi	r4,2
 80100d4:	2421c83a 	sub	r16,r4,r16
 80100d8:	98c00615 	stw	r3,24(r19)
 80100dc:	9c000415 	stw	r16,16(r19)
 80100e0:	88001f1e 	bne	r17,zero,8010160 <__d2b+0x108>
 80100e4:	10bef384 	addi	r2,r2,-1074
 80100e8:	90800015 	stw	r2,0(r18)
 80100ec:	00900034 	movhi	r2,16384
 80100f0:	10bfffc4 	addi	r2,r2,-1
 80100f4:	8085883a 	add	r2,r16,r2
 80100f8:	1085883a 	add	r2,r2,r2
 80100fc:	1085883a 	add	r2,r2,r2
 8010100:	9885883a 	add	r2,r19,r2
 8010104:	11000517 	ldw	r4,20(r2)
 8010108:	8020917a 	slli	r16,r16,5
 801010c:	800f6240 	call	800f624 <__hi0bits>
 8010110:	d8c00817 	ldw	r3,32(sp)
 8010114:	8085c83a 	sub	r2,r16,r2
 8010118:	18800015 	stw	r2,0(r3)
 801011c:	9805883a 	mov	r2,r19
 8010120:	dfc00717 	ldw	ra,28(sp)
 8010124:	dd000617 	ldw	r20,24(sp)
 8010128:	dcc00517 	ldw	r19,20(sp)
 801012c:	dc800417 	ldw	r18,16(sp)
 8010130:	dc400317 	ldw	r17,12(sp)
 8010134:	dc000217 	ldw	r16,8(sp)
 8010138:	dec00804 	addi	sp,sp,32
 801013c:	f800283a 	ret
 8010140:	d809883a 	mov	r4,sp
 8010144:	800f68c0 	call	800f68c <__lo0bits>
 8010148:	d8c00017 	ldw	r3,0(sp)
 801014c:	04000044 	movi	r16,1
 8010150:	9c000415 	stw	r16,16(r19)
 8010154:	98c00515 	stw	r3,20(r19)
 8010158:	10800804 	addi	r2,r2,32
 801015c:	883fe126 	beq	r17,zero,80100e4 <__d2b+0x8c>
 8010160:	00c00d44 	movi	r3,53
 8010164:	8c7ef344 	addi	r17,r17,-1075
 8010168:	88a3883a 	add	r17,r17,r2
 801016c:	1885c83a 	sub	r2,r3,r2
 8010170:	d8c00817 	ldw	r3,32(sp)
 8010174:	94400015 	stw	r17,0(r18)
 8010178:	18800015 	stw	r2,0(r3)
 801017c:	003fe706 	br	801011c <__d2b+0xc4>
 8010180:	01000804 	movi	r4,32
 8010184:	2089c83a 	sub	r4,r4,r2
 8010188:	1908983a 	sll	r4,r3,r4
 801018c:	d9400117 	ldw	r5,4(sp)
 8010190:	1886d83a 	srl	r3,r3,r2
 8010194:	2148b03a 	or	r4,r4,r5
 8010198:	99000515 	stw	r4,20(r19)
 801019c:	d8c00015 	stw	r3,0(sp)
 80101a0:	003fca06 	br	80100cc <__d2b+0x74>

080101a4 <__ratio>:
 80101a4:	defff904 	addi	sp,sp,-28
 80101a8:	dc400315 	stw	r17,12(sp)
 80101ac:	2823883a 	mov	r17,r5
 80101b0:	d9400104 	addi	r5,sp,4
 80101b4:	dfc00615 	stw	ra,24(sp)
 80101b8:	dcc00515 	stw	r19,20(sp)
 80101bc:	dc800415 	stw	r18,16(sp)
 80101c0:	2027883a 	mov	r19,r4
 80101c4:	dc000215 	stw	r16,8(sp)
 80101c8:	800ff4c0 	call	800ff4c <__b2d>
 80101cc:	d80b883a 	mov	r5,sp
 80101d0:	8809883a 	mov	r4,r17
 80101d4:	1025883a 	mov	r18,r2
 80101d8:	1821883a 	mov	r16,r3
 80101dc:	800ff4c0 	call	800ff4c <__b2d>
 80101e0:	8a000417 	ldw	r8,16(r17)
 80101e4:	99000417 	ldw	r4,16(r19)
 80101e8:	d9400117 	ldw	r5,4(sp)
 80101ec:	2209c83a 	sub	r4,r4,r8
 80101f0:	2010917a 	slli	r8,r4,5
 80101f4:	d9000017 	ldw	r4,0(sp)
 80101f8:	2909c83a 	sub	r4,r5,r4
 80101fc:	4109883a 	add	r4,r8,r4
 8010200:	01000e0e 	bge	zero,r4,801023c <__ratio+0x98>
 8010204:	2008953a 	slli	r4,r4,20
 8010208:	2421883a 	add	r16,r4,r16
 801020c:	100d883a 	mov	r6,r2
 8010210:	180f883a 	mov	r7,r3
 8010214:	9009883a 	mov	r4,r18
 8010218:	800b883a 	mov	r5,r16
 801021c:	8013d600 	call	8013d60 <__divdf3>
 8010220:	dfc00617 	ldw	ra,24(sp)
 8010224:	dcc00517 	ldw	r19,20(sp)
 8010228:	dc800417 	ldw	r18,16(sp)
 801022c:	dc400317 	ldw	r17,12(sp)
 8010230:	dc000217 	ldw	r16,8(sp)
 8010234:	dec00704 	addi	sp,sp,28
 8010238:	f800283a 	ret
 801023c:	2008953a 	slli	r4,r4,20
 8010240:	1907c83a 	sub	r3,r3,r4
 8010244:	003ff106 	br	801020c <__ratio+0x68>

08010248 <_mprec_log10>:
 8010248:	defffe04 	addi	sp,sp,-8
 801024c:	dc000015 	stw	r16,0(sp)
 8010250:	dfc00115 	stw	ra,4(sp)
 8010254:	008005c4 	movi	r2,23
 8010258:	2021883a 	mov	r16,r4
 801025c:	11000d0e 	bge	r2,r4,8010294 <_mprec_log10+0x4c>
 8010260:	0005883a 	mov	r2,zero
 8010264:	00cffc34 	movhi	r3,16368
 8010268:	843fffc4 	addi	r16,r16,-1
 801026c:	000d883a 	mov	r6,zero
 8010270:	01d00934 	movhi	r7,16420
 8010274:	1009883a 	mov	r4,r2
 8010278:	180b883a 	mov	r5,r3
 801027c:	80149880 	call	8014988 <__muldf3>
 8010280:	803ff91e 	bne	r16,zero,8010268 <_mprec_log10+0x20>
 8010284:	dfc00117 	ldw	ra,4(sp)
 8010288:	dc000017 	ldw	r16,0(sp)
 801028c:	dec00204 	addi	sp,sp,8
 8010290:	f800283a 	ret
 8010294:	202090fa 	slli	r16,r4,3
 8010298:	008200b4 	movhi	r2,2050
 801029c:	10a88904 	addi	r2,r2,-24028
 80102a0:	1421883a 	add	r16,r2,r16
 80102a4:	80800017 	ldw	r2,0(r16)
 80102a8:	80c00117 	ldw	r3,4(r16)
 80102ac:	dfc00117 	ldw	ra,4(sp)
 80102b0:	dc000017 	ldw	r16,0(sp)
 80102b4:	dec00204 	addi	sp,sp,8
 80102b8:	f800283a 	ret

080102bc <__copybits>:
 80102bc:	297fffc4 	addi	r5,r5,-1
 80102c0:	280fd17a 	srai	r7,r5,5
 80102c4:	30c00417 	ldw	r3,16(r6)
 80102c8:	30800504 	addi	r2,r6,20
 80102cc:	39c00044 	addi	r7,r7,1
 80102d0:	18c7883a 	add	r3,r3,r3
 80102d4:	39cf883a 	add	r7,r7,r7
 80102d8:	18c7883a 	add	r3,r3,r3
 80102dc:	39cf883a 	add	r7,r7,r7
 80102e0:	10c7883a 	add	r3,r2,r3
 80102e4:	21cf883a 	add	r7,r4,r7
 80102e8:	10c00d2e 	bgeu	r2,r3,8010320 <__copybits+0x64>
 80102ec:	200b883a 	mov	r5,r4
 80102f0:	12000017 	ldw	r8,0(r2)
 80102f4:	29400104 	addi	r5,r5,4
 80102f8:	10800104 	addi	r2,r2,4
 80102fc:	2a3fff15 	stw	r8,-4(r5)
 8010300:	10fffb36 	bltu	r2,r3,80102f0 <__copybits+0x34>
 8010304:	1985c83a 	sub	r2,r3,r6
 8010308:	10bffac4 	addi	r2,r2,-21
 801030c:	1004d0ba 	srli	r2,r2,2
 8010310:	10800044 	addi	r2,r2,1
 8010314:	1085883a 	add	r2,r2,r2
 8010318:	1085883a 	add	r2,r2,r2
 801031c:	2089883a 	add	r4,r4,r2
 8010320:	21c0032e 	bgeu	r4,r7,8010330 <__copybits+0x74>
 8010324:	20000015 	stw	zero,0(r4)
 8010328:	21000104 	addi	r4,r4,4
 801032c:	21fffd36 	bltu	r4,r7,8010324 <__copybits+0x68>
 8010330:	f800283a 	ret

08010334 <__any_on>:
 8010334:	20c00417 	ldw	r3,16(r4)
 8010338:	2805d17a 	srai	r2,r5,5
 801033c:	21000504 	addi	r4,r4,20
 8010340:	18800d0e 	bge	r3,r2,8010378 <__any_on+0x44>
 8010344:	18c7883a 	add	r3,r3,r3
 8010348:	18c7883a 	add	r3,r3,r3
 801034c:	20c7883a 	add	r3,r4,r3
 8010350:	20c0192e 	bgeu	r4,r3,80103b8 <__any_on+0x84>
 8010354:	18bfff17 	ldw	r2,-4(r3)
 8010358:	18ffff04 	addi	r3,r3,-4
 801035c:	1000041e 	bne	r2,zero,8010370 <__any_on+0x3c>
 8010360:	20c0142e 	bgeu	r4,r3,80103b4 <__any_on+0x80>
 8010364:	18ffff04 	addi	r3,r3,-4
 8010368:	19400017 	ldw	r5,0(r3)
 801036c:	283ffc26 	beq	r5,zero,8010360 <__any_on+0x2c>
 8010370:	00800044 	movi	r2,1
 8010374:	f800283a 	ret
 8010378:	10c00a0e 	bge	r2,r3,80103a4 <__any_on+0x70>
 801037c:	1085883a 	add	r2,r2,r2
 8010380:	1085883a 	add	r2,r2,r2
 8010384:	294007cc 	andi	r5,r5,31
 8010388:	2087883a 	add	r3,r4,r2
 801038c:	283ff026 	beq	r5,zero,8010350 <__any_on+0x1c>
 8010390:	19800017 	ldw	r6,0(r3)
 8010394:	3144d83a 	srl	r2,r6,r5
 8010398:	114a983a 	sll	r5,r2,r5
 801039c:	317ff41e 	bne	r6,r5,8010370 <__any_on+0x3c>
 80103a0:	003feb06 	br	8010350 <__any_on+0x1c>
 80103a4:	1085883a 	add	r2,r2,r2
 80103a8:	1085883a 	add	r2,r2,r2
 80103ac:	2087883a 	add	r3,r4,r2
 80103b0:	003fe706 	br	8010350 <__any_on+0x1c>
 80103b4:	f800283a 	ret
 80103b8:	0005883a 	mov	r2,zero
 80103bc:	f800283a 	ret

080103c0 <_read_r>:
 80103c0:	defffd04 	addi	sp,sp,-12
 80103c4:	2805883a 	mov	r2,r5
 80103c8:	dc000015 	stw	r16,0(sp)
 80103cc:	040200b4 	movhi	r16,2050
 80103d0:	dc400115 	stw	r17,4(sp)
 80103d4:	300b883a 	mov	r5,r6
 80103d8:	8439f604 	addi	r16,r16,-6184
 80103dc:	2023883a 	mov	r17,r4
 80103e0:	380d883a 	mov	r6,r7
 80103e4:	1009883a 	mov	r4,r2
 80103e8:	dfc00215 	stw	ra,8(sp)
 80103ec:	80000015 	stw	zero,0(r16)
 80103f0:	8016a140 	call	8016a14 <read>
 80103f4:	00ffffc4 	movi	r3,-1
 80103f8:	10c00526 	beq	r2,r3,8010410 <_read_r+0x50>
 80103fc:	dfc00217 	ldw	ra,8(sp)
 8010400:	dc400117 	ldw	r17,4(sp)
 8010404:	dc000017 	ldw	r16,0(sp)
 8010408:	dec00304 	addi	sp,sp,12
 801040c:	f800283a 	ret
 8010410:	80c00017 	ldw	r3,0(r16)
 8010414:	183ff926 	beq	r3,zero,80103fc <_read_r+0x3c>
 8010418:	88c00015 	stw	r3,0(r17)
 801041c:	003ff706 	br	80103fc <_read_r+0x3c>

08010420 <_realloc_r>:
 8010420:	defff604 	addi	sp,sp,-40
 8010424:	dc800215 	stw	r18,8(sp)
 8010428:	dfc00915 	stw	ra,36(sp)
 801042c:	df000815 	stw	fp,32(sp)
 8010430:	ddc00715 	stw	r23,28(sp)
 8010434:	dd800615 	stw	r22,24(sp)
 8010438:	dd400515 	stw	r21,20(sp)
 801043c:	dd000415 	stw	r20,16(sp)
 8010440:	dcc00315 	stw	r19,12(sp)
 8010444:	dc400115 	stw	r17,4(sp)
 8010448:	dc000015 	stw	r16,0(sp)
 801044c:	3025883a 	mov	r18,r6
 8010450:	2800b726 	beq	r5,zero,8010730 <_realloc_r+0x310>
 8010454:	282b883a 	mov	r21,r5
 8010458:	2029883a 	mov	r20,r4
 801045c:	80164a40 	call	80164a4 <__malloc_lock>
 8010460:	a8bfff17 	ldw	r2,-4(r21)
 8010464:	043fff04 	movi	r16,-4
 8010468:	90c002c4 	addi	r3,r18,11
 801046c:	01000584 	movi	r4,22
 8010470:	acfffe04 	addi	r19,r21,-8
 8010474:	1420703a 	and	r16,r2,r16
 8010478:	20c0332e 	bgeu	r4,r3,8010548 <_realloc_r+0x128>
 801047c:	047ffe04 	movi	r17,-8
 8010480:	1c62703a 	and	r17,r3,r17
 8010484:	8807883a 	mov	r3,r17
 8010488:	88005816 	blt	r17,zero,80105ec <_realloc_r+0x1cc>
 801048c:	8c805736 	bltu	r17,r18,80105ec <_realloc_r+0x1cc>
 8010490:	80c0300e 	bge	r16,r3,8010554 <_realloc_r+0x134>
 8010494:	070200b4 	movhi	fp,2050
 8010498:	e72b2f04 	addi	fp,fp,-21316
 801049c:	e1c00217 	ldw	r7,8(fp)
 80104a0:	9c09883a 	add	r4,r19,r16
 80104a4:	22000117 	ldw	r8,4(r4)
 80104a8:	21c06326 	beq	r4,r7,8010638 <_realloc_r+0x218>
 80104ac:	017fff84 	movi	r5,-2
 80104b0:	414a703a 	and	r5,r8,r5
 80104b4:	214b883a 	add	r5,r4,r5
 80104b8:	29800117 	ldw	r6,4(r5)
 80104bc:	3180004c 	andi	r6,r6,1
 80104c0:	30003f26 	beq	r6,zero,80105c0 <_realloc_r+0x1a0>
 80104c4:	1080004c 	andi	r2,r2,1
 80104c8:	10008326 	beq	r2,zero,80106d8 <_realloc_r+0x2b8>
 80104cc:	900b883a 	mov	r5,r18
 80104d0:	a009883a 	mov	r4,r20
 80104d4:	8008f100 	call	8008f10 <_malloc_r>
 80104d8:	1025883a 	mov	r18,r2
 80104dc:	10011e26 	beq	r2,zero,8010958 <_realloc_r+0x538>
 80104e0:	a93fff17 	ldw	r4,-4(r21)
 80104e4:	10fffe04 	addi	r3,r2,-8
 80104e8:	00bfff84 	movi	r2,-2
 80104ec:	2084703a 	and	r2,r4,r2
 80104f0:	9885883a 	add	r2,r19,r2
 80104f4:	1880ee26 	beq	r3,r2,80108b0 <_realloc_r+0x490>
 80104f8:	81bfff04 	addi	r6,r16,-4
 80104fc:	00800904 	movi	r2,36
 8010500:	1180b836 	bltu	r2,r6,80107e4 <_realloc_r+0x3c4>
 8010504:	00c004c4 	movi	r3,19
 8010508:	19809636 	bltu	r3,r6,8010764 <_realloc_r+0x344>
 801050c:	9005883a 	mov	r2,r18
 8010510:	a807883a 	mov	r3,r21
 8010514:	19000017 	ldw	r4,0(r3)
 8010518:	11000015 	stw	r4,0(r2)
 801051c:	19000117 	ldw	r4,4(r3)
 8010520:	11000115 	stw	r4,4(r2)
 8010524:	18c00217 	ldw	r3,8(r3)
 8010528:	10c00215 	stw	r3,8(r2)
 801052c:	a80b883a 	mov	r5,r21
 8010530:	a009883a 	mov	r4,r20
 8010534:	800e5d80 	call	800e5d8 <_free_r>
 8010538:	a009883a 	mov	r4,r20
 801053c:	80164c80 	call	80164c8 <__malloc_unlock>
 8010540:	9005883a 	mov	r2,r18
 8010544:	00001206 	br	8010590 <_realloc_r+0x170>
 8010548:	00c00404 	movi	r3,16
 801054c:	1823883a 	mov	r17,r3
 8010550:	003fce06 	br	801048c <_realloc_r+0x6c>
 8010554:	a825883a 	mov	r18,r21
 8010558:	8445c83a 	sub	r2,r16,r17
 801055c:	00c003c4 	movi	r3,15
 8010560:	18802636 	bltu	r3,r2,80105fc <_realloc_r+0x1dc>
 8010564:	99800117 	ldw	r6,4(r19)
 8010568:	9c07883a 	add	r3,r19,r16
 801056c:	3180004c 	andi	r6,r6,1
 8010570:	3420b03a 	or	r16,r6,r16
 8010574:	9c000115 	stw	r16,4(r19)
 8010578:	18800117 	ldw	r2,4(r3)
 801057c:	10800054 	ori	r2,r2,1
 8010580:	18800115 	stw	r2,4(r3)
 8010584:	a009883a 	mov	r4,r20
 8010588:	80164c80 	call	80164c8 <__malloc_unlock>
 801058c:	9005883a 	mov	r2,r18
 8010590:	dfc00917 	ldw	ra,36(sp)
 8010594:	df000817 	ldw	fp,32(sp)
 8010598:	ddc00717 	ldw	r23,28(sp)
 801059c:	dd800617 	ldw	r22,24(sp)
 80105a0:	dd400517 	ldw	r21,20(sp)
 80105a4:	dd000417 	ldw	r20,16(sp)
 80105a8:	dcc00317 	ldw	r19,12(sp)
 80105ac:	dc800217 	ldw	r18,8(sp)
 80105b0:	dc400117 	ldw	r17,4(sp)
 80105b4:	dc000017 	ldw	r16,0(sp)
 80105b8:	dec00a04 	addi	sp,sp,40
 80105bc:	f800283a 	ret
 80105c0:	017fff04 	movi	r5,-4
 80105c4:	414a703a 	and	r5,r8,r5
 80105c8:	814d883a 	add	r6,r16,r5
 80105cc:	30c01f16 	blt	r6,r3,801064c <_realloc_r+0x22c>
 80105d0:	20800317 	ldw	r2,12(r4)
 80105d4:	20c00217 	ldw	r3,8(r4)
 80105d8:	a825883a 	mov	r18,r21
 80105dc:	3021883a 	mov	r16,r6
 80105e0:	18800315 	stw	r2,12(r3)
 80105e4:	10c00215 	stw	r3,8(r2)
 80105e8:	003fdb06 	br	8010558 <_realloc_r+0x138>
 80105ec:	00800304 	movi	r2,12
 80105f0:	a0800015 	stw	r2,0(r20)
 80105f4:	0005883a 	mov	r2,zero
 80105f8:	003fe506 	br	8010590 <_realloc_r+0x170>
 80105fc:	98c00117 	ldw	r3,4(r19)
 8010600:	9c4b883a 	add	r5,r19,r17
 8010604:	11000054 	ori	r4,r2,1
 8010608:	18c0004c 	andi	r3,r3,1
 801060c:	1c62b03a 	or	r17,r3,r17
 8010610:	9c400115 	stw	r17,4(r19)
 8010614:	29000115 	stw	r4,4(r5)
 8010618:	2885883a 	add	r2,r5,r2
 801061c:	10c00117 	ldw	r3,4(r2)
 8010620:	29400204 	addi	r5,r5,8
 8010624:	a009883a 	mov	r4,r20
 8010628:	18c00054 	ori	r3,r3,1
 801062c:	10c00115 	stw	r3,4(r2)
 8010630:	800e5d80 	call	800e5d8 <_free_r>
 8010634:	003fd306 	br	8010584 <_realloc_r+0x164>
 8010638:	017fff04 	movi	r5,-4
 801063c:	414a703a 	and	r5,r8,r5
 8010640:	89800404 	addi	r6,r17,16
 8010644:	8151883a 	add	r8,r16,r5
 8010648:	4180590e 	bge	r8,r6,80107b0 <_realloc_r+0x390>
 801064c:	1080004c 	andi	r2,r2,1
 8010650:	103f9e1e 	bne	r2,zero,80104cc <_realloc_r+0xac>
 8010654:	adbffe17 	ldw	r22,-8(r21)
 8010658:	00bfff04 	movi	r2,-4
 801065c:	9dadc83a 	sub	r22,r19,r22
 8010660:	b1800117 	ldw	r6,4(r22)
 8010664:	3084703a 	and	r2,r6,r2
 8010668:	20002026 	beq	r4,zero,80106ec <_realloc_r+0x2cc>
 801066c:	80af883a 	add	r23,r16,r2
 8010670:	b96f883a 	add	r23,r23,r5
 8010674:	21c05f26 	beq	r4,r7,80107f4 <_realloc_r+0x3d4>
 8010678:	b8c01c16 	blt	r23,r3,80106ec <_realloc_r+0x2cc>
 801067c:	20800317 	ldw	r2,12(r4)
 8010680:	20c00217 	ldw	r3,8(r4)
 8010684:	81bfff04 	addi	r6,r16,-4
 8010688:	01000904 	movi	r4,36
 801068c:	18800315 	stw	r2,12(r3)
 8010690:	10c00215 	stw	r3,8(r2)
 8010694:	b0c00217 	ldw	r3,8(r22)
 8010698:	b0800317 	ldw	r2,12(r22)
 801069c:	b4800204 	addi	r18,r22,8
 80106a0:	18800315 	stw	r2,12(r3)
 80106a4:	10c00215 	stw	r3,8(r2)
 80106a8:	21801b36 	bltu	r4,r6,8010718 <_realloc_r+0x2f8>
 80106ac:	008004c4 	movi	r2,19
 80106b0:	1180352e 	bgeu	r2,r6,8010788 <_realloc_r+0x368>
 80106b4:	a8800017 	ldw	r2,0(r21)
 80106b8:	b0800215 	stw	r2,8(r22)
 80106bc:	a8800117 	ldw	r2,4(r21)
 80106c0:	b0800315 	stw	r2,12(r22)
 80106c4:	008006c4 	movi	r2,27
 80106c8:	11807f36 	bltu	r2,r6,80108c8 <_realloc_r+0x4a8>
 80106cc:	b0800404 	addi	r2,r22,16
 80106d0:	ad400204 	addi	r21,r21,8
 80106d4:	00002d06 	br	801078c <_realloc_r+0x36c>
 80106d8:	adbffe17 	ldw	r22,-8(r21)
 80106dc:	00bfff04 	movi	r2,-4
 80106e0:	9dadc83a 	sub	r22,r19,r22
 80106e4:	b1000117 	ldw	r4,4(r22)
 80106e8:	2084703a 	and	r2,r4,r2
 80106ec:	b03f7726 	beq	r22,zero,80104cc <_realloc_r+0xac>
 80106f0:	80af883a 	add	r23,r16,r2
 80106f4:	b8ff7516 	blt	r23,r3,80104cc <_realloc_r+0xac>
 80106f8:	b0800317 	ldw	r2,12(r22)
 80106fc:	b0c00217 	ldw	r3,8(r22)
 8010700:	81bfff04 	addi	r6,r16,-4
 8010704:	01000904 	movi	r4,36
 8010708:	18800315 	stw	r2,12(r3)
 801070c:	10c00215 	stw	r3,8(r2)
 8010710:	b4800204 	addi	r18,r22,8
 8010714:	21bfe52e 	bgeu	r4,r6,80106ac <_realloc_r+0x28c>
 8010718:	a80b883a 	mov	r5,r21
 801071c:	9009883a 	mov	r4,r18
 8010720:	800f1ac0 	call	800f1ac <memmove>
 8010724:	b821883a 	mov	r16,r23
 8010728:	b027883a 	mov	r19,r22
 801072c:	003f8a06 	br	8010558 <_realloc_r+0x138>
 8010730:	300b883a 	mov	r5,r6
 8010734:	dfc00917 	ldw	ra,36(sp)
 8010738:	df000817 	ldw	fp,32(sp)
 801073c:	ddc00717 	ldw	r23,28(sp)
 8010740:	dd800617 	ldw	r22,24(sp)
 8010744:	dd400517 	ldw	r21,20(sp)
 8010748:	dd000417 	ldw	r20,16(sp)
 801074c:	dcc00317 	ldw	r19,12(sp)
 8010750:	dc800217 	ldw	r18,8(sp)
 8010754:	dc400117 	ldw	r17,4(sp)
 8010758:	dc000017 	ldw	r16,0(sp)
 801075c:	dec00a04 	addi	sp,sp,40
 8010760:	8008f101 	jmpi	8008f10 <_malloc_r>
 8010764:	a8c00017 	ldw	r3,0(r21)
 8010768:	90c00015 	stw	r3,0(r18)
 801076c:	a8c00117 	ldw	r3,4(r21)
 8010770:	90c00115 	stw	r3,4(r18)
 8010774:	00c006c4 	movi	r3,27
 8010778:	19804536 	bltu	r3,r6,8010890 <_realloc_r+0x470>
 801077c:	90800204 	addi	r2,r18,8
 8010780:	a8c00204 	addi	r3,r21,8
 8010784:	003f6306 	br	8010514 <_realloc_r+0xf4>
 8010788:	9005883a 	mov	r2,r18
 801078c:	a8c00017 	ldw	r3,0(r21)
 8010790:	b821883a 	mov	r16,r23
 8010794:	b027883a 	mov	r19,r22
 8010798:	10c00015 	stw	r3,0(r2)
 801079c:	a8c00117 	ldw	r3,4(r21)
 80107a0:	10c00115 	stw	r3,4(r2)
 80107a4:	a8c00217 	ldw	r3,8(r21)
 80107a8:	10c00215 	stw	r3,8(r2)
 80107ac:	003f6a06 	br	8010558 <_realloc_r+0x138>
 80107b0:	9c67883a 	add	r19,r19,r17
 80107b4:	4445c83a 	sub	r2,r8,r17
 80107b8:	e4c00215 	stw	r19,8(fp)
 80107bc:	10800054 	ori	r2,r2,1
 80107c0:	98800115 	stw	r2,4(r19)
 80107c4:	a8bfff17 	ldw	r2,-4(r21)
 80107c8:	a009883a 	mov	r4,r20
 80107cc:	1080004c 	andi	r2,r2,1
 80107d0:	1462b03a 	or	r17,r2,r17
 80107d4:	ac7fff15 	stw	r17,-4(r21)
 80107d8:	80164c80 	call	80164c8 <__malloc_unlock>
 80107dc:	a805883a 	mov	r2,r21
 80107e0:	003f6b06 	br	8010590 <_realloc_r+0x170>
 80107e4:	a80b883a 	mov	r5,r21
 80107e8:	9009883a 	mov	r4,r18
 80107ec:	800f1ac0 	call	800f1ac <memmove>
 80107f0:	003f4e06 	br	801052c <_realloc_r+0x10c>
 80107f4:	89000404 	addi	r4,r17,16
 80107f8:	b93fbc16 	blt	r23,r4,80106ec <_realloc_r+0x2cc>
 80107fc:	b0800317 	ldw	r2,12(r22)
 8010800:	b0c00217 	ldw	r3,8(r22)
 8010804:	81bfff04 	addi	r6,r16,-4
 8010808:	01000904 	movi	r4,36
 801080c:	18800315 	stw	r2,12(r3)
 8010810:	10c00215 	stw	r3,8(r2)
 8010814:	b4800204 	addi	r18,r22,8
 8010818:	21804336 	bltu	r4,r6,8010928 <_realloc_r+0x508>
 801081c:	008004c4 	movi	r2,19
 8010820:	11803f2e 	bgeu	r2,r6,8010920 <_realloc_r+0x500>
 8010824:	a8800017 	ldw	r2,0(r21)
 8010828:	b0800215 	stw	r2,8(r22)
 801082c:	a8800117 	ldw	r2,4(r21)
 8010830:	b0800315 	stw	r2,12(r22)
 8010834:	008006c4 	movi	r2,27
 8010838:	11803f36 	bltu	r2,r6,8010938 <_realloc_r+0x518>
 801083c:	b0800404 	addi	r2,r22,16
 8010840:	ad400204 	addi	r21,r21,8
 8010844:	a8c00017 	ldw	r3,0(r21)
 8010848:	10c00015 	stw	r3,0(r2)
 801084c:	a8c00117 	ldw	r3,4(r21)
 8010850:	10c00115 	stw	r3,4(r2)
 8010854:	a8c00217 	ldw	r3,8(r21)
 8010858:	10c00215 	stw	r3,8(r2)
 801085c:	b447883a 	add	r3,r22,r17
 8010860:	bc45c83a 	sub	r2,r23,r17
 8010864:	e0c00215 	stw	r3,8(fp)
 8010868:	10800054 	ori	r2,r2,1
 801086c:	18800115 	stw	r2,4(r3)
 8010870:	b0800117 	ldw	r2,4(r22)
 8010874:	a009883a 	mov	r4,r20
 8010878:	1080004c 	andi	r2,r2,1
 801087c:	1462b03a 	or	r17,r2,r17
 8010880:	b4400115 	stw	r17,4(r22)
 8010884:	80164c80 	call	80164c8 <__malloc_unlock>
 8010888:	9005883a 	mov	r2,r18
 801088c:	003f4006 	br	8010590 <_realloc_r+0x170>
 8010890:	a8c00217 	ldw	r3,8(r21)
 8010894:	90c00215 	stw	r3,8(r18)
 8010898:	a8c00317 	ldw	r3,12(r21)
 801089c:	90c00315 	stw	r3,12(r18)
 80108a0:	30801126 	beq	r6,r2,80108e8 <_realloc_r+0x4c8>
 80108a4:	90800404 	addi	r2,r18,16
 80108a8:	a8c00404 	addi	r3,r21,16
 80108ac:	003f1906 	br	8010514 <_realloc_r+0xf4>
 80108b0:	90ffff17 	ldw	r3,-4(r18)
 80108b4:	00bfff04 	movi	r2,-4
 80108b8:	a825883a 	mov	r18,r21
 80108bc:	1884703a 	and	r2,r3,r2
 80108c0:	80a1883a 	add	r16,r16,r2
 80108c4:	003f2406 	br	8010558 <_realloc_r+0x138>
 80108c8:	a8800217 	ldw	r2,8(r21)
 80108cc:	b0800415 	stw	r2,16(r22)
 80108d0:	a8800317 	ldw	r2,12(r21)
 80108d4:	b0800515 	stw	r2,20(r22)
 80108d8:	31000a26 	beq	r6,r4,8010904 <_realloc_r+0x4e4>
 80108dc:	b0800604 	addi	r2,r22,24
 80108e0:	ad400404 	addi	r21,r21,16
 80108e4:	003fa906 	br	801078c <_realloc_r+0x36c>
 80108e8:	a9000417 	ldw	r4,16(r21)
 80108ec:	90800604 	addi	r2,r18,24
 80108f0:	a8c00604 	addi	r3,r21,24
 80108f4:	91000415 	stw	r4,16(r18)
 80108f8:	a9000517 	ldw	r4,20(r21)
 80108fc:	91000515 	stw	r4,20(r18)
 8010900:	003f0406 	br	8010514 <_realloc_r+0xf4>
 8010904:	a8c00417 	ldw	r3,16(r21)
 8010908:	ad400604 	addi	r21,r21,24
 801090c:	b0800804 	addi	r2,r22,32
 8010910:	b0c00615 	stw	r3,24(r22)
 8010914:	a8ffff17 	ldw	r3,-4(r21)
 8010918:	b0c00715 	stw	r3,28(r22)
 801091c:	003f9b06 	br	801078c <_realloc_r+0x36c>
 8010920:	9005883a 	mov	r2,r18
 8010924:	003fc706 	br	8010844 <_realloc_r+0x424>
 8010928:	a80b883a 	mov	r5,r21
 801092c:	9009883a 	mov	r4,r18
 8010930:	800f1ac0 	call	800f1ac <memmove>
 8010934:	003fc906 	br	801085c <_realloc_r+0x43c>
 8010938:	a8800217 	ldw	r2,8(r21)
 801093c:	b0800415 	stw	r2,16(r22)
 8010940:	a8800317 	ldw	r2,12(r21)
 8010944:	b0800515 	stw	r2,20(r22)
 8010948:	31000726 	beq	r6,r4,8010968 <_realloc_r+0x548>
 801094c:	b0800604 	addi	r2,r22,24
 8010950:	ad400404 	addi	r21,r21,16
 8010954:	003fbb06 	br	8010844 <_realloc_r+0x424>
 8010958:	a009883a 	mov	r4,r20
 801095c:	80164c80 	call	80164c8 <__malloc_unlock>
 8010960:	0005883a 	mov	r2,zero
 8010964:	003f0a06 	br	8010590 <_realloc_r+0x170>
 8010968:	a8c00417 	ldw	r3,16(r21)
 801096c:	ad400604 	addi	r21,r21,24
 8010970:	b0800804 	addi	r2,r22,32
 8010974:	b0c00615 	stw	r3,24(r22)
 8010978:	a8ffff17 	ldw	r3,-4(r21)
 801097c:	b0c00715 	stw	r3,28(r22)
 8010980:	003fb006 	br	8010844 <_realloc_r+0x424>

08010984 <__fpclassifyd>:
 8010984:	00a00034 	movhi	r2,32768
 8010988:	10bfffc4 	addi	r2,r2,-1
 801098c:	2884703a 	and	r2,r5,r2
 8010990:	10000726 	beq	r2,zero,80109b0 <__fpclassifyd+0x2c>
 8010994:	00fffc34 	movhi	r3,65520
 8010998:	019ff834 	movhi	r6,32736
 801099c:	28c7883a 	add	r3,r5,r3
 80109a0:	31bfffc4 	addi	r6,r6,-1
 80109a4:	30c00536 	bltu	r6,r3,80109bc <__fpclassifyd+0x38>
 80109a8:	00800104 	movi	r2,4
 80109ac:	f800283a 	ret
 80109b0:	2000021e 	bne	r4,zero,80109bc <__fpclassifyd+0x38>
 80109b4:	00800084 	movi	r2,2
 80109b8:	f800283a 	ret
 80109bc:	00dffc34 	movhi	r3,32752
 80109c0:	019ff834 	movhi	r6,32736
 80109c4:	28cb883a 	add	r5,r5,r3
 80109c8:	31bfffc4 	addi	r6,r6,-1
 80109cc:	317ff62e 	bgeu	r6,r5,80109a8 <__fpclassifyd+0x24>
 80109d0:	01400434 	movhi	r5,16
 80109d4:	297fffc4 	addi	r5,r5,-1
 80109d8:	28800236 	bltu	r5,r2,80109e4 <__fpclassifyd+0x60>
 80109dc:	008000c4 	movi	r2,3
 80109e0:	f800283a 	ret
 80109e4:	10c00226 	beq	r2,r3,80109f0 <__fpclassifyd+0x6c>
 80109e8:	0005883a 	mov	r2,zero
 80109ec:	f800283a 	ret
 80109f0:	2005003a 	cmpeq	r2,r4,zero
 80109f4:	f800283a 	ret

080109f8 <strcmp>:
 80109f8:	2144b03a 	or	r2,r4,r5
 80109fc:	108000cc 	andi	r2,r2,3
 8010a00:	1000171e 	bne	r2,zero,8010a60 <strcmp+0x68>
 8010a04:	20800017 	ldw	r2,0(r4)
 8010a08:	28c00017 	ldw	r3,0(r5)
 8010a0c:	10c0141e 	bne	r2,r3,8010a60 <strcmp+0x68>
 8010a10:	027fbff4 	movhi	r9,65279
 8010a14:	4a7fbfc4 	addi	r9,r9,-257
 8010a18:	0086303a 	nor	r3,zero,r2
 8010a1c:	02202074 	movhi	r8,32897
 8010a20:	1245883a 	add	r2,r2,r9
 8010a24:	42202004 	addi	r8,r8,-32640
 8010a28:	10c4703a 	and	r2,r2,r3
 8010a2c:	1204703a 	and	r2,r2,r8
 8010a30:	10000226 	beq	r2,zero,8010a3c <strcmp+0x44>
 8010a34:	00002306 	br	8010ac4 <strcmp+0xcc>
 8010a38:	1000221e 	bne	r2,zero,8010ac4 <strcmp+0xcc>
 8010a3c:	21000104 	addi	r4,r4,4
 8010a40:	20c00017 	ldw	r3,0(r4)
 8010a44:	29400104 	addi	r5,r5,4
 8010a48:	29800017 	ldw	r6,0(r5)
 8010a4c:	1a4f883a 	add	r7,r3,r9
 8010a50:	00c4303a 	nor	r2,zero,r3
 8010a54:	3884703a 	and	r2,r7,r2
 8010a58:	1204703a 	and	r2,r2,r8
 8010a5c:	19bff626 	beq	r3,r6,8010a38 <strcmp+0x40>
 8010a60:	20800003 	ldbu	r2,0(r4)
 8010a64:	10c03fcc 	andi	r3,r2,255
 8010a68:	18c0201c 	xori	r3,r3,128
 8010a6c:	18ffe004 	addi	r3,r3,-128
 8010a70:	18000c26 	beq	r3,zero,8010aa4 <strcmp+0xac>
 8010a74:	29800007 	ldb	r6,0(r5)
 8010a78:	19800326 	beq	r3,r6,8010a88 <strcmp+0x90>
 8010a7c:	00001306 	br	8010acc <strcmp+0xd4>
 8010a80:	29800007 	ldb	r6,0(r5)
 8010a84:	11800b1e 	bne	r2,r6,8010ab4 <strcmp+0xbc>
 8010a88:	21000044 	addi	r4,r4,1
 8010a8c:	20c00003 	ldbu	r3,0(r4)
 8010a90:	29400044 	addi	r5,r5,1
 8010a94:	18803fcc 	andi	r2,r3,255
 8010a98:	1080201c 	xori	r2,r2,128
 8010a9c:	10bfe004 	addi	r2,r2,-128
 8010aa0:	103ff71e 	bne	r2,zero,8010a80 <strcmp+0x88>
 8010aa4:	0007883a 	mov	r3,zero
 8010aa8:	28800003 	ldbu	r2,0(r5)
 8010aac:	1885c83a 	sub	r2,r3,r2
 8010ab0:	f800283a 	ret
 8010ab4:	28800003 	ldbu	r2,0(r5)
 8010ab8:	18c03fcc 	andi	r3,r3,255
 8010abc:	1885c83a 	sub	r2,r3,r2
 8010ac0:	f800283a 	ret
 8010ac4:	0005883a 	mov	r2,zero
 8010ac8:	f800283a 	ret
 8010acc:	10c03fcc 	andi	r3,r2,255
 8010ad0:	003ff506 	br	8010aa8 <strcmp+0xb0>

08010ad4 <__sprint_r.part.0>:
 8010ad4:	28801917 	ldw	r2,100(r5)
 8010ad8:	defff604 	addi	sp,sp,-40
 8010adc:	dd400515 	stw	r21,20(sp)
 8010ae0:	dfc00915 	stw	ra,36(sp)
 8010ae4:	df000815 	stw	fp,32(sp)
 8010ae8:	ddc00715 	stw	r23,28(sp)
 8010aec:	dd800615 	stw	r22,24(sp)
 8010af0:	dd000415 	stw	r20,16(sp)
 8010af4:	dcc00315 	stw	r19,12(sp)
 8010af8:	dc800215 	stw	r18,8(sp)
 8010afc:	dc400115 	stw	r17,4(sp)
 8010b00:	dc000015 	stw	r16,0(sp)
 8010b04:	1088000c 	andi	r2,r2,8192
 8010b08:	302b883a 	mov	r21,r6
 8010b0c:	10002e26 	beq	r2,zero,8010bc8 <__sprint_r.part.0+0xf4>
 8010b10:	30800217 	ldw	r2,8(r6)
 8010b14:	35800017 	ldw	r22,0(r6)
 8010b18:	10002926 	beq	r2,zero,8010bc0 <__sprint_r.part.0+0xec>
 8010b1c:	2827883a 	mov	r19,r5
 8010b20:	2029883a 	mov	r20,r4
 8010b24:	b5c00104 	addi	r23,r22,4
 8010b28:	04bfffc4 	movi	r18,-1
 8010b2c:	bc400017 	ldw	r17,0(r23)
 8010b30:	b4000017 	ldw	r16,0(r22)
 8010b34:	0039883a 	mov	fp,zero
 8010b38:	8822d0ba 	srli	r17,r17,2
 8010b3c:	8800031e 	bne	r17,zero,8010b4c <__sprint_r.part.0+0x78>
 8010b40:	00001806 	br	8010ba4 <__sprint_r.part.0+0xd0>
 8010b44:	84000104 	addi	r16,r16,4
 8010b48:	8f001526 	beq	r17,fp,8010ba0 <__sprint_r.part.0+0xcc>
 8010b4c:	81400017 	ldw	r5,0(r16)
 8010b50:	980d883a 	mov	r6,r19
 8010b54:	a009883a 	mov	r4,r20
 8010b58:	80125100 	call	8012510 <_fputwc_r>
 8010b5c:	e7000044 	addi	fp,fp,1
 8010b60:	14bff81e 	bne	r2,r18,8010b44 <__sprint_r.part.0+0x70>
 8010b64:	9005883a 	mov	r2,r18
 8010b68:	a8000215 	stw	zero,8(r21)
 8010b6c:	a8000115 	stw	zero,4(r21)
 8010b70:	dfc00917 	ldw	ra,36(sp)
 8010b74:	df000817 	ldw	fp,32(sp)
 8010b78:	ddc00717 	ldw	r23,28(sp)
 8010b7c:	dd800617 	ldw	r22,24(sp)
 8010b80:	dd400517 	ldw	r21,20(sp)
 8010b84:	dd000417 	ldw	r20,16(sp)
 8010b88:	dcc00317 	ldw	r19,12(sp)
 8010b8c:	dc800217 	ldw	r18,8(sp)
 8010b90:	dc400117 	ldw	r17,4(sp)
 8010b94:	dc000017 	ldw	r16,0(sp)
 8010b98:	dec00a04 	addi	sp,sp,40
 8010b9c:	f800283a 	ret
 8010ba0:	a8800217 	ldw	r2,8(r21)
 8010ba4:	8c63883a 	add	r17,r17,r17
 8010ba8:	8c63883a 	add	r17,r17,r17
 8010bac:	1445c83a 	sub	r2,r2,r17
 8010bb0:	a8800215 	stw	r2,8(r21)
 8010bb4:	b5800204 	addi	r22,r22,8
 8010bb8:	bdc00204 	addi	r23,r23,8
 8010bbc:	103fdb1e 	bne	r2,zero,8010b2c <__sprint_r.part.0+0x58>
 8010bc0:	0005883a 	mov	r2,zero
 8010bc4:	003fe806 	br	8010b68 <__sprint_r.part.0+0x94>
 8010bc8:	800e8e80 	call	800e8e8 <__sfvwrite_r>
 8010bcc:	003fe606 	br	8010b68 <__sprint_r.part.0+0x94>

08010bd0 <__sprint_r>:
 8010bd0:	30c00217 	ldw	r3,8(r6)
 8010bd4:	18000126 	beq	r3,zero,8010bdc <__sprint_r+0xc>
 8010bd8:	8010ad41 	jmpi	8010ad4 <__sprint_r.part.0>
 8010bdc:	30000115 	stw	zero,4(r6)
 8010be0:	0005883a 	mov	r2,zero
 8010be4:	f800283a 	ret

08010be8 <___vfiprintf_internal_r>:
 8010be8:	deffca04 	addi	sp,sp,-216
 8010bec:	dd403115 	stw	r21,196(sp)
 8010bf0:	dfc03515 	stw	ra,212(sp)
 8010bf4:	df003415 	stw	fp,208(sp)
 8010bf8:	ddc03315 	stw	r23,204(sp)
 8010bfc:	dd803215 	stw	r22,200(sp)
 8010c00:	dd003015 	stw	r20,192(sp)
 8010c04:	dcc02f15 	stw	r19,188(sp)
 8010c08:	dc802e15 	stw	r18,184(sp)
 8010c0c:	dc402d15 	stw	r17,180(sp)
 8010c10:	dc002c15 	stw	r16,176(sp)
 8010c14:	d9002115 	stw	r4,132(sp)
 8010c18:	d9402015 	stw	r5,128(sp)
 8010c1c:	d9c02215 	stw	r7,136(sp)
 8010c20:	302b883a 	mov	r21,r6
 8010c24:	20000226 	beq	r4,zero,8010c30 <___vfiprintf_internal_r+0x48>
 8010c28:	20800e17 	ldw	r2,56(r4)
 8010c2c:	1000cf26 	beq	r2,zero,8010f6c <___vfiprintf_internal_r+0x384>
 8010c30:	d8c02017 	ldw	r3,128(sp)
 8010c34:	1880030b 	ldhu	r2,12(r3)
 8010c38:	10c8000c 	andi	r3,r2,8192
 8010c3c:	1800071e 	bne	r3,zero,8010c5c <___vfiprintf_internal_r+0x74>
 8010c40:	d9402017 	ldw	r5,128(sp)
 8010c44:	00f7ffc4 	movi	r3,-8193
 8010c48:	10880014 	ori	r2,r2,8192
 8010c4c:	29001917 	ldw	r4,100(r5)
 8010c50:	2880030d 	sth	r2,12(r5)
 8010c54:	20c6703a 	and	r3,r4,r3
 8010c58:	28c01915 	stw	r3,100(r5)
 8010c5c:	10c0020c 	andi	r3,r2,8
 8010c60:	1800a526 	beq	r3,zero,8010ef8 <___vfiprintf_internal_r+0x310>
 8010c64:	d9002017 	ldw	r4,128(sp)
 8010c68:	20c00417 	ldw	r3,16(r4)
 8010c6c:	1800a226 	beq	r3,zero,8010ef8 <___vfiprintf_internal_r+0x310>
 8010c70:	1080068c 	andi	r2,r2,26
 8010c74:	00c00284 	movi	r3,10
 8010c78:	10c0a826 	beq	r2,r3,8010f1c <___vfiprintf_internal_r+0x334>
 8010c7c:	d9001a04 	addi	r4,sp,104
 8010c80:	d94019c4 	addi	r5,sp,103
 8010c84:	048200b4 	movhi	r18,2050
 8010c88:	2145c83a 	sub	r2,r4,r5
 8010c8c:	94a8bb04 	addi	r18,r18,-23828
 8010c90:	d9001e15 	stw	r4,120(sp)
 8010c94:	d9401f15 	stw	r5,124(sp)
 8010c98:	dec01a15 	stw	sp,104(sp)
 8010c9c:	d8001c15 	stw	zero,112(sp)
 8010ca0:	d8001b15 	stw	zero,108(sp)
 8010ca4:	d811883a 	mov	r8,sp
 8010ca8:	d8002615 	stw	zero,152(sp)
 8010cac:	d8002415 	stw	zero,144(sp)
 8010cb0:	d8802815 	stw	r2,160(sp)
 8010cb4:	a82d883a 	mov	r22,r21
 8010cb8:	b0800007 	ldb	r2,0(r22)
 8010cbc:	10040d26 	beq	r2,zero,8011cf4 <___vfiprintf_internal_r+0x110c>
 8010cc0:	00c00944 	movi	r3,37
 8010cc4:	b029883a 	mov	r20,r22
 8010cc8:	10c0021e 	bne	r2,r3,8010cd4 <___vfiprintf_internal_r+0xec>
 8010ccc:	00001606 	br	8010d28 <___vfiprintf_internal_r+0x140>
 8010cd0:	10c00326 	beq	r2,r3,8010ce0 <___vfiprintf_internal_r+0xf8>
 8010cd4:	a5000044 	addi	r20,r20,1
 8010cd8:	a0800007 	ldb	r2,0(r20)
 8010cdc:	103ffc1e 	bne	r2,zero,8010cd0 <___vfiprintf_internal_r+0xe8>
 8010ce0:	a5a1c83a 	sub	r16,r20,r22
 8010ce4:	80001026 	beq	r16,zero,8010d28 <___vfiprintf_internal_r+0x140>
 8010ce8:	d8c01c17 	ldw	r3,112(sp)
 8010cec:	d8801b17 	ldw	r2,108(sp)
 8010cf0:	45800015 	stw	r22,0(r8)
 8010cf4:	80c7883a 	add	r3,r16,r3
 8010cf8:	10800044 	addi	r2,r2,1
 8010cfc:	44000115 	stw	r16,4(r8)
 8010d00:	d8c01c15 	stw	r3,112(sp)
 8010d04:	d8801b15 	stw	r2,108(sp)
 8010d08:	010001c4 	movi	r4,7
 8010d0c:	2080750e 	bge	r4,r2,8010ee4 <___vfiprintf_internal_r+0x2fc>
 8010d10:	1803951e 	bne	r3,zero,8011b68 <___vfiprintf_internal_r+0xf80>
 8010d14:	d8c02417 	ldw	r3,144(sp)
 8010d18:	d8001b15 	stw	zero,108(sp)
 8010d1c:	d811883a 	mov	r8,sp
 8010d20:	1c07883a 	add	r3,r3,r16
 8010d24:	d8c02415 	stw	r3,144(sp)
 8010d28:	a0800007 	ldb	r2,0(r20)
 8010d2c:	1002e026 	beq	r2,zero,80118b0 <___vfiprintf_internal_r+0xcc8>
 8010d30:	a5800044 	addi	r22,r20,1
 8010d34:	a0c00047 	ldb	r3,1(r20)
 8010d38:	d8001d85 	stb	zero,118(sp)
 8010d3c:	0027883a 	mov	r19,zero
 8010d40:	d8002305 	stb	zero,140(sp)
 8010d44:	043fffc4 	movi	r16,-1
 8010d48:	d8002515 	stw	zero,148(sp)
 8010d4c:	0023883a 	mov	r17,zero
 8010d50:	05001604 	movi	r20,88
 8010d54:	05400244 	movi	r21,9
 8010d58:	402f883a 	mov	r23,r8
 8010d5c:	b5800044 	addi	r22,r22,1
 8010d60:	18bff804 	addi	r2,r3,-32
 8010d64:	a0827736 	bltu	r20,r2,8011744 <___vfiprintf_internal_r+0xb5c>
 8010d68:	100490ba 	slli	r2,r2,2
 8010d6c:	01020074 	movhi	r4,2049
 8010d70:	21036004 	addi	r4,r4,3456
 8010d74:	1105883a 	add	r2,r2,r4
 8010d78:	10800017 	ldw	r2,0(r2)
 8010d7c:	1000683a 	jmp	r2
 8010d80:	08011444 	addi	zero,at,1105
 8010d84:	08011744 	addi	zero,at,1117
 8010d88:	08011744 	addi	zero,at,1117
 8010d8c:	08011460 	cmpeqi	zero,at,1105
 8010d90:	08011744 	addi	zero,at,1117
 8010d94:	08011744 	addi	zero,at,1117
 8010d98:	08011744 	addi	zero,at,1117
 8010d9c:	08011744 	addi	zero,at,1117
 8010da0:	08011744 	addi	zero,at,1117
 8010da4:	08011744 	addi	zero,at,1117
 8010da8:	08011668 	cmpgeui	zero,at,1113
 8010dac:	0801168c 	andi	zero,at,1114
 8010db0:	08011744 	addi	zero,at,1117
 8010db4:	08010f84 	addi	zero,at,1086
 8010db8:	080116a0 	cmpeqi	zero,at,1114
 8010dbc:	08011744 	addi	zero,at,1117
 8010dc0:	0801146c 	andhi	zero,at,1105
 8010dc4:	08011478 	rdprs	zero,at,1105
 8010dc8:	08011478 	rdprs	zero,at,1105
 8010dcc:	08011478 	rdprs	zero,at,1105
 8010dd0:	08011478 	rdprs	zero,at,1105
 8010dd4:	08011478 	rdprs	zero,at,1105
 8010dd8:	08011478 	rdprs	zero,at,1105
 8010ddc:	08011478 	rdprs	zero,at,1105
 8010de0:	08011478 	rdprs	zero,at,1105
 8010de4:	08011478 	rdprs	zero,at,1105
 8010de8:	08011744 	addi	zero,at,1117
 8010dec:	08011744 	addi	zero,at,1117
 8010df0:	08011744 	addi	zero,at,1117
 8010df4:	08011744 	addi	zero,at,1117
 8010df8:	08011744 	addi	zero,at,1117
 8010dfc:	08011744 	addi	zero,at,1117
 8010e00:	08011744 	addi	zero,at,1117
 8010e04:	08011744 	addi	zero,at,1117
 8010e08:	08011744 	addi	zero,at,1117
 8010e0c:	08011744 	addi	zero,at,1117
 8010e10:	080114b8 	rdprs	zero,at,1106
 8010e14:	08011744 	addi	zero,at,1117
 8010e18:	08011744 	addi	zero,at,1117
 8010e1c:	08011744 	addi	zero,at,1117
 8010e20:	08011744 	addi	zero,at,1117
 8010e24:	08011744 	addi	zero,at,1117
 8010e28:	08011744 	addi	zero,at,1117
 8010e2c:	08011744 	addi	zero,at,1117
 8010e30:	08011744 	addi	zero,at,1117
 8010e34:	08011744 	addi	zero,at,1117
 8010e38:	08011744 	addi	zero,at,1117
 8010e3c:	080114f4 	orhi	zero,at,1107
 8010e40:	08011744 	addi	zero,at,1117
 8010e44:	08011744 	addi	zero,at,1117
 8010e48:	08011744 	addi	zero,at,1117
 8010e4c:	08011744 	addi	zero,at,1117
 8010e50:	08011744 	addi	zero,at,1117
 8010e54:	08011550 	cmplti	zero,at,1109
 8010e58:	08011744 	addi	zero,at,1117
 8010e5c:	08011744 	addi	zero,at,1117
 8010e60:	080115c4 	addi	zero,at,1111
 8010e64:	08011744 	addi	zero,at,1117
 8010e68:	08011744 	addi	zero,at,1117
 8010e6c:	08011744 	addi	zero,at,1117
 8010e70:	08011744 	addi	zero,at,1117
 8010e74:	08011744 	addi	zero,at,1117
 8010e78:	08011744 	addi	zero,at,1117
 8010e7c:	08011744 	addi	zero,at,1117
 8010e80:	08011744 	addi	zero,at,1117
 8010e84:	08011744 	addi	zero,at,1117
 8010e88:	08011744 	addi	zero,at,1117
 8010e8c:	0801136c 	andhi	zero,at,1101
 8010e90:	0801139c 	xori	zero,at,1102
 8010e94:	08011744 	addi	zero,at,1117
 8010e98:	08011744 	addi	zero,at,1117
 8010e9c:	08011744 	addi	zero,at,1117
 8010ea0:	080116ec 	andhi	zero,at,1115
 8010ea4:	0801139c 	xori	zero,at,1102
 8010ea8:	08011744 	addi	zero,at,1117
 8010eac:	08011744 	addi	zero,at,1117
 8010eb0:	08011244 	addi	zero,at,1097
 8010eb4:	08011744 	addi	zero,at,1117
 8010eb8:	08011258 	cmpnei	zero,at,1097
 8010ebc:	08011290 	cmplti	zero,at,1098
 8010ec0:	08010f90 	cmplti	zero,at,1086
 8010ec4:	08011238 	rdprs	zero,at,1096
 8010ec8:	08011744 	addi	zero,at,1117
 8010ecc:	08011604 	addi	zero,at,1112
 8010ed0:	08011744 	addi	zero,at,1117
 8010ed4:	08011650 	cmplti	zero,at,1113
 8010ed8:	08011744 	addi	zero,at,1117
 8010edc:	08011744 	addi	zero,at,1117
 8010ee0:	08011314 	ori	zero,at,1100
 8010ee4:	42000204 	addi	r8,r8,8
 8010ee8:	d8c02417 	ldw	r3,144(sp)
 8010eec:	1c07883a 	add	r3,r3,r16
 8010ef0:	d8c02415 	stw	r3,144(sp)
 8010ef4:	003f8c06 	br	8010d28 <___vfiprintf_internal_r+0x140>
 8010ef8:	d9402017 	ldw	r5,128(sp)
 8010efc:	d9002117 	ldw	r4,132(sp)
 8010f00:	800c3580 	call	800c358 <__swsetup_r>
 8010f04:	1003c11e 	bne	r2,zero,8011e0c <___vfiprintf_internal_r+0x1224>
 8010f08:	d9402017 	ldw	r5,128(sp)
 8010f0c:	00c00284 	movi	r3,10
 8010f10:	2880030b 	ldhu	r2,12(r5)
 8010f14:	1080068c 	andi	r2,r2,26
 8010f18:	10ff581e 	bne	r2,r3,8010c7c <___vfiprintf_internal_r+0x94>
 8010f1c:	d8c02017 	ldw	r3,128(sp)
 8010f20:	1880038f 	ldh	r2,14(r3)
 8010f24:	103f5516 	blt	r2,zero,8010c7c <___vfiprintf_internal_r+0x94>
 8010f28:	d9c02217 	ldw	r7,136(sp)
 8010f2c:	d9002117 	ldw	r4,132(sp)
 8010f30:	a80d883a 	mov	r6,r21
 8010f34:	180b883a 	mov	r5,r3
 8010f38:	80121100 	call	8012110 <__sbprintf>
 8010f3c:	dfc03517 	ldw	ra,212(sp)
 8010f40:	df003417 	ldw	fp,208(sp)
 8010f44:	ddc03317 	ldw	r23,204(sp)
 8010f48:	dd803217 	ldw	r22,200(sp)
 8010f4c:	dd403117 	ldw	r21,196(sp)
 8010f50:	dd003017 	ldw	r20,192(sp)
 8010f54:	dcc02f17 	ldw	r19,188(sp)
 8010f58:	dc802e17 	ldw	r18,184(sp)
 8010f5c:	dc402d17 	ldw	r17,180(sp)
 8010f60:	dc002c17 	ldw	r16,176(sp)
 8010f64:	dec03604 	addi	sp,sp,216
 8010f68:	f800283a 	ret
 8010f6c:	800e3b80 	call	800e3b8 <__sinit>
 8010f70:	003f2f06 	br	8010c30 <___vfiprintf_internal_r+0x48>
 8010f74:	d8c02517 	ldw	r3,148(sp)
 8010f78:	d8802215 	stw	r2,136(sp)
 8010f7c:	00c7c83a 	sub	r3,zero,r3
 8010f80:	d8c02515 	stw	r3,148(sp)
 8010f84:	8c400114 	ori	r17,r17,4
 8010f88:	b0c00007 	ldb	r3,0(r22)
 8010f8c:	003f7306 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8010f90:	00800c04 	movi	r2,48
 8010f94:	d9402217 	ldw	r5,136(sp)
 8010f98:	d8801d05 	stb	r2,116(sp)
 8010f9c:	00801e04 	movi	r2,120
 8010fa0:	d8801d45 	stb	r2,117(sp)
 8010fa4:	d8001d85 	stb	zero,118(sp)
 8010fa8:	b811883a 	mov	r8,r23
 8010fac:	28c00104 	addi	r3,r5,4
 8010fb0:	2cc00017 	ldw	r19,0(r5)
 8010fb4:	0029883a 	mov	r20,zero
 8010fb8:	88800094 	ori	r2,r17,2
 8010fbc:	80032516 	blt	r16,zero,8011c54 <___vfiprintf_internal_r+0x106c>
 8010fc0:	00bfdfc4 	movi	r2,-129
 8010fc4:	88a2703a 	and	r17,r17,r2
 8010fc8:	d8c02215 	stw	r3,136(sp)
 8010fcc:	8c400094 	ori	r17,r17,2
 8010fd0:	98032a1e 	bne	r19,zero,8011c7c <___vfiprintf_internal_r+0x1094>
 8010fd4:	008200b4 	movhi	r2,2050
 8010fd8:	10a85b04 	addi	r2,r2,-24212
 8010fdc:	d8802615 	stw	r2,152(sp)
 8010fe0:	002b883a 	mov	r21,zero
 8010fe4:	8001741e 	bne	r16,zero,80115b8 <___vfiprintf_internal_r+0x9d0>
 8010fe8:	0021883a 	mov	r16,zero
 8010fec:	0029883a 	mov	r20,zero
 8010ff0:	ddc01a04 	addi	r23,sp,104
 8010ff4:	8027883a 	mov	r19,r16
 8010ff8:	8500010e 	bge	r16,r20,8011000 <___vfiprintf_internal_r+0x418>
 8010ffc:	a027883a 	mov	r19,r20
 8011000:	ad403fcc 	andi	r21,r21,255
 8011004:	ad40201c 	xori	r21,r21,128
 8011008:	ad7fe004 	addi	r21,r21,-128
 801100c:	a8000126 	beq	r21,zero,8011014 <___vfiprintf_internal_r+0x42c>
 8011010:	9cc00044 	addi	r19,r19,1
 8011014:	89c0008c 	andi	r7,r17,2
 8011018:	38000126 	beq	r7,zero,8011020 <___vfiprintf_internal_r+0x438>
 801101c:	9cc00084 	addi	r19,r19,2
 8011020:	88c0210c 	andi	r3,r17,132
 8011024:	1801dd1e 	bne	r3,zero,801179c <___vfiprintf_internal_r+0xbb4>
 8011028:	d9402517 	ldw	r5,148(sp)
 801102c:	2cebc83a 	sub	r21,r5,r19
 8011030:	0541da0e 	bge	zero,r21,801179c <___vfiprintf_internal_r+0xbb4>
 8011034:	07000404 	movi	fp,16
 8011038:	d8801c17 	ldw	r2,112(sp)
 801103c:	e543be0e 	bge	fp,r21,8011f38 <___vfiprintf_internal_r+0x1350>
 8011040:	014200b4 	movhi	r5,2050
 8011044:	2968bf04 	addi	r5,r5,-23812
 8011048:	dc002715 	stw	r16,156(sp)
 801104c:	d9801b17 	ldw	r6,108(sp)
 8011050:	a821883a 	mov	r16,r21
 8011054:	d9402315 	stw	r5,140(sp)
 8011058:	028001c4 	movi	r10,7
 801105c:	d9c02915 	stw	r7,164(sp)
 8011060:	182b883a 	mov	r21,r3
 8011064:	00000506 	br	801107c <___vfiprintf_internal_r+0x494>
 8011068:	31000084 	addi	r4,r6,2
 801106c:	42000204 	addi	r8,r8,8
 8011070:	180d883a 	mov	r6,r3
 8011074:	843ffc04 	addi	r16,r16,-16
 8011078:	e4000f0e 	bge	fp,r16,80110b8 <___vfiprintf_internal_r+0x4d0>
 801107c:	010200b4 	movhi	r4,2050
 8011080:	10800404 	addi	r2,r2,16
 8011084:	30c00044 	addi	r3,r6,1
 8011088:	2128bf04 	addi	r4,r4,-23812
 801108c:	41000015 	stw	r4,0(r8)
 8011090:	47000115 	stw	fp,4(r8)
 8011094:	d8801c15 	stw	r2,112(sp)
 8011098:	d8c01b15 	stw	r3,108(sp)
 801109c:	50fff20e 	bge	r10,r3,8011068 <___vfiprintf_internal_r+0x480>
 80110a0:	1001b21e 	bne	r2,zero,801176c <___vfiprintf_internal_r+0xb84>
 80110a4:	843ffc04 	addi	r16,r16,-16
 80110a8:	000d883a 	mov	r6,zero
 80110ac:	01000044 	movi	r4,1
 80110b0:	d811883a 	mov	r8,sp
 80110b4:	e43ff116 	blt	fp,r16,801107c <___vfiprintf_internal_r+0x494>
 80110b8:	a807883a 	mov	r3,r21
 80110bc:	d9c02917 	ldw	r7,164(sp)
 80110c0:	802b883a 	mov	r21,r16
 80110c4:	dc002717 	ldw	r16,156(sp)
 80110c8:	d9402317 	ldw	r5,140(sp)
 80110cc:	a885883a 	add	r2,r21,r2
 80110d0:	45400115 	stw	r21,4(r8)
 80110d4:	41400015 	stw	r5,0(r8)
 80110d8:	d8801c15 	stw	r2,112(sp)
 80110dc:	d9001b15 	stw	r4,108(sp)
 80110e0:	014001c4 	movi	r5,7
 80110e4:	29026216 	blt	r5,r4,8011a70 <___vfiprintf_internal_r+0xe88>
 80110e8:	d9801d87 	ldb	r6,118(sp)
 80110ec:	42000204 	addi	r8,r8,8
 80110f0:	21400044 	addi	r5,r4,1
 80110f4:	3001ae1e 	bne	r6,zero,80117b0 <___vfiprintf_internal_r+0xbc8>
 80110f8:	3801bb26 	beq	r7,zero,80117e8 <___vfiprintf_internal_r+0xc00>
 80110fc:	d9001d04 	addi	r4,sp,116
 8011100:	10800084 	addi	r2,r2,2
 8011104:	41000015 	stw	r4,0(r8)
 8011108:	01000084 	movi	r4,2
 801110c:	41000115 	stw	r4,4(r8)
 8011110:	d8801c15 	stw	r2,112(sp)
 8011114:	d9401b15 	stw	r5,108(sp)
 8011118:	010001c4 	movi	r4,7
 801111c:	2142680e 	bge	r4,r5,8011ac0 <___vfiprintf_internal_r+0xed8>
 8011120:	1002b11e 	bne	r2,zero,8011be8 <___vfiprintf_internal_r+0x1000>
 8011124:	01802004 	movi	r6,128
 8011128:	01400044 	movi	r5,1
 801112c:	0009883a 	mov	r4,zero
 8011130:	d811883a 	mov	r8,sp
 8011134:	1981ae1e 	bne	r3,r6,80117f0 <___vfiprintf_internal_r+0xc08>
 8011138:	d8c02517 	ldw	r3,148(sp)
 801113c:	1cf9c83a 	sub	fp,r3,r19
 8011140:	0701ab0e 	bge	zero,fp,80117f0 <___vfiprintf_internal_r+0xc08>
 8011144:	05400404 	movi	r21,16
 8011148:	af03a90e 	bge	r21,fp,8011ff0 <___vfiprintf_internal_r+0x1408>
 801114c:	014200b4 	movhi	r5,2050
 8011150:	2968bb04 	addi	r5,r5,-23828
 8011154:	d9402315 	stw	r5,140(sp)
 8011158:	01c001c4 	movi	r7,7
 801115c:	00000506 	br	8011174 <___vfiprintf_internal_r+0x58c>
 8011160:	21800084 	addi	r6,r4,2
 8011164:	42000204 	addi	r8,r8,8
 8011168:	1809883a 	mov	r4,r3
 801116c:	e73ffc04 	addi	fp,fp,-16
 8011170:	af000d0e 	bge	r21,fp,80111a8 <___vfiprintf_internal_r+0x5c0>
 8011174:	10800404 	addi	r2,r2,16
 8011178:	20c00044 	addi	r3,r4,1
 801117c:	44800015 	stw	r18,0(r8)
 8011180:	45400115 	stw	r21,4(r8)
 8011184:	d8801c15 	stw	r2,112(sp)
 8011188:	d8c01b15 	stw	r3,108(sp)
 801118c:	38fff40e 	bge	r7,r3,8011160 <___vfiprintf_internal_r+0x578>
 8011190:	10022b1e 	bne	r2,zero,8011a40 <___vfiprintf_internal_r+0xe58>
 8011194:	e73ffc04 	addi	fp,fp,-16
 8011198:	01800044 	movi	r6,1
 801119c:	0009883a 	mov	r4,zero
 80111a0:	d811883a 	mov	r8,sp
 80111a4:	af3ff316 	blt	r21,fp,8011174 <___vfiprintf_internal_r+0x58c>
 80111a8:	d8c02317 	ldw	r3,140(sp)
 80111ac:	1705883a 	add	r2,r2,fp
 80111b0:	47000115 	stw	fp,4(r8)
 80111b4:	40c00015 	stw	r3,0(r8)
 80111b8:	d8801c15 	stw	r2,112(sp)
 80111bc:	d9801b15 	stw	r6,108(sp)
 80111c0:	00c001c4 	movi	r3,7
 80111c4:	19829416 	blt	r3,r6,8011c18 <___vfiprintf_internal_r+0x1030>
 80111c8:	8521c83a 	sub	r16,r16,r20
 80111cc:	42000204 	addi	r8,r8,8
 80111d0:	31400044 	addi	r5,r6,1
 80111d4:	3009883a 	mov	r4,r6
 80111d8:	04018716 	blt	zero,r16,80117f8 <___vfiprintf_internal_r+0xc10>
 80111dc:	a085883a 	add	r2,r20,r2
 80111e0:	45c00015 	stw	r23,0(r8)
 80111e4:	45000115 	stw	r20,4(r8)
 80111e8:	d8801c15 	stw	r2,112(sp)
 80111ec:	d9401b15 	stw	r5,108(sp)
 80111f0:	00c001c4 	movi	r3,7
 80111f4:	1941c20e 	bge	r3,r5,8011900 <___vfiprintf_internal_r+0xd18>
 80111f8:	1002531e 	bne	r2,zero,8011b48 <___vfiprintf_internal_r+0xf60>
 80111fc:	d8001b15 	stw	zero,108(sp)
 8011200:	8c40010c 	andi	r17,r17,4
 8011204:	88023226 	beq	r17,zero,8011ad0 <___vfiprintf_internal_r+0xee8>
 8011208:	d9002517 	ldw	r4,148(sp)
 801120c:	24e3c83a 	sub	r17,r4,r19
 8011210:	04432916 	blt	zero,r17,8011eb8 <___vfiprintf_internal_r+0x12d0>
 8011214:	d8802517 	ldw	r2,148(sp)
 8011218:	14c0010e 	bge	r2,r19,8011220 <___vfiprintf_internal_r+0x638>
 801121c:	9805883a 	mov	r2,r19
 8011220:	d8c02417 	ldw	r3,144(sp)
 8011224:	1887883a 	add	r3,r3,r2
 8011228:	d8c02415 	stw	r3,144(sp)
 801122c:	d8001b15 	stw	zero,108(sp)
 8011230:	d811883a 	mov	r8,sp
 8011234:	003ea006 	br	8010cb8 <___vfiprintf_internal_r+0xd0>
 8011238:	8c400814 	ori	r17,r17,32
 801123c:	b0c00007 	ldb	r3,0(r22)
 8011240:	003ec606 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8011244:	b0c00007 	ldb	r3,0(r22)
 8011248:	00801b04 	movi	r2,108
 801124c:	18832026 	beq	r3,r2,8011ed0 <___vfiprintf_internal_r+0x12e8>
 8011250:	8c400414 	ori	r17,r17,16
 8011254:	003ec106 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8011258:	9cc03fcc 	andi	r19,r19,255
 801125c:	b811883a 	mov	r8,r23
 8011260:	9803981e 	bne	r19,zero,80120c4 <___vfiprintf_internal_r+0x14dc>
 8011264:	8880080c 	andi	r2,r17,32
 8011268:	1002be26 	beq	r2,zero,8011d64 <___vfiprintf_internal_r+0x117c>
 801126c:	d9002217 	ldw	r4,136(sp)
 8011270:	d9402417 	ldw	r5,144(sp)
 8011274:	20800017 	ldw	r2,0(r4)
 8011278:	2807d7fa 	srai	r3,r5,31
 801127c:	21000104 	addi	r4,r4,4
 8011280:	d9002215 	stw	r4,136(sp)
 8011284:	11400015 	stw	r5,0(r2)
 8011288:	10c00115 	stw	r3,4(r2)
 801128c:	003e8a06 	br	8010cb8 <___vfiprintf_internal_r+0xd0>
 8011290:	9cc03fcc 	andi	r19,r19,255
 8011294:	b811883a 	mov	r8,r23
 8011298:	9803871e 	bne	r19,zero,80120b8 <___vfiprintf_internal_r+0x14d0>
 801129c:	8880080c 	andi	r2,r17,32
 80112a0:	10009a26 	beq	r2,zero,801150c <___vfiprintf_internal_r+0x924>
 80112a4:	d9002217 	ldw	r4,136(sp)
 80112a8:	d8001d85 	stb	zero,118(sp)
 80112ac:	20800204 	addi	r2,r4,8
 80112b0:	24c00017 	ldw	r19,0(r4)
 80112b4:	25000117 	ldw	r20,4(r4)
 80112b8:	8002a416 	blt	r16,zero,8011d4c <___vfiprintf_internal_r+0x1164>
 80112bc:	013fdfc4 	movi	r4,-129
 80112c0:	9d06b03a 	or	r3,r19,r20
 80112c4:	d8802215 	stw	r2,136(sp)
 80112c8:	8922703a 	and	r17,r17,r4
 80112cc:	18009b26 	beq	r3,zero,801153c <___vfiprintf_internal_r+0x954>
 80112d0:	002b883a 	mov	r21,zero
 80112d4:	ddc01a04 	addi	r23,sp,104
 80112d8:	9806d0fa 	srli	r3,r19,3
 80112dc:	a008977a 	slli	r4,r20,29
 80112e0:	a028d0fa 	srli	r20,r20,3
 80112e4:	9cc001cc 	andi	r19,r19,7
 80112e8:	98800c04 	addi	r2,r19,48
 80112ec:	bdffffc4 	addi	r23,r23,-1
 80112f0:	20e6b03a 	or	r19,r4,r3
 80112f4:	b8800005 	stb	r2,0(r23)
 80112f8:	9d06b03a 	or	r3,r19,r20
 80112fc:	183ff61e 	bne	r3,zero,80112d8 <___vfiprintf_internal_r+0x6f0>
 8011300:	88c0004c 	andi	r3,r17,1
 8011304:	18021f1e 	bne	r3,zero,8011b84 <___vfiprintf_internal_r+0xf9c>
 8011308:	d9401e17 	ldw	r5,120(sp)
 801130c:	2de9c83a 	sub	r20,r5,r23
 8011310:	003f3806 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011314:	9cc03fcc 	andi	r19,r19,255
 8011318:	b811883a 	mov	r8,r23
 801131c:	98034f1e 	bne	r19,zero,801205c <___vfiprintf_internal_r+0x1474>
 8011320:	008200b4 	movhi	r2,2050
 8011324:	10a85b04 	addi	r2,r2,-24212
 8011328:	d8802615 	stw	r2,152(sp)
 801132c:	8880080c 	andi	r2,r17,32
 8011330:	1000ac26 	beq	r2,zero,80115e4 <___vfiprintf_internal_r+0x9fc>
 8011334:	d9002217 	ldw	r4,136(sp)
 8011338:	24c00017 	ldw	r19,0(r4)
 801133c:	25000117 	ldw	r20,4(r4)
 8011340:	21000204 	addi	r4,r4,8
 8011344:	d9002215 	stw	r4,136(sp)
 8011348:	8880004c 	andi	r2,r17,1
 801134c:	1001e726 	beq	r2,zero,8011aec <___vfiprintf_internal_r+0xf04>
 8011350:	9d04b03a 	or	r2,r19,r20
 8011354:	10025c1e 	bne	r2,zero,8011cc8 <___vfiprintf_internal_r+0x10e0>
 8011358:	d8001d85 	stb	zero,118(sp)
 801135c:	80024416 	blt	r16,zero,8011c70 <___vfiprintf_internal_r+0x1088>
 8011360:	00bfdfc4 	movi	r2,-129
 8011364:	88a2703a 	and	r17,r17,r2
 8011368:	003f1d06 	br	8010fe0 <___vfiprintf_internal_r+0x3f8>
 801136c:	d8c02217 	ldw	r3,136(sp)
 8011370:	04c00044 	movi	r19,1
 8011374:	b811883a 	mov	r8,r23
 8011378:	18800017 	ldw	r2,0(r3)
 801137c:	18c00104 	addi	r3,r3,4
 8011380:	d8001d85 	stb	zero,118(sp)
 8011384:	d8801005 	stb	r2,64(sp)
 8011388:	d8c02215 	stw	r3,136(sp)
 801138c:	9829883a 	mov	r20,r19
 8011390:	ddc01004 	addi	r23,sp,64
 8011394:	0021883a 	mov	r16,zero
 8011398:	003f1e06 	br	8011014 <___vfiprintf_internal_r+0x42c>
 801139c:	9cc03fcc 	andi	r19,r19,255
 80113a0:	b811883a 	mov	r8,r23
 80113a4:	9803331e 	bne	r19,zero,8012074 <___vfiprintf_internal_r+0x148c>
 80113a8:	8880080c 	andi	r2,r17,32
 80113ac:	10004826 	beq	r2,zero,80114d0 <___vfiprintf_internal_r+0x8e8>
 80113b0:	d9002217 	ldw	r4,136(sp)
 80113b4:	20800117 	ldw	r2,4(r4)
 80113b8:	24c00017 	ldw	r19,0(r4)
 80113bc:	21000204 	addi	r4,r4,8
 80113c0:	d9002215 	stw	r4,136(sp)
 80113c4:	1029883a 	mov	r20,r2
 80113c8:	10024c16 	blt	r2,zero,8011cfc <___vfiprintf_internal_r+0x1114>
 80113cc:	dd401d83 	ldbu	r21,118(sp)
 80113d0:	80007116 	blt	r16,zero,8011598 <___vfiprintf_internal_r+0x9b0>
 80113d4:	00ffdfc4 	movi	r3,-129
 80113d8:	9d04b03a 	or	r2,r19,r20
 80113dc:	88e2703a 	and	r17,r17,r3
 80113e0:	1000d126 	beq	r2,zero,8011728 <___vfiprintf_internal_r+0xb40>
 80113e4:	a0023526 	beq	r20,zero,8011cbc <___vfiprintf_internal_r+0x10d4>
 80113e8:	ddc01a04 	addi	r23,sp,104
 80113ec:	4039883a 	mov	fp,r8
 80113f0:	9809883a 	mov	r4,r19
 80113f4:	a00b883a 	mov	r5,r20
 80113f8:	01800284 	movi	r6,10
 80113fc:	000f883a 	mov	r7,zero
 8011400:	8012ef00 	call	8012ef0 <__umoddi3>
 8011404:	10800c04 	addi	r2,r2,48
 8011408:	bdffffc4 	addi	r23,r23,-1
 801140c:	9809883a 	mov	r4,r19
 8011410:	a00b883a 	mov	r5,r20
 8011414:	b8800005 	stb	r2,0(r23)
 8011418:	01800284 	movi	r6,10
 801141c:	000f883a 	mov	r7,zero
 8011420:	80128f40 	call	80128f4 <__udivdi3>
 8011424:	1027883a 	mov	r19,r2
 8011428:	10c4b03a 	or	r2,r2,r3
 801142c:	1829883a 	mov	r20,r3
 8011430:	103fef1e 	bne	r2,zero,80113f0 <___vfiprintf_internal_r+0x808>
 8011434:	d9001e17 	ldw	r4,120(sp)
 8011438:	e011883a 	mov	r8,fp
 801143c:	25e9c83a 	sub	r20,r4,r23
 8011440:	003eec06 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011444:	d8802307 	ldb	r2,140(sp)
 8011448:	1002361e 	bne	r2,zero,8011d24 <___vfiprintf_internal_r+0x113c>
 801144c:	00c00804 	movi	r3,32
 8011450:	d8c02305 	stb	r3,140(sp)
 8011454:	04c00044 	movi	r19,1
 8011458:	b0c00007 	ldb	r3,0(r22)
 801145c:	003e3f06 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8011460:	8c400054 	ori	r17,r17,1
 8011464:	b0c00007 	ldb	r3,0(r22)
 8011468:	003e3c06 	br	8010d5c <___vfiprintf_internal_r+0x174>
 801146c:	8c402014 	ori	r17,r17,128
 8011470:	b0c00007 	ldb	r3,0(r22)
 8011474:	003e3906 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8011478:	dc002715 	stw	r16,156(sp)
 801147c:	d8002515 	stw	zero,148(sp)
 8011480:	1f3ff404 	addi	fp,r3,-48
 8011484:	0009883a 	mov	r4,zero
 8011488:	b021883a 	mov	r16,r22
 801148c:	01400284 	movi	r5,10
 8011490:	80086340 	call	8008634 <__mulsi3>
 8011494:	80c00007 	ldb	r3,0(r16)
 8011498:	e089883a 	add	r4,fp,r2
 801149c:	b5800044 	addi	r22,r22,1
 80114a0:	1f3ff404 	addi	fp,r3,-48
 80114a4:	b021883a 	mov	r16,r22
 80114a8:	af3ff82e 	bgeu	r21,fp,801148c <___vfiprintf_internal_r+0x8a4>
 80114ac:	d9002515 	stw	r4,148(sp)
 80114b0:	dc002717 	ldw	r16,156(sp)
 80114b4:	003e2a06 	br	8010d60 <___vfiprintf_internal_r+0x178>
 80114b8:	9cc03fcc 	andi	r19,r19,255
 80114bc:	b811883a 	mov	r8,r23
 80114c0:	9802e91e 	bne	r19,zero,8012068 <___vfiprintf_internal_r+0x1480>
 80114c4:	8c400414 	ori	r17,r17,16
 80114c8:	8880080c 	andi	r2,r17,32
 80114cc:	103fb81e 	bne	r2,zero,80113b0 <___vfiprintf_internal_r+0x7c8>
 80114d0:	8880040c 	andi	r2,r17,16
 80114d4:	10022e26 	beq	r2,zero,8011d90 <___vfiprintf_internal_r+0x11a8>
 80114d8:	d9402217 	ldw	r5,136(sp)
 80114dc:	2cc00017 	ldw	r19,0(r5)
 80114e0:	29400104 	addi	r5,r5,4
 80114e4:	d9402215 	stw	r5,136(sp)
 80114e8:	9829d7fa 	srai	r20,r19,31
 80114ec:	a005883a 	mov	r2,r20
 80114f0:	003fb506 	br	80113c8 <___vfiprintf_internal_r+0x7e0>
 80114f4:	9cc03fcc 	andi	r19,r19,255
 80114f8:	b811883a 	mov	r8,r23
 80114fc:	9802fa1e 	bne	r19,zero,80120e8 <___vfiprintf_internal_r+0x1500>
 8011500:	8c400414 	ori	r17,r17,16
 8011504:	8880080c 	andi	r2,r17,32
 8011508:	103f661e 	bne	r2,zero,80112a4 <___vfiprintf_internal_r+0x6bc>
 801150c:	8880040c 	andi	r2,r17,16
 8011510:	10020626 	beq	r2,zero,8011d2c <___vfiprintf_internal_r+0x1144>
 8011514:	d9402217 	ldw	r5,136(sp)
 8011518:	d8001d85 	stb	zero,118(sp)
 801151c:	0029883a 	mov	r20,zero
 8011520:	28800104 	addi	r2,r5,4
 8011524:	2cc00017 	ldw	r19,0(r5)
 8011528:	80020816 	blt	r16,zero,8011d4c <___vfiprintf_internal_r+0x1164>
 801152c:	00ffdfc4 	movi	r3,-129
 8011530:	d8802215 	stw	r2,136(sp)
 8011534:	88e2703a 	and	r17,r17,r3
 8011538:	983f651e 	bne	r19,zero,80112d0 <___vfiprintf_internal_r+0x6e8>
 801153c:	002b883a 	mov	r21,zero
 8011540:	8002cf26 	beq	r16,zero,8012080 <___vfiprintf_internal_r+0x1498>
 8011544:	0027883a 	mov	r19,zero
 8011548:	0029883a 	mov	r20,zero
 801154c:	003f6106 	br	80112d4 <___vfiprintf_internal_r+0x6ec>
 8011550:	9cc03fcc 	andi	r19,r19,255
 8011554:	b811883a 	mov	r8,r23
 8011558:	9802e01e 	bne	r19,zero,80120dc <___vfiprintf_internal_r+0x14f4>
 801155c:	8c400414 	ori	r17,r17,16
 8011560:	8880080c 	andi	r2,r17,32
 8011564:	1000641e 	bne	r2,zero,80116f8 <___vfiprintf_internal_r+0xb10>
 8011568:	8880040c 	andi	r2,r17,16
 801156c:	1001c81e 	bne	r2,zero,8011c90 <___vfiprintf_internal_r+0x10a8>
 8011570:	8880100c 	andi	r2,r17,64
 8011574:	d8001d85 	stb	zero,118(sp)
 8011578:	1002281e 	bne	r2,zero,8011e1c <___vfiprintf_internal_r+0x1234>
 801157c:	d9002217 	ldw	r4,136(sp)
 8011580:	0029883a 	mov	r20,zero
 8011584:	20800104 	addi	r2,r4,4
 8011588:	24c00017 	ldw	r19,0(r4)
 801158c:	8001c60e 	bge	r16,zero,8011ca8 <___vfiprintf_internal_r+0x10c0>
 8011590:	d8802215 	stw	r2,136(sp)
 8011594:	002b883a 	mov	r21,zero
 8011598:	9d04b03a 	or	r2,r19,r20
 801159c:	103f911e 	bne	r2,zero,80113e4 <___vfiprintf_internal_r+0x7fc>
 80115a0:	00800044 	movi	r2,1
 80115a4:	10803fcc 	andi	r2,r2,255
 80115a8:	00c00044 	movi	r3,1
 80115ac:	10c05f26 	beq	r2,r3,801172c <___vfiprintf_internal_r+0xb44>
 80115b0:	00c00084 	movi	r3,2
 80115b4:	10ffe31e 	bne	r2,r3,8011544 <___vfiprintf_internal_r+0x95c>
 80115b8:	0027883a 	mov	r19,zero
 80115bc:	0029883a 	mov	r20,zero
 80115c0:	00015106 	br	8011b08 <___vfiprintf_internal_r+0xf20>
 80115c4:	9cc03fcc 	andi	r19,r19,255
 80115c8:	b811883a 	mov	r8,r23
 80115cc:	9802c01e 	bne	r19,zero,80120d0 <___vfiprintf_internal_r+0x14e8>
 80115d0:	014200b4 	movhi	r5,2050
 80115d4:	29685604 	addi	r5,r5,-24232
 80115d8:	d9402615 	stw	r5,152(sp)
 80115dc:	8880080c 	andi	r2,r17,32
 80115e0:	103f541e 	bne	r2,zero,8011334 <___vfiprintf_internal_r+0x74c>
 80115e4:	8880040c 	andi	r2,r17,16
 80115e8:	1001f226 	beq	r2,zero,8011db4 <___vfiprintf_internal_r+0x11cc>
 80115ec:	d9402217 	ldw	r5,136(sp)
 80115f0:	0029883a 	mov	r20,zero
 80115f4:	2cc00017 	ldw	r19,0(r5)
 80115f8:	29400104 	addi	r5,r5,4
 80115fc:	d9402215 	stw	r5,136(sp)
 8011600:	003f5106 	br	8011348 <___vfiprintf_internal_r+0x760>
 8011604:	d8c02217 	ldw	r3,136(sp)
 8011608:	b811883a 	mov	r8,r23
 801160c:	d8001d85 	stb	zero,118(sp)
 8011610:	1dc00017 	ldw	r23,0(r3)
 8011614:	1f000104 	addi	fp,r3,4
 8011618:	b8025926 	beq	r23,zero,8011f80 <___vfiprintf_internal_r+0x1398>
 801161c:	80023316 	blt	r16,zero,8011eec <___vfiprintf_internal_r+0x1304>
 8011620:	800d883a 	mov	r6,r16
 8011624:	000b883a 	mov	r5,zero
 8011628:	b809883a 	mov	r4,r23
 801162c:	da002a15 	stw	r8,168(sp)
 8011630:	800f0c80 	call	800f0c8 <memchr>
 8011634:	da002a17 	ldw	r8,168(sp)
 8011638:	10026826 	beq	r2,zero,8011fdc <___vfiprintf_internal_r+0x13f4>
 801163c:	15e9c83a 	sub	r20,r2,r23
 8011640:	dd401d83 	ldbu	r21,118(sp)
 8011644:	df002215 	stw	fp,136(sp)
 8011648:	0021883a 	mov	r16,zero
 801164c:	003e6906 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011650:	9cc03fcc 	andi	r19,r19,255
 8011654:	b811883a 	mov	r8,r23
 8011658:	983fc126 	beq	r19,zero,8011560 <___vfiprintf_internal_r+0x978>
 801165c:	d8c02303 	ldbu	r3,140(sp)
 8011660:	d8c01d85 	stb	r3,118(sp)
 8011664:	003fbe06 	br	8011560 <___vfiprintf_internal_r+0x978>
 8011668:	d9002217 	ldw	r4,136(sp)
 801166c:	d9402217 	ldw	r5,136(sp)
 8011670:	21000017 	ldw	r4,0(r4)
 8011674:	28800104 	addi	r2,r5,4
 8011678:	d9002515 	stw	r4,148(sp)
 801167c:	203e3d16 	blt	r4,zero,8010f74 <___vfiprintf_internal_r+0x38c>
 8011680:	d8802215 	stw	r2,136(sp)
 8011684:	b0c00007 	ldb	r3,0(r22)
 8011688:	003db406 	br	8010d5c <___vfiprintf_internal_r+0x174>
 801168c:	00c00ac4 	movi	r3,43
 8011690:	d8c02305 	stb	r3,140(sp)
 8011694:	04c00044 	movi	r19,1
 8011698:	b0c00007 	ldb	r3,0(r22)
 801169c:	003daf06 	br	8010d5c <___vfiprintf_internal_r+0x174>
 80116a0:	b0c00007 	ldb	r3,0(r22)
 80116a4:	01000a84 	movi	r4,42
 80116a8:	b4000044 	addi	r16,r22,1
 80116ac:	19025e26 	beq	r3,r4,8012028 <___vfiprintf_internal_r+0x1440>
 80116b0:	1f3ff404 	addi	fp,r3,-48
 80116b4:	0009883a 	mov	r4,zero
 80116b8:	af025236 	bltu	r21,fp,8012004 <___vfiprintf_internal_r+0x141c>
 80116bc:	01400284 	movi	r5,10
 80116c0:	80086340 	call	8008634 <__mulsi3>
 80116c4:	80c00007 	ldb	r3,0(r16)
 80116c8:	1709883a 	add	r4,r2,fp
 80116cc:	85800044 	addi	r22,r16,1
 80116d0:	1f3ff404 	addi	fp,r3,-48
 80116d4:	b021883a 	mov	r16,r22
 80116d8:	af3ff82e 	bgeu	r21,fp,80116bc <___vfiprintf_internal_r+0xad4>
 80116dc:	2021883a 	mov	r16,r4
 80116e0:	203d9f0e 	bge	r4,zero,8010d60 <___vfiprintf_internal_r+0x178>
 80116e4:	043fffc4 	movi	r16,-1
 80116e8:	003d9d06 	br	8010d60 <___vfiprintf_internal_r+0x178>
 80116ec:	8c401014 	ori	r17,r17,64
 80116f0:	b0c00007 	ldb	r3,0(r22)
 80116f4:	003d9906 	br	8010d5c <___vfiprintf_internal_r+0x174>
 80116f8:	d9002217 	ldw	r4,136(sp)
 80116fc:	d8001d85 	stb	zero,118(sp)
 8011700:	20c00204 	addi	r3,r4,8
 8011704:	24c00017 	ldw	r19,0(r4)
 8011708:	25000117 	ldw	r20,4(r4)
 801170c:	8001e716 	blt	r16,zero,8011eac <___vfiprintf_internal_r+0x12c4>
 8011710:	013fdfc4 	movi	r4,-129
 8011714:	9d04b03a 	or	r2,r19,r20
 8011718:	d8c02215 	stw	r3,136(sp)
 801171c:	8922703a 	and	r17,r17,r4
 8011720:	002b883a 	mov	r21,zero
 8011724:	103f2f1e 	bne	r2,zero,80113e4 <___vfiprintf_internal_r+0x7fc>
 8011728:	803e2f26 	beq	r16,zero,8010fe8 <___vfiprintf_internal_r+0x400>
 801172c:	0027883a 	mov	r19,zero
 8011730:	9cc00c04 	addi	r19,r19,48
 8011734:	dcc019c5 	stb	r19,103(sp)
 8011738:	dd002817 	ldw	r20,160(sp)
 801173c:	ddc019c4 	addi	r23,sp,103
 8011740:	003e2c06 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011744:	9cc03fcc 	andi	r19,r19,255
 8011748:	b811883a 	mov	r8,r23
 801174c:	9802571e 	bne	r19,zero,80120ac <___vfiprintf_internal_r+0x14c4>
 8011750:	18005726 	beq	r3,zero,80118b0 <___vfiprintf_internal_r+0xcc8>
 8011754:	04c00044 	movi	r19,1
 8011758:	d8c01005 	stb	r3,64(sp)
 801175c:	d8001d85 	stb	zero,118(sp)
 8011760:	9829883a 	mov	r20,r19
 8011764:	ddc01004 	addi	r23,sp,64
 8011768:	003f0a06 	br	8011394 <___vfiprintf_internal_r+0x7ac>
 801176c:	d9402017 	ldw	r5,128(sp)
 8011770:	d9002117 	ldw	r4,132(sp)
 8011774:	d9801a04 	addi	r6,sp,104
 8011778:	da802a15 	stw	r10,168(sp)
 801177c:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011780:	da802a17 	ldw	r10,168(sp)
 8011784:	1000501e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011788:	d9801b17 	ldw	r6,108(sp)
 801178c:	d8801c17 	ldw	r2,112(sp)
 8011790:	d811883a 	mov	r8,sp
 8011794:	31000044 	addi	r4,r6,1
 8011798:	003e3606 	br	8011074 <___vfiprintf_internal_r+0x48c>
 801179c:	d9001b17 	ldw	r4,108(sp)
 80117a0:	d8801c17 	ldw	r2,112(sp)
 80117a4:	21400044 	addi	r5,r4,1
 80117a8:	d9801d87 	ldb	r6,118(sp)
 80117ac:	303e5226 	beq	r6,zero,80110f8 <___vfiprintf_internal_r+0x510>
 80117b0:	01800044 	movi	r6,1
 80117b4:	d9001d84 	addi	r4,sp,118
 80117b8:	1185883a 	add	r2,r2,r6
 80117bc:	41000015 	stw	r4,0(r8)
 80117c0:	41800115 	stw	r6,4(r8)
 80117c4:	d8801c15 	stw	r2,112(sp)
 80117c8:	d9401b15 	stw	r5,108(sp)
 80117cc:	010001c4 	movi	r4,7
 80117d0:	2140b00e 	bge	r4,r5,8011a94 <___vfiprintf_internal_r+0xeac>
 80117d4:	1000f61e 	bne	r2,zero,8011bb0 <___vfiprintf_internal_r+0xfc8>
 80117d8:	3800b31e 	bne	r7,zero,8011aa8 <___vfiprintf_internal_r+0xec0>
 80117dc:	0009883a 	mov	r4,zero
 80117e0:	300b883a 	mov	r5,r6
 80117e4:	d811883a 	mov	r8,sp
 80117e8:	01802004 	movi	r6,128
 80117ec:	19be5226 	beq	r3,r6,8011138 <___vfiprintf_internal_r+0x550>
 80117f0:	8521c83a 	sub	r16,r16,r20
 80117f4:	043e790e 	bge	zero,r16,80111dc <___vfiprintf_internal_r+0x5f4>
 80117f8:	05400404 	movi	r21,16
 80117fc:	ac01b00e 	bge	r21,r16,8011ec0 <___vfiprintf_internal_r+0x12d8>
 8011800:	014200b4 	movhi	r5,2050
 8011804:	2968bb04 	addi	r5,r5,-23828
 8011808:	d9402315 	stw	r5,140(sp)
 801180c:	070001c4 	movi	fp,7
 8011810:	00000506 	br	8011828 <___vfiprintf_internal_r+0xc40>
 8011814:	21400084 	addi	r5,r4,2
 8011818:	42000204 	addi	r8,r8,8
 801181c:	1809883a 	mov	r4,r3
 8011820:	843ffc04 	addi	r16,r16,-16
 8011824:	ac000d0e 	bge	r21,r16,801185c <___vfiprintf_internal_r+0xc74>
 8011828:	10800404 	addi	r2,r2,16
 801182c:	20c00044 	addi	r3,r4,1
 8011830:	44800015 	stw	r18,0(r8)
 8011834:	45400115 	stw	r21,4(r8)
 8011838:	d8801c15 	stw	r2,112(sp)
 801183c:	d8c01b15 	stw	r3,108(sp)
 8011840:	e0fff40e 	bge	fp,r3,8011814 <___vfiprintf_internal_r+0xc2c>
 8011844:	1000101e 	bne	r2,zero,8011888 <___vfiprintf_internal_r+0xca0>
 8011848:	843ffc04 	addi	r16,r16,-16
 801184c:	01400044 	movi	r5,1
 8011850:	0009883a 	mov	r4,zero
 8011854:	d811883a 	mov	r8,sp
 8011858:	ac3ff316 	blt	r21,r16,8011828 <___vfiprintf_internal_r+0xc40>
 801185c:	d8c02317 	ldw	r3,140(sp)
 8011860:	1405883a 	add	r2,r2,r16
 8011864:	44000115 	stw	r16,4(r8)
 8011868:	40c00015 	stw	r3,0(r8)
 801186c:	d8801c15 	stw	r2,112(sp)
 8011870:	d9401b15 	stw	r5,108(sp)
 8011874:	00c001c4 	movi	r3,7
 8011878:	19401916 	blt	r3,r5,80118e0 <___vfiprintf_internal_r+0xcf8>
 801187c:	42000204 	addi	r8,r8,8
 8011880:	29400044 	addi	r5,r5,1
 8011884:	003e5506 	br	80111dc <___vfiprintf_internal_r+0x5f4>
 8011888:	d9402017 	ldw	r5,128(sp)
 801188c:	d9002117 	ldw	r4,132(sp)
 8011890:	d9801a04 	addi	r6,sp,104
 8011894:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011898:	10000b1e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 801189c:	d9001b17 	ldw	r4,108(sp)
 80118a0:	d8801c17 	ldw	r2,112(sp)
 80118a4:	d811883a 	mov	r8,sp
 80118a8:	21400044 	addi	r5,r4,1
 80118ac:	003fdc06 	br	8011820 <___vfiprintf_internal_r+0xc38>
 80118b0:	d8801c17 	ldw	r2,112(sp)
 80118b4:	10000426 	beq	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 80118b8:	d9402017 	ldw	r5,128(sp)
 80118bc:	d9002117 	ldw	r4,132(sp)
 80118c0:	d9801a04 	addi	r6,sp,104
 80118c4:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 80118c8:	d9402017 	ldw	r5,128(sp)
 80118cc:	2880030b 	ldhu	r2,12(r5)
 80118d0:	1080100c 	andi	r2,r2,64
 80118d4:	10014d1e 	bne	r2,zero,8011e0c <___vfiprintf_internal_r+0x1224>
 80118d8:	d8802417 	ldw	r2,144(sp)
 80118dc:	003d9706 	br	8010f3c <___vfiprintf_internal_r+0x354>
 80118e0:	1000d21e 	bne	r2,zero,8011c2c <___vfiprintf_internal_r+0x1044>
 80118e4:	00c00044 	movi	r3,1
 80118e8:	a005883a 	mov	r2,r20
 80118ec:	ddc00015 	stw	r23,0(sp)
 80118f0:	dd000115 	stw	r20,4(sp)
 80118f4:	dd001c15 	stw	r20,112(sp)
 80118f8:	d8c01b15 	stw	r3,108(sp)
 80118fc:	d811883a 	mov	r8,sp
 8011900:	42000204 	addi	r8,r8,8
 8011904:	8c40010c 	andi	r17,r17,4
 8011908:	88004026 	beq	r17,zero,8011a0c <___vfiprintf_internal_r+0xe24>
 801190c:	d9002517 	ldw	r4,148(sp)
 8011910:	24e3c83a 	sub	r17,r4,r19
 8011914:	04403d0e 	bge	zero,r17,8011a0c <___vfiprintf_internal_r+0xe24>
 8011918:	04000404 	movi	r16,16
 801191c:	8441a90e 	bge	r16,r17,8011fc4 <___vfiprintf_internal_r+0x13dc>
 8011920:	00c200b4 	movhi	r3,2050
 8011924:	18e8bf04 	addi	r3,r3,-23812
 8011928:	d9001b17 	ldw	r4,108(sp)
 801192c:	d8c02315 	stw	r3,140(sp)
 8011930:	050001c4 	movi	r20,7
 8011934:	dd402117 	ldw	r21,132(sp)
 8011938:	ddc02017 	ldw	r23,128(sp)
 801193c:	00000506 	br	8011954 <___vfiprintf_internal_r+0xd6c>
 8011940:	21400084 	addi	r5,r4,2
 8011944:	42000204 	addi	r8,r8,8
 8011948:	1809883a 	mov	r4,r3
 801194c:	8c7ffc04 	addi	r17,r17,-16
 8011950:	84400f0e 	bge	r16,r17,8011990 <___vfiprintf_internal_r+0xda8>
 8011954:	014200b4 	movhi	r5,2050
 8011958:	10800404 	addi	r2,r2,16
 801195c:	20c00044 	addi	r3,r4,1
 8011960:	2968bf04 	addi	r5,r5,-23812
 8011964:	41400015 	stw	r5,0(r8)
 8011968:	44000115 	stw	r16,4(r8)
 801196c:	d8801c15 	stw	r2,112(sp)
 8011970:	d8c01b15 	stw	r3,108(sp)
 8011974:	a0fff20e 	bge	r20,r3,8011940 <___vfiprintf_internal_r+0xd58>
 8011978:	1000141e 	bne	r2,zero,80119cc <___vfiprintf_internal_r+0xde4>
 801197c:	8c7ffc04 	addi	r17,r17,-16
 8011980:	01400044 	movi	r5,1
 8011984:	0009883a 	mov	r4,zero
 8011988:	d811883a 	mov	r8,sp
 801198c:	847ff116 	blt	r16,r17,8011954 <___vfiprintf_internal_r+0xd6c>
 8011990:	d8c02317 	ldw	r3,140(sp)
 8011994:	1445883a 	add	r2,r2,r17
 8011998:	44400115 	stw	r17,4(r8)
 801199c:	40c00015 	stw	r3,0(r8)
 80119a0:	d8801c15 	stw	r2,112(sp)
 80119a4:	d9401b15 	stw	r5,108(sp)
 80119a8:	00c001c4 	movi	r3,7
 80119ac:	1940170e 	bge	r3,r5,8011a0c <___vfiprintf_internal_r+0xe24>
 80119b0:	1000101e 	bne	r2,zero,80119f4 <___vfiprintf_internal_r+0xe0c>
 80119b4:	d8802517 	ldw	r2,148(sp)
 80119b8:	14c11616 	blt	r2,r19,8011e14 <___vfiprintf_internal_r+0x122c>
 80119bc:	d9002417 	ldw	r4,144(sp)
 80119c0:	2089883a 	add	r4,r4,r2
 80119c4:	d9002415 	stw	r4,144(sp)
 80119c8:	003e1806 	br	801122c <___vfiprintf_internal_r+0x644>
 80119cc:	d9801a04 	addi	r6,sp,104
 80119d0:	b80b883a 	mov	r5,r23
 80119d4:	a809883a 	mov	r4,r21
 80119d8:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 80119dc:	103fba1e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 80119e0:	d9001b17 	ldw	r4,108(sp)
 80119e4:	d8801c17 	ldw	r2,112(sp)
 80119e8:	d811883a 	mov	r8,sp
 80119ec:	21400044 	addi	r5,r4,1
 80119f0:	003fd606 	br	801194c <___vfiprintf_internal_r+0xd64>
 80119f4:	d9402017 	ldw	r5,128(sp)
 80119f8:	d9002117 	ldw	r4,132(sp)
 80119fc:	d9801a04 	addi	r6,sp,104
 8011a00:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011a04:	103fb01e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011a08:	d8801c17 	ldw	r2,112(sp)
 8011a0c:	d8c02517 	ldw	r3,148(sp)
 8011a10:	1cc0010e 	bge	r3,r19,8011a18 <___vfiprintf_internal_r+0xe30>
 8011a14:	9807883a 	mov	r3,r19
 8011a18:	d9002417 	ldw	r4,144(sp)
 8011a1c:	20c9883a 	add	r4,r4,r3
 8011a20:	d9002415 	stw	r4,144(sp)
 8011a24:	103e0126 	beq	r2,zero,801122c <___vfiprintf_internal_r+0x644>
 8011a28:	d9402017 	ldw	r5,128(sp)
 8011a2c:	d9002117 	ldw	r4,132(sp)
 8011a30:	d9801a04 	addi	r6,sp,104
 8011a34:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011a38:	103dfc26 	beq	r2,zero,801122c <___vfiprintf_internal_r+0x644>
 8011a3c:	003fa206 	br	80118c8 <___vfiprintf_internal_r+0xce0>
 8011a40:	d9402017 	ldw	r5,128(sp)
 8011a44:	d9002117 	ldw	r4,132(sp)
 8011a48:	d9801a04 	addi	r6,sp,104
 8011a4c:	d9c02b15 	stw	r7,172(sp)
 8011a50:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011a54:	d9c02b17 	ldw	r7,172(sp)
 8011a58:	103f9b1e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011a5c:	d9001b17 	ldw	r4,108(sp)
 8011a60:	d8801c17 	ldw	r2,112(sp)
 8011a64:	d811883a 	mov	r8,sp
 8011a68:	21800044 	addi	r6,r4,1
 8011a6c:	003dbf06 	br	801116c <___vfiprintf_internal_r+0x584>
 8011a70:	1000d81e 	bne	r2,zero,8011dd4 <___vfiprintf_internal_r+0x11ec>
 8011a74:	d9001d87 	ldb	r4,118(sp)
 8011a78:	20000a26 	beq	r4,zero,8011aa4 <___vfiprintf_internal_r+0xebc>
 8011a7c:	00800044 	movi	r2,1
 8011a80:	d9001d84 	addi	r4,sp,118
 8011a84:	100b883a 	mov	r5,r2
 8011a88:	d9000015 	stw	r4,0(sp)
 8011a8c:	d8800115 	stw	r2,4(sp)
 8011a90:	d811883a 	mov	r8,sp
 8011a94:	2809883a 	mov	r4,r5
 8011a98:	42000204 	addi	r8,r8,8
 8011a9c:	29400044 	addi	r5,r5,1
 8011aa0:	003d9506 	br	80110f8 <___vfiprintf_internal_r+0x510>
 8011aa4:	3800fd26 	beq	r7,zero,8011e9c <___vfiprintf_internal_r+0x12b4>
 8011aa8:	00800084 	movi	r2,2
 8011aac:	d9001d04 	addi	r4,sp,116
 8011ab0:	d9000015 	stw	r4,0(sp)
 8011ab4:	d8800115 	stw	r2,4(sp)
 8011ab8:	01400044 	movi	r5,1
 8011abc:	d811883a 	mov	r8,sp
 8011ac0:	2809883a 	mov	r4,r5
 8011ac4:	42000204 	addi	r8,r8,8
 8011ac8:	29400044 	addi	r5,r5,1
 8011acc:	003f4606 	br	80117e8 <___vfiprintf_internal_r+0xc00>
 8011ad0:	d8802517 	ldw	r2,148(sp)
 8011ad4:	14c0010e 	bge	r2,r19,8011adc <___vfiprintf_internal_r+0xef4>
 8011ad8:	9805883a 	mov	r2,r19
 8011adc:	d9402417 	ldw	r5,144(sp)
 8011ae0:	288b883a 	add	r5,r5,r2
 8011ae4:	d9402415 	stw	r5,144(sp)
 8011ae8:	003dd006 	br	801122c <___vfiprintf_internal_r+0x644>
 8011aec:	d8001d85 	stb	zero,118(sp)
 8011af0:	80005d16 	blt	r16,zero,8011c68 <___vfiprintf_internal_r+0x1080>
 8011af4:	00ffdfc4 	movi	r3,-129
 8011af8:	9d04b03a 	or	r2,r19,r20
 8011afc:	88e2703a 	and	r17,r17,r3
 8011b00:	103d3726 	beq	r2,zero,8010fe0 <___vfiprintf_internal_r+0x3f8>
 8011b04:	002b883a 	mov	r21,zero
 8011b08:	d9002617 	ldw	r4,152(sp)
 8011b0c:	ddc01a04 	addi	r23,sp,104
 8011b10:	988003cc 	andi	r2,r19,15
 8011b14:	a006973a 	slli	r3,r20,28
 8011b18:	2085883a 	add	r2,r4,r2
 8011b1c:	9826d13a 	srli	r19,r19,4
 8011b20:	10800003 	ldbu	r2,0(r2)
 8011b24:	a028d13a 	srli	r20,r20,4
 8011b28:	bdffffc4 	addi	r23,r23,-1
 8011b2c:	1ce6b03a 	or	r19,r3,r19
 8011b30:	b8800005 	stb	r2,0(r23)
 8011b34:	9d04b03a 	or	r2,r19,r20
 8011b38:	103ff51e 	bne	r2,zero,8011b10 <___vfiprintf_internal_r+0xf28>
 8011b3c:	d8801e17 	ldw	r2,120(sp)
 8011b40:	15e9c83a 	sub	r20,r2,r23
 8011b44:	003d2b06 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011b48:	d9402017 	ldw	r5,128(sp)
 8011b4c:	d9002117 	ldw	r4,132(sp)
 8011b50:	d9801a04 	addi	r6,sp,104
 8011b54:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011b58:	103f5b1e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011b5c:	d8801c17 	ldw	r2,112(sp)
 8011b60:	d811883a 	mov	r8,sp
 8011b64:	003f6706 	br	8011904 <___vfiprintf_internal_r+0xd1c>
 8011b68:	d9402017 	ldw	r5,128(sp)
 8011b6c:	d9002117 	ldw	r4,132(sp)
 8011b70:	d9801a04 	addi	r6,sp,104
 8011b74:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011b78:	103f531e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011b7c:	d811883a 	mov	r8,sp
 8011b80:	003cd906 	br	8010ee8 <___vfiprintf_internal_r+0x300>
 8011b84:	10803fcc 	andi	r2,r2,255
 8011b88:	1080201c 	xori	r2,r2,128
 8011b8c:	10bfe004 	addi	r2,r2,-128
 8011b90:	00c00c04 	movi	r3,48
 8011b94:	10ffe926 	beq	r2,r3,8011b3c <___vfiprintf_internal_r+0xf54>
 8011b98:	b8ffffc5 	stb	r3,-1(r23)
 8011b9c:	d8c01e17 	ldw	r3,120(sp)
 8011ba0:	b8bfffc4 	addi	r2,r23,-1
 8011ba4:	102f883a 	mov	r23,r2
 8011ba8:	18a9c83a 	sub	r20,r3,r2
 8011bac:	003d1106 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011bb0:	d9402017 	ldw	r5,128(sp)
 8011bb4:	d9002117 	ldw	r4,132(sp)
 8011bb8:	d9801a04 	addi	r6,sp,104
 8011bbc:	d8c02a15 	stw	r3,168(sp)
 8011bc0:	d9c02b15 	stw	r7,172(sp)
 8011bc4:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011bc8:	d8c02a17 	ldw	r3,168(sp)
 8011bcc:	d9c02b17 	ldw	r7,172(sp)
 8011bd0:	103f3d1e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011bd4:	d9001b17 	ldw	r4,108(sp)
 8011bd8:	d8801c17 	ldw	r2,112(sp)
 8011bdc:	d811883a 	mov	r8,sp
 8011be0:	21400044 	addi	r5,r4,1
 8011be4:	003d4406 	br	80110f8 <___vfiprintf_internal_r+0x510>
 8011be8:	d9402017 	ldw	r5,128(sp)
 8011bec:	d9002117 	ldw	r4,132(sp)
 8011bf0:	d9801a04 	addi	r6,sp,104
 8011bf4:	d8c02a15 	stw	r3,168(sp)
 8011bf8:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011bfc:	d8c02a17 	ldw	r3,168(sp)
 8011c00:	103f311e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011c04:	d9001b17 	ldw	r4,108(sp)
 8011c08:	d8801c17 	ldw	r2,112(sp)
 8011c0c:	d811883a 	mov	r8,sp
 8011c10:	21400044 	addi	r5,r4,1
 8011c14:	003ef406 	br	80117e8 <___vfiprintf_internal_r+0xc00>
 8011c18:	1000bd1e 	bne	r2,zero,8011f10 <___vfiprintf_internal_r+0x1328>
 8011c1c:	01400044 	movi	r5,1
 8011c20:	0009883a 	mov	r4,zero
 8011c24:	d811883a 	mov	r8,sp
 8011c28:	003ef106 	br	80117f0 <___vfiprintf_internal_r+0xc08>
 8011c2c:	d9402017 	ldw	r5,128(sp)
 8011c30:	d9002117 	ldw	r4,132(sp)
 8011c34:	d9801a04 	addi	r6,sp,104
 8011c38:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011c3c:	103f221e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011c40:	d9401b17 	ldw	r5,108(sp)
 8011c44:	d8801c17 	ldw	r2,112(sp)
 8011c48:	d811883a 	mov	r8,sp
 8011c4c:	29400044 	addi	r5,r5,1
 8011c50:	003d6206 	br	80111dc <___vfiprintf_internal_r+0x5f4>
 8011c54:	014200b4 	movhi	r5,2050
 8011c58:	29685b04 	addi	r5,r5,-24212
 8011c5c:	d9402615 	stw	r5,152(sp)
 8011c60:	d8c02215 	stw	r3,136(sp)
 8011c64:	1023883a 	mov	r17,r2
 8011c68:	9d04b03a 	or	r2,r19,r20
 8011c6c:	103fa51e 	bne	r2,zero,8011b04 <___vfiprintf_internal_r+0xf1c>
 8011c70:	002b883a 	mov	r21,zero
 8011c74:	00800084 	movi	r2,2
 8011c78:	003e4a06 	br	80115a4 <___vfiprintf_internal_r+0x9bc>
 8011c7c:	014200b4 	movhi	r5,2050
 8011c80:	29685b04 	addi	r5,r5,-24212
 8011c84:	002b883a 	mov	r21,zero
 8011c88:	d9402615 	stw	r5,152(sp)
 8011c8c:	003f9e06 	br	8011b08 <___vfiprintf_internal_r+0xf20>
 8011c90:	d9402217 	ldw	r5,136(sp)
 8011c94:	d8001d85 	stb	zero,118(sp)
 8011c98:	0029883a 	mov	r20,zero
 8011c9c:	28800104 	addi	r2,r5,4
 8011ca0:	2cc00017 	ldw	r19,0(r5)
 8011ca4:	803e3a16 	blt	r16,zero,8011590 <___vfiprintf_internal_r+0x9a8>
 8011ca8:	00ffdfc4 	movi	r3,-129
 8011cac:	d8802215 	stw	r2,136(sp)
 8011cb0:	88e2703a 	and	r17,r17,r3
 8011cb4:	002b883a 	mov	r21,zero
 8011cb8:	983e9b26 	beq	r19,zero,8011728 <___vfiprintf_internal_r+0xb40>
 8011cbc:	00800244 	movi	r2,9
 8011cc0:	14fdc936 	bltu	r2,r19,80113e8 <___vfiprintf_internal_r+0x800>
 8011cc4:	003e9a06 	br	8011730 <___vfiprintf_internal_r+0xb48>
 8011cc8:	00800c04 	movi	r2,48
 8011ccc:	d8c01d45 	stb	r3,117(sp)
 8011cd0:	d8801d05 	stb	r2,116(sp)
 8011cd4:	d8001d85 	stb	zero,118(sp)
 8011cd8:	88c00094 	ori	r3,r17,2
 8011cdc:	80009c16 	blt	r16,zero,8011f50 <___vfiprintf_internal_r+0x1368>
 8011ce0:	00bfdfc4 	movi	r2,-129
 8011ce4:	88a2703a 	and	r17,r17,r2
 8011ce8:	8c400094 	ori	r17,r17,2
 8011cec:	002b883a 	mov	r21,zero
 8011cf0:	003f8506 	br	8011b08 <___vfiprintf_internal_r+0xf20>
 8011cf4:	b029883a 	mov	r20,r22
 8011cf8:	003c0b06 	br	8010d28 <___vfiprintf_internal_r+0x140>
 8011cfc:	04e7c83a 	sub	r19,zero,r19
 8011d00:	05400b44 	movi	r21,45
 8011d04:	9804c03a 	cmpne	r2,r19,zero
 8011d08:	0529c83a 	sub	r20,zero,r20
 8011d0c:	dd401d85 	stb	r21,118(sp)
 8011d10:	a0a9c83a 	sub	r20,r20,r2
 8011d14:	80009716 	blt	r16,zero,8011f74 <___vfiprintf_internal_r+0x138c>
 8011d18:	00bfdfc4 	movi	r2,-129
 8011d1c:	88a2703a 	and	r17,r17,r2
 8011d20:	003db006 	br	80113e4 <___vfiprintf_internal_r+0x7fc>
 8011d24:	b0c00007 	ldb	r3,0(r22)
 8011d28:	003c0c06 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8011d2c:	8880100c 	andi	r2,r17,64
 8011d30:	d8001d85 	stb	zero,118(sp)
 8011d34:	1000461e 	bne	r2,zero,8011e50 <___vfiprintf_internal_r+0x1268>
 8011d38:	d9002217 	ldw	r4,136(sp)
 8011d3c:	0029883a 	mov	r20,zero
 8011d40:	20800104 	addi	r2,r4,4
 8011d44:	24c00017 	ldw	r19,0(r4)
 8011d48:	803df80e 	bge	r16,zero,801152c <___vfiprintf_internal_r+0x944>
 8011d4c:	9d06b03a 	or	r3,r19,r20
 8011d50:	d8802215 	stw	r2,136(sp)
 8011d54:	183d5e1e 	bne	r3,zero,80112d0 <___vfiprintf_internal_r+0x6e8>
 8011d58:	002b883a 	mov	r21,zero
 8011d5c:	0005883a 	mov	r2,zero
 8011d60:	003e1006 	br	80115a4 <___vfiprintf_internal_r+0x9bc>
 8011d64:	8880040c 	andi	r2,r17,16
 8011d68:	1000321e 	bne	r2,zero,8011e34 <___vfiprintf_internal_r+0x124c>
 8011d6c:	8c40100c 	andi	r17,r17,64
 8011d70:	88008d26 	beq	r17,zero,8011fa8 <___vfiprintf_internal_r+0x13c0>
 8011d74:	d9402217 	ldw	r5,136(sp)
 8011d78:	d8c02417 	ldw	r3,144(sp)
 8011d7c:	28800017 	ldw	r2,0(r5)
 8011d80:	29400104 	addi	r5,r5,4
 8011d84:	d9402215 	stw	r5,136(sp)
 8011d88:	10c0000d 	sth	r3,0(r2)
 8011d8c:	003bca06 	br	8010cb8 <___vfiprintf_internal_r+0xd0>
 8011d90:	8880100c 	andi	r2,r17,64
 8011d94:	10003a26 	beq	r2,zero,8011e80 <___vfiprintf_internal_r+0x1298>
 8011d98:	d8802217 	ldw	r2,136(sp)
 8011d9c:	14c0000f 	ldh	r19,0(r2)
 8011da0:	10800104 	addi	r2,r2,4
 8011da4:	d8802215 	stw	r2,136(sp)
 8011da8:	9829d7fa 	srai	r20,r19,31
 8011dac:	a005883a 	mov	r2,r20
 8011db0:	003d8506 	br	80113c8 <___vfiprintf_internal_r+0x7e0>
 8011db4:	8880100c 	andi	r2,r17,64
 8011db8:	10002b26 	beq	r2,zero,8011e68 <___vfiprintf_internal_r+0x1280>
 8011dbc:	d8802217 	ldw	r2,136(sp)
 8011dc0:	0029883a 	mov	r20,zero
 8011dc4:	14c0000b 	ldhu	r19,0(r2)
 8011dc8:	10800104 	addi	r2,r2,4
 8011dcc:	d8802215 	stw	r2,136(sp)
 8011dd0:	003d5d06 	br	8011348 <___vfiprintf_internal_r+0x760>
 8011dd4:	d9402017 	ldw	r5,128(sp)
 8011dd8:	d9002117 	ldw	r4,132(sp)
 8011ddc:	d9801a04 	addi	r6,sp,104
 8011de0:	d8c02a15 	stw	r3,168(sp)
 8011de4:	d9c02b15 	stw	r7,172(sp)
 8011de8:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011dec:	d8c02a17 	ldw	r3,168(sp)
 8011df0:	d9c02b17 	ldw	r7,172(sp)
 8011df4:	103eb41e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011df8:	d9001b17 	ldw	r4,108(sp)
 8011dfc:	d8801c17 	ldw	r2,112(sp)
 8011e00:	d811883a 	mov	r8,sp
 8011e04:	21400044 	addi	r5,r4,1
 8011e08:	003e6706 	br	80117a8 <___vfiprintf_internal_r+0xbc0>
 8011e0c:	00bfffc4 	movi	r2,-1
 8011e10:	003c4a06 	br	8010f3c <___vfiprintf_internal_r+0x354>
 8011e14:	9805883a 	mov	r2,r19
 8011e18:	003ee806 	br	80119bc <___vfiprintf_internal_r+0xdd4>
 8011e1c:	d8c02217 	ldw	r3,136(sp)
 8011e20:	0029883a 	mov	r20,zero
 8011e24:	18800104 	addi	r2,r3,4
 8011e28:	1cc0000b 	ldhu	r19,0(r3)
 8011e2c:	803f9e0e 	bge	r16,zero,8011ca8 <___vfiprintf_internal_r+0x10c0>
 8011e30:	003dd706 	br	8011590 <___vfiprintf_internal_r+0x9a8>
 8011e34:	d8c02217 	ldw	r3,136(sp)
 8011e38:	d9002417 	ldw	r4,144(sp)
 8011e3c:	18800017 	ldw	r2,0(r3)
 8011e40:	18c00104 	addi	r3,r3,4
 8011e44:	d8c02215 	stw	r3,136(sp)
 8011e48:	11000015 	stw	r4,0(r2)
 8011e4c:	003b9a06 	br	8010cb8 <___vfiprintf_internal_r+0xd0>
 8011e50:	d8c02217 	ldw	r3,136(sp)
 8011e54:	0029883a 	mov	r20,zero
 8011e58:	18800104 	addi	r2,r3,4
 8011e5c:	1cc0000b 	ldhu	r19,0(r3)
 8011e60:	803db20e 	bge	r16,zero,801152c <___vfiprintf_internal_r+0x944>
 8011e64:	003fb906 	br	8011d4c <___vfiprintf_internal_r+0x1164>
 8011e68:	d9002217 	ldw	r4,136(sp)
 8011e6c:	0029883a 	mov	r20,zero
 8011e70:	24c00017 	ldw	r19,0(r4)
 8011e74:	21000104 	addi	r4,r4,4
 8011e78:	d9002215 	stw	r4,136(sp)
 8011e7c:	003d3206 	br	8011348 <___vfiprintf_internal_r+0x760>
 8011e80:	d8c02217 	ldw	r3,136(sp)
 8011e84:	1cc00017 	ldw	r19,0(r3)
 8011e88:	18c00104 	addi	r3,r3,4
 8011e8c:	d8c02215 	stw	r3,136(sp)
 8011e90:	9829d7fa 	srai	r20,r19,31
 8011e94:	a005883a 	mov	r2,r20
 8011e98:	003d4b06 	br	80113c8 <___vfiprintf_internal_r+0x7e0>
 8011e9c:	0009883a 	mov	r4,zero
 8011ea0:	01400044 	movi	r5,1
 8011ea4:	d811883a 	mov	r8,sp
 8011ea8:	003e4f06 	br	80117e8 <___vfiprintf_internal_r+0xc00>
 8011eac:	d8c02215 	stw	r3,136(sp)
 8011eb0:	002b883a 	mov	r21,zero
 8011eb4:	003db806 	br	8011598 <___vfiprintf_internal_r+0x9b0>
 8011eb8:	d811883a 	mov	r8,sp
 8011ebc:	003e9606 	br	8011918 <___vfiprintf_internal_r+0xd30>
 8011ec0:	010200b4 	movhi	r4,2050
 8011ec4:	2128bb04 	addi	r4,r4,-23828
 8011ec8:	d9002315 	stw	r4,140(sp)
 8011ecc:	003e6306 	br	801185c <___vfiprintf_internal_r+0xc74>
 8011ed0:	b0c00043 	ldbu	r3,1(r22)
 8011ed4:	8c400814 	ori	r17,r17,32
 8011ed8:	b5800044 	addi	r22,r22,1
 8011edc:	18c03fcc 	andi	r3,r3,255
 8011ee0:	18c0201c 	xori	r3,r3,128
 8011ee4:	18ffe004 	addi	r3,r3,-128
 8011ee8:	003b9c06 	br	8010d5c <___vfiprintf_internal_r+0x174>
 8011eec:	b809883a 	mov	r4,r23
 8011ef0:	da002a15 	stw	r8,168(sp)
 8011ef4:	8009eac0 	call	8009eac <strlen>
 8011ef8:	1029883a 	mov	r20,r2
 8011efc:	dd401d83 	ldbu	r21,118(sp)
 8011f00:	df002215 	stw	fp,136(sp)
 8011f04:	0021883a 	mov	r16,zero
 8011f08:	da002a17 	ldw	r8,168(sp)
 8011f0c:	003c3906 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011f10:	d9402017 	ldw	r5,128(sp)
 8011f14:	d9002117 	ldw	r4,132(sp)
 8011f18:	d9801a04 	addi	r6,sp,104
 8011f1c:	8010ad40 	call	8010ad4 <__sprint_r.part.0>
 8011f20:	103e691e 	bne	r2,zero,80118c8 <___vfiprintf_internal_r+0xce0>
 8011f24:	d9001b17 	ldw	r4,108(sp)
 8011f28:	d8801c17 	ldw	r2,112(sp)
 8011f2c:	d811883a 	mov	r8,sp
 8011f30:	21400044 	addi	r5,r4,1
 8011f34:	003e2e06 	br	80117f0 <___vfiprintf_internal_r+0xc08>
 8011f38:	010200b4 	movhi	r4,2050
 8011f3c:	2128bf04 	addi	r4,r4,-23812
 8011f40:	d9002315 	stw	r4,140(sp)
 8011f44:	d9001b17 	ldw	r4,108(sp)
 8011f48:	21000044 	addi	r4,r4,1
 8011f4c:	003c5e06 	br	80110c8 <___vfiprintf_internal_r+0x4e0>
 8011f50:	002b883a 	mov	r21,zero
 8011f54:	00800084 	movi	r2,2
 8011f58:	10803fcc 	andi	r2,r2,255
 8011f5c:	01000044 	movi	r4,1
 8011f60:	11002b26 	beq	r2,r4,8012010 <___vfiprintf_internal_r+0x1428>
 8011f64:	01000084 	movi	r4,2
 8011f68:	11002b1e 	bne	r2,r4,8012018 <___vfiprintf_internal_r+0x1430>
 8011f6c:	1823883a 	mov	r17,r3
 8011f70:	003ee506 	br	8011b08 <___vfiprintf_internal_r+0xf20>
 8011f74:	8807883a 	mov	r3,r17
 8011f78:	00800044 	movi	r2,1
 8011f7c:	003ff606 	br	8011f58 <___vfiprintf_internal_r+0x1370>
 8011f80:	00800184 	movi	r2,6
 8011f84:	1400012e 	bgeu	r2,r16,8011f8c <___vfiprintf_internal_r+0x13a4>
 8011f88:	1021883a 	mov	r16,r2
 8011f8c:	8029883a 	mov	r20,r16
 8011f90:	8027883a 	mov	r19,r16
 8011f94:	80002216 	blt	r16,zero,8012020 <___vfiprintf_internal_r+0x1438>
 8011f98:	05c200b4 	movhi	r23,2050
 8011f9c:	df002215 	stw	fp,136(sp)
 8011fa0:	bde86004 	addi	r23,r23,-24192
 8011fa4:	003cfb06 	br	8011394 <___vfiprintf_internal_r+0x7ac>
 8011fa8:	d9002217 	ldw	r4,136(sp)
 8011fac:	d9402417 	ldw	r5,144(sp)
 8011fb0:	20800017 	ldw	r2,0(r4)
 8011fb4:	21000104 	addi	r4,r4,4
 8011fb8:	d9002215 	stw	r4,136(sp)
 8011fbc:	11400015 	stw	r5,0(r2)
 8011fc0:	003b3d06 	br	8010cb8 <___vfiprintf_internal_r+0xd0>
 8011fc4:	014200b4 	movhi	r5,2050
 8011fc8:	2968bf04 	addi	r5,r5,-23812
 8011fcc:	d9402315 	stw	r5,140(sp)
 8011fd0:	d9401b17 	ldw	r5,108(sp)
 8011fd4:	29400044 	addi	r5,r5,1
 8011fd8:	003e6d06 	br	8011990 <___vfiprintf_internal_r+0xda8>
 8011fdc:	8029883a 	mov	r20,r16
 8011fe0:	dd401d83 	ldbu	r21,118(sp)
 8011fe4:	df002215 	stw	fp,136(sp)
 8011fe8:	0021883a 	mov	r16,zero
 8011fec:	003c0106 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 8011ff0:	00c200b4 	movhi	r3,2050
 8011ff4:	18e8bb04 	addi	r3,r3,-23828
 8011ff8:	d8c02315 	stw	r3,140(sp)
 8011ffc:	280d883a 	mov	r6,r5
 8012000:	003c6906 	br	80111a8 <___vfiprintf_internal_r+0x5c0>
 8012004:	802d883a 	mov	r22,r16
 8012008:	0021883a 	mov	r16,zero
 801200c:	003b5406 	br	8010d60 <___vfiprintf_internal_r+0x178>
 8012010:	1823883a 	mov	r17,r3
 8012014:	003cf306 	br	80113e4 <___vfiprintf_internal_r+0x7fc>
 8012018:	1823883a 	mov	r17,r3
 801201c:	003cad06 	br	80112d4 <___vfiprintf_internal_r+0x6ec>
 8012020:	0027883a 	mov	r19,zero
 8012024:	003fdc06 	br	8011f98 <___vfiprintf_internal_r+0x13b0>
 8012028:	d9402217 	ldw	r5,136(sp)
 801202c:	8005883a 	mov	r2,r16
 8012030:	b0c00043 	ldbu	r3,1(r22)
 8012034:	2c000017 	ldw	r16,0(r5)
 8012038:	29000104 	addi	r4,r5,4
 801203c:	d9002215 	stw	r4,136(sp)
 8012040:	102d883a 	mov	r22,r2
 8012044:	803fa50e 	bge	r16,zero,8011edc <___vfiprintf_internal_r+0x12f4>
 8012048:	18c03fcc 	andi	r3,r3,255
 801204c:	18c0201c 	xori	r3,r3,128
 8012050:	043fffc4 	movi	r16,-1
 8012054:	18ffe004 	addi	r3,r3,-128
 8012058:	003b4006 	br	8010d5c <___vfiprintf_internal_r+0x174>
 801205c:	d9402303 	ldbu	r5,140(sp)
 8012060:	d9401d85 	stb	r5,118(sp)
 8012064:	003cae06 	br	8011320 <___vfiprintf_internal_r+0x738>
 8012068:	d8c02303 	ldbu	r3,140(sp)
 801206c:	d8c01d85 	stb	r3,118(sp)
 8012070:	003d1406 	br	80114c4 <___vfiprintf_internal_r+0x8dc>
 8012074:	d8c02303 	ldbu	r3,140(sp)
 8012078:	d8c01d85 	stb	r3,118(sp)
 801207c:	003cca06 	br	80113a8 <___vfiprintf_internal_r+0x7c0>
 8012080:	8880004c 	andi	r2,r17,1
 8012084:	002b883a 	mov	r21,zero
 8012088:	10000526 	beq	r2,zero,80120a0 <___vfiprintf_internal_r+0x14b8>
 801208c:	00800c04 	movi	r2,48
 8012090:	d88019c5 	stb	r2,103(sp)
 8012094:	dd002817 	ldw	r20,160(sp)
 8012098:	ddc019c4 	addi	r23,sp,103
 801209c:	003bd506 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 80120a0:	0029883a 	mov	r20,zero
 80120a4:	ddc01a04 	addi	r23,sp,104
 80120a8:	003bd206 	br	8010ff4 <___vfiprintf_internal_r+0x40c>
 80120ac:	d9002303 	ldbu	r4,140(sp)
 80120b0:	d9001d85 	stb	r4,118(sp)
 80120b4:	003da606 	br	8011750 <___vfiprintf_internal_r+0xb68>
 80120b8:	d8c02303 	ldbu	r3,140(sp)
 80120bc:	d8c01d85 	stb	r3,118(sp)
 80120c0:	003c7606 	br	801129c <___vfiprintf_internal_r+0x6b4>
 80120c4:	d8c02303 	ldbu	r3,140(sp)
 80120c8:	d8c01d85 	stb	r3,118(sp)
 80120cc:	003c6506 	br	8011264 <___vfiprintf_internal_r+0x67c>
 80120d0:	d9002303 	ldbu	r4,140(sp)
 80120d4:	d9001d85 	stb	r4,118(sp)
 80120d8:	003d3d06 	br	80115d0 <___vfiprintf_internal_r+0x9e8>
 80120dc:	d8c02303 	ldbu	r3,140(sp)
 80120e0:	d8c01d85 	stb	r3,118(sp)
 80120e4:	003d1d06 	br	801155c <___vfiprintf_internal_r+0x974>
 80120e8:	d8c02303 	ldbu	r3,140(sp)
 80120ec:	d8c01d85 	stb	r3,118(sp)
 80120f0:	003d0306 	br	8011500 <___vfiprintf_internal_r+0x918>

080120f4 <__vfiprintf_internal>:
 80120f4:	008200b4 	movhi	r2,2050
 80120f8:	10b14b04 	addi	r2,r2,-15060
 80120fc:	300f883a 	mov	r7,r6
 8012100:	280d883a 	mov	r6,r5
 8012104:	200b883a 	mov	r5,r4
 8012108:	11000017 	ldw	r4,0(r2)
 801210c:	8010be81 	jmpi	8010be8 <___vfiprintf_internal_r>

08012110 <__sbprintf>:
 8012110:	2880030b 	ldhu	r2,12(r5)
 8012114:	2ac01917 	ldw	r11,100(r5)
 8012118:	2a80038b 	ldhu	r10,14(r5)
 801211c:	2a400717 	ldw	r9,28(r5)
 8012120:	2a000917 	ldw	r8,36(r5)
 8012124:	defee204 	addi	sp,sp,-1144
 8012128:	00c10004 	movi	r3,1024
 801212c:	dc011a15 	stw	r16,1128(sp)
 8012130:	10bfff4c 	andi	r2,r2,65533
 8012134:	2821883a 	mov	r16,r5
 8012138:	d8cb883a 	add	r5,sp,r3
 801213c:	dc811c15 	stw	r18,1136(sp)
 8012140:	dc411b15 	stw	r17,1132(sp)
 8012144:	dfc11d15 	stw	ra,1140(sp)
 8012148:	2025883a 	mov	r18,r4
 801214c:	d881030d 	sth	r2,1036(sp)
 8012150:	dac11915 	stw	r11,1124(sp)
 8012154:	da81038d 	sth	r10,1038(sp)
 8012158:	da410715 	stw	r9,1052(sp)
 801215c:	da010915 	stw	r8,1060(sp)
 8012160:	dec10015 	stw	sp,1024(sp)
 8012164:	dec10415 	stw	sp,1040(sp)
 8012168:	d8c10215 	stw	r3,1032(sp)
 801216c:	d8c10515 	stw	r3,1044(sp)
 8012170:	d8010615 	stw	zero,1048(sp)
 8012174:	8010be80 	call	8010be8 <___vfiprintf_internal_r>
 8012178:	1023883a 	mov	r17,r2
 801217c:	10000416 	blt	r2,zero,8012190 <__sbprintf+0x80>
 8012180:	d9410004 	addi	r5,sp,1024
 8012184:	9009883a 	mov	r4,r18
 8012188:	800dfcc0 	call	800dfcc <_fflush_r>
 801218c:	10000d1e 	bne	r2,zero,80121c4 <__sbprintf+0xb4>
 8012190:	d881030b 	ldhu	r2,1036(sp)
 8012194:	1080100c 	andi	r2,r2,64
 8012198:	10000326 	beq	r2,zero,80121a8 <__sbprintf+0x98>
 801219c:	8080030b 	ldhu	r2,12(r16)
 80121a0:	10801014 	ori	r2,r2,64
 80121a4:	8080030d 	sth	r2,12(r16)
 80121a8:	8805883a 	mov	r2,r17
 80121ac:	dfc11d17 	ldw	ra,1140(sp)
 80121b0:	dc811c17 	ldw	r18,1136(sp)
 80121b4:	dc411b17 	ldw	r17,1132(sp)
 80121b8:	dc011a17 	ldw	r16,1128(sp)
 80121bc:	dec11e04 	addi	sp,sp,1144
 80121c0:	f800283a 	ret
 80121c4:	047fffc4 	movi	r17,-1
 80121c8:	003ff106 	br	8012190 <__sbprintf+0x80>

080121cc <_calloc_r>:
 80121cc:	defffe04 	addi	sp,sp,-8
 80121d0:	2805883a 	mov	r2,r5
 80121d4:	dc000015 	stw	r16,0(sp)
 80121d8:	300b883a 	mov	r5,r6
 80121dc:	2021883a 	mov	r16,r4
 80121e0:	1009883a 	mov	r4,r2
 80121e4:	dfc00115 	stw	ra,4(sp)
 80121e8:	80086340 	call	8008634 <__mulsi3>
 80121ec:	100b883a 	mov	r5,r2
 80121f0:	8009883a 	mov	r4,r16
 80121f4:	8008f100 	call	8008f10 <_malloc_r>
 80121f8:	10002926 	beq	r2,zero,80122a0 <_calloc_r+0xd4>
 80121fc:	11bfff17 	ldw	r6,-4(r2)
 8012200:	1021883a 	mov	r16,r2
 8012204:	00bfff04 	movi	r2,-4
 8012208:	308c703a 	and	r6,r6,r2
 801220c:	00c00904 	movi	r3,36
 8012210:	308d883a 	add	r6,r6,r2
 8012214:	19801636 	bltu	r3,r6,8012270 <_calloc_r+0xa4>
 8012218:	008004c4 	movi	r2,19
 801221c:	11800b2e 	bgeu	r2,r6,801224c <_calloc_r+0x80>
 8012220:	80000015 	stw	zero,0(r16)
 8012224:	80000115 	stw	zero,4(r16)
 8012228:	008006c4 	movi	r2,27
 801222c:	11801a2e 	bgeu	r2,r6,8012298 <_calloc_r+0xcc>
 8012230:	80000215 	stw	zero,8(r16)
 8012234:	80000315 	stw	zero,12(r16)
 8012238:	30c0151e 	bne	r6,r3,8012290 <_calloc_r+0xc4>
 801223c:	80000415 	stw	zero,16(r16)
 8012240:	80800604 	addi	r2,r16,24
 8012244:	80000515 	stw	zero,20(r16)
 8012248:	00000106 	br	8012250 <_calloc_r+0x84>
 801224c:	8005883a 	mov	r2,r16
 8012250:	10000015 	stw	zero,0(r2)
 8012254:	10000115 	stw	zero,4(r2)
 8012258:	10000215 	stw	zero,8(r2)
 801225c:	8005883a 	mov	r2,r16
 8012260:	dfc00117 	ldw	ra,4(sp)
 8012264:	dc000017 	ldw	r16,0(sp)
 8012268:	dec00204 	addi	sp,sp,8
 801226c:	f800283a 	ret
 8012270:	000b883a 	mov	r5,zero
 8012274:	8009883a 	mov	r4,r16
 8012278:	80098640 	call	8009864 <memset>
 801227c:	8005883a 	mov	r2,r16
 8012280:	dfc00117 	ldw	ra,4(sp)
 8012284:	dc000017 	ldw	r16,0(sp)
 8012288:	dec00204 	addi	sp,sp,8
 801228c:	f800283a 	ret
 8012290:	80800404 	addi	r2,r16,16
 8012294:	003fee06 	br	8012250 <_calloc_r+0x84>
 8012298:	80800204 	addi	r2,r16,8
 801229c:	003fec06 	br	8012250 <_calloc_r+0x84>
 80122a0:	0005883a 	mov	r2,zero
 80122a4:	003fee06 	br	8012260 <_calloc_r+0x94>

080122a8 <_fclose_r>:
 80122a8:	28003926 	beq	r5,zero,8012390 <_fclose_r+0xe8>
 80122ac:	defffc04 	addi	sp,sp,-16
 80122b0:	dc400115 	stw	r17,4(sp)
 80122b4:	dc000015 	stw	r16,0(sp)
 80122b8:	dfc00315 	stw	ra,12(sp)
 80122bc:	dc800215 	stw	r18,8(sp)
 80122c0:	2023883a 	mov	r17,r4
 80122c4:	2821883a 	mov	r16,r5
 80122c8:	20000226 	beq	r4,zero,80122d4 <_fclose_r+0x2c>
 80122cc:	20800e17 	ldw	r2,56(r4)
 80122d0:	10002726 	beq	r2,zero,8012370 <_fclose_r+0xc8>
 80122d4:	8080030f 	ldh	r2,12(r16)
 80122d8:	1000071e 	bne	r2,zero,80122f8 <_fclose_r+0x50>
 80122dc:	0005883a 	mov	r2,zero
 80122e0:	dfc00317 	ldw	ra,12(sp)
 80122e4:	dc800217 	ldw	r18,8(sp)
 80122e8:	dc400117 	ldw	r17,4(sp)
 80122ec:	dc000017 	ldw	r16,0(sp)
 80122f0:	dec00404 	addi	sp,sp,16
 80122f4:	f800283a 	ret
 80122f8:	800b883a 	mov	r5,r16
 80122fc:	8809883a 	mov	r4,r17
 8012300:	800ddb00 	call	800ddb0 <__sflush_r>
 8012304:	1025883a 	mov	r18,r2
 8012308:	80800b17 	ldw	r2,44(r16)
 801230c:	10000426 	beq	r2,zero,8012320 <_fclose_r+0x78>
 8012310:	81400717 	ldw	r5,28(r16)
 8012314:	8809883a 	mov	r4,r17
 8012318:	103ee83a 	callr	r2
 801231c:	10001616 	blt	r2,zero,8012378 <_fclose_r+0xd0>
 8012320:	8080030b 	ldhu	r2,12(r16)
 8012324:	1080200c 	andi	r2,r2,128
 8012328:	1000151e 	bne	r2,zero,8012380 <_fclose_r+0xd8>
 801232c:	81400c17 	ldw	r5,48(r16)
 8012330:	28000526 	beq	r5,zero,8012348 <_fclose_r+0xa0>
 8012334:	80801004 	addi	r2,r16,64
 8012338:	28800226 	beq	r5,r2,8012344 <_fclose_r+0x9c>
 801233c:	8809883a 	mov	r4,r17
 8012340:	800e5d80 	call	800e5d8 <_free_r>
 8012344:	80000c15 	stw	zero,48(r16)
 8012348:	81401117 	ldw	r5,68(r16)
 801234c:	28000326 	beq	r5,zero,801235c <_fclose_r+0xb4>
 8012350:	8809883a 	mov	r4,r17
 8012354:	800e5d80 	call	800e5d8 <_free_r>
 8012358:	80001115 	stw	zero,68(r16)
 801235c:	800e3c80 	call	800e3c8 <__sfp_lock_acquire>
 8012360:	8000030d 	sth	zero,12(r16)
 8012364:	800e3cc0 	call	800e3cc <__sfp_lock_release>
 8012368:	9005883a 	mov	r2,r18
 801236c:	003fdc06 	br	80122e0 <_fclose_r+0x38>
 8012370:	800e3b80 	call	800e3b8 <__sinit>
 8012374:	003fd706 	br	80122d4 <_fclose_r+0x2c>
 8012378:	04bfffc4 	movi	r18,-1
 801237c:	003fe806 	br	8012320 <_fclose_r+0x78>
 8012380:	81400417 	ldw	r5,16(r16)
 8012384:	8809883a 	mov	r4,r17
 8012388:	800e5d80 	call	800e5d8 <_free_r>
 801238c:	003fe706 	br	801232c <_fclose_r+0x84>
 8012390:	0005883a 	mov	r2,zero
 8012394:	f800283a 	ret

08012398 <fclose>:
 8012398:	008200b4 	movhi	r2,2050
 801239c:	10b14b04 	addi	r2,r2,-15060
 80123a0:	200b883a 	mov	r5,r4
 80123a4:	11000017 	ldw	r4,0(r2)
 80123a8:	80122a81 	jmpi	80122a8 <_fclose_r>

080123ac <__fputwc>:
 80123ac:	defff804 	addi	sp,sp,-32
 80123b0:	dcc00415 	stw	r19,16(sp)
 80123b4:	dc800315 	stw	r18,12(sp)
 80123b8:	dc000115 	stw	r16,4(sp)
 80123bc:	dfc00715 	stw	ra,28(sp)
 80123c0:	dd400615 	stw	r21,24(sp)
 80123c4:	dd000515 	stw	r20,20(sp)
 80123c8:	dc400215 	stw	r17,8(sp)
 80123cc:	2027883a 	mov	r19,r4
 80123d0:	2825883a 	mov	r18,r5
 80123d4:	3021883a 	mov	r16,r6
 80123d8:	800f0140 	call	800f014 <__locale_mb_cur_max>
 80123dc:	00c00044 	movi	r3,1
 80123e0:	10c03e26 	beq	r2,r3,80124dc <__fputwc+0x130>
 80123e4:	81c01704 	addi	r7,r16,92
 80123e8:	900d883a 	mov	r6,r18
 80123ec:	d80b883a 	mov	r5,sp
 80123f0:	9809883a 	mov	r4,r19
 80123f4:	801270c0 	call	801270c <_wcrtomb_r>
 80123f8:	1029883a 	mov	r20,r2
 80123fc:	00bfffc4 	movi	r2,-1
 8012400:	a0802026 	beq	r20,r2,8012484 <__fputwc+0xd8>
 8012404:	d9400003 	ldbu	r5,0(sp)
 8012408:	a0001c26 	beq	r20,zero,801247c <__fputwc+0xd0>
 801240c:	0023883a 	mov	r17,zero
 8012410:	05400284 	movi	r21,10
 8012414:	00000906 	br	801243c <__fputwc+0x90>
 8012418:	80800017 	ldw	r2,0(r16)
 801241c:	11400005 	stb	r5,0(r2)
 8012420:	80c00017 	ldw	r3,0(r16)
 8012424:	18c00044 	addi	r3,r3,1
 8012428:	80c00015 	stw	r3,0(r16)
 801242c:	8c400044 	addi	r17,r17,1
 8012430:	dc45883a 	add	r2,sp,r17
 8012434:	8d00112e 	bgeu	r17,r20,801247c <__fputwc+0xd0>
 8012438:	11400003 	ldbu	r5,0(r2)
 801243c:	80c00217 	ldw	r3,8(r16)
 8012440:	18ffffc4 	addi	r3,r3,-1
 8012444:	80c00215 	stw	r3,8(r16)
 8012448:	183ff30e 	bge	r3,zero,8012418 <__fputwc+0x6c>
 801244c:	80800617 	ldw	r2,24(r16)
 8012450:	18801916 	blt	r3,r2,80124b8 <__fputwc+0x10c>
 8012454:	80800017 	ldw	r2,0(r16)
 8012458:	11400005 	stb	r5,0(r2)
 801245c:	80800017 	ldw	r2,0(r16)
 8012460:	10c00003 	ldbu	r3,0(r2)
 8012464:	10800044 	addi	r2,r2,1
 8012468:	1d402326 	beq	r3,r21,80124f8 <__fputwc+0x14c>
 801246c:	80800015 	stw	r2,0(r16)
 8012470:	8c400044 	addi	r17,r17,1
 8012474:	dc45883a 	add	r2,sp,r17
 8012478:	8d3fef36 	bltu	r17,r20,8012438 <__fputwc+0x8c>
 801247c:	9005883a 	mov	r2,r18
 8012480:	00000406 	br	8012494 <__fputwc+0xe8>
 8012484:	80c0030b 	ldhu	r3,12(r16)
 8012488:	a005883a 	mov	r2,r20
 801248c:	18c01014 	ori	r3,r3,64
 8012490:	80c0030d 	sth	r3,12(r16)
 8012494:	dfc00717 	ldw	ra,28(sp)
 8012498:	dd400617 	ldw	r21,24(sp)
 801249c:	dd000517 	ldw	r20,20(sp)
 80124a0:	dcc00417 	ldw	r19,16(sp)
 80124a4:	dc800317 	ldw	r18,12(sp)
 80124a8:	dc400217 	ldw	r17,8(sp)
 80124ac:	dc000117 	ldw	r16,4(sp)
 80124b0:	dec00804 	addi	sp,sp,32
 80124b4:	f800283a 	ret
 80124b8:	800d883a 	mov	r6,r16
 80124bc:	29403fcc 	andi	r5,r5,255
 80124c0:	9809883a 	mov	r4,r19
 80124c4:	80125b40 	call	80125b4 <__swbuf_r>
 80124c8:	10bfffe0 	cmpeqi	r2,r2,-1
 80124cc:	10803fcc 	andi	r2,r2,255
 80124d0:	103fd626 	beq	r2,zero,801242c <__fputwc+0x80>
 80124d4:	00bfffc4 	movi	r2,-1
 80124d8:	003fee06 	br	8012494 <__fputwc+0xe8>
 80124dc:	90ffffc4 	addi	r3,r18,-1
 80124e0:	01003f84 	movi	r4,254
 80124e4:	20ffbf36 	bltu	r4,r3,80123e4 <__fputwc+0x38>
 80124e8:	900b883a 	mov	r5,r18
 80124ec:	dc800005 	stb	r18,0(sp)
 80124f0:	1029883a 	mov	r20,r2
 80124f4:	003fc506 	br	801240c <__fputwc+0x60>
 80124f8:	800d883a 	mov	r6,r16
 80124fc:	a80b883a 	mov	r5,r21
 8012500:	9809883a 	mov	r4,r19
 8012504:	80125b40 	call	80125b4 <__swbuf_r>
 8012508:	10bfffe0 	cmpeqi	r2,r2,-1
 801250c:	003fef06 	br	80124cc <__fputwc+0x120>

08012510 <_fputwc_r>:
 8012510:	3080030b 	ldhu	r2,12(r6)
 8012514:	10c8000c 	andi	r3,r2,8192
 8012518:	1800051e 	bne	r3,zero,8012530 <_fputwc_r+0x20>
 801251c:	30c01917 	ldw	r3,100(r6)
 8012520:	10880014 	ori	r2,r2,8192
 8012524:	3080030d 	sth	r2,12(r6)
 8012528:	18880014 	ori	r2,r3,8192
 801252c:	30801915 	stw	r2,100(r6)
 8012530:	80123ac1 	jmpi	80123ac <__fputwc>

08012534 <fputwc>:
 8012534:	008200b4 	movhi	r2,2050
 8012538:	defffc04 	addi	sp,sp,-16
 801253c:	10b14b04 	addi	r2,r2,-15060
 8012540:	dc000115 	stw	r16,4(sp)
 8012544:	14000017 	ldw	r16,0(r2)
 8012548:	dc400215 	stw	r17,8(sp)
 801254c:	dfc00315 	stw	ra,12(sp)
 8012550:	2023883a 	mov	r17,r4
 8012554:	80000226 	beq	r16,zero,8012560 <fputwc+0x2c>
 8012558:	80800e17 	ldw	r2,56(r16)
 801255c:	10001026 	beq	r2,zero,80125a0 <fputwc+0x6c>
 8012560:	2880030b 	ldhu	r2,12(r5)
 8012564:	10c8000c 	andi	r3,r2,8192
 8012568:	1800051e 	bne	r3,zero,8012580 <fputwc+0x4c>
 801256c:	28c01917 	ldw	r3,100(r5)
 8012570:	10880014 	ori	r2,r2,8192
 8012574:	2880030d 	sth	r2,12(r5)
 8012578:	18880014 	ori	r2,r3,8192
 801257c:	28801915 	stw	r2,100(r5)
 8012580:	280d883a 	mov	r6,r5
 8012584:	8009883a 	mov	r4,r16
 8012588:	880b883a 	mov	r5,r17
 801258c:	dfc00317 	ldw	ra,12(sp)
 8012590:	dc400217 	ldw	r17,8(sp)
 8012594:	dc000117 	ldw	r16,4(sp)
 8012598:	dec00404 	addi	sp,sp,16
 801259c:	80123ac1 	jmpi	80123ac <__fputwc>
 80125a0:	8009883a 	mov	r4,r16
 80125a4:	d9400015 	stw	r5,0(sp)
 80125a8:	800e3b80 	call	800e3b8 <__sinit>
 80125ac:	d9400017 	ldw	r5,0(sp)
 80125b0:	003feb06 	br	8012560 <fputwc+0x2c>

080125b4 <__swbuf_r>:
 80125b4:	defffb04 	addi	sp,sp,-20
 80125b8:	dcc00315 	stw	r19,12(sp)
 80125bc:	dc800215 	stw	r18,8(sp)
 80125c0:	dc000015 	stw	r16,0(sp)
 80125c4:	dfc00415 	stw	ra,16(sp)
 80125c8:	dc400115 	stw	r17,4(sp)
 80125cc:	2025883a 	mov	r18,r4
 80125d0:	2827883a 	mov	r19,r5
 80125d4:	3021883a 	mov	r16,r6
 80125d8:	20000226 	beq	r4,zero,80125e4 <__swbuf_r+0x30>
 80125dc:	20800e17 	ldw	r2,56(r4)
 80125e0:	10004226 	beq	r2,zero,80126ec <__swbuf_r+0x138>
 80125e4:	80800617 	ldw	r2,24(r16)
 80125e8:	8100030b 	ldhu	r4,12(r16)
 80125ec:	80800215 	stw	r2,8(r16)
 80125f0:	2080020c 	andi	r2,r4,8
 80125f4:	10003626 	beq	r2,zero,80126d0 <__swbuf_r+0x11c>
 80125f8:	80c00417 	ldw	r3,16(r16)
 80125fc:	18003426 	beq	r3,zero,80126d0 <__swbuf_r+0x11c>
 8012600:	2088000c 	andi	r2,r4,8192
 8012604:	9c403fcc 	andi	r17,r19,255
 8012608:	10001a26 	beq	r2,zero,8012674 <__swbuf_r+0xc0>
 801260c:	80800017 	ldw	r2,0(r16)
 8012610:	81000517 	ldw	r4,20(r16)
 8012614:	10c7c83a 	sub	r3,r2,r3
 8012618:	1900200e 	bge	r3,r4,801269c <__swbuf_r+0xe8>
 801261c:	18c00044 	addi	r3,r3,1
 8012620:	81000217 	ldw	r4,8(r16)
 8012624:	11400044 	addi	r5,r2,1
 8012628:	81400015 	stw	r5,0(r16)
 801262c:	213fffc4 	addi	r4,r4,-1
 8012630:	81000215 	stw	r4,8(r16)
 8012634:	14c00005 	stb	r19,0(r2)
 8012638:	80800517 	ldw	r2,20(r16)
 801263c:	10c01e26 	beq	r2,r3,80126b8 <__swbuf_r+0x104>
 8012640:	8080030b 	ldhu	r2,12(r16)
 8012644:	1080004c 	andi	r2,r2,1
 8012648:	10000226 	beq	r2,zero,8012654 <__swbuf_r+0xa0>
 801264c:	00800284 	movi	r2,10
 8012650:	88801926 	beq	r17,r2,80126b8 <__swbuf_r+0x104>
 8012654:	8805883a 	mov	r2,r17
 8012658:	dfc00417 	ldw	ra,16(sp)
 801265c:	dcc00317 	ldw	r19,12(sp)
 8012660:	dc800217 	ldw	r18,8(sp)
 8012664:	dc400117 	ldw	r17,4(sp)
 8012668:	dc000017 	ldw	r16,0(sp)
 801266c:	dec00504 	addi	sp,sp,20
 8012670:	f800283a 	ret
 8012674:	81401917 	ldw	r5,100(r16)
 8012678:	00b7ffc4 	movi	r2,-8193
 801267c:	21080014 	ori	r4,r4,8192
 8012680:	2884703a 	and	r2,r5,r2
 8012684:	80801915 	stw	r2,100(r16)
 8012688:	80800017 	ldw	r2,0(r16)
 801268c:	8100030d 	sth	r4,12(r16)
 8012690:	81000517 	ldw	r4,20(r16)
 8012694:	10c7c83a 	sub	r3,r2,r3
 8012698:	193fe016 	blt	r3,r4,801261c <__swbuf_r+0x68>
 801269c:	800b883a 	mov	r5,r16
 80126a0:	9009883a 	mov	r4,r18
 80126a4:	800dfcc0 	call	800dfcc <_fflush_r>
 80126a8:	1000071e 	bne	r2,zero,80126c8 <__swbuf_r+0x114>
 80126ac:	80800017 	ldw	r2,0(r16)
 80126b0:	00c00044 	movi	r3,1
 80126b4:	003fda06 	br	8012620 <__swbuf_r+0x6c>
 80126b8:	800b883a 	mov	r5,r16
 80126bc:	9009883a 	mov	r4,r18
 80126c0:	800dfcc0 	call	800dfcc <_fflush_r>
 80126c4:	103fe326 	beq	r2,zero,8012654 <__swbuf_r+0xa0>
 80126c8:	00bfffc4 	movi	r2,-1
 80126cc:	003fe206 	br	8012658 <__swbuf_r+0xa4>
 80126d0:	800b883a 	mov	r5,r16
 80126d4:	9009883a 	mov	r4,r18
 80126d8:	800c3580 	call	800c358 <__swsetup_r>
 80126dc:	103ffa1e 	bne	r2,zero,80126c8 <__swbuf_r+0x114>
 80126e0:	8100030b 	ldhu	r4,12(r16)
 80126e4:	80c00417 	ldw	r3,16(r16)
 80126e8:	003fc506 	br	8012600 <__swbuf_r+0x4c>
 80126ec:	800e3b80 	call	800e3b8 <__sinit>
 80126f0:	003fbc06 	br	80125e4 <__swbuf_r+0x30>

080126f4 <__swbuf>:
 80126f4:	008200b4 	movhi	r2,2050
 80126f8:	10b14b04 	addi	r2,r2,-15060
 80126fc:	280d883a 	mov	r6,r5
 8012700:	200b883a 	mov	r5,r4
 8012704:	11000017 	ldw	r4,0(r2)
 8012708:	80125b41 	jmpi	80125b4 <__swbuf_r>

0801270c <_wcrtomb_r>:
 801270c:	defff604 	addi	sp,sp,-40
 8012710:	008200b4 	movhi	r2,2050
 8012714:	dc800815 	stw	r18,32(sp)
 8012718:	dc400715 	stw	r17,28(sp)
 801271c:	dc000615 	stw	r16,24(sp)
 8012720:	10b14f04 	addi	r2,r2,-15044
 8012724:	dfc00915 	stw	ra,36(sp)
 8012728:	2021883a 	mov	r16,r4
 801272c:	3823883a 	mov	r17,r7
 8012730:	14800017 	ldw	r18,0(r2)
 8012734:	28001426 	beq	r5,zero,8012788 <_wcrtomb_r+0x7c>
 8012738:	d9400415 	stw	r5,16(sp)
 801273c:	d9800515 	stw	r6,20(sp)
 8012740:	800f0080 	call	800f008 <__locale_charset>
 8012744:	d9800517 	ldw	r6,20(sp)
 8012748:	d9400417 	ldw	r5,16(sp)
 801274c:	100f883a 	mov	r7,r2
 8012750:	dc400015 	stw	r17,0(sp)
 8012754:	8009883a 	mov	r4,r16
 8012758:	903ee83a 	callr	r18
 801275c:	00ffffc4 	movi	r3,-1
 8012760:	10c0031e 	bne	r2,r3,8012770 <_wcrtomb_r+0x64>
 8012764:	88000015 	stw	zero,0(r17)
 8012768:	00c02284 	movi	r3,138
 801276c:	80c00015 	stw	r3,0(r16)
 8012770:	dfc00917 	ldw	ra,36(sp)
 8012774:	dc800817 	ldw	r18,32(sp)
 8012778:	dc400717 	ldw	r17,28(sp)
 801277c:	dc000617 	ldw	r16,24(sp)
 8012780:	dec00a04 	addi	sp,sp,40
 8012784:	f800283a 	ret
 8012788:	800f0080 	call	800f008 <__locale_charset>
 801278c:	100f883a 	mov	r7,r2
 8012790:	dc400015 	stw	r17,0(sp)
 8012794:	000d883a 	mov	r6,zero
 8012798:	d9400104 	addi	r5,sp,4
 801279c:	8009883a 	mov	r4,r16
 80127a0:	903ee83a 	callr	r18
 80127a4:	003fed06 	br	801275c <_wcrtomb_r+0x50>

080127a8 <wcrtomb>:
 80127a8:	defff604 	addi	sp,sp,-40
 80127ac:	008200b4 	movhi	r2,2050
 80127b0:	dc800615 	stw	r18,24(sp)
 80127b4:	dc400515 	stw	r17,20(sp)
 80127b8:	10b14b04 	addi	r2,r2,-15060
 80127bc:	dfc00915 	stw	ra,36(sp)
 80127c0:	dd000815 	stw	r20,32(sp)
 80127c4:	dcc00715 	stw	r19,28(sp)
 80127c8:	dc000415 	stw	r16,16(sp)
 80127cc:	3025883a 	mov	r18,r6
 80127d0:	14400017 	ldw	r17,0(r2)
 80127d4:	20001926 	beq	r4,zero,801283c <wcrtomb+0x94>
 80127d8:	008200b4 	movhi	r2,2050
 80127dc:	10b14f04 	addi	r2,r2,-15044
 80127e0:	15000017 	ldw	r20,0(r2)
 80127e4:	2021883a 	mov	r16,r4
 80127e8:	2827883a 	mov	r19,r5
 80127ec:	800f0080 	call	800f008 <__locale_charset>
 80127f0:	100f883a 	mov	r7,r2
 80127f4:	dc800015 	stw	r18,0(sp)
 80127f8:	980d883a 	mov	r6,r19
 80127fc:	800b883a 	mov	r5,r16
 8012800:	8809883a 	mov	r4,r17
 8012804:	a03ee83a 	callr	r20
 8012808:	00ffffc4 	movi	r3,-1
 801280c:	10c0031e 	bne	r2,r3,801281c <wcrtomb+0x74>
 8012810:	90000015 	stw	zero,0(r18)
 8012814:	00c02284 	movi	r3,138
 8012818:	88c00015 	stw	r3,0(r17)
 801281c:	dfc00917 	ldw	ra,36(sp)
 8012820:	dd000817 	ldw	r20,32(sp)
 8012824:	dcc00717 	ldw	r19,28(sp)
 8012828:	dc800617 	ldw	r18,24(sp)
 801282c:	dc400517 	ldw	r17,20(sp)
 8012830:	dc000417 	ldw	r16,16(sp)
 8012834:	dec00a04 	addi	sp,sp,40
 8012838:	f800283a 	ret
 801283c:	008200b4 	movhi	r2,2050
 8012840:	10b14f04 	addi	r2,r2,-15044
 8012844:	14000017 	ldw	r16,0(r2)
 8012848:	800f0080 	call	800f008 <__locale_charset>
 801284c:	100f883a 	mov	r7,r2
 8012850:	dc800015 	stw	r18,0(sp)
 8012854:	000d883a 	mov	r6,zero
 8012858:	d9400104 	addi	r5,sp,4
 801285c:	8809883a 	mov	r4,r17
 8012860:	803ee83a 	callr	r16
 8012864:	003fe806 	br	8012808 <wcrtomb+0x60>

08012868 <__ascii_wctomb>:
 8012868:	28000526 	beq	r5,zero,8012880 <__ascii_wctomb+0x18>
 801286c:	00803fc4 	movi	r2,255
 8012870:	11800536 	bltu	r2,r6,8012888 <__ascii_wctomb+0x20>
 8012874:	29800005 	stb	r6,0(r5)
 8012878:	00800044 	movi	r2,1
 801287c:	f800283a 	ret
 8012880:	0005883a 	mov	r2,zero
 8012884:	f800283a 	ret
 8012888:	00802284 	movi	r2,138
 801288c:	20800015 	stw	r2,0(r4)
 8012890:	00bfffc4 	movi	r2,-1
 8012894:	f800283a 	ret

08012898 <_wctomb_r>:
 8012898:	008200b4 	movhi	r2,2050
 801289c:	defff904 	addi	sp,sp,-28
 80128a0:	10b14f04 	addi	r2,r2,-15044
 80128a4:	dfc00615 	stw	ra,24(sp)
 80128a8:	dc400515 	stw	r17,20(sp)
 80128ac:	dc000415 	stw	r16,16(sp)
 80128b0:	3823883a 	mov	r17,r7
 80128b4:	14000017 	ldw	r16,0(r2)
 80128b8:	d9000115 	stw	r4,4(sp)
 80128bc:	d9400215 	stw	r5,8(sp)
 80128c0:	d9800315 	stw	r6,12(sp)
 80128c4:	800f0080 	call	800f008 <__locale_charset>
 80128c8:	d9800317 	ldw	r6,12(sp)
 80128cc:	d9400217 	ldw	r5,8(sp)
 80128d0:	d9000117 	ldw	r4,4(sp)
 80128d4:	100f883a 	mov	r7,r2
 80128d8:	dc400015 	stw	r17,0(sp)
 80128dc:	803ee83a 	callr	r16
 80128e0:	dfc00617 	ldw	ra,24(sp)
 80128e4:	dc400517 	ldw	r17,20(sp)
 80128e8:	dc000417 	ldw	r16,16(sp)
 80128ec:	dec00704 	addi	sp,sp,28
 80128f0:	f800283a 	ret

080128f4 <__udivdi3>:
 80128f4:	defff404 	addi	sp,sp,-48
 80128f8:	dcc00515 	stw	r19,20(sp)
 80128fc:	dc000215 	stw	r16,8(sp)
 8012900:	dfc00b15 	stw	ra,44(sp)
 8012904:	df000a15 	stw	fp,40(sp)
 8012908:	ddc00915 	stw	r23,36(sp)
 801290c:	dd800815 	stw	r22,32(sp)
 8012910:	dd400715 	stw	r21,28(sp)
 8012914:	dd000615 	stw	r20,24(sp)
 8012918:	dc800415 	stw	r18,16(sp)
 801291c:	dc400315 	stw	r17,12(sp)
 8012920:	2027883a 	mov	r19,r4
 8012924:	2821883a 	mov	r16,r5
 8012928:	3800461e 	bne	r7,zero,8012a44 <__udivdi3+0x150>
 801292c:	3023883a 	mov	r17,r6
 8012930:	2025883a 	mov	r18,r4
 8012934:	2980572e 	bgeu	r5,r6,8012a94 <__udivdi3+0x1a0>
 8012938:	00bfffd4 	movui	r2,65535
 801293c:	282d883a 	mov	r22,r5
 8012940:	1180b236 	bltu	r2,r6,8012c0c <__udivdi3+0x318>
 8012944:	00803fc4 	movi	r2,255
 8012948:	1185803a 	cmpltu	r2,r2,r6
 801294c:	100490fa 	slli	r2,r2,3
 8012950:	3086d83a 	srl	r3,r6,r2
 8012954:	010200b4 	movhi	r4,2050
 8012958:	2128c304 	addi	r4,r4,-23796
 801295c:	20c7883a 	add	r3,r4,r3
 8012960:	18c00003 	ldbu	r3,0(r3)
 8012964:	1885883a 	add	r2,r3,r2
 8012968:	00c00804 	movi	r3,32
 801296c:	1887c83a 	sub	r3,r3,r2
 8012970:	18000526 	beq	r3,zero,8012988 <__udivdi3+0x94>
 8012974:	80e0983a 	sll	r16,r16,r3
 8012978:	9884d83a 	srl	r2,r19,r2
 801297c:	30e2983a 	sll	r17,r6,r3
 8012980:	98e4983a 	sll	r18,r19,r3
 8012984:	142cb03a 	or	r22,r2,r16
 8012988:	882ad43a 	srli	r21,r17,16
 801298c:	b009883a 	mov	r4,r22
 8012990:	8d3fffcc 	andi	r20,r17,65535
 8012994:	a80b883a 	mov	r5,r21
 8012998:	80085dc0 	call	80085dc <__umodsi3>
 801299c:	b009883a 	mov	r4,r22
 80129a0:	a80b883a 	mov	r5,r21
 80129a4:	1027883a 	mov	r19,r2
 80129a8:	80085780 	call	8008578 <__udivsi3>
 80129ac:	100b883a 	mov	r5,r2
 80129b0:	a009883a 	mov	r4,r20
 80129b4:	102d883a 	mov	r22,r2
 80129b8:	80086340 	call	8008634 <__mulsi3>
 80129bc:	9826943a 	slli	r19,r19,16
 80129c0:	9006d43a 	srli	r3,r18,16
 80129c4:	1cc6b03a 	or	r3,r3,r19
 80129c8:	1880052e 	bgeu	r3,r2,80129e0 <__udivdi3+0xec>
 80129cc:	1c47883a 	add	r3,r3,r17
 80129d0:	b13fffc4 	addi	r4,r22,-1
 80129d4:	1c400136 	bltu	r3,r17,80129dc <__udivdi3+0xe8>
 80129d8:	18814236 	bltu	r3,r2,8012ee4 <__udivdi3+0x5f0>
 80129dc:	202d883a 	mov	r22,r4
 80129e0:	18a1c83a 	sub	r16,r3,r2
 80129e4:	8009883a 	mov	r4,r16
 80129e8:	a80b883a 	mov	r5,r21
 80129ec:	80085dc0 	call	80085dc <__umodsi3>
 80129f0:	1027883a 	mov	r19,r2
 80129f4:	8009883a 	mov	r4,r16
 80129f8:	a80b883a 	mov	r5,r21
 80129fc:	9826943a 	slli	r19,r19,16
 8012a00:	80085780 	call	8008578 <__udivsi3>
 8012a04:	100b883a 	mov	r5,r2
 8012a08:	a009883a 	mov	r4,r20
 8012a0c:	94bfffcc 	andi	r18,r18,65535
 8012a10:	1021883a 	mov	r16,r2
 8012a14:	94e4b03a 	or	r18,r18,r19
 8012a18:	80086340 	call	8008634 <__mulsi3>
 8012a1c:	9080052e 	bgeu	r18,r2,8012a34 <__udivdi3+0x140>
 8012a20:	8ca5883a 	add	r18,r17,r18
 8012a24:	80ffffc4 	addi	r3,r16,-1
 8012a28:	94410c36 	bltu	r18,r17,8012e5c <__udivdi3+0x568>
 8012a2c:	90810b2e 	bgeu	r18,r2,8012e5c <__udivdi3+0x568>
 8012a30:	843fff84 	addi	r16,r16,-2
 8012a34:	b004943a 	slli	r2,r22,16
 8012a38:	0007883a 	mov	r3,zero
 8012a3c:	1404b03a 	or	r2,r2,r16
 8012a40:	00005e06 	br	8012bbc <__udivdi3+0x2c8>
 8012a44:	29c05b36 	bltu	r5,r7,8012bb4 <__udivdi3+0x2c0>
 8012a48:	00bfffd4 	movui	r2,65535
 8012a4c:	11c0672e 	bgeu	r2,r7,8012bec <__udivdi3+0x2f8>
 8012a50:	00804034 	movhi	r2,256
 8012a54:	10bfffc4 	addi	r2,r2,-1
 8012a58:	11c10a36 	bltu	r2,r7,8012e84 <__udivdi3+0x590>
 8012a5c:	00800404 	movi	r2,16
 8012a60:	3886d83a 	srl	r3,r7,r2
 8012a64:	010200b4 	movhi	r4,2050
 8012a68:	2128c304 	addi	r4,r4,-23796
 8012a6c:	20c7883a 	add	r3,r4,r3
 8012a70:	18c00003 	ldbu	r3,0(r3)
 8012a74:	05c00804 	movi	r23,32
 8012a78:	1885883a 	add	r2,r3,r2
 8012a7c:	b8afc83a 	sub	r23,r23,r2
 8012a80:	b800671e 	bne	r23,zero,8012c20 <__udivdi3+0x32c>
 8012a84:	3c010536 	bltu	r7,r16,8012e9c <__udivdi3+0x5a8>
 8012a88:	9985403a 	cmpgeu	r2,r19,r6
 8012a8c:	0007883a 	mov	r3,zero
 8012a90:	00004a06 	br	8012bbc <__udivdi3+0x2c8>
 8012a94:	3000041e 	bne	r6,zero,8012aa8 <__udivdi3+0x1b4>
 8012a98:	000b883a 	mov	r5,zero
 8012a9c:	01000044 	movi	r4,1
 8012aa0:	80085780 	call	8008578 <__udivsi3>
 8012aa4:	1023883a 	mov	r17,r2
 8012aa8:	00bfffd4 	movui	r2,65535
 8012aac:	1440532e 	bgeu	r2,r17,8012bfc <__udivdi3+0x308>
 8012ab0:	00804034 	movhi	r2,256
 8012ab4:	10bfffc4 	addi	r2,r2,-1
 8012ab8:	1440f436 	bltu	r2,r17,8012e8c <__udivdi3+0x598>
 8012abc:	00800404 	movi	r2,16
 8012ac0:	8886d83a 	srl	r3,r17,r2
 8012ac4:	010200b4 	movhi	r4,2050
 8012ac8:	2128c304 	addi	r4,r4,-23796
 8012acc:	20c7883a 	add	r3,r4,r3
 8012ad0:	18c00003 	ldbu	r3,0(r3)
 8012ad4:	1885883a 	add	r2,r3,r2
 8012ad8:	00c00804 	movi	r3,32
 8012adc:	1887c83a 	sub	r3,r3,r2
 8012ae0:	1800a51e 	bne	r3,zero,8012d78 <__udivdi3+0x484>
 8012ae4:	882ad43a 	srli	r21,r17,16
 8012ae8:	8461c83a 	sub	r16,r16,r17
 8012aec:	8d3fffcc 	andi	r20,r17,65535
 8012af0:	00c00044 	movi	r3,1
 8012af4:	a80b883a 	mov	r5,r21
 8012af8:	8009883a 	mov	r4,r16
 8012afc:	d8c00115 	stw	r3,4(sp)
 8012b00:	80085dc0 	call	80085dc <__umodsi3>
 8012b04:	a80b883a 	mov	r5,r21
 8012b08:	8009883a 	mov	r4,r16
 8012b0c:	1027883a 	mov	r19,r2
 8012b10:	80085780 	call	8008578 <__udivsi3>
 8012b14:	a00b883a 	mov	r5,r20
 8012b18:	1009883a 	mov	r4,r2
 8012b1c:	102d883a 	mov	r22,r2
 8012b20:	80086340 	call	8008634 <__mulsi3>
 8012b24:	9826943a 	slli	r19,r19,16
 8012b28:	900ed43a 	srli	r7,r18,16
 8012b2c:	d8c00117 	ldw	r3,4(sp)
 8012b30:	3cceb03a 	or	r7,r7,r19
 8012b34:	3880052e 	bgeu	r7,r2,8012b4c <__udivdi3+0x258>
 8012b38:	3c4f883a 	add	r7,r7,r17
 8012b3c:	b13fffc4 	addi	r4,r22,-1
 8012b40:	3c400136 	bltu	r7,r17,8012b48 <__udivdi3+0x254>
 8012b44:	3880e436 	bltu	r7,r2,8012ed8 <__udivdi3+0x5e4>
 8012b48:	202d883a 	mov	r22,r4
 8012b4c:	38a1c83a 	sub	r16,r7,r2
 8012b50:	8009883a 	mov	r4,r16
 8012b54:	a80b883a 	mov	r5,r21
 8012b58:	d8c00115 	stw	r3,4(sp)
 8012b5c:	80085dc0 	call	80085dc <__umodsi3>
 8012b60:	1027883a 	mov	r19,r2
 8012b64:	8009883a 	mov	r4,r16
 8012b68:	a80b883a 	mov	r5,r21
 8012b6c:	9826943a 	slli	r19,r19,16
 8012b70:	80085780 	call	8008578 <__udivsi3>
 8012b74:	a00b883a 	mov	r5,r20
 8012b78:	1009883a 	mov	r4,r2
 8012b7c:	94bfffcc 	andi	r18,r18,65535
 8012b80:	1021883a 	mov	r16,r2
 8012b84:	94e4b03a 	or	r18,r18,r19
 8012b88:	80086340 	call	8008634 <__mulsi3>
 8012b8c:	d8c00117 	ldw	r3,4(sp)
 8012b90:	9080052e 	bgeu	r18,r2,8012ba8 <__udivdi3+0x2b4>
 8012b94:	8ca5883a 	add	r18,r17,r18
 8012b98:	813fffc4 	addi	r4,r16,-1
 8012b9c:	9440ad36 	bltu	r18,r17,8012e54 <__udivdi3+0x560>
 8012ba0:	9080ac2e 	bgeu	r18,r2,8012e54 <__udivdi3+0x560>
 8012ba4:	843fff84 	addi	r16,r16,-2
 8012ba8:	b004943a 	slli	r2,r22,16
 8012bac:	1404b03a 	or	r2,r2,r16
 8012bb0:	00000206 	br	8012bbc <__udivdi3+0x2c8>
 8012bb4:	0007883a 	mov	r3,zero
 8012bb8:	0005883a 	mov	r2,zero
 8012bbc:	dfc00b17 	ldw	ra,44(sp)
 8012bc0:	df000a17 	ldw	fp,40(sp)
 8012bc4:	ddc00917 	ldw	r23,36(sp)
 8012bc8:	dd800817 	ldw	r22,32(sp)
 8012bcc:	dd400717 	ldw	r21,28(sp)
 8012bd0:	dd000617 	ldw	r20,24(sp)
 8012bd4:	dcc00517 	ldw	r19,20(sp)
 8012bd8:	dc800417 	ldw	r18,16(sp)
 8012bdc:	dc400317 	ldw	r17,12(sp)
 8012be0:	dc000217 	ldw	r16,8(sp)
 8012be4:	dec00c04 	addi	sp,sp,48
 8012be8:	f800283a 	ret
 8012bec:	00803fc4 	movi	r2,255
 8012bf0:	11c5803a 	cmpltu	r2,r2,r7
 8012bf4:	100490fa 	slli	r2,r2,3
 8012bf8:	003f9906 	br	8012a60 <__udivdi3+0x16c>
 8012bfc:	00803fc4 	movi	r2,255
 8012c00:	1445803a 	cmpltu	r2,r2,r17
 8012c04:	100490fa 	slli	r2,r2,3
 8012c08:	003fad06 	br	8012ac0 <__udivdi3+0x1cc>
 8012c0c:	00804034 	movhi	r2,256
 8012c10:	10bfffc4 	addi	r2,r2,-1
 8012c14:	11809f36 	bltu	r2,r6,8012e94 <__udivdi3+0x5a0>
 8012c18:	00800404 	movi	r2,16
 8012c1c:	003f4c06 	br	8012950 <__udivdi3+0x5c>
 8012c20:	3dce983a 	sll	r7,r7,r23
 8012c24:	30b8d83a 	srl	fp,r6,r2
 8012c28:	80a2d83a 	srl	r17,r16,r2
 8012c2c:	35cc983a 	sll	r6,r6,r23
 8012c30:	3f38b03a 	or	fp,r7,fp
 8012c34:	e024d43a 	srli	r18,fp,16
 8012c38:	9884d83a 	srl	r2,r19,r2
 8012c3c:	85e0983a 	sll	r16,r16,r23
 8012c40:	8809883a 	mov	r4,r17
 8012c44:	900b883a 	mov	r5,r18
 8012c48:	d9800015 	stw	r6,0(sp)
 8012c4c:	1420b03a 	or	r16,r2,r16
 8012c50:	80085dc0 	call	80085dc <__umodsi3>
 8012c54:	900b883a 	mov	r5,r18
 8012c58:	8809883a 	mov	r4,r17
 8012c5c:	1029883a 	mov	r20,r2
 8012c60:	e5bfffcc 	andi	r22,fp,65535
 8012c64:	80085780 	call	8008578 <__udivsi3>
 8012c68:	100b883a 	mov	r5,r2
 8012c6c:	b009883a 	mov	r4,r22
 8012c70:	102b883a 	mov	r21,r2
 8012c74:	80086340 	call	8008634 <__mulsi3>
 8012c78:	a028943a 	slli	r20,r20,16
 8012c7c:	8006d43a 	srli	r3,r16,16
 8012c80:	1d06b03a 	or	r3,r3,r20
 8012c84:	1880042e 	bgeu	r3,r2,8012c98 <__udivdi3+0x3a4>
 8012c88:	1f07883a 	add	r3,r3,fp
 8012c8c:	a93fffc4 	addi	r4,r21,-1
 8012c90:	1f00892e 	bgeu	r3,fp,8012eb8 <__udivdi3+0x5c4>
 8012c94:	202b883a 	mov	r21,r4
 8012c98:	18a3c83a 	sub	r17,r3,r2
 8012c9c:	8809883a 	mov	r4,r17
 8012ca0:	900b883a 	mov	r5,r18
 8012ca4:	80085dc0 	call	80085dc <__umodsi3>
 8012ca8:	1029883a 	mov	r20,r2
 8012cac:	8809883a 	mov	r4,r17
 8012cb0:	900b883a 	mov	r5,r18
 8012cb4:	a028943a 	slli	r20,r20,16
 8012cb8:	80085780 	call	8008578 <__udivsi3>
 8012cbc:	100b883a 	mov	r5,r2
 8012cc0:	b009883a 	mov	r4,r22
 8012cc4:	843fffcc 	andi	r16,r16,65535
 8012cc8:	1023883a 	mov	r17,r2
 8012ccc:	8520b03a 	or	r16,r16,r20
 8012cd0:	80086340 	call	8008634 <__mulsi3>
 8012cd4:	8080042e 	bgeu	r16,r2,8012ce8 <__udivdi3+0x3f4>
 8012cd8:	8721883a 	add	r16,r16,fp
 8012cdc:	88ffffc4 	addi	r3,r17,-1
 8012ce0:	8700712e 	bgeu	r16,fp,8012ea8 <__udivdi3+0x5b4>
 8012ce4:	1823883a 	mov	r17,r3
 8012ce8:	a80e943a 	slli	r7,r21,16
 8012cec:	d8c00017 	ldw	r3,0(sp)
 8012cf0:	80a1c83a 	sub	r16,r16,r2
 8012cf4:	3c64b03a 	or	r18,r7,r17
 8012cf8:	1d3fffcc 	andi	r20,r3,65535
 8012cfc:	9022d43a 	srli	r17,r18,16
 8012d00:	95bfffcc 	andi	r22,r18,65535
 8012d04:	a00b883a 	mov	r5,r20
 8012d08:	b009883a 	mov	r4,r22
 8012d0c:	182ad43a 	srli	r21,r3,16
 8012d10:	80086340 	call	8008634 <__mulsi3>
 8012d14:	a00b883a 	mov	r5,r20
 8012d18:	8809883a 	mov	r4,r17
 8012d1c:	1039883a 	mov	fp,r2
 8012d20:	80086340 	call	8008634 <__mulsi3>
 8012d24:	8809883a 	mov	r4,r17
 8012d28:	a80b883a 	mov	r5,r21
 8012d2c:	1029883a 	mov	r20,r2
 8012d30:	80086340 	call	8008634 <__mulsi3>
 8012d34:	a80b883a 	mov	r5,r21
 8012d38:	b009883a 	mov	r4,r22
 8012d3c:	1023883a 	mov	r17,r2
 8012d40:	80086340 	call	8008634 <__mulsi3>
 8012d44:	e006d43a 	srli	r3,fp,16
 8012d48:	1505883a 	add	r2,r2,r20
 8012d4c:	1887883a 	add	r3,r3,r2
 8012d50:	1d00022e 	bgeu	r3,r20,8012d5c <__udivdi3+0x468>
 8012d54:	00800074 	movhi	r2,1
 8012d58:	88a3883a 	add	r17,r17,r2
 8012d5c:	1804d43a 	srli	r2,r3,16
 8012d60:	1463883a 	add	r17,r2,r17
 8012d64:	84404436 	bltu	r16,r17,8012e78 <__udivdi3+0x584>
 8012d68:	84403e26 	beq	r16,r17,8012e64 <__udivdi3+0x570>
 8012d6c:	9005883a 	mov	r2,r18
 8012d70:	0007883a 	mov	r3,zero
 8012d74:	003f9106 	br	8012bbc <__udivdi3+0x2c8>
 8012d78:	88e2983a 	sll	r17,r17,r3
 8012d7c:	80aed83a 	srl	r23,r16,r2
 8012d80:	80e0983a 	sll	r16,r16,r3
 8012d84:	882ad43a 	srli	r21,r17,16
 8012d88:	9884d83a 	srl	r2,r19,r2
 8012d8c:	b809883a 	mov	r4,r23
 8012d90:	a80b883a 	mov	r5,r21
 8012d94:	98e4983a 	sll	r18,r19,r3
 8012d98:	142cb03a 	or	r22,r2,r16
 8012d9c:	80085dc0 	call	80085dc <__umodsi3>
 8012da0:	b809883a 	mov	r4,r23
 8012da4:	a80b883a 	mov	r5,r21
 8012da8:	1027883a 	mov	r19,r2
 8012dac:	8d3fffcc 	andi	r20,r17,65535
 8012db0:	80085780 	call	8008578 <__udivsi3>
 8012db4:	a009883a 	mov	r4,r20
 8012db8:	100b883a 	mov	r5,r2
 8012dbc:	102f883a 	mov	r23,r2
 8012dc0:	80086340 	call	8008634 <__mulsi3>
 8012dc4:	9826943a 	slli	r19,r19,16
 8012dc8:	b008d43a 	srli	r4,r22,16
 8012dcc:	24c8b03a 	or	r4,r4,r19
 8012dd0:	2080062e 	bgeu	r4,r2,8012dec <__udivdi3+0x4f8>
 8012dd4:	2449883a 	add	r4,r4,r17
 8012dd8:	b8ffffc4 	addi	r3,r23,-1
 8012ddc:	24403c36 	bltu	r4,r17,8012ed0 <__udivdi3+0x5dc>
 8012de0:	20803b2e 	bgeu	r4,r2,8012ed0 <__udivdi3+0x5dc>
 8012de4:	bdffff84 	addi	r23,r23,-2
 8012de8:	2449883a 	add	r4,r4,r17
 8012dec:	20a1c83a 	sub	r16,r4,r2
 8012df0:	a80b883a 	mov	r5,r21
 8012df4:	8009883a 	mov	r4,r16
 8012df8:	80085dc0 	call	80085dc <__umodsi3>
 8012dfc:	a80b883a 	mov	r5,r21
 8012e00:	8009883a 	mov	r4,r16
 8012e04:	1027883a 	mov	r19,r2
 8012e08:	80085780 	call	8008578 <__udivsi3>
 8012e0c:	a009883a 	mov	r4,r20
 8012e10:	100b883a 	mov	r5,r2
 8012e14:	9826943a 	slli	r19,r19,16
 8012e18:	1039883a 	mov	fp,r2
 8012e1c:	80086340 	call	8008634 <__mulsi3>
 8012e20:	b13fffcc 	andi	r4,r22,65535
 8012e24:	24c8b03a 	or	r4,r4,r19
 8012e28:	2080062e 	bgeu	r4,r2,8012e44 <__udivdi3+0x550>
 8012e2c:	2449883a 	add	r4,r4,r17
 8012e30:	e0ffffc4 	addi	r3,fp,-1
 8012e34:	24402436 	bltu	r4,r17,8012ec8 <__udivdi3+0x5d4>
 8012e38:	2080232e 	bgeu	r4,r2,8012ec8 <__udivdi3+0x5d4>
 8012e3c:	e73fff84 	addi	fp,fp,-2
 8012e40:	2449883a 	add	r4,r4,r17
 8012e44:	b82e943a 	slli	r23,r23,16
 8012e48:	20a1c83a 	sub	r16,r4,r2
 8012e4c:	bf06b03a 	or	r3,r23,fp
 8012e50:	003f2806 	br	8012af4 <__udivdi3+0x200>
 8012e54:	2021883a 	mov	r16,r4
 8012e58:	003f5306 	br	8012ba8 <__udivdi3+0x2b4>
 8012e5c:	1821883a 	mov	r16,r3
 8012e60:	003ef406 	br	8012a34 <__udivdi3+0x140>
 8012e64:	1806943a 	slli	r3,r3,16
 8012e68:	9de6983a 	sll	r19,r19,r23
 8012e6c:	e73fffcc 	andi	fp,fp,65535
 8012e70:	1f07883a 	add	r3,r3,fp
 8012e74:	98ffbd2e 	bgeu	r19,r3,8012d6c <__udivdi3+0x478>
 8012e78:	90bfffc4 	addi	r2,r18,-1
 8012e7c:	0007883a 	mov	r3,zero
 8012e80:	003f4e06 	br	8012bbc <__udivdi3+0x2c8>
 8012e84:	00800604 	movi	r2,24
 8012e88:	003ef506 	br	8012a60 <__udivdi3+0x16c>
 8012e8c:	00800604 	movi	r2,24
 8012e90:	003f0b06 	br	8012ac0 <__udivdi3+0x1cc>
 8012e94:	00800604 	movi	r2,24
 8012e98:	003ead06 	br	8012950 <__udivdi3+0x5c>
 8012e9c:	0007883a 	mov	r3,zero
 8012ea0:	00800044 	movi	r2,1
 8012ea4:	003f4506 	br	8012bbc <__udivdi3+0x2c8>
 8012ea8:	80bf8e2e 	bgeu	r16,r2,8012ce4 <__udivdi3+0x3f0>
 8012eac:	8c7fff84 	addi	r17,r17,-2
 8012eb0:	8721883a 	add	r16,r16,fp
 8012eb4:	003f8c06 	br	8012ce8 <__udivdi3+0x3f4>
 8012eb8:	18bf762e 	bgeu	r3,r2,8012c94 <__udivdi3+0x3a0>
 8012ebc:	ad7fff84 	addi	r21,r21,-2
 8012ec0:	1f07883a 	add	r3,r3,fp
 8012ec4:	003f7406 	br	8012c98 <__udivdi3+0x3a4>
 8012ec8:	1839883a 	mov	fp,r3
 8012ecc:	003fdd06 	br	8012e44 <__udivdi3+0x550>
 8012ed0:	182f883a 	mov	r23,r3
 8012ed4:	003fc506 	br	8012dec <__udivdi3+0x4f8>
 8012ed8:	b5bfff84 	addi	r22,r22,-2
 8012edc:	3c4f883a 	add	r7,r7,r17
 8012ee0:	003f1a06 	br	8012b4c <__udivdi3+0x258>
 8012ee4:	b5bfff84 	addi	r22,r22,-2
 8012ee8:	1c47883a 	add	r3,r3,r17
 8012eec:	003ebc06 	br	80129e0 <__udivdi3+0xec>

08012ef0 <__umoddi3>:
 8012ef0:	defff304 	addi	sp,sp,-52
 8012ef4:	df000b15 	stw	fp,44(sp)
 8012ef8:	dc400415 	stw	r17,16(sp)
 8012efc:	dc000315 	stw	r16,12(sp)
 8012f00:	dfc00c15 	stw	ra,48(sp)
 8012f04:	ddc00a15 	stw	r23,40(sp)
 8012f08:	dd800915 	stw	r22,36(sp)
 8012f0c:	dd400815 	stw	r21,32(sp)
 8012f10:	dd000715 	stw	r20,28(sp)
 8012f14:	dcc00615 	stw	r19,24(sp)
 8012f18:	dc800515 	stw	r18,20(sp)
 8012f1c:	2021883a 	mov	r16,r4
 8012f20:	2823883a 	mov	r17,r5
 8012f24:	2839883a 	mov	fp,r5
 8012f28:	3800401e 	bne	r7,zero,801302c <__umoddi3+0x13c>
 8012f2c:	3027883a 	mov	r19,r6
 8012f30:	2029883a 	mov	r20,r4
 8012f34:	2980552e 	bgeu	r5,r6,801308c <__umoddi3+0x19c>
 8012f38:	00bfffd4 	movui	r2,65535
 8012f3c:	1180a236 	bltu	r2,r6,80131c8 <__umoddi3+0x2d8>
 8012f40:	01003fc4 	movi	r4,255
 8012f44:	2189803a 	cmpltu	r4,r4,r6
 8012f48:	200890fa 	slli	r4,r4,3
 8012f4c:	3104d83a 	srl	r2,r6,r4
 8012f50:	00c200b4 	movhi	r3,2050
 8012f54:	18e8c304 	addi	r3,r3,-23796
 8012f58:	1885883a 	add	r2,r3,r2
 8012f5c:	10c00003 	ldbu	r3,0(r2)
 8012f60:	00800804 	movi	r2,32
 8012f64:	1909883a 	add	r4,r3,r4
 8012f68:	1125c83a 	sub	r18,r2,r4
 8012f6c:	90000526 	beq	r18,zero,8012f84 <__umoddi3+0x94>
 8012f70:	8ca2983a 	sll	r17,r17,r18
 8012f74:	8108d83a 	srl	r4,r16,r4
 8012f78:	34a6983a 	sll	r19,r6,r18
 8012f7c:	84a8983a 	sll	r20,r16,r18
 8012f80:	2478b03a 	or	fp,r4,r17
 8012f84:	982cd43a 	srli	r22,r19,16
 8012f88:	e009883a 	mov	r4,fp
 8012f8c:	9dffffcc 	andi	r23,r19,65535
 8012f90:	b00b883a 	mov	r5,r22
 8012f94:	80085dc0 	call	80085dc <__umodsi3>
 8012f98:	b00b883a 	mov	r5,r22
 8012f9c:	e009883a 	mov	r4,fp
 8012fa0:	102b883a 	mov	r21,r2
 8012fa4:	80085780 	call	8008578 <__udivsi3>
 8012fa8:	100b883a 	mov	r5,r2
 8012fac:	b809883a 	mov	r4,r23
 8012fb0:	80086340 	call	8008634 <__mulsi3>
 8012fb4:	a82a943a 	slli	r21,r21,16
 8012fb8:	a006d43a 	srli	r3,r20,16
 8012fbc:	1d46b03a 	or	r3,r3,r21
 8012fc0:	1880032e 	bgeu	r3,r2,8012fd0 <__umoddi3+0xe0>
 8012fc4:	1cc7883a 	add	r3,r3,r19
 8012fc8:	1cc00136 	bltu	r3,r19,8012fd0 <__umoddi3+0xe0>
 8012fcc:	18813136 	bltu	r3,r2,8013494 <__umoddi3+0x5a4>
 8012fd0:	18a1c83a 	sub	r16,r3,r2
 8012fd4:	b00b883a 	mov	r5,r22
 8012fd8:	8009883a 	mov	r4,r16
 8012fdc:	80085dc0 	call	80085dc <__umodsi3>
 8012fe0:	b00b883a 	mov	r5,r22
 8012fe4:	8009883a 	mov	r4,r16
 8012fe8:	1023883a 	mov	r17,r2
 8012fec:	80085780 	call	8008578 <__udivsi3>
 8012ff0:	100b883a 	mov	r5,r2
 8012ff4:	b809883a 	mov	r4,r23
 8012ff8:	8822943a 	slli	r17,r17,16
 8012ffc:	80086340 	call	8008634 <__mulsi3>
 8013000:	a0ffffcc 	andi	r3,r20,65535
 8013004:	1c46b03a 	or	r3,r3,r17
 8013008:	1880042e 	bgeu	r3,r2,801301c <__umoddi3+0x12c>
 801300c:	1cc7883a 	add	r3,r3,r19
 8013010:	1cc00236 	bltu	r3,r19,801301c <__umoddi3+0x12c>
 8013014:	1880012e 	bgeu	r3,r2,801301c <__umoddi3+0x12c>
 8013018:	1cc7883a 	add	r3,r3,r19
 801301c:	1885c83a 	sub	r2,r3,r2
 8013020:	1484d83a 	srl	r2,r2,r18
 8013024:	0007883a 	mov	r3,zero
 8013028:	00005306 	br	8013178 <__umoddi3+0x288>
 801302c:	29c05036 	bltu	r5,r7,8013170 <__umoddi3+0x280>
 8013030:	00bfffd4 	movui	r2,65535
 8013034:	11c05c2e 	bgeu	r2,r7,80131a8 <__umoddi3+0x2b8>
 8013038:	00804034 	movhi	r2,256
 801303c:	10bfffc4 	addi	r2,r2,-1
 8013040:	11c10636 	bltu	r2,r7,801345c <__umoddi3+0x56c>
 8013044:	01000404 	movi	r4,16
 8013048:	3904d83a 	srl	r2,r7,r4
 801304c:	00c200b4 	movhi	r3,2050
 8013050:	18e8c304 	addi	r3,r3,-23796
 8013054:	1885883a 	add	r2,r3,r2
 8013058:	14c00003 	ldbu	r19,0(r2)
 801305c:	00c00804 	movi	r3,32
 8013060:	9927883a 	add	r19,r19,r4
 8013064:	1ce9c83a 	sub	r20,r3,r19
 8013068:	a0005c1e 	bne	r20,zero,80131dc <__umoddi3+0x2ec>
 801306c:	3c400136 	bltu	r7,r17,8013074 <__umoddi3+0x184>
 8013070:	81810a36 	bltu	r16,r6,801349c <__umoddi3+0x5ac>
 8013074:	8185c83a 	sub	r2,r16,r6
 8013078:	89e3c83a 	sub	r17,r17,r7
 801307c:	8089803a 	cmpltu	r4,r16,r2
 8013080:	8939c83a 	sub	fp,r17,r4
 8013084:	e007883a 	mov	r3,fp
 8013088:	00003b06 	br	8013178 <__umoddi3+0x288>
 801308c:	3000041e 	bne	r6,zero,80130a0 <__umoddi3+0x1b0>
 8013090:	000b883a 	mov	r5,zero
 8013094:	01000044 	movi	r4,1
 8013098:	80085780 	call	8008578 <__udivsi3>
 801309c:	1027883a 	mov	r19,r2
 80130a0:	00bfffd4 	movui	r2,65535
 80130a4:	14c0442e 	bgeu	r2,r19,80131b8 <__umoddi3+0x2c8>
 80130a8:	00804034 	movhi	r2,256
 80130ac:	10bfffc4 	addi	r2,r2,-1
 80130b0:	14c0ec36 	bltu	r2,r19,8013464 <__umoddi3+0x574>
 80130b4:	00800404 	movi	r2,16
 80130b8:	9886d83a 	srl	r3,r19,r2
 80130bc:	010200b4 	movhi	r4,2050
 80130c0:	2128c304 	addi	r4,r4,-23796
 80130c4:	20c7883a 	add	r3,r4,r3
 80130c8:	18c00003 	ldbu	r3,0(r3)
 80130cc:	1887883a 	add	r3,r3,r2
 80130d0:	00800804 	movi	r2,32
 80130d4:	10e5c83a 	sub	r18,r2,r3
 80130d8:	9000ab1e 	bne	r18,zero,8013388 <__umoddi3+0x498>
 80130dc:	982cd43a 	srli	r22,r19,16
 80130e0:	8ce3c83a 	sub	r17,r17,r19
 80130e4:	9dffffcc 	andi	r23,r19,65535
 80130e8:	b00b883a 	mov	r5,r22
 80130ec:	8809883a 	mov	r4,r17
 80130f0:	80085dc0 	call	80085dc <__umodsi3>
 80130f4:	b00b883a 	mov	r5,r22
 80130f8:	8809883a 	mov	r4,r17
 80130fc:	102b883a 	mov	r21,r2
 8013100:	80085780 	call	8008578 <__udivsi3>
 8013104:	b80b883a 	mov	r5,r23
 8013108:	1009883a 	mov	r4,r2
 801310c:	80086340 	call	8008634 <__mulsi3>
 8013110:	a82a943a 	slli	r21,r21,16
 8013114:	a006d43a 	srli	r3,r20,16
 8013118:	1d46b03a 	or	r3,r3,r21
 801311c:	1880042e 	bgeu	r3,r2,8013130 <__umoddi3+0x240>
 8013120:	1cc7883a 	add	r3,r3,r19
 8013124:	1cc00236 	bltu	r3,r19,8013130 <__umoddi3+0x240>
 8013128:	1880012e 	bgeu	r3,r2,8013130 <__umoddi3+0x240>
 801312c:	1cc7883a 	add	r3,r3,r19
 8013130:	18a1c83a 	sub	r16,r3,r2
 8013134:	b00b883a 	mov	r5,r22
 8013138:	8009883a 	mov	r4,r16
 801313c:	80085dc0 	call	80085dc <__umodsi3>
 8013140:	1023883a 	mov	r17,r2
 8013144:	b00b883a 	mov	r5,r22
 8013148:	8009883a 	mov	r4,r16
 801314c:	80085780 	call	8008578 <__udivsi3>
 8013150:	8822943a 	slli	r17,r17,16
 8013154:	b80b883a 	mov	r5,r23
 8013158:	1009883a 	mov	r4,r2
 801315c:	80086340 	call	8008634 <__mulsi3>
 8013160:	a53fffcc 	andi	r20,r20,65535
 8013164:	a446b03a 	or	r3,r20,r17
 8013168:	18bfac2e 	bgeu	r3,r2,801301c <__umoddi3+0x12c>
 801316c:	003fa706 	br	801300c <__umoddi3+0x11c>
 8013170:	2005883a 	mov	r2,r4
 8013174:	2807883a 	mov	r3,r5
 8013178:	dfc00c17 	ldw	ra,48(sp)
 801317c:	df000b17 	ldw	fp,44(sp)
 8013180:	ddc00a17 	ldw	r23,40(sp)
 8013184:	dd800917 	ldw	r22,36(sp)
 8013188:	dd400817 	ldw	r21,32(sp)
 801318c:	dd000717 	ldw	r20,28(sp)
 8013190:	dcc00617 	ldw	r19,24(sp)
 8013194:	dc800517 	ldw	r18,20(sp)
 8013198:	dc400417 	ldw	r17,16(sp)
 801319c:	dc000317 	ldw	r16,12(sp)
 80131a0:	dec00d04 	addi	sp,sp,52
 80131a4:	f800283a 	ret
 80131a8:	04c03fc4 	movi	r19,255
 80131ac:	99c9803a 	cmpltu	r4,r19,r7
 80131b0:	200890fa 	slli	r4,r4,3
 80131b4:	003fa406 	br	8013048 <__umoddi3+0x158>
 80131b8:	00803fc4 	movi	r2,255
 80131bc:	14c5803a 	cmpltu	r2,r2,r19
 80131c0:	100490fa 	slli	r2,r2,3
 80131c4:	003fbc06 	br	80130b8 <__umoddi3+0x1c8>
 80131c8:	00804034 	movhi	r2,256
 80131cc:	10bfffc4 	addi	r2,r2,-1
 80131d0:	1180a636 	bltu	r2,r6,801346c <__umoddi3+0x57c>
 80131d4:	01000404 	movi	r4,16
 80131d8:	003f5c06 	br	8012f4c <__umoddi3+0x5c>
 80131dc:	3d0e983a 	sll	r7,r7,r20
 80131e0:	34ead83a 	srl	r21,r6,r19
 80131e4:	8cc6d83a 	srl	r3,r17,r19
 80131e8:	8d10983a 	sll	r8,r17,r20
 80131ec:	3d6ab03a 	or	r21,r7,r21
 80131f0:	a82cd43a 	srli	r22,r21,16
 80131f4:	84e2d83a 	srl	r17,r16,r19
 80131f8:	1809883a 	mov	r4,r3
 80131fc:	b00b883a 	mov	r5,r22
 8013200:	8a22b03a 	or	r17,r17,r8
 8013204:	3524983a 	sll	r18,r6,r20
 8013208:	dc400015 	stw	r17,0(sp)
 801320c:	d8c00115 	stw	r3,4(sp)
 8013210:	80085dc0 	call	80085dc <__umodsi3>
 8013214:	d8c00117 	ldw	r3,4(sp)
 8013218:	b00b883a 	mov	r5,r22
 801321c:	1039883a 	mov	fp,r2
 8013220:	1809883a 	mov	r4,r3
 8013224:	80085780 	call	8008578 <__udivsi3>
 8013228:	adffffcc 	andi	r23,r21,65535
 801322c:	100b883a 	mov	r5,r2
 8013230:	b809883a 	mov	r4,r23
 8013234:	1023883a 	mov	r17,r2
 8013238:	80086340 	call	8008634 <__mulsi3>
 801323c:	d9400017 	ldw	r5,0(sp)
 8013240:	e008943a 	slli	r4,fp,16
 8013244:	8520983a 	sll	r16,r16,r20
 8013248:	2806d43a 	srli	r3,r5,16
 801324c:	1906b03a 	or	r3,r3,r4
 8013250:	1880042e 	bgeu	r3,r2,8013264 <__umoddi3+0x374>
 8013254:	1d47883a 	add	r3,r3,r21
 8013258:	893fffc4 	addi	r4,r17,-1
 801325c:	1d40892e 	bgeu	r3,r21,8013484 <__umoddi3+0x594>
 8013260:	2023883a 	mov	r17,r4
 8013264:	18b9c83a 	sub	fp,r3,r2
 8013268:	b00b883a 	mov	r5,r22
 801326c:	e009883a 	mov	r4,fp
 8013270:	80085dc0 	call	80085dc <__umodsi3>
 8013274:	b00b883a 	mov	r5,r22
 8013278:	e009883a 	mov	r4,fp
 801327c:	d8800215 	stw	r2,8(sp)
 8013280:	80085780 	call	8008578 <__udivsi3>
 8013284:	100b883a 	mov	r5,r2
 8013288:	b809883a 	mov	r4,r23
 801328c:	102d883a 	mov	r22,r2
 8013290:	80086340 	call	8008634 <__mulsi3>
 8013294:	d9800217 	ldw	r6,8(sp)
 8013298:	d8c00017 	ldw	r3,0(sp)
 801329c:	300c943a 	slli	r6,r6,16
 80132a0:	1a3fffcc 	andi	r8,r3,65535
 80132a4:	4190b03a 	or	r8,r8,r6
 80132a8:	4080042e 	bgeu	r8,r2,80132bc <__umoddi3+0x3cc>
 80132ac:	4551883a 	add	r8,r8,r21
 80132b0:	b0ffffc4 	addi	r3,r22,-1
 80132b4:	45406f2e 	bgeu	r8,r21,8013474 <__umoddi3+0x584>
 80132b8:	182d883a 	mov	r22,r3
 80132bc:	880e943a 	slli	r7,r17,16
 80132c0:	9006d43a 	srli	r3,r18,16
 80132c4:	91bfffcc 	andi	r6,r18,65535
 80132c8:	3dacb03a 	or	r22,r7,r22
 80132cc:	b02ed43a 	srli	r23,r22,16
 80132d0:	b5bfffcc 	andi	r22,r22,65535
 80132d4:	300b883a 	mov	r5,r6
 80132d8:	b009883a 	mov	r4,r22
 80132dc:	40a3c83a 	sub	r17,r8,r2
 80132e0:	d8c00115 	stw	r3,4(sp)
 80132e4:	d9800215 	stw	r6,8(sp)
 80132e8:	80086340 	call	8008634 <__mulsi3>
 80132ec:	d9800217 	ldw	r6,8(sp)
 80132f0:	b809883a 	mov	r4,r23
 80132f4:	1039883a 	mov	fp,r2
 80132f8:	300b883a 	mov	r5,r6
 80132fc:	80086340 	call	8008634 <__mulsi3>
 8013300:	d8c00117 	ldw	r3,4(sp)
 8013304:	b809883a 	mov	r4,r23
 8013308:	d8800215 	stw	r2,8(sp)
 801330c:	180b883a 	mov	r5,r3
 8013310:	80086340 	call	8008634 <__mulsi3>
 8013314:	d8c00117 	ldw	r3,4(sp)
 8013318:	b009883a 	mov	r4,r22
 801331c:	102f883a 	mov	r23,r2
 8013320:	180b883a 	mov	r5,r3
 8013324:	80086340 	call	8008634 <__mulsi3>
 8013328:	d9800217 	ldw	r6,8(sp)
 801332c:	e006d43a 	srli	r3,fp,16
 8013330:	1185883a 	add	r2,r2,r6
 8013334:	1885883a 	add	r2,r3,r2
 8013338:	1180022e 	bgeu	r2,r6,8013344 <__umoddi3+0x454>
 801333c:	00c00074 	movhi	r3,1
 8013340:	b8ef883a 	add	r23,r23,r3
 8013344:	1006d43a 	srli	r3,r2,16
 8013348:	1004943a 	slli	r2,r2,16
 801334c:	e73fffcc 	andi	fp,fp,65535
 8013350:	1dc7883a 	add	r3,r3,r23
 8013354:	1739883a 	add	fp,r2,fp
 8013358:	88c03a36 	bltu	r17,r3,8013444 <__umoddi3+0x554>
 801335c:	88c05126 	beq	r17,r3,80134a4 <__umoddi3+0x5b4>
 8013360:	88c9c83a 	sub	r4,r17,r3
 8013364:	e00f883a 	mov	r7,fp
 8013368:	81cfc83a 	sub	r7,r16,r7
 801336c:	81c7803a 	cmpltu	r3,r16,r7
 8013370:	20c7c83a 	sub	r3,r4,r3
 8013374:	1cc4983a 	sll	r2,r3,r19
 8013378:	3d0ed83a 	srl	r7,r7,r20
 801337c:	1d06d83a 	srl	r3,r3,r20
 8013380:	11c4b03a 	or	r2,r2,r7
 8013384:	003f7c06 	br	8013178 <__umoddi3+0x288>
 8013388:	9ca6983a 	sll	r19,r19,r18
 801338c:	88f8d83a 	srl	fp,r17,r3
 8013390:	80c4d83a 	srl	r2,r16,r3
 8013394:	982cd43a 	srli	r22,r19,16
 8013398:	8ca2983a 	sll	r17,r17,r18
 801339c:	e009883a 	mov	r4,fp
 80133a0:	b00b883a 	mov	r5,r22
 80133a4:	146ab03a 	or	r21,r2,r17
 80133a8:	80085dc0 	call	80085dc <__umodsi3>
 80133ac:	b00b883a 	mov	r5,r22
 80133b0:	e009883a 	mov	r4,fp
 80133b4:	1029883a 	mov	r20,r2
 80133b8:	9dffffcc 	andi	r23,r19,65535
 80133bc:	80085780 	call	8008578 <__udivsi3>
 80133c0:	b809883a 	mov	r4,r23
 80133c4:	100b883a 	mov	r5,r2
 80133c8:	80086340 	call	8008634 <__mulsi3>
 80133cc:	a008943a 	slli	r4,r20,16
 80133d0:	a806d43a 	srli	r3,r21,16
 80133d4:	84a8983a 	sll	r20,r16,r18
 80133d8:	1906b03a 	or	r3,r3,r4
 80133dc:	1880042e 	bgeu	r3,r2,80133f0 <__umoddi3+0x500>
 80133e0:	1cc7883a 	add	r3,r3,r19
 80133e4:	1cc00236 	bltu	r3,r19,80133f0 <__umoddi3+0x500>
 80133e8:	1880012e 	bgeu	r3,r2,80133f0 <__umoddi3+0x500>
 80133ec:	1cc7883a 	add	r3,r3,r19
 80133f0:	18a3c83a 	sub	r17,r3,r2
 80133f4:	b00b883a 	mov	r5,r22
 80133f8:	8809883a 	mov	r4,r17
 80133fc:	80085dc0 	call	80085dc <__umodsi3>
 8013400:	b00b883a 	mov	r5,r22
 8013404:	8809883a 	mov	r4,r17
 8013408:	1021883a 	mov	r16,r2
 801340c:	80085780 	call	8008578 <__udivsi3>
 8013410:	100b883a 	mov	r5,r2
 8013414:	b809883a 	mov	r4,r23
 8013418:	8020943a 	slli	r16,r16,16
 801341c:	80086340 	call	8008634 <__mulsi3>
 8013420:	a8ffffcc 	andi	r3,r21,65535
 8013424:	1c06b03a 	or	r3,r3,r16
 8013428:	1880042e 	bgeu	r3,r2,801343c <__umoddi3+0x54c>
 801342c:	1cc7883a 	add	r3,r3,r19
 8013430:	1cc00236 	bltu	r3,r19,801343c <__umoddi3+0x54c>
 8013434:	1880012e 	bgeu	r3,r2,801343c <__umoddi3+0x54c>
 8013438:	1cc7883a 	add	r3,r3,r19
 801343c:	18a3c83a 	sub	r17,r3,r2
 8013440:	003f2906 	br	80130e8 <__umoddi3+0x1f8>
 8013444:	e48fc83a 	sub	r7,fp,r18
 8013448:	1d49c83a 	sub	r4,r3,r21
 801344c:	e1f9803a 	cmpltu	fp,fp,r7
 8013450:	2739c83a 	sub	fp,r4,fp
 8013454:	8f09c83a 	sub	r4,r17,fp
 8013458:	003fc306 	br	8013368 <__umoddi3+0x478>
 801345c:	01000604 	movi	r4,24
 8013460:	003ef906 	br	8013048 <__umoddi3+0x158>
 8013464:	00800604 	movi	r2,24
 8013468:	003f1306 	br	80130b8 <__umoddi3+0x1c8>
 801346c:	01000604 	movi	r4,24
 8013470:	003eb606 	br	8012f4c <__umoddi3+0x5c>
 8013474:	40bf902e 	bgeu	r8,r2,80132b8 <__umoddi3+0x3c8>
 8013478:	b5bfff84 	addi	r22,r22,-2
 801347c:	4551883a 	add	r8,r8,r21
 8013480:	003f8e06 	br	80132bc <__umoddi3+0x3cc>
 8013484:	18bf762e 	bgeu	r3,r2,8013260 <__umoddi3+0x370>
 8013488:	8c7fff84 	addi	r17,r17,-2
 801348c:	1d47883a 	add	r3,r3,r21
 8013490:	003f7406 	br	8013264 <__umoddi3+0x374>
 8013494:	1cc7883a 	add	r3,r3,r19
 8013498:	003ecd06 	br	8012fd0 <__umoddi3+0xe0>
 801349c:	8005883a 	mov	r2,r16
 80134a0:	003ef806 	br	8013084 <__umoddi3+0x194>
 80134a4:	873fe736 	bltu	r16,fp,8013444 <__umoddi3+0x554>
 80134a8:	e00f883a 	mov	r7,fp
 80134ac:	0009883a 	mov	r4,zero
 80134b0:	003fad06 	br	8013368 <__umoddi3+0x478>

080134b4 <__adddf3>:
 80134b4:	02c00434 	movhi	r11,16
 80134b8:	5affffc4 	addi	r11,r11,-1
 80134bc:	2806d7fa 	srli	r3,r5,31
 80134c0:	2ad4703a 	and	r10,r5,r11
 80134c4:	3ad2703a 	and	r9,r7,r11
 80134c8:	3804d53a 	srli	r2,r7,20
 80134cc:	3018d77a 	srli	r12,r6,29
 80134d0:	280ad53a 	srli	r5,r5,20
 80134d4:	501490fa 	slli	r10,r10,3
 80134d8:	2010d77a 	srli	r8,r4,29
 80134dc:	481290fa 	slli	r9,r9,3
 80134e0:	380ed7fa 	srli	r7,r7,31
 80134e4:	defffb04 	addi	sp,sp,-20
 80134e8:	dc800215 	stw	r18,8(sp)
 80134ec:	dc400115 	stw	r17,4(sp)
 80134f0:	dc000015 	stw	r16,0(sp)
 80134f4:	dfc00415 	stw	ra,16(sp)
 80134f8:	dcc00315 	stw	r19,12(sp)
 80134fc:	1c803fcc 	andi	r18,r3,255
 8013500:	2c01ffcc 	andi	r16,r5,2047
 8013504:	5210b03a 	or	r8,r10,r8
 8013508:	202290fa 	slli	r17,r4,3
 801350c:	1081ffcc 	andi	r2,r2,2047
 8013510:	4b12b03a 	or	r9,r9,r12
 8013514:	300c90fa 	slli	r6,r6,3
 8013518:	91c07526 	beq	r18,r7,80136f0 <__adddf3+0x23c>
 801351c:	8087c83a 	sub	r3,r16,r2
 8013520:	00c0ab0e 	bge	zero,r3,80137d0 <__adddf3+0x31c>
 8013524:	10002a1e 	bne	r2,zero,80135d0 <__adddf3+0x11c>
 8013528:	4984b03a 	or	r2,r9,r6
 801352c:	1000961e 	bne	r2,zero,8013788 <__adddf3+0x2d4>
 8013530:	888001cc 	andi	r2,r17,7
 8013534:	10000726 	beq	r2,zero,8013554 <__adddf3+0xa0>
 8013538:	888003cc 	andi	r2,r17,15
 801353c:	00c00104 	movi	r3,4
 8013540:	10c00426 	beq	r2,r3,8013554 <__adddf3+0xa0>
 8013544:	88c7883a 	add	r3,r17,r3
 8013548:	1c63803a 	cmpltu	r17,r3,r17
 801354c:	4451883a 	add	r8,r8,r17
 8013550:	1823883a 	mov	r17,r3
 8013554:	4080202c 	andhi	r2,r8,128
 8013558:	10005926 	beq	r2,zero,80136c0 <__adddf3+0x20c>
 801355c:	84000044 	addi	r16,r16,1
 8013560:	0081ffc4 	movi	r2,2047
 8013564:	8080ba26 	beq	r16,r2,8013850 <__adddf3+0x39c>
 8013568:	00bfe034 	movhi	r2,65408
 801356c:	10bfffc4 	addi	r2,r2,-1
 8013570:	4090703a 	and	r8,r8,r2
 8013574:	4004977a 	slli	r2,r8,29
 8013578:	4010927a 	slli	r8,r8,9
 801357c:	8822d0fa 	srli	r17,r17,3
 8013580:	8401ffcc 	andi	r16,r16,2047
 8013584:	4010d33a 	srli	r8,r8,12
 8013588:	9007883a 	mov	r3,r18
 801358c:	1444b03a 	or	r2,r2,r17
 8013590:	8401ffcc 	andi	r16,r16,2047
 8013594:	8020953a 	slli	r16,r16,20
 8013598:	18c03fcc 	andi	r3,r3,255
 801359c:	01000434 	movhi	r4,16
 80135a0:	213fffc4 	addi	r4,r4,-1
 80135a4:	180697fa 	slli	r3,r3,31
 80135a8:	4110703a 	and	r8,r8,r4
 80135ac:	4410b03a 	or	r8,r8,r16
 80135b0:	40c6b03a 	or	r3,r8,r3
 80135b4:	dfc00417 	ldw	ra,16(sp)
 80135b8:	dcc00317 	ldw	r19,12(sp)
 80135bc:	dc800217 	ldw	r18,8(sp)
 80135c0:	dc400117 	ldw	r17,4(sp)
 80135c4:	dc000017 	ldw	r16,0(sp)
 80135c8:	dec00504 	addi	sp,sp,20
 80135cc:	f800283a 	ret
 80135d0:	0081ffc4 	movi	r2,2047
 80135d4:	80bfd626 	beq	r16,r2,8013530 <__adddf3+0x7c>
 80135d8:	4a402034 	orhi	r9,r9,128
 80135dc:	00800e04 	movi	r2,56
 80135e0:	10c09f16 	blt	r2,r3,8013860 <__adddf3+0x3ac>
 80135e4:	008007c4 	movi	r2,31
 80135e8:	10c0c216 	blt	r2,r3,80138f4 <__adddf3+0x440>
 80135ec:	00800804 	movi	r2,32
 80135f0:	10c5c83a 	sub	r2,r2,r3
 80135f4:	488a983a 	sll	r5,r9,r2
 80135f8:	30c8d83a 	srl	r4,r6,r3
 80135fc:	3084983a 	sll	r2,r6,r2
 8013600:	48c6d83a 	srl	r3,r9,r3
 8013604:	290cb03a 	or	r6,r5,r4
 8013608:	1004c03a 	cmpne	r2,r2,zero
 801360c:	308cb03a 	or	r6,r6,r2
 8013610:	898dc83a 	sub	r6,r17,r6
 8013614:	89a3803a 	cmpltu	r17,r17,r6
 8013618:	40d1c83a 	sub	r8,r8,r3
 801361c:	4451c83a 	sub	r8,r8,r17
 8013620:	3023883a 	mov	r17,r6
 8013624:	4080202c 	andhi	r2,r8,128
 8013628:	10002326 	beq	r2,zero,80136b8 <__adddf3+0x204>
 801362c:	04c02034 	movhi	r19,128
 8013630:	9cffffc4 	addi	r19,r19,-1
 8013634:	44e6703a 	and	r19,r8,r19
 8013638:	98007626 	beq	r19,zero,8013814 <__adddf3+0x360>
 801363c:	9809883a 	mov	r4,r19
 8013640:	8015cf40 	call	8015cf4 <__clzsi2>
 8013644:	10fffe04 	addi	r3,r2,-8
 8013648:	010007c4 	movi	r4,31
 801364c:	20c07716 	blt	r4,r3,801382c <__adddf3+0x378>
 8013650:	00800804 	movi	r2,32
 8013654:	10c5c83a 	sub	r2,r2,r3
 8013658:	8884d83a 	srl	r2,r17,r2
 801365c:	98d0983a 	sll	r8,r19,r3
 8013660:	88e2983a 	sll	r17,r17,r3
 8013664:	1204b03a 	or	r2,r2,r8
 8013668:	1c007416 	blt	r3,r16,801383c <__adddf3+0x388>
 801366c:	1c21c83a 	sub	r16,r3,r16
 8013670:	82000044 	addi	r8,r16,1
 8013674:	00c007c4 	movi	r3,31
 8013678:	1a009116 	blt	r3,r8,80138c0 <__adddf3+0x40c>
 801367c:	00c00804 	movi	r3,32
 8013680:	1a07c83a 	sub	r3,r3,r8
 8013684:	8a08d83a 	srl	r4,r17,r8
 8013688:	88e2983a 	sll	r17,r17,r3
 801368c:	10c6983a 	sll	r3,r2,r3
 8013690:	1210d83a 	srl	r8,r2,r8
 8013694:	8804c03a 	cmpne	r2,r17,zero
 8013698:	1906b03a 	or	r3,r3,r4
 801369c:	18a2b03a 	or	r17,r3,r2
 80136a0:	0021883a 	mov	r16,zero
 80136a4:	003fa206 	br	8013530 <__adddf3+0x7c>
 80136a8:	1890b03a 	or	r8,r3,r2
 80136ac:	40017d26 	beq	r8,zero,8013ca4 <__adddf3+0x7f0>
 80136b0:	1011883a 	mov	r8,r2
 80136b4:	1823883a 	mov	r17,r3
 80136b8:	888001cc 	andi	r2,r17,7
 80136bc:	103f9e1e 	bne	r2,zero,8013538 <__adddf3+0x84>
 80136c0:	4004977a 	slli	r2,r8,29
 80136c4:	8822d0fa 	srli	r17,r17,3
 80136c8:	4010d0fa 	srli	r8,r8,3
 80136cc:	9007883a 	mov	r3,r18
 80136d0:	1444b03a 	or	r2,r2,r17
 80136d4:	0101ffc4 	movi	r4,2047
 80136d8:	81002426 	beq	r16,r4,801376c <__adddf3+0x2b8>
 80136dc:	8120703a 	and	r16,r16,r4
 80136e0:	01000434 	movhi	r4,16
 80136e4:	213fffc4 	addi	r4,r4,-1
 80136e8:	4110703a 	and	r8,r8,r4
 80136ec:	003fa806 	br	8013590 <__adddf3+0xdc>
 80136f0:	8089c83a 	sub	r4,r16,r2
 80136f4:	01005e0e 	bge	zero,r4,8013870 <__adddf3+0x3bc>
 80136f8:	10002b26 	beq	r2,zero,80137a8 <__adddf3+0x2f4>
 80136fc:	0081ffc4 	movi	r2,2047
 8013700:	80bf8b26 	beq	r16,r2,8013530 <__adddf3+0x7c>
 8013704:	4a402034 	orhi	r9,r9,128
 8013708:	00800e04 	movi	r2,56
 801370c:	1100a40e 	bge	r2,r4,80139a0 <__adddf3+0x4ec>
 8013710:	498cb03a 	or	r6,r9,r6
 8013714:	300ac03a 	cmpne	r5,r6,zero
 8013718:	0013883a 	mov	r9,zero
 801371c:	2c4b883a 	add	r5,r5,r17
 8013720:	2c63803a 	cmpltu	r17,r5,r17
 8013724:	4a11883a 	add	r8,r9,r8
 8013728:	8a11883a 	add	r8,r17,r8
 801372c:	2823883a 	mov	r17,r5
 8013730:	4080202c 	andhi	r2,r8,128
 8013734:	103fe026 	beq	r2,zero,80136b8 <__adddf3+0x204>
 8013738:	84000044 	addi	r16,r16,1
 801373c:	0081ffc4 	movi	r2,2047
 8013740:	8080d226 	beq	r16,r2,8013a8c <__adddf3+0x5d8>
 8013744:	00bfe034 	movhi	r2,65408
 8013748:	10bfffc4 	addi	r2,r2,-1
 801374c:	4090703a 	and	r8,r8,r2
 8013750:	880ad07a 	srli	r5,r17,1
 8013754:	400897fa 	slli	r4,r8,31
 8013758:	88c0004c 	andi	r3,r17,1
 801375c:	28e2b03a 	or	r17,r5,r3
 8013760:	4010d07a 	srli	r8,r8,1
 8013764:	2462b03a 	or	r17,r4,r17
 8013768:	003f7106 	br	8013530 <__adddf3+0x7c>
 801376c:	4088b03a 	or	r4,r8,r2
 8013770:	20014526 	beq	r4,zero,8013c88 <__adddf3+0x7d4>
 8013774:	01000434 	movhi	r4,16
 8013778:	42000234 	orhi	r8,r8,8
 801377c:	213fffc4 	addi	r4,r4,-1
 8013780:	4110703a 	and	r8,r8,r4
 8013784:	003f8206 	br	8013590 <__adddf3+0xdc>
 8013788:	18ffffc4 	addi	r3,r3,-1
 801378c:	1800491e 	bne	r3,zero,80138b4 <__adddf3+0x400>
 8013790:	898bc83a 	sub	r5,r17,r6
 8013794:	8963803a 	cmpltu	r17,r17,r5
 8013798:	4251c83a 	sub	r8,r8,r9
 801379c:	4451c83a 	sub	r8,r8,r17
 80137a0:	2823883a 	mov	r17,r5
 80137a4:	003f9f06 	br	8013624 <__adddf3+0x170>
 80137a8:	4984b03a 	or	r2,r9,r6
 80137ac:	103f6026 	beq	r2,zero,8013530 <__adddf3+0x7c>
 80137b0:	213fffc4 	addi	r4,r4,-1
 80137b4:	2000931e 	bne	r4,zero,8013a04 <__adddf3+0x550>
 80137b8:	898d883a 	add	r6,r17,r6
 80137bc:	3463803a 	cmpltu	r17,r6,r17
 80137c0:	4251883a 	add	r8,r8,r9
 80137c4:	8a11883a 	add	r8,r17,r8
 80137c8:	3023883a 	mov	r17,r6
 80137cc:	003fd806 	br	8013730 <__adddf3+0x27c>
 80137d0:	1800541e 	bne	r3,zero,8013924 <__adddf3+0x470>
 80137d4:	80800044 	addi	r2,r16,1
 80137d8:	1081ffcc 	andi	r2,r2,2047
 80137dc:	00c00044 	movi	r3,1
 80137e0:	1880a00e 	bge	r3,r2,8013a64 <__adddf3+0x5b0>
 80137e4:	8989c83a 	sub	r4,r17,r6
 80137e8:	8905803a 	cmpltu	r2,r17,r4
 80137ec:	4267c83a 	sub	r19,r8,r9
 80137f0:	98a7c83a 	sub	r19,r19,r2
 80137f4:	9880202c 	andhi	r2,r19,128
 80137f8:	10006326 	beq	r2,zero,8013988 <__adddf3+0x4d4>
 80137fc:	3463c83a 	sub	r17,r6,r17
 8013800:	4a07c83a 	sub	r3,r9,r8
 8013804:	344d803a 	cmpltu	r6,r6,r17
 8013808:	19a7c83a 	sub	r19,r3,r6
 801380c:	3825883a 	mov	r18,r7
 8013810:	983f8a1e 	bne	r19,zero,801363c <__adddf3+0x188>
 8013814:	8809883a 	mov	r4,r17
 8013818:	8015cf40 	call	8015cf4 <__clzsi2>
 801381c:	10800804 	addi	r2,r2,32
 8013820:	10fffe04 	addi	r3,r2,-8
 8013824:	010007c4 	movi	r4,31
 8013828:	20ff890e 	bge	r4,r3,8013650 <__adddf3+0x19c>
 801382c:	10bff604 	addi	r2,r2,-40
 8013830:	8884983a 	sll	r2,r17,r2
 8013834:	0023883a 	mov	r17,zero
 8013838:	1c3f8c0e 	bge	r3,r16,801366c <__adddf3+0x1b8>
 801383c:	023fe034 	movhi	r8,65408
 8013840:	423fffc4 	addi	r8,r8,-1
 8013844:	80e1c83a 	sub	r16,r16,r3
 8013848:	1210703a 	and	r8,r2,r8
 801384c:	003f3806 	br	8013530 <__adddf3+0x7c>
 8013850:	9007883a 	mov	r3,r18
 8013854:	0011883a 	mov	r8,zero
 8013858:	0005883a 	mov	r2,zero
 801385c:	003f4c06 	br	8013590 <__adddf3+0xdc>
 8013860:	498cb03a 	or	r6,r9,r6
 8013864:	300cc03a 	cmpne	r6,r6,zero
 8013868:	0007883a 	mov	r3,zero
 801386c:	003f6806 	br	8013610 <__adddf3+0x15c>
 8013870:	20009c1e 	bne	r4,zero,8013ae4 <__adddf3+0x630>
 8013874:	80800044 	addi	r2,r16,1
 8013878:	1141ffcc 	andi	r5,r2,2047
 801387c:	01000044 	movi	r4,1
 8013880:	2140670e 	bge	r4,r5,8013a20 <__adddf3+0x56c>
 8013884:	0101ffc4 	movi	r4,2047
 8013888:	11007f26 	beq	r2,r4,8013a88 <__adddf3+0x5d4>
 801388c:	898d883a 	add	r6,r17,r6
 8013890:	4247883a 	add	r3,r8,r9
 8013894:	3451803a 	cmpltu	r8,r6,r17
 8013898:	40d1883a 	add	r8,r8,r3
 801389c:	402297fa 	slli	r17,r8,31
 80138a0:	300cd07a 	srli	r6,r6,1
 80138a4:	4010d07a 	srli	r8,r8,1
 80138a8:	1021883a 	mov	r16,r2
 80138ac:	89a2b03a 	or	r17,r17,r6
 80138b0:	003f1f06 	br	8013530 <__adddf3+0x7c>
 80138b4:	0081ffc4 	movi	r2,2047
 80138b8:	80bf481e 	bne	r16,r2,80135dc <__adddf3+0x128>
 80138bc:	003f1c06 	br	8013530 <__adddf3+0x7c>
 80138c0:	843ff844 	addi	r16,r16,-31
 80138c4:	01000804 	movi	r4,32
 80138c8:	1406d83a 	srl	r3,r2,r16
 80138cc:	41005026 	beq	r8,r4,8013a10 <__adddf3+0x55c>
 80138d0:	01001004 	movi	r4,64
 80138d4:	2211c83a 	sub	r8,r4,r8
 80138d8:	1204983a 	sll	r2,r2,r8
 80138dc:	88a2b03a 	or	r17,r17,r2
 80138e0:	8822c03a 	cmpne	r17,r17,zero
 80138e4:	1c62b03a 	or	r17,r3,r17
 80138e8:	0011883a 	mov	r8,zero
 80138ec:	0021883a 	mov	r16,zero
 80138f0:	003f7106 	br	80136b8 <__adddf3+0x204>
 80138f4:	193ff804 	addi	r4,r3,-32
 80138f8:	00800804 	movi	r2,32
 80138fc:	4908d83a 	srl	r4,r9,r4
 8013900:	18804526 	beq	r3,r2,8013a18 <__adddf3+0x564>
 8013904:	00801004 	movi	r2,64
 8013908:	10c5c83a 	sub	r2,r2,r3
 801390c:	4886983a 	sll	r3,r9,r2
 8013910:	198cb03a 	or	r6,r3,r6
 8013914:	300cc03a 	cmpne	r6,r6,zero
 8013918:	218cb03a 	or	r6,r4,r6
 801391c:	0007883a 	mov	r3,zero
 8013920:	003f3b06 	br	8013610 <__adddf3+0x15c>
 8013924:	80002a26 	beq	r16,zero,80139d0 <__adddf3+0x51c>
 8013928:	0101ffc4 	movi	r4,2047
 801392c:	11006826 	beq	r2,r4,8013ad0 <__adddf3+0x61c>
 8013930:	00c7c83a 	sub	r3,zero,r3
 8013934:	42002034 	orhi	r8,r8,128
 8013938:	01000e04 	movi	r4,56
 801393c:	20c07c16 	blt	r4,r3,8013b30 <__adddf3+0x67c>
 8013940:	010007c4 	movi	r4,31
 8013944:	20c0da16 	blt	r4,r3,8013cb0 <__adddf3+0x7fc>
 8013948:	01000804 	movi	r4,32
 801394c:	20c9c83a 	sub	r4,r4,r3
 8013950:	4114983a 	sll	r10,r8,r4
 8013954:	88cad83a 	srl	r5,r17,r3
 8013958:	8908983a 	sll	r4,r17,r4
 801395c:	40c6d83a 	srl	r3,r8,r3
 8013960:	5162b03a 	or	r17,r10,r5
 8013964:	2008c03a 	cmpne	r4,r4,zero
 8013968:	8922b03a 	or	r17,r17,r4
 801396c:	3463c83a 	sub	r17,r6,r17
 8013970:	48c7c83a 	sub	r3,r9,r3
 8013974:	344d803a 	cmpltu	r6,r6,r17
 8013978:	1991c83a 	sub	r8,r3,r6
 801397c:	1021883a 	mov	r16,r2
 8013980:	3825883a 	mov	r18,r7
 8013984:	003f2706 	br	8013624 <__adddf3+0x170>
 8013988:	24d0b03a 	or	r8,r4,r19
 801398c:	40001b1e 	bne	r8,zero,80139fc <__adddf3+0x548>
 8013990:	0005883a 	mov	r2,zero
 8013994:	0007883a 	mov	r3,zero
 8013998:	0021883a 	mov	r16,zero
 801399c:	003f4d06 	br	80136d4 <__adddf3+0x220>
 80139a0:	008007c4 	movi	r2,31
 80139a4:	11003c16 	blt	r2,r4,8013a98 <__adddf3+0x5e4>
 80139a8:	00800804 	movi	r2,32
 80139ac:	1105c83a 	sub	r2,r2,r4
 80139b0:	488e983a 	sll	r7,r9,r2
 80139b4:	310ad83a 	srl	r5,r6,r4
 80139b8:	3084983a 	sll	r2,r6,r2
 80139bc:	4912d83a 	srl	r9,r9,r4
 80139c0:	394ab03a 	or	r5,r7,r5
 80139c4:	1004c03a 	cmpne	r2,r2,zero
 80139c8:	288ab03a 	or	r5,r5,r2
 80139cc:	003f5306 	br	801371c <__adddf3+0x268>
 80139d0:	4448b03a 	or	r4,r8,r17
 80139d4:	20003e26 	beq	r4,zero,8013ad0 <__adddf3+0x61c>
 80139d8:	00c6303a 	nor	r3,zero,r3
 80139dc:	18003a1e 	bne	r3,zero,8013ac8 <__adddf3+0x614>
 80139e0:	3463c83a 	sub	r17,r6,r17
 80139e4:	4a07c83a 	sub	r3,r9,r8
 80139e8:	344d803a 	cmpltu	r6,r6,r17
 80139ec:	1991c83a 	sub	r8,r3,r6
 80139f0:	1021883a 	mov	r16,r2
 80139f4:	3825883a 	mov	r18,r7
 80139f8:	003f0a06 	br	8013624 <__adddf3+0x170>
 80139fc:	2023883a 	mov	r17,r4
 8013a00:	003f0d06 	br	8013638 <__adddf3+0x184>
 8013a04:	0081ffc4 	movi	r2,2047
 8013a08:	80bf3f1e 	bne	r16,r2,8013708 <__adddf3+0x254>
 8013a0c:	003ec806 	br	8013530 <__adddf3+0x7c>
 8013a10:	0005883a 	mov	r2,zero
 8013a14:	003fb106 	br	80138dc <__adddf3+0x428>
 8013a18:	0007883a 	mov	r3,zero
 8013a1c:	003fbc06 	br	8013910 <__adddf3+0x45c>
 8013a20:	4444b03a 	or	r2,r8,r17
 8013a24:	8000871e 	bne	r16,zero,8013c44 <__adddf3+0x790>
 8013a28:	1000ba26 	beq	r2,zero,8013d14 <__adddf3+0x860>
 8013a2c:	4984b03a 	or	r2,r9,r6
 8013a30:	103ebf26 	beq	r2,zero,8013530 <__adddf3+0x7c>
 8013a34:	8985883a 	add	r2,r17,r6
 8013a38:	4247883a 	add	r3,r8,r9
 8013a3c:	1451803a 	cmpltu	r8,r2,r17
 8013a40:	40d1883a 	add	r8,r8,r3
 8013a44:	40c0202c 	andhi	r3,r8,128
 8013a48:	1023883a 	mov	r17,r2
 8013a4c:	183f1a26 	beq	r3,zero,80136b8 <__adddf3+0x204>
 8013a50:	00bfe034 	movhi	r2,65408
 8013a54:	10bfffc4 	addi	r2,r2,-1
 8013a58:	2021883a 	mov	r16,r4
 8013a5c:	4090703a 	and	r8,r8,r2
 8013a60:	003eb306 	br	8013530 <__adddf3+0x7c>
 8013a64:	4444b03a 	or	r2,r8,r17
 8013a68:	8000291e 	bne	r16,zero,8013b10 <__adddf3+0x65c>
 8013a6c:	10004b1e 	bne	r2,zero,8013b9c <__adddf3+0x6e8>
 8013a70:	4990b03a 	or	r8,r9,r6
 8013a74:	40008b26 	beq	r8,zero,8013ca4 <__adddf3+0x7f0>
 8013a78:	4811883a 	mov	r8,r9
 8013a7c:	3023883a 	mov	r17,r6
 8013a80:	3825883a 	mov	r18,r7
 8013a84:	003eaa06 	br	8013530 <__adddf3+0x7c>
 8013a88:	1021883a 	mov	r16,r2
 8013a8c:	0011883a 	mov	r8,zero
 8013a90:	0005883a 	mov	r2,zero
 8013a94:	003f0f06 	br	80136d4 <__adddf3+0x220>
 8013a98:	217ff804 	addi	r5,r4,-32
 8013a9c:	00800804 	movi	r2,32
 8013aa0:	494ad83a 	srl	r5,r9,r5
 8013aa4:	20807d26 	beq	r4,r2,8013c9c <__adddf3+0x7e8>
 8013aa8:	00801004 	movi	r2,64
 8013aac:	1109c83a 	sub	r4,r2,r4
 8013ab0:	4912983a 	sll	r9,r9,r4
 8013ab4:	498cb03a 	or	r6,r9,r6
 8013ab8:	300cc03a 	cmpne	r6,r6,zero
 8013abc:	298ab03a 	or	r5,r5,r6
 8013ac0:	0013883a 	mov	r9,zero
 8013ac4:	003f1506 	br	801371c <__adddf3+0x268>
 8013ac8:	0101ffc4 	movi	r4,2047
 8013acc:	113f9a1e 	bne	r2,r4,8013938 <__adddf3+0x484>
 8013ad0:	4811883a 	mov	r8,r9
 8013ad4:	3023883a 	mov	r17,r6
 8013ad8:	1021883a 	mov	r16,r2
 8013adc:	3825883a 	mov	r18,r7
 8013ae0:	003e9306 	br	8013530 <__adddf3+0x7c>
 8013ae4:	8000161e 	bne	r16,zero,8013b40 <__adddf3+0x68c>
 8013ae8:	444ab03a 	or	r5,r8,r17
 8013aec:	28005126 	beq	r5,zero,8013c34 <__adddf3+0x780>
 8013af0:	0108303a 	nor	r4,zero,r4
 8013af4:	20004d1e 	bne	r4,zero,8013c2c <__adddf3+0x778>
 8013af8:	89a3883a 	add	r17,r17,r6
 8013afc:	4253883a 	add	r9,r8,r9
 8013b00:	898d803a 	cmpltu	r6,r17,r6
 8013b04:	3251883a 	add	r8,r6,r9
 8013b08:	1021883a 	mov	r16,r2
 8013b0c:	003f0806 	br	8013730 <__adddf3+0x27c>
 8013b10:	1000301e 	bne	r2,zero,8013bd4 <__adddf3+0x720>
 8013b14:	4984b03a 	or	r2,r9,r6
 8013b18:	10007126 	beq	r2,zero,8013ce0 <__adddf3+0x82c>
 8013b1c:	4811883a 	mov	r8,r9
 8013b20:	3023883a 	mov	r17,r6
 8013b24:	3825883a 	mov	r18,r7
 8013b28:	0401ffc4 	movi	r16,2047
 8013b2c:	003e8006 	br	8013530 <__adddf3+0x7c>
 8013b30:	4462b03a 	or	r17,r8,r17
 8013b34:	8822c03a 	cmpne	r17,r17,zero
 8013b38:	0007883a 	mov	r3,zero
 8013b3c:	003f8b06 	br	801396c <__adddf3+0x4b8>
 8013b40:	0141ffc4 	movi	r5,2047
 8013b44:	11403b26 	beq	r2,r5,8013c34 <__adddf3+0x780>
 8013b48:	0109c83a 	sub	r4,zero,r4
 8013b4c:	42002034 	orhi	r8,r8,128
 8013b50:	01400e04 	movi	r5,56
 8013b54:	29006716 	blt	r5,r4,8013cf4 <__adddf3+0x840>
 8013b58:	014007c4 	movi	r5,31
 8013b5c:	29007016 	blt	r5,r4,8013d20 <__adddf3+0x86c>
 8013b60:	01400804 	movi	r5,32
 8013b64:	290bc83a 	sub	r5,r5,r4
 8013b68:	4154983a 	sll	r10,r8,r5
 8013b6c:	890ed83a 	srl	r7,r17,r4
 8013b70:	894a983a 	sll	r5,r17,r5
 8013b74:	4108d83a 	srl	r4,r8,r4
 8013b78:	51e2b03a 	or	r17,r10,r7
 8013b7c:	280ac03a 	cmpne	r5,r5,zero
 8013b80:	8962b03a 	or	r17,r17,r5
 8013b84:	89a3883a 	add	r17,r17,r6
 8013b88:	2253883a 	add	r9,r4,r9
 8013b8c:	898d803a 	cmpltu	r6,r17,r6
 8013b90:	3251883a 	add	r8,r6,r9
 8013b94:	1021883a 	mov	r16,r2
 8013b98:	003ee506 	br	8013730 <__adddf3+0x27c>
 8013b9c:	4984b03a 	or	r2,r9,r6
 8013ba0:	103e6326 	beq	r2,zero,8013530 <__adddf3+0x7c>
 8013ba4:	8987c83a 	sub	r3,r17,r6
 8013ba8:	88c9803a 	cmpltu	r4,r17,r3
 8013bac:	4245c83a 	sub	r2,r8,r9
 8013bb0:	1105c83a 	sub	r2,r2,r4
 8013bb4:	1100202c 	andhi	r4,r2,128
 8013bb8:	203ebb26 	beq	r4,zero,80136a8 <__adddf3+0x1f4>
 8013bbc:	3463c83a 	sub	r17,r6,r17
 8013bc0:	4a07c83a 	sub	r3,r9,r8
 8013bc4:	344d803a 	cmpltu	r6,r6,r17
 8013bc8:	1991c83a 	sub	r8,r3,r6
 8013bcc:	3825883a 	mov	r18,r7
 8013bd0:	003e5706 	br	8013530 <__adddf3+0x7c>
 8013bd4:	4984b03a 	or	r2,r9,r6
 8013bd8:	10002e26 	beq	r2,zero,8013c94 <__adddf3+0x7e0>
 8013bdc:	4004d0fa 	srli	r2,r8,3
 8013be0:	8822d0fa 	srli	r17,r17,3
 8013be4:	4010977a 	slli	r8,r8,29
 8013be8:	10c0022c 	andhi	r3,r2,8
 8013bec:	4462b03a 	or	r17,r8,r17
 8013bf0:	18000826 	beq	r3,zero,8013c14 <__adddf3+0x760>
 8013bf4:	4808d0fa 	srli	r4,r9,3
 8013bf8:	20c0022c 	andhi	r3,r4,8
 8013bfc:	1800051e 	bne	r3,zero,8013c14 <__adddf3+0x760>
 8013c00:	300cd0fa 	srli	r6,r6,3
 8013c04:	4806977a 	slli	r3,r9,29
 8013c08:	2005883a 	mov	r2,r4
 8013c0c:	3825883a 	mov	r18,r7
 8013c10:	19a2b03a 	or	r17,r3,r6
 8013c14:	8810d77a 	srli	r8,r17,29
 8013c18:	100490fa 	slli	r2,r2,3
 8013c1c:	882290fa 	slli	r17,r17,3
 8013c20:	0401ffc4 	movi	r16,2047
 8013c24:	4090b03a 	or	r8,r8,r2
 8013c28:	003e4106 	br	8013530 <__adddf3+0x7c>
 8013c2c:	0141ffc4 	movi	r5,2047
 8013c30:	117fc71e 	bne	r2,r5,8013b50 <__adddf3+0x69c>
 8013c34:	4811883a 	mov	r8,r9
 8013c38:	3023883a 	mov	r17,r6
 8013c3c:	1021883a 	mov	r16,r2
 8013c40:	003e3b06 	br	8013530 <__adddf3+0x7c>
 8013c44:	10002f26 	beq	r2,zero,8013d04 <__adddf3+0x850>
 8013c48:	4984b03a 	or	r2,r9,r6
 8013c4c:	10001126 	beq	r2,zero,8013c94 <__adddf3+0x7e0>
 8013c50:	4004d0fa 	srli	r2,r8,3
 8013c54:	8822d0fa 	srli	r17,r17,3
 8013c58:	4010977a 	slli	r8,r8,29
 8013c5c:	10c0022c 	andhi	r3,r2,8
 8013c60:	4462b03a 	or	r17,r8,r17
 8013c64:	183feb26 	beq	r3,zero,8013c14 <__adddf3+0x760>
 8013c68:	4808d0fa 	srli	r4,r9,3
 8013c6c:	20c0022c 	andhi	r3,r4,8
 8013c70:	183fe81e 	bne	r3,zero,8013c14 <__adddf3+0x760>
 8013c74:	300cd0fa 	srli	r6,r6,3
 8013c78:	4806977a 	slli	r3,r9,29
 8013c7c:	2005883a 	mov	r2,r4
 8013c80:	19a2b03a 	or	r17,r3,r6
 8013c84:	003fe306 	br	8013c14 <__adddf3+0x760>
 8013c88:	0011883a 	mov	r8,zero
 8013c8c:	0005883a 	mov	r2,zero
 8013c90:	003e3f06 	br	8013590 <__adddf3+0xdc>
 8013c94:	0401ffc4 	movi	r16,2047
 8013c98:	003e2506 	br	8013530 <__adddf3+0x7c>
 8013c9c:	0013883a 	mov	r9,zero
 8013ca0:	003f8406 	br	8013ab4 <__adddf3+0x600>
 8013ca4:	0005883a 	mov	r2,zero
 8013ca8:	0007883a 	mov	r3,zero
 8013cac:	003e8906 	br	80136d4 <__adddf3+0x220>
 8013cb0:	197ff804 	addi	r5,r3,-32
 8013cb4:	01000804 	movi	r4,32
 8013cb8:	414ad83a 	srl	r5,r8,r5
 8013cbc:	19002426 	beq	r3,r4,8013d50 <__adddf3+0x89c>
 8013cc0:	01001004 	movi	r4,64
 8013cc4:	20c7c83a 	sub	r3,r4,r3
 8013cc8:	40c6983a 	sll	r3,r8,r3
 8013ccc:	1c46b03a 	or	r3,r3,r17
 8013cd0:	1806c03a 	cmpne	r3,r3,zero
 8013cd4:	28e2b03a 	or	r17,r5,r3
 8013cd8:	0007883a 	mov	r3,zero
 8013cdc:	003f2306 	br	801396c <__adddf3+0x4b8>
 8013ce0:	0007883a 	mov	r3,zero
 8013ce4:	5811883a 	mov	r8,r11
 8013ce8:	00bfffc4 	movi	r2,-1
 8013cec:	0401ffc4 	movi	r16,2047
 8013cf0:	003e7806 	br	80136d4 <__adddf3+0x220>
 8013cf4:	4462b03a 	or	r17,r8,r17
 8013cf8:	8822c03a 	cmpne	r17,r17,zero
 8013cfc:	0009883a 	mov	r4,zero
 8013d00:	003fa006 	br	8013b84 <__adddf3+0x6d0>
 8013d04:	4811883a 	mov	r8,r9
 8013d08:	3023883a 	mov	r17,r6
 8013d0c:	0401ffc4 	movi	r16,2047
 8013d10:	003e0706 	br	8013530 <__adddf3+0x7c>
 8013d14:	4811883a 	mov	r8,r9
 8013d18:	3023883a 	mov	r17,r6
 8013d1c:	003e0406 	br	8013530 <__adddf3+0x7c>
 8013d20:	21fff804 	addi	r7,r4,-32
 8013d24:	01400804 	movi	r5,32
 8013d28:	41ced83a 	srl	r7,r8,r7
 8013d2c:	21400a26 	beq	r4,r5,8013d58 <__adddf3+0x8a4>
 8013d30:	01401004 	movi	r5,64
 8013d34:	2909c83a 	sub	r4,r5,r4
 8013d38:	4108983a 	sll	r4,r8,r4
 8013d3c:	2448b03a 	or	r4,r4,r17
 8013d40:	2008c03a 	cmpne	r4,r4,zero
 8013d44:	3922b03a 	or	r17,r7,r4
 8013d48:	0009883a 	mov	r4,zero
 8013d4c:	003f8d06 	br	8013b84 <__adddf3+0x6d0>
 8013d50:	0007883a 	mov	r3,zero
 8013d54:	003fdd06 	br	8013ccc <__adddf3+0x818>
 8013d58:	0009883a 	mov	r4,zero
 8013d5c:	003ff706 	br	8013d3c <__adddf3+0x888>

08013d60 <__divdf3>:
 8013d60:	defff004 	addi	sp,sp,-64
 8013d64:	dc800815 	stw	r18,32(sp)
 8013d68:	2824d53a 	srli	r18,r5,20
 8013d6c:	dd800c15 	stw	r22,48(sp)
 8013d70:	282cd7fa 	srli	r22,r5,31
 8013d74:	dc000615 	stw	r16,24(sp)
 8013d78:	04000434 	movhi	r16,16
 8013d7c:	843fffc4 	addi	r16,r16,-1
 8013d80:	dfc00f15 	stw	ra,60(sp)
 8013d84:	df000e15 	stw	fp,56(sp)
 8013d88:	ddc00d15 	stw	r23,52(sp)
 8013d8c:	dd400b15 	stw	r21,44(sp)
 8013d90:	dd000a15 	stw	r20,40(sp)
 8013d94:	dcc00915 	stw	r19,36(sp)
 8013d98:	dc400715 	stw	r17,28(sp)
 8013d9c:	9481ffcc 	andi	r18,r18,2047
 8013da0:	2c20703a 	and	r16,r5,r16
 8013da4:	b2003fcc 	andi	r8,r22,255
 8013da8:	90006126 	beq	r18,zero,8013f30 <__divdf3+0x1d0>
 8013dac:	0081ffc4 	movi	r2,2047
 8013db0:	202b883a 	mov	r21,r4
 8013db4:	90803726 	beq	r18,r2,8013e94 <__divdf3+0x134>
 8013db8:	80800434 	orhi	r2,r16,16
 8013dbc:	100490fa 	slli	r2,r2,3
 8013dc0:	2020d77a 	srli	r16,r4,29
 8013dc4:	202a90fa 	slli	r21,r4,3
 8013dc8:	94bf0044 	addi	r18,r18,-1023
 8013dcc:	80a0b03a 	or	r16,r16,r2
 8013dd0:	0013883a 	mov	r9,zero
 8013dd4:	000b883a 	mov	r5,zero
 8013dd8:	3806d53a 	srli	r3,r7,20
 8013ddc:	382ed7fa 	srli	r23,r7,31
 8013de0:	04400434 	movhi	r17,16
 8013de4:	8c7fffc4 	addi	r17,r17,-1
 8013de8:	18c1ffcc 	andi	r3,r3,2047
 8013dec:	3029883a 	mov	r20,r6
 8013df0:	3c62703a 	and	r17,r7,r17
 8013df4:	bf003fcc 	andi	fp,r23,255
 8013df8:	18006e26 	beq	r3,zero,8013fb4 <__divdf3+0x254>
 8013dfc:	0081ffc4 	movi	r2,2047
 8013e00:	18806626 	beq	r3,r2,8013f9c <__divdf3+0x23c>
 8013e04:	88800434 	orhi	r2,r17,16
 8013e08:	100490fa 	slli	r2,r2,3
 8013e0c:	3022d77a 	srli	r17,r6,29
 8013e10:	302890fa 	slli	r20,r6,3
 8013e14:	18ff0044 	addi	r3,r3,-1023
 8013e18:	88a2b03a 	or	r17,r17,r2
 8013e1c:	000f883a 	mov	r7,zero
 8013e20:	b5e6f03a 	xor	r19,r22,r23
 8013e24:	3a4cb03a 	or	r6,r7,r9
 8013e28:	008003c4 	movi	r2,15
 8013e2c:	9809883a 	mov	r4,r19
 8013e30:	90c7c83a 	sub	r3,r18,r3
 8013e34:	9cc03fcc 	andi	r19,r19,255
 8013e38:	11809636 	bltu	r2,r6,8014094 <__divdf3+0x334>
 8013e3c:	300c90ba 	slli	r6,r6,2
 8013e40:	00820074 	movhi	r2,2049
 8013e44:	108f9504 	addi	r2,r2,15956
 8013e48:	308d883a 	add	r6,r6,r2
 8013e4c:	30800017 	ldw	r2,0(r6)
 8013e50:	1000683a 	jmp	r2
 8013e54:	08014094 	ori	zero,at,1282
 8013e58:	08013ecc 	andi	zero,at,1275
 8013e5c:	08014084 	addi	zero,at,1282
 8013e60:	08013ec0 	call	8013ec <__alt_mem_sdram-0x77fec14>
 8013e64:	08014084 	addi	zero,at,1282
 8013e68:	08014058 	cmpnei	zero,at,1281
 8013e6c:	08014084 	addi	zero,at,1282
 8013e70:	08013ec0 	call	8013ec <__alt_mem_sdram-0x77fec14>
 8013e74:	08013ecc 	andi	zero,at,1275
 8013e78:	08013ecc 	andi	zero,at,1275
 8013e7c:	08014058 	cmpnei	zero,at,1281
 8013e80:	08013ec0 	call	8013ec <__alt_mem_sdram-0x77fec14>
 8013e84:	08013eb0 	cmpltui	zero,at,1274
 8013e88:	08013eb0 	cmpltui	zero,at,1274
 8013e8c:	08013eb0 	cmpltui	zero,at,1274
 8013e90:	0801441c 	xori	zero,at,1296
 8013e94:	2404b03a 	or	r2,r4,r16
 8013e98:	10006c1e 	bne	r2,zero,801404c <__divdf3+0x2ec>
 8013e9c:	02400204 	movi	r9,8
 8013ea0:	0021883a 	mov	r16,zero
 8013ea4:	002b883a 	mov	r21,zero
 8013ea8:	01400084 	movi	r5,2
 8013eac:	003fca06 	br	8013dd8 <__divdf3+0x78>
 8013eb0:	8023883a 	mov	r17,r16
 8013eb4:	a829883a 	mov	r20,r21
 8013eb8:	4039883a 	mov	fp,r8
 8013ebc:	280f883a 	mov	r7,r5
 8013ec0:	00800084 	movi	r2,2
 8013ec4:	3881601e 	bne	r7,r2,8014448 <__divdf3+0x6e8>
 8013ec8:	e027883a 	mov	r19,fp
 8013ecc:	9900004c 	andi	r4,r19,1
 8013ed0:	0081ffc4 	movi	r2,2047
 8013ed4:	0021883a 	mov	r16,zero
 8013ed8:	002b883a 	mov	r21,zero
 8013edc:	1004953a 	slli	r2,r2,20
 8013ee0:	20c03fcc 	andi	r3,r4,255
 8013ee4:	01400434 	movhi	r5,16
 8013ee8:	297fffc4 	addi	r5,r5,-1
 8013eec:	180697fa 	slli	r3,r3,31
 8013ef0:	8160703a 	and	r16,r16,r5
 8013ef4:	80a0b03a 	or	r16,r16,r2
 8013ef8:	80c6b03a 	or	r3,r16,r3
 8013efc:	a805883a 	mov	r2,r21
 8013f00:	dfc00f17 	ldw	ra,60(sp)
 8013f04:	df000e17 	ldw	fp,56(sp)
 8013f08:	ddc00d17 	ldw	r23,52(sp)
 8013f0c:	dd800c17 	ldw	r22,48(sp)
 8013f10:	dd400b17 	ldw	r21,44(sp)
 8013f14:	dd000a17 	ldw	r20,40(sp)
 8013f18:	dcc00917 	ldw	r19,36(sp)
 8013f1c:	dc800817 	ldw	r18,32(sp)
 8013f20:	dc400717 	ldw	r17,28(sp)
 8013f24:	dc000617 	ldw	r16,24(sp)
 8013f28:	dec01004 	addi	sp,sp,64
 8013f2c:	f800283a 	ret
 8013f30:	2404b03a 	or	r2,r4,r16
 8013f34:	2023883a 	mov	r17,r4
 8013f38:	10003f26 	beq	r2,zero,8014038 <__divdf3+0x2d8>
 8013f3c:	80015e26 	beq	r16,zero,80144b8 <__divdf3+0x758>
 8013f40:	8009883a 	mov	r4,r16
 8013f44:	d9800215 	stw	r6,8(sp)
 8013f48:	d9c00515 	stw	r7,20(sp)
 8013f4c:	da000415 	stw	r8,16(sp)
 8013f50:	8015cf40 	call	8015cf4 <__clzsi2>
 8013f54:	d9800217 	ldw	r6,8(sp)
 8013f58:	d9c00517 	ldw	r7,20(sp)
 8013f5c:	da000417 	ldw	r8,16(sp)
 8013f60:	113ffd44 	addi	r4,r2,-11
 8013f64:	00c00704 	movi	r3,28
 8013f68:	19014f16 	blt	r3,r4,80144a8 <__divdf3+0x748>
 8013f6c:	00c00744 	movi	r3,29
 8013f70:	157ffe04 	addi	r21,r2,-8
 8013f74:	1907c83a 	sub	r3,r3,r4
 8013f78:	8560983a 	sll	r16,r16,r21
 8013f7c:	88c6d83a 	srl	r3,r17,r3
 8013f80:	8d6a983a 	sll	r21,r17,r21
 8013f84:	1c20b03a 	or	r16,r3,r16
 8013f88:	1080fcc4 	addi	r2,r2,1011
 8013f8c:	00a5c83a 	sub	r18,zero,r2
 8013f90:	0013883a 	mov	r9,zero
 8013f94:	000b883a 	mov	r5,zero
 8013f98:	003f8f06 	br	8013dd8 <__divdf3+0x78>
 8013f9c:	3444b03a 	or	r2,r6,r17
 8013fa0:	1000231e 	bne	r2,zero,8014030 <__divdf3+0x2d0>
 8013fa4:	0023883a 	mov	r17,zero
 8013fa8:	0029883a 	mov	r20,zero
 8013fac:	01c00084 	movi	r7,2
 8013fb0:	003f9b06 	br	8013e20 <__divdf3+0xc0>
 8013fb4:	3444b03a 	or	r2,r6,r17
 8013fb8:	10001926 	beq	r2,zero,8014020 <__divdf3+0x2c0>
 8013fbc:	88014b26 	beq	r17,zero,80144ec <__divdf3+0x78c>
 8013fc0:	8809883a 	mov	r4,r17
 8013fc4:	d9400115 	stw	r5,4(sp)
 8013fc8:	d9800215 	stw	r6,8(sp)
 8013fcc:	da000415 	stw	r8,16(sp)
 8013fd0:	da400315 	stw	r9,12(sp)
 8013fd4:	8015cf40 	call	8015cf4 <__clzsi2>
 8013fd8:	d9400117 	ldw	r5,4(sp)
 8013fdc:	d9800217 	ldw	r6,8(sp)
 8013fe0:	da000417 	ldw	r8,16(sp)
 8013fe4:	da400317 	ldw	r9,12(sp)
 8013fe8:	113ffd44 	addi	r4,r2,-11
 8013fec:	00c00704 	movi	r3,28
 8013ff0:	19013a16 	blt	r3,r4,80144dc <__divdf3+0x77c>
 8013ff4:	00c00744 	movi	r3,29
 8013ff8:	153ffe04 	addi	r20,r2,-8
 8013ffc:	1907c83a 	sub	r3,r3,r4
 8014000:	8d22983a 	sll	r17,r17,r20
 8014004:	30c6d83a 	srl	r3,r6,r3
 8014008:	3528983a 	sll	r20,r6,r20
 801400c:	1c62b03a 	or	r17,r3,r17
 8014010:	1080fcc4 	addi	r2,r2,1011
 8014014:	0087c83a 	sub	r3,zero,r2
 8014018:	000f883a 	mov	r7,zero
 801401c:	003f8006 	br	8013e20 <__divdf3+0xc0>
 8014020:	0023883a 	mov	r17,zero
 8014024:	0029883a 	mov	r20,zero
 8014028:	01c00044 	movi	r7,1
 801402c:	003f7c06 	br	8013e20 <__divdf3+0xc0>
 8014030:	01c000c4 	movi	r7,3
 8014034:	003f7a06 	br	8013e20 <__divdf3+0xc0>
 8014038:	02400104 	movi	r9,4
 801403c:	0021883a 	mov	r16,zero
 8014040:	002b883a 	mov	r21,zero
 8014044:	01400044 	movi	r5,1
 8014048:	003f6306 	br	8013dd8 <__divdf3+0x78>
 801404c:	02400304 	movi	r9,12
 8014050:	014000c4 	movi	r5,3
 8014054:	003f6006 	br	8013dd8 <__divdf3+0x78>
 8014058:	04000434 	movhi	r16,16
 801405c:	0009883a 	mov	r4,zero
 8014060:	843fffc4 	addi	r16,r16,-1
 8014064:	057fffc4 	movi	r21,-1
 8014068:	0081ffc4 	movi	r2,2047
 801406c:	003f9b06 	br	8013edc <__divdf3+0x17c>
 8014070:	00c00044 	movi	r3,1
 8014074:	1887c83a 	sub	r3,r3,r2
 8014078:	01000e04 	movi	r4,56
 801407c:	20c1530e 	bge	r4,r3,80145cc <__divdf3+0x86c>
 8014080:	9900004c 	andi	r4,r19,1
 8014084:	0005883a 	mov	r2,zero
 8014088:	0021883a 	mov	r16,zero
 801408c:	002b883a 	mov	r21,zero
 8014090:	003f9206 	br	8013edc <__divdf3+0x17c>
 8014094:	8c012e36 	bltu	r17,r16,8014550 <__divdf3+0x7f0>
 8014098:	84412c26 	beq	r16,r17,801454c <__divdf3+0x7ec>
 801409c:	a82f883a 	mov	r23,r21
 80140a0:	18ffffc4 	addi	r3,r3,-1
 80140a4:	002b883a 	mov	r21,zero
 80140a8:	a004d63a 	srli	r2,r20,24
 80140ac:	8822923a 	slli	r17,r17,8
 80140b0:	a028923a 	slli	r20,r20,8
 80140b4:	8009883a 	mov	r4,r16
 80140b8:	88acb03a 	or	r22,r17,r2
 80140bc:	dd000015 	stw	r20,0(sp)
 80140c0:	b028d43a 	srli	r20,r22,16
 80140c4:	d8c00215 	stw	r3,8(sp)
 80140c8:	b4bfffcc 	andi	r18,r22,65535
 80140cc:	a00b883a 	mov	r5,r20
 80140d0:	80085780 	call	8008578 <__udivsi3>
 80140d4:	100b883a 	mov	r5,r2
 80140d8:	9009883a 	mov	r4,r18
 80140dc:	1023883a 	mov	r17,r2
 80140e0:	80086340 	call	8008634 <__mulsi3>
 80140e4:	8009883a 	mov	r4,r16
 80140e8:	a00b883a 	mov	r5,r20
 80140ec:	1039883a 	mov	fp,r2
 80140f0:	80085dc0 	call	80085dc <__umodsi3>
 80140f4:	1004943a 	slli	r2,r2,16
 80140f8:	b808d43a 	srli	r4,r23,16
 80140fc:	d8c00217 	ldw	r3,8(sp)
 8014100:	2084b03a 	or	r2,r4,r2
 8014104:	1700062e 	bgeu	r2,fp,8014120 <__divdf3+0x3c0>
 8014108:	1585883a 	add	r2,r2,r22
 801410c:	893fffc4 	addi	r4,r17,-1
 8014110:	15811d36 	bltu	r2,r22,8014588 <__divdf3+0x828>
 8014114:	17011c2e 	bgeu	r2,fp,8014588 <__divdf3+0x828>
 8014118:	8c7fff84 	addi	r17,r17,-2
 801411c:	1585883a 	add	r2,r2,r22
 8014120:	1739c83a 	sub	fp,r2,fp
 8014124:	a00b883a 	mov	r5,r20
 8014128:	e009883a 	mov	r4,fp
 801412c:	d8c00215 	stw	r3,8(sp)
 8014130:	80085780 	call	8008578 <__udivsi3>
 8014134:	100b883a 	mov	r5,r2
 8014138:	9009883a 	mov	r4,r18
 801413c:	1021883a 	mov	r16,r2
 8014140:	80086340 	call	8008634 <__mulsi3>
 8014144:	a00b883a 	mov	r5,r20
 8014148:	e009883a 	mov	r4,fp
 801414c:	d8800415 	stw	r2,16(sp)
 8014150:	80085dc0 	call	80085dc <__umodsi3>
 8014154:	1004943a 	slli	r2,r2,16
 8014158:	da000417 	ldw	r8,16(sp)
 801415c:	bdffffcc 	andi	r23,r23,65535
 8014160:	b884b03a 	or	r2,r23,r2
 8014164:	d8c00217 	ldw	r3,8(sp)
 8014168:	1200062e 	bgeu	r2,r8,8014184 <__divdf3+0x424>
 801416c:	1585883a 	add	r2,r2,r22
 8014170:	813fffc4 	addi	r4,r16,-1
 8014174:	15810236 	bltu	r2,r22,8014580 <__divdf3+0x820>
 8014178:	1201012e 	bgeu	r2,r8,8014580 <__divdf3+0x820>
 801417c:	843fff84 	addi	r16,r16,-2
 8014180:	1585883a 	add	r2,r2,r22
 8014184:	8822943a 	slli	r17,r17,16
 8014188:	d9800017 	ldw	r6,0(sp)
 801418c:	1211c83a 	sub	r8,r2,r8
 8014190:	8c22b03a 	or	r17,r17,r16
 8014194:	373fffcc 	andi	fp,r6,65535
 8014198:	8abfffcc 	andi	r10,r17,65535
 801419c:	8820d43a 	srli	r16,r17,16
 80141a0:	5009883a 	mov	r4,r10
 80141a4:	e00b883a 	mov	r5,fp
 80141a8:	302ed43a 	srli	r23,r6,16
 80141ac:	d8c00215 	stw	r3,8(sp)
 80141b0:	da000415 	stw	r8,16(sp)
 80141b4:	da800115 	stw	r10,4(sp)
 80141b8:	80086340 	call	8008634 <__mulsi3>
 80141bc:	800b883a 	mov	r5,r16
 80141c0:	e009883a 	mov	r4,fp
 80141c4:	d8800515 	stw	r2,20(sp)
 80141c8:	80086340 	call	8008634 <__mulsi3>
 80141cc:	8009883a 	mov	r4,r16
 80141d0:	b80b883a 	mov	r5,r23
 80141d4:	d8800315 	stw	r2,12(sp)
 80141d8:	80086340 	call	8008634 <__mulsi3>
 80141dc:	da800117 	ldw	r10,4(sp)
 80141e0:	b80b883a 	mov	r5,r23
 80141e4:	1021883a 	mov	r16,r2
 80141e8:	5009883a 	mov	r4,r10
 80141ec:	80086340 	call	8008634 <__mulsi3>
 80141f0:	d9c00517 	ldw	r7,20(sp)
 80141f4:	da400317 	ldw	r9,12(sp)
 80141f8:	d8c00217 	ldw	r3,8(sp)
 80141fc:	3808d43a 	srli	r4,r7,16
 8014200:	1245883a 	add	r2,r2,r9
 8014204:	da000417 	ldw	r8,16(sp)
 8014208:	2085883a 	add	r2,r4,r2
 801420c:	1240022e 	bgeu	r2,r9,8014218 <__divdf3+0x4b8>
 8014210:	01000074 	movhi	r4,1
 8014214:	8121883a 	add	r16,r16,r4
 8014218:	1008d43a 	srli	r4,r2,16
 801421c:	1004943a 	slli	r2,r2,16
 8014220:	39ffffcc 	andi	r7,r7,65535
 8014224:	2409883a 	add	r4,r4,r16
 8014228:	11c5883a 	add	r2,r2,r7
 801422c:	4100bb36 	bltu	r8,r4,801451c <__divdf3+0x7bc>
 8014230:	4100d726 	beq	r8,r4,8014590 <__divdf3+0x830>
 8014234:	4109c83a 	sub	r4,r8,r4
 8014238:	a8a1c83a 	sub	r16,r21,r2
 801423c:	ac2b803a 	cmpltu	r21,r21,r16
 8014240:	256bc83a 	sub	r21,r4,r21
 8014244:	b540d926 	beq	r22,r21,80145ac <__divdf3+0x84c>
 8014248:	a00b883a 	mov	r5,r20
 801424c:	a809883a 	mov	r4,r21
 8014250:	d8c00215 	stw	r3,8(sp)
 8014254:	80085780 	call	8008578 <__udivsi3>
 8014258:	100b883a 	mov	r5,r2
 801425c:	9009883a 	mov	r4,r18
 8014260:	d8800515 	stw	r2,20(sp)
 8014264:	80086340 	call	8008634 <__mulsi3>
 8014268:	a809883a 	mov	r4,r21
 801426c:	a00b883a 	mov	r5,r20
 8014270:	d8800415 	stw	r2,16(sp)
 8014274:	80085dc0 	call	80085dc <__umodsi3>
 8014278:	1004943a 	slli	r2,r2,16
 801427c:	8008d43a 	srli	r4,r16,16
 8014280:	da000417 	ldw	r8,16(sp)
 8014284:	d8c00217 	ldw	r3,8(sp)
 8014288:	2084b03a 	or	r2,r4,r2
 801428c:	d9c00517 	ldw	r7,20(sp)
 8014290:	1200062e 	bgeu	r2,r8,80142ac <__divdf3+0x54c>
 8014294:	1585883a 	add	r2,r2,r22
 8014298:	393fffc4 	addi	r4,r7,-1
 801429c:	1580c536 	bltu	r2,r22,80145b4 <__divdf3+0x854>
 80142a0:	1200c42e 	bgeu	r2,r8,80145b4 <__divdf3+0x854>
 80142a4:	39ffff84 	addi	r7,r7,-2
 80142a8:	1585883a 	add	r2,r2,r22
 80142ac:	122bc83a 	sub	r21,r2,r8
 80142b0:	a00b883a 	mov	r5,r20
 80142b4:	a809883a 	mov	r4,r21
 80142b8:	d8c00215 	stw	r3,8(sp)
 80142bc:	d9c00515 	stw	r7,20(sp)
 80142c0:	80085780 	call	8008578 <__udivsi3>
 80142c4:	9009883a 	mov	r4,r18
 80142c8:	100b883a 	mov	r5,r2
 80142cc:	d8800415 	stw	r2,16(sp)
 80142d0:	80086340 	call	8008634 <__mulsi3>
 80142d4:	a809883a 	mov	r4,r21
 80142d8:	a00b883a 	mov	r5,r20
 80142dc:	1025883a 	mov	r18,r2
 80142e0:	80085dc0 	call	80085dc <__umodsi3>
 80142e4:	1004943a 	slli	r2,r2,16
 80142e8:	813fffcc 	andi	r4,r16,65535
 80142ec:	d8c00217 	ldw	r3,8(sp)
 80142f0:	20a0b03a 	or	r16,r4,r2
 80142f4:	d9c00517 	ldw	r7,20(sp)
 80142f8:	da000417 	ldw	r8,16(sp)
 80142fc:	8480062e 	bgeu	r16,r18,8014318 <__divdf3+0x5b8>
 8014300:	85a1883a 	add	r16,r16,r22
 8014304:	40bfffc4 	addi	r2,r8,-1
 8014308:	8580ac36 	bltu	r16,r22,80145bc <__divdf3+0x85c>
 801430c:	8480ab2e 	bgeu	r16,r18,80145bc <__divdf3+0x85c>
 8014310:	423fff84 	addi	r8,r8,-2
 8014314:	85a1883a 	add	r16,r16,r22
 8014318:	3804943a 	slli	r2,r7,16
 801431c:	84a1c83a 	sub	r16,r16,r18
 8014320:	e009883a 	mov	r4,fp
 8014324:	1228b03a 	or	r20,r2,r8
 8014328:	a1ffffcc 	andi	r7,r20,65535
 801432c:	a024d43a 	srli	r18,r20,16
 8014330:	380b883a 	mov	r5,r7
 8014334:	d8c00215 	stw	r3,8(sp)
 8014338:	d9c00515 	stw	r7,20(sp)
 801433c:	80086340 	call	8008634 <__mulsi3>
 8014340:	900b883a 	mov	r5,r18
 8014344:	e009883a 	mov	r4,fp
 8014348:	102b883a 	mov	r21,r2
 801434c:	80086340 	call	8008634 <__mulsi3>
 8014350:	900b883a 	mov	r5,r18
 8014354:	b809883a 	mov	r4,r23
 8014358:	1039883a 	mov	fp,r2
 801435c:	80086340 	call	8008634 <__mulsi3>
 8014360:	d9c00517 	ldw	r7,20(sp)
 8014364:	b80b883a 	mov	r5,r23
 8014368:	1025883a 	mov	r18,r2
 801436c:	3809883a 	mov	r4,r7
 8014370:	80086340 	call	8008634 <__mulsi3>
 8014374:	a808d43a 	srli	r4,r21,16
 8014378:	1705883a 	add	r2,r2,fp
 801437c:	d8c00217 	ldw	r3,8(sp)
 8014380:	2085883a 	add	r2,r4,r2
 8014384:	1700022e 	bgeu	r2,fp,8014390 <__divdf3+0x630>
 8014388:	01000074 	movhi	r4,1
 801438c:	9125883a 	add	r18,r18,r4
 8014390:	1008d43a 	srli	r4,r2,16
 8014394:	1004943a 	slli	r2,r2,16
 8014398:	ad7fffcc 	andi	r21,r21,65535
 801439c:	2489883a 	add	r4,r4,r18
 80143a0:	1545883a 	add	r2,r2,r21
 80143a4:	81003836 	bltu	r16,r4,8014488 <__divdf3+0x728>
 80143a8:	81003626 	beq	r16,r4,8014484 <__divdf3+0x724>
 80143ac:	a5000054 	ori	r20,r20,1
 80143b0:	1880ffc4 	addi	r2,r3,1023
 80143b4:	00bf2e0e 	bge	zero,r2,8014070 <__divdf3+0x310>
 80143b8:	a10001cc 	andi	r4,r20,7
 80143bc:	20000726 	beq	r4,zero,80143dc <__divdf3+0x67c>
 80143c0:	a10003cc 	andi	r4,r20,15
 80143c4:	01400104 	movi	r5,4
 80143c8:	21400426 	beq	r4,r5,80143dc <__divdf3+0x67c>
 80143cc:	a149883a 	add	r4,r20,r5
 80143d0:	2529803a 	cmpltu	r20,r4,r20
 80143d4:	8d23883a 	add	r17,r17,r20
 80143d8:	2029883a 	mov	r20,r4
 80143dc:	8900402c 	andhi	r4,r17,256
 80143e0:	20000426 	beq	r4,zero,80143f4 <__divdf3+0x694>
 80143e4:	18810004 	addi	r2,r3,1024
 80143e8:	00ffc034 	movhi	r3,65280
 80143ec:	18ffffc4 	addi	r3,r3,-1
 80143f0:	88e2703a 	and	r17,r17,r3
 80143f4:	00c1ff84 	movi	r3,2046
 80143f8:	18beb416 	blt	r3,r2,8013ecc <__divdf3+0x16c>
 80143fc:	a028d0fa 	srli	r20,r20,3
 8014400:	882a977a 	slli	r21,r17,29
 8014404:	8820927a 	slli	r16,r17,9
 8014408:	1081ffcc 	andi	r2,r2,2047
 801440c:	ad2ab03a 	or	r21,r21,r20
 8014410:	8020d33a 	srli	r16,r16,12
 8014414:	9900004c 	andi	r4,r19,1
 8014418:	003eb006 	br	8013edc <__divdf3+0x17c>
 801441c:	8080022c 	andhi	r2,r16,8
 8014420:	10001226 	beq	r2,zero,801446c <__divdf3+0x70c>
 8014424:	8880022c 	andhi	r2,r17,8
 8014428:	1000101e 	bne	r2,zero,801446c <__divdf3+0x70c>
 801442c:	00800434 	movhi	r2,16
 8014430:	8c000234 	orhi	r16,r17,8
 8014434:	10bfffc4 	addi	r2,r2,-1
 8014438:	b809883a 	mov	r4,r23
 801443c:	80a0703a 	and	r16,r16,r2
 8014440:	a02b883a 	mov	r21,r20
 8014444:	003f0806 	br	8014068 <__divdf3+0x308>
 8014448:	008000c4 	movi	r2,3
 801444c:	3880b126 	beq	r7,r2,8014714 <__divdf3+0x9b4>
 8014450:	00800044 	movi	r2,1
 8014454:	38805b1e 	bne	r7,r2,80145c4 <__divdf3+0x864>
 8014458:	e009883a 	mov	r4,fp
 801445c:	0005883a 	mov	r2,zero
 8014460:	0021883a 	mov	r16,zero
 8014464:	002b883a 	mov	r21,zero
 8014468:	003e9c06 	br	8013edc <__divdf3+0x17c>
 801446c:	00800434 	movhi	r2,16
 8014470:	84000234 	orhi	r16,r16,8
 8014474:	10bfffc4 	addi	r2,r2,-1
 8014478:	b009883a 	mov	r4,r22
 801447c:	80a0703a 	and	r16,r16,r2
 8014480:	003ef906 	br	8014068 <__divdf3+0x308>
 8014484:	103fca26 	beq	r2,zero,80143b0 <__divdf3+0x650>
 8014488:	b421883a 	add	r16,r22,r16
 801448c:	a17fffc4 	addi	r5,r20,-1
 8014490:	8580422e 	bgeu	r16,r22,801459c <__divdf3+0x83c>
 8014494:	2829883a 	mov	r20,r5
 8014498:	813fc41e 	bne	r16,r4,80143ac <__divdf3+0x64c>
 801449c:	d9800017 	ldw	r6,0(sp)
 80144a0:	30bfc21e 	bne	r6,r2,80143ac <__divdf3+0x64c>
 80144a4:	003fc206 	br	80143b0 <__divdf3+0x650>
 80144a8:	143ff604 	addi	r16,r2,-40
 80144ac:	8c20983a 	sll	r16,r17,r16
 80144b0:	002b883a 	mov	r21,zero
 80144b4:	003eb406 	br	8013f88 <__divdf3+0x228>
 80144b8:	d9800215 	stw	r6,8(sp)
 80144bc:	d9c00515 	stw	r7,20(sp)
 80144c0:	da000415 	stw	r8,16(sp)
 80144c4:	8015cf40 	call	8015cf4 <__clzsi2>
 80144c8:	10800804 	addi	r2,r2,32
 80144cc:	da000417 	ldw	r8,16(sp)
 80144d0:	d9c00517 	ldw	r7,20(sp)
 80144d4:	d9800217 	ldw	r6,8(sp)
 80144d8:	003ea106 	br	8013f60 <__divdf3+0x200>
 80144dc:	147ff604 	addi	r17,r2,-40
 80144e0:	3462983a 	sll	r17,r6,r17
 80144e4:	0029883a 	mov	r20,zero
 80144e8:	003ec906 	br	8014010 <__divdf3+0x2b0>
 80144ec:	3009883a 	mov	r4,r6
 80144f0:	d9400115 	stw	r5,4(sp)
 80144f4:	d9800215 	stw	r6,8(sp)
 80144f8:	da000415 	stw	r8,16(sp)
 80144fc:	da400315 	stw	r9,12(sp)
 8014500:	8015cf40 	call	8015cf4 <__clzsi2>
 8014504:	10800804 	addi	r2,r2,32
 8014508:	da400317 	ldw	r9,12(sp)
 801450c:	da000417 	ldw	r8,16(sp)
 8014510:	d9800217 	ldw	r6,8(sp)
 8014514:	d9400117 	ldw	r5,4(sp)
 8014518:	003eb306 	br	8013fe8 <__divdf3+0x288>
 801451c:	d9800017 	ldw	r6,0(sp)
 8014520:	a9ab883a 	add	r21,r21,r6
 8014524:	a98b803a 	cmpltu	r5,r21,r6
 8014528:	2d8b883a 	add	r5,r5,r22
 801452c:	2a11883a 	add	r8,r5,r8
 8014530:	897fffc4 	addi	r5,r17,-1
 8014534:	b2000c2e 	bgeu	r22,r8,8014568 <__divdf3+0x808>
 8014538:	41003f36 	bltu	r8,r4,8014638 <__divdf3+0x8d8>
 801453c:	22006c26 	beq	r4,r8,80146f0 <__divdf3+0x990>
 8014540:	4109c83a 	sub	r4,r8,r4
 8014544:	2823883a 	mov	r17,r5
 8014548:	003f3b06 	br	8014238 <__divdf3+0x4d8>
 801454c:	ad3ed336 	bltu	r21,r20,801409c <__divdf3+0x33c>
 8014550:	a804d07a 	srli	r2,r21,1
 8014554:	802e97fa 	slli	r23,r16,31
 8014558:	a82a97fa 	slli	r21,r21,31
 801455c:	8020d07a 	srli	r16,r16,1
 8014560:	b8aeb03a 	or	r23,r23,r2
 8014564:	003ed006 	br	80140a8 <__divdf3+0x348>
 8014568:	b23ff51e 	bne	r22,r8,8014540 <__divdf3+0x7e0>
 801456c:	d9800017 	ldw	r6,0(sp)
 8014570:	a9bff12e 	bgeu	r21,r6,8014538 <__divdf3+0x7d8>
 8014574:	b109c83a 	sub	r4,r22,r4
 8014578:	2823883a 	mov	r17,r5
 801457c:	003f2e06 	br	8014238 <__divdf3+0x4d8>
 8014580:	2021883a 	mov	r16,r4
 8014584:	003eff06 	br	8014184 <__divdf3+0x424>
 8014588:	2023883a 	mov	r17,r4
 801458c:	003ee406 	br	8014120 <__divdf3+0x3c0>
 8014590:	a8bfe236 	bltu	r21,r2,801451c <__divdf3+0x7bc>
 8014594:	0009883a 	mov	r4,zero
 8014598:	003f2706 	br	8014238 <__divdf3+0x4d8>
 801459c:	81002d36 	bltu	r16,r4,8014654 <__divdf3+0x8f4>
 80145a0:	24005626 	beq	r4,r16,80146fc <__divdf3+0x99c>
 80145a4:	2829883a 	mov	r20,r5
 80145a8:	003f8006 	br	80143ac <__divdf3+0x64c>
 80145ac:	053fffc4 	movi	r20,-1
 80145b0:	003f7f06 	br	80143b0 <__divdf3+0x650>
 80145b4:	200f883a 	mov	r7,r4
 80145b8:	003f3c06 	br	80142ac <__divdf3+0x54c>
 80145bc:	1011883a 	mov	r8,r2
 80145c0:	003f5506 	br	8014318 <__divdf3+0x5b8>
 80145c4:	e027883a 	mov	r19,fp
 80145c8:	003f7906 	br	80143b0 <__divdf3+0x650>
 80145cc:	010007c4 	movi	r4,31
 80145d0:	20c02816 	blt	r4,r3,8014674 <__divdf3+0x914>
 80145d4:	00800804 	movi	r2,32
 80145d8:	10c5c83a 	sub	r2,r2,r3
 80145dc:	888a983a 	sll	r5,r17,r2
 80145e0:	a0c8d83a 	srl	r4,r20,r3
 80145e4:	a084983a 	sll	r2,r20,r2
 80145e8:	88e2d83a 	srl	r17,r17,r3
 80145ec:	2906b03a 	or	r3,r5,r4
 80145f0:	1004c03a 	cmpne	r2,r2,zero
 80145f4:	1886b03a 	or	r3,r3,r2
 80145f8:	188001cc 	andi	r2,r3,7
 80145fc:	10000726 	beq	r2,zero,801461c <__divdf3+0x8bc>
 8014600:	188003cc 	andi	r2,r3,15
 8014604:	01000104 	movi	r4,4
 8014608:	11000426 	beq	r2,r4,801461c <__divdf3+0x8bc>
 801460c:	1805883a 	mov	r2,r3
 8014610:	10c00104 	addi	r3,r2,4
 8014614:	1885803a 	cmpltu	r2,r3,r2
 8014618:	88a3883a 	add	r17,r17,r2
 801461c:	8880202c 	andhi	r2,r17,128
 8014620:	10002926 	beq	r2,zero,80146c8 <__divdf3+0x968>
 8014624:	9900004c 	andi	r4,r19,1
 8014628:	00800044 	movi	r2,1
 801462c:	0021883a 	mov	r16,zero
 8014630:	002b883a 	mov	r21,zero
 8014634:	003e2906 	br	8013edc <__divdf3+0x17c>
 8014638:	d9800017 	ldw	r6,0(sp)
 801463c:	8c7fff84 	addi	r17,r17,-2
 8014640:	a9ab883a 	add	r21,r21,r6
 8014644:	a98b803a 	cmpltu	r5,r21,r6
 8014648:	2d8b883a 	add	r5,r5,r22
 801464c:	2a11883a 	add	r8,r5,r8
 8014650:	003ef806 	br	8014234 <__divdf3+0x4d4>
 8014654:	d9800017 	ldw	r6,0(sp)
 8014658:	318f883a 	add	r7,r6,r6
 801465c:	398b803a 	cmpltu	r5,r7,r6
 8014660:	2d8d883a 	add	r6,r5,r22
 8014664:	81a1883a 	add	r16,r16,r6
 8014668:	a17fff84 	addi	r5,r20,-2
 801466c:	d9c00015 	stw	r7,0(sp)
 8014670:	003f8806 	br	8014494 <__divdf3+0x734>
 8014674:	013ff844 	movi	r4,-31
 8014678:	2085c83a 	sub	r2,r4,r2
 801467c:	8888d83a 	srl	r4,r17,r2
 8014680:	00800804 	movi	r2,32
 8014684:	18802126 	beq	r3,r2,801470c <__divdf3+0x9ac>
 8014688:	04001004 	movi	r16,64
 801468c:	80c7c83a 	sub	r3,r16,r3
 8014690:	88e0983a 	sll	r16,r17,r3
 8014694:	8504b03a 	or	r2,r16,r20
 8014698:	1004c03a 	cmpne	r2,r2,zero
 801469c:	2084b03a 	or	r2,r4,r2
 80146a0:	144001cc 	andi	r17,r2,7
 80146a4:	88000d1e 	bne	r17,zero,80146dc <__divdf3+0x97c>
 80146a8:	0021883a 	mov	r16,zero
 80146ac:	102ad0fa 	srli	r21,r2,3
 80146b0:	9900004c 	andi	r4,r19,1
 80146b4:	0005883a 	mov	r2,zero
 80146b8:	ac6ab03a 	or	r21,r21,r17
 80146bc:	003e0706 	br	8013edc <__divdf3+0x17c>
 80146c0:	1007883a 	mov	r3,r2
 80146c4:	0023883a 	mov	r17,zero
 80146c8:	8820927a 	slli	r16,r17,9
 80146cc:	1805883a 	mov	r2,r3
 80146d0:	8822977a 	slli	r17,r17,29
 80146d4:	8020d33a 	srli	r16,r16,12
 80146d8:	003ff406 	br	80146ac <__divdf3+0x94c>
 80146dc:	10c003cc 	andi	r3,r2,15
 80146e0:	01000104 	movi	r4,4
 80146e4:	193ff626 	beq	r3,r4,80146c0 <__divdf3+0x960>
 80146e8:	0023883a 	mov	r17,zero
 80146ec:	003fc806 	br	8014610 <__divdf3+0x8b0>
 80146f0:	a8bfd136 	bltu	r21,r2,8014638 <__divdf3+0x8d8>
 80146f4:	2823883a 	mov	r17,r5
 80146f8:	003fa606 	br	8014594 <__divdf3+0x834>
 80146fc:	d9800017 	ldw	r6,0(sp)
 8014700:	30bfd436 	bltu	r6,r2,8014654 <__divdf3+0x8f4>
 8014704:	2829883a 	mov	r20,r5
 8014708:	003f6406 	br	801449c <__divdf3+0x73c>
 801470c:	0021883a 	mov	r16,zero
 8014710:	003fe006 	br	8014694 <__divdf3+0x934>
 8014714:	00800434 	movhi	r2,16
 8014718:	8c000234 	orhi	r16,r17,8
 801471c:	10bfffc4 	addi	r2,r2,-1
 8014720:	e009883a 	mov	r4,fp
 8014724:	80a0703a 	and	r16,r16,r2
 8014728:	a02b883a 	mov	r21,r20
 801472c:	003e4e06 	br	8014068 <__divdf3+0x308>

08014730 <__eqdf2>:
 8014730:	2804d53a 	srli	r2,r5,20
 8014734:	3806d53a 	srli	r3,r7,20
 8014738:	02000434 	movhi	r8,16
 801473c:	423fffc4 	addi	r8,r8,-1
 8014740:	1081ffcc 	andi	r2,r2,2047
 8014744:	0281ffc4 	movi	r10,2047
 8014748:	2a12703a 	and	r9,r5,r8
 801474c:	18c1ffcc 	andi	r3,r3,2047
 8014750:	3a10703a 	and	r8,r7,r8
 8014754:	280ad7fa 	srli	r5,r5,31
 8014758:	380ed7fa 	srli	r7,r7,31
 801475c:	12801026 	beq	r2,r10,80147a0 <__eqdf2+0x70>
 8014760:	0281ffc4 	movi	r10,2047
 8014764:	1a800a26 	beq	r3,r10,8014790 <__eqdf2+0x60>
 8014768:	10c00226 	beq	r2,r3,8014774 <__eqdf2+0x44>
 801476c:	00800044 	movi	r2,1
 8014770:	f800283a 	ret
 8014774:	4a3ffd1e 	bne	r9,r8,801476c <__eqdf2+0x3c>
 8014778:	21bffc1e 	bne	r4,r6,801476c <__eqdf2+0x3c>
 801477c:	29c00c26 	beq	r5,r7,80147b0 <__eqdf2+0x80>
 8014780:	103ffa1e 	bne	r2,zero,801476c <__eqdf2+0x3c>
 8014784:	2244b03a 	or	r2,r4,r9
 8014788:	1004c03a 	cmpne	r2,r2,zero
 801478c:	f800283a 	ret
 8014790:	3214b03a 	or	r10,r6,r8
 8014794:	503ff426 	beq	r10,zero,8014768 <__eqdf2+0x38>
 8014798:	00800044 	movi	r2,1
 801479c:	f800283a 	ret
 80147a0:	2254b03a 	or	r10,r4,r9
 80147a4:	503fee26 	beq	r10,zero,8014760 <__eqdf2+0x30>
 80147a8:	00800044 	movi	r2,1
 80147ac:	f800283a 	ret
 80147b0:	0005883a 	mov	r2,zero
 80147b4:	f800283a 	ret

080147b8 <__gedf2>:
 80147b8:	2804d53a 	srli	r2,r5,20
 80147bc:	3806d53a 	srli	r3,r7,20
 80147c0:	02000434 	movhi	r8,16
 80147c4:	423fffc4 	addi	r8,r8,-1
 80147c8:	1081ffcc 	andi	r2,r2,2047
 80147cc:	0241ffc4 	movi	r9,2047
 80147d0:	2a14703a 	and	r10,r5,r8
 80147d4:	18c1ffcc 	andi	r3,r3,2047
 80147d8:	3a10703a 	and	r8,r7,r8
 80147dc:	280ad7fa 	srli	r5,r5,31
 80147e0:	380ed7fa 	srli	r7,r7,31
 80147e4:	12401d26 	beq	r2,r9,801485c <__gedf2+0xa4>
 80147e8:	0241ffc4 	movi	r9,2047
 80147ec:	1a401226 	beq	r3,r9,8014838 <__gedf2+0x80>
 80147f0:	1000081e 	bne	r2,zero,8014814 <__gedf2+0x5c>
 80147f4:	2296b03a 	or	r11,r4,r10
 80147f8:	5813003a 	cmpeq	r9,r11,zero
 80147fc:	1800091e 	bne	r3,zero,8014824 <__gedf2+0x6c>
 8014800:	3218b03a 	or	r12,r6,r8
 8014804:	6000071e 	bne	r12,zero,8014824 <__gedf2+0x6c>
 8014808:	0005883a 	mov	r2,zero
 801480c:	5800101e 	bne	r11,zero,8014850 <__gedf2+0x98>
 8014810:	f800283a 	ret
 8014814:	18000c1e 	bne	r3,zero,8014848 <__gedf2+0x90>
 8014818:	3212b03a 	or	r9,r6,r8
 801481c:	48000c26 	beq	r9,zero,8014850 <__gedf2+0x98>
 8014820:	0013883a 	mov	r9,zero
 8014824:	39c03fcc 	andi	r7,r7,255
 8014828:	48000826 	beq	r9,zero,801484c <__gedf2+0x94>
 801482c:	38000926 	beq	r7,zero,8014854 <__gedf2+0x9c>
 8014830:	00800044 	movi	r2,1
 8014834:	f800283a 	ret
 8014838:	3212b03a 	or	r9,r6,r8
 801483c:	483fec26 	beq	r9,zero,80147f0 <__gedf2+0x38>
 8014840:	00bfff84 	movi	r2,-2
 8014844:	f800283a 	ret
 8014848:	39c03fcc 	andi	r7,r7,255
 801484c:	29c00626 	beq	r5,r7,8014868 <__gedf2+0xb0>
 8014850:	283ff726 	beq	r5,zero,8014830 <__gedf2+0x78>
 8014854:	00bfffc4 	movi	r2,-1
 8014858:	f800283a 	ret
 801485c:	2292b03a 	or	r9,r4,r10
 8014860:	483fe126 	beq	r9,zero,80147e8 <__gedf2+0x30>
 8014864:	003ff606 	br	8014840 <__gedf2+0x88>
 8014868:	18bff916 	blt	r3,r2,8014850 <__gedf2+0x98>
 801486c:	10c00316 	blt	r2,r3,801487c <__gedf2+0xc4>
 8014870:	42bff736 	bltu	r8,r10,8014850 <__gedf2+0x98>
 8014874:	52000326 	beq	r10,r8,8014884 <__gedf2+0xcc>
 8014878:	5200042e 	bgeu	r10,r8,801488c <__gedf2+0xd4>
 801487c:	283fec1e 	bne	r5,zero,8014830 <__gedf2+0x78>
 8014880:	003ff406 	br	8014854 <__gedf2+0x9c>
 8014884:	313ff236 	bltu	r6,r4,8014850 <__gedf2+0x98>
 8014888:	21bffc36 	bltu	r4,r6,801487c <__gedf2+0xc4>
 801488c:	0005883a 	mov	r2,zero
 8014890:	f800283a 	ret

08014894 <__ledf2>:
 8014894:	2804d53a 	srli	r2,r5,20
 8014898:	3810d53a 	srli	r8,r7,20
 801489c:	00c00434 	movhi	r3,16
 80148a0:	18ffffc4 	addi	r3,r3,-1
 80148a4:	1081ffcc 	andi	r2,r2,2047
 80148a8:	0241ffc4 	movi	r9,2047
 80148ac:	28d4703a 	and	r10,r5,r3
 80148b0:	4201ffcc 	andi	r8,r8,2047
 80148b4:	38c6703a 	and	r3,r7,r3
 80148b8:	280ad7fa 	srli	r5,r5,31
 80148bc:	380ed7fa 	srli	r7,r7,31
 80148c0:	12401f26 	beq	r2,r9,8014940 <__ledf2+0xac>
 80148c4:	0241ffc4 	movi	r9,2047
 80148c8:	42401426 	beq	r8,r9,801491c <__ledf2+0x88>
 80148cc:	1000091e 	bne	r2,zero,80148f4 <__ledf2+0x60>
 80148d0:	2296b03a 	or	r11,r4,r10
 80148d4:	5813003a 	cmpeq	r9,r11,zero
 80148d8:	29403fcc 	andi	r5,r5,255
 80148dc:	40000a1e 	bne	r8,zero,8014908 <__ledf2+0x74>
 80148e0:	30d8b03a 	or	r12,r6,r3
 80148e4:	6000081e 	bne	r12,zero,8014908 <__ledf2+0x74>
 80148e8:	0005883a 	mov	r2,zero
 80148ec:	5800111e 	bne	r11,zero,8014934 <__ledf2+0xa0>
 80148f0:	f800283a 	ret
 80148f4:	29403fcc 	andi	r5,r5,255
 80148f8:	40000c1e 	bne	r8,zero,801492c <__ledf2+0x98>
 80148fc:	30d2b03a 	or	r9,r6,r3
 8014900:	48000c26 	beq	r9,zero,8014934 <__ledf2+0xa0>
 8014904:	0013883a 	mov	r9,zero
 8014908:	39c03fcc 	andi	r7,r7,255
 801490c:	48000826 	beq	r9,zero,8014930 <__ledf2+0x9c>
 8014910:	38001126 	beq	r7,zero,8014958 <__ledf2+0xc4>
 8014914:	00800044 	movi	r2,1
 8014918:	f800283a 	ret
 801491c:	30d2b03a 	or	r9,r6,r3
 8014920:	483fea26 	beq	r9,zero,80148cc <__ledf2+0x38>
 8014924:	00800084 	movi	r2,2
 8014928:	f800283a 	ret
 801492c:	39c03fcc 	andi	r7,r7,255
 8014930:	39400726 	beq	r7,r5,8014950 <__ledf2+0xbc>
 8014934:	2800081e 	bne	r5,zero,8014958 <__ledf2+0xc4>
 8014938:	00800044 	movi	r2,1
 801493c:	f800283a 	ret
 8014940:	2292b03a 	or	r9,r4,r10
 8014944:	483fdf26 	beq	r9,zero,80148c4 <__ledf2+0x30>
 8014948:	00800084 	movi	r2,2
 801494c:	f800283a 	ret
 8014950:	4080030e 	bge	r8,r2,8014960 <__ledf2+0xcc>
 8014954:	383fef26 	beq	r7,zero,8014914 <__ledf2+0x80>
 8014958:	00bfffc4 	movi	r2,-1
 801495c:	f800283a 	ret
 8014960:	123feb16 	blt	r2,r8,8014910 <__ledf2+0x7c>
 8014964:	1abff336 	bltu	r3,r10,8014934 <__ledf2+0xa0>
 8014968:	50c00326 	beq	r10,r3,8014978 <__ledf2+0xe4>
 801496c:	50c0042e 	bgeu	r10,r3,8014980 <__ledf2+0xec>
 8014970:	283fe81e 	bne	r5,zero,8014914 <__ledf2+0x80>
 8014974:	003ff806 	br	8014958 <__ledf2+0xc4>
 8014978:	313fee36 	bltu	r6,r4,8014934 <__ledf2+0xa0>
 801497c:	21bffc36 	bltu	r4,r6,8014970 <__ledf2+0xdc>
 8014980:	0005883a 	mov	r2,zero
 8014984:	f800283a 	ret

08014988 <__muldf3>:
 8014988:	deffee04 	addi	sp,sp,-72
 801498c:	dd000c15 	stw	r20,48(sp)
 8014990:	2828d53a 	srli	r20,r5,20
 8014994:	ddc00f15 	stw	r23,60(sp)
 8014998:	282ed7fa 	srli	r23,r5,31
 801499c:	dc000815 	stw	r16,32(sp)
 80149a0:	04000434 	movhi	r16,16
 80149a4:	dcc00b15 	stw	r19,44(sp)
 80149a8:	843fffc4 	addi	r16,r16,-1
 80149ac:	dfc01115 	stw	ra,68(sp)
 80149b0:	df001015 	stw	fp,64(sp)
 80149b4:	dd800e15 	stw	r22,56(sp)
 80149b8:	dd400d15 	stw	r21,52(sp)
 80149bc:	dc800a15 	stw	r18,40(sp)
 80149c0:	dc400915 	stw	r17,36(sp)
 80149c4:	a501ffcc 	andi	r20,r20,2047
 80149c8:	2c20703a 	and	r16,r5,r16
 80149cc:	b827883a 	mov	r19,r23
 80149d0:	ba403fcc 	andi	r9,r23,255
 80149d4:	a0006026 	beq	r20,zero,8014b58 <__muldf3+0x1d0>
 80149d8:	0081ffc4 	movi	r2,2047
 80149dc:	202d883a 	mov	r22,r4
 80149e0:	a0803626 	beq	r20,r2,8014abc <__muldf3+0x134>
 80149e4:	84000434 	orhi	r16,r16,16
 80149e8:	200ad77a 	srli	r5,r4,29
 80149ec:	800490fa 	slli	r2,r16,3
 80149f0:	202c90fa 	slli	r22,r4,3
 80149f4:	a53f0044 	addi	r20,r20,-1023
 80149f8:	28a0b03a 	or	r16,r5,r2
 80149fc:	002b883a 	mov	r21,zero
 8014a00:	000b883a 	mov	r5,zero
 8014a04:	3804d53a 	srli	r2,r7,20
 8014a08:	3838d7fa 	srli	fp,r7,31
 8014a0c:	04400434 	movhi	r17,16
 8014a10:	8c7fffc4 	addi	r17,r17,-1
 8014a14:	1081ffcc 	andi	r2,r2,2047
 8014a18:	3025883a 	mov	r18,r6
 8014a1c:	3c62703a 	and	r17,r7,r17
 8014a20:	e2803fcc 	andi	r10,fp,255
 8014a24:	10006d26 	beq	r2,zero,8014bdc <__muldf3+0x254>
 8014a28:	00c1ffc4 	movi	r3,2047
 8014a2c:	10c06526 	beq	r2,r3,8014bc4 <__muldf3+0x23c>
 8014a30:	8c400434 	orhi	r17,r17,16
 8014a34:	300ed77a 	srli	r7,r6,29
 8014a38:	880690fa 	slli	r3,r17,3
 8014a3c:	302490fa 	slli	r18,r6,3
 8014a40:	10bf0044 	addi	r2,r2,-1023
 8014a44:	38e2b03a 	or	r17,r7,r3
 8014a48:	000f883a 	mov	r7,zero
 8014a4c:	a087883a 	add	r3,r20,r2
 8014a50:	010003c4 	movi	r4,15
 8014a54:	3d44b03a 	or	r2,r7,r21
 8014a58:	e5ccf03a 	xor	r6,fp,r23
 8014a5c:	1a000044 	addi	r8,r3,1
 8014a60:	20809b36 	bltu	r4,r2,8014cd0 <__muldf3+0x348>
 8014a64:	100490ba 	slli	r2,r2,2
 8014a68:	01020074 	movhi	r4,2049
 8014a6c:	21129f04 	addi	r4,r4,19068
 8014a70:	1105883a 	add	r2,r2,r4
 8014a74:	10800017 	ldw	r2,0(r2)
 8014a78:	1000683a 	jmp	r2
 8014a7c:	08014cd0 	cmplti	zero,at,1331
 8014a80:	08014adc 	xori	zero,at,1323
 8014a84:	08014adc 	xori	zero,at,1323
 8014a88:	08014ad8 	cmpnei	zero,at,1323
 8014a8c:	08014cac 	andhi	zero,at,1330
 8014a90:	08014cac 	andhi	zero,at,1330
 8014a94:	08014c94 	ori	zero,at,1330
 8014a98:	08014ad8 	cmpnei	zero,at,1323
 8014a9c:	08014cac 	andhi	zero,at,1330
 8014aa0:	08014c94 	ori	zero,at,1330
 8014aa4:	08014cac 	andhi	zero,at,1330
 8014aa8:	08014ad8 	cmpnei	zero,at,1323
 8014aac:	08014cbc 	xorhi	zero,at,1330
 8014ab0:	08014cbc 	xorhi	zero,at,1330
 8014ab4:	08014cbc 	xorhi	zero,at,1330
 8014ab8:	0801501c 	xori	zero,at,1344
 8014abc:	2404b03a 	or	r2,r4,r16
 8014ac0:	1000711e 	bne	r2,zero,8014c88 <__muldf3+0x300>
 8014ac4:	05400204 	movi	r21,8
 8014ac8:	0021883a 	mov	r16,zero
 8014acc:	002d883a 	mov	r22,zero
 8014ad0:	01400084 	movi	r5,2
 8014ad4:	003fcb06 	br	8014a04 <__muldf3+0x7c>
 8014ad8:	500d883a 	mov	r6,r10
 8014adc:	00800084 	movi	r2,2
 8014ae0:	38805926 	beq	r7,r2,8014c48 <__muldf3+0x2c0>
 8014ae4:	008000c4 	movi	r2,3
 8014ae8:	3881bb26 	beq	r7,r2,80151d8 <__muldf3+0x850>
 8014aec:	00800044 	movi	r2,1
 8014af0:	3881961e 	bne	r7,r2,801514c <__muldf3+0x7c4>
 8014af4:	3027883a 	mov	r19,r6
 8014af8:	0005883a 	mov	r2,zero
 8014afc:	0021883a 	mov	r16,zero
 8014b00:	002d883a 	mov	r22,zero
 8014b04:	1004953a 	slli	r2,r2,20
 8014b08:	98c03fcc 	andi	r3,r19,255
 8014b0c:	04400434 	movhi	r17,16
 8014b10:	8c7fffc4 	addi	r17,r17,-1
 8014b14:	180697fa 	slli	r3,r3,31
 8014b18:	8460703a 	and	r16,r16,r17
 8014b1c:	80a0b03a 	or	r16,r16,r2
 8014b20:	80c6b03a 	or	r3,r16,r3
 8014b24:	b005883a 	mov	r2,r22
 8014b28:	dfc01117 	ldw	ra,68(sp)
 8014b2c:	df001017 	ldw	fp,64(sp)
 8014b30:	ddc00f17 	ldw	r23,60(sp)
 8014b34:	dd800e17 	ldw	r22,56(sp)
 8014b38:	dd400d17 	ldw	r21,52(sp)
 8014b3c:	dd000c17 	ldw	r20,48(sp)
 8014b40:	dcc00b17 	ldw	r19,44(sp)
 8014b44:	dc800a17 	ldw	r18,40(sp)
 8014b48:	dc400917 	ldw	r17,36(sp)
 8014b4c:	dc000817 	ldw	r16,32(sp)
 8014b50:	dec01204 	addi	sp,sp,72
 8014b54:	f800283a 	ret
 8014b58:	2404b03a 	or	r2,r4,r16
 8014b5c:	202b883a 	mov	r21,r4
 8014b60:	10004426 	beq	r2,zero,8014c74 <__muldf3+0x2ec>
 8014b64:	80015126 	beq	r16,zero,80150ac <__muldf3+0x724>
 8014b68:	8009883a 	mov	r4,r16
 8014b6c:	d9800715 	stw	r6,28(sp)
 8014b70:	d9c00215 	stw	r7,8(sp)
 8014b74:	da400415 	stw	r9,16(sp)
 8014b78:	8015cf40 	call	8015cf4 <__clzsi2>
 8014b7c:	d9800717 	ldw	r6,28(sp)
 8014b80:	d9c00217 	ldw	r7,8(sp)
 8014b84:	da400417 	ldw	r9,16(sp)
 8014b88:	113ffd44 	addi	r4,r2,-11
 8014b8c:	00c00704 	movi	r3,28
 8014b90:	19014216 	blt	r3,r4,801509c <__muldf3+0x714>
 8014b94:	00c00744 	movi	r3,29
 8014b98:	15bffe04 	addi	r22,r2,-8
 8014b9c:	1907c83a 	sub	r3,r3,r4
 8014ba0:	85a0983a 	sll	r16,r16,r22
 8014ba4:	a8c6d83a 	srl	r3,r21,r3
 8014ba8:	adac983a 	sll	r22,r21,r22
 8014bac:	1c20b03a 	or	r16,r3,r16
 8014bb0:	1080fcc4 	addi	r2,r2,1011
 8014bb4:	00a9c83a 	sub	r20,zero,r2
 8014bb8:	002b883a 	mov	r21,zero
 8014bbc:	000b883a 	mov	r5,zero
 8014bc0:	003f9006 	br	8014a04 <__muldf3+0x7c>
 8014bc4:	3446b03a 	or	r3,r6,r17
 8014bc8:	1800281e 	bne	r3,zero,8014c6c <__muldf3+0x2e4>
 8014bcc:	0023883a 	mov	r17,zero
 8014bd0:	0025883a 	mov	r18,zero
 8014bd4:	01c00084 	movi	r7,2
 8014bd8:	003f9c06 	br	8014a4c <__muldf3+0xc4>
 8014bdc:	3446b03a 	or	r3,r6,r17
 8014be0:	18001e26 	beq	r3,zero,8014c5c <__muldf3+0x2d4>
 8014be4:	88012126 	beq	r17,zero,801506c <__muldf3+0x6e4>
 8014be8:	8809883a 	mov	r4,r17
 8014bec:	d9400215 	stw	r5,8(sp)
 8014bf0:	d9800715 	stw	r6,28(sp)
 8014bf4:	da400415 	stw	r9,16(sp)
 8014bf8:	da800315 	stw	r10,12(sp)
 8014bfc:	8015cf40 	call	8015cf4 <__clzsi2>
 8014c00:	d9400217 	ldw	r5,8(sp)
 8014c04:	d9800717 	ldw	r6,28(sp)
 8014c08:	da400417 	ldw	r9,16(sp)
 8014c0c:	da800317 	ldw	r10,12(sp)
 8014c10:	113ffd44 	addi	r4,r2,-11
 8014c14:	00c00704 	movi	r3,28
 8014c18:	19011016 	blt	r3,r4,801505c <__muldf3+0x6d4>
 8014c1c:	00c00744 	movi	r3,29
 8014c20:	14bffe04 	addi	r18,r2,-8
 8014c24:	1907c83a 	sub	r3,r3,r4
 8014c28:	8ca2983a 	sll	r17,r17,r18
 8014c2c:	30c6d83a 	srl	r3,r6,r3
 8014c30:	34a4983a 	sll	r18,r6,r18
 8014c34:	1c62b03a 	or	r17,r3,r17
 8014c38:	1080fcc4 	addi	r2,r2,1011
 8014c3c:	0085c83a 	sub	r2,zero,r2
 8014c40:	000f883a 	mov	r7,zero
 8014c44:	003f8106 	br	8014a4c <__muldf3+0xc4>
 8014c48:	3027883a 	mov	r19,r6
 8014c4c:	0081ffc4 	movi	r2,2047
 8014c50:	0021883a 	mov	r16,zero
 8014c54:	002d883a 	mov	r22,zero
 8014c58:	003faa06 	br	8014b04 <__muldf3+0x17c>
 8014c5c:	0023883a 	mov	r17,zero
 8014c60:	0025883a 	mov	r18,zero
 8014c64:	01c00044 	movi	r7,1
 8014c68:	003f7806 	br	8014a4c <__muldf3+0xc4>
 8014c6c:	01c000c4 	movi	r7,3
 8014c70:	003f7606 	br	8014a4c <__muldf3+0xc4>
 8014c74:	05400104 	movi	r21,4
 8014c78:	0021883a 	mov	r16,zero
 8014c7c:	002d883a 	mov	r22,zero
 8014c80:	01400044 	movi	r5,1
 8014c84:	003f5f06 	br	8014a04 <__muldf3+0x7c>
 8014c88:	05400304 	movi	r21,12
 8014c8c:	014000c4 	movi	r5,3
 8014c90:	003f5c06 	br	8014a04 <__muldf3+0x7c>
 8014c94:	04000434 	movhi	r16,16
 8014c98:	0027883a 	mov	r19,zero
 8014c9c:	843fffc4 	addi	r16,r16,-1
 8014ca0:	05bfffc4 	movi	r22,-1
 8014ca4:	0081ffc4 	movi	r2,2047
 8014ca8:	003f9606 	br	8014b04 <__muldf3+0x17c>
 8014cac:	8023883a 	mov	r17,r16
 8014cb0:	b025883a 	mov	r18,r22
 8014cb4:	280f883a 	mov	r7,r5
 8014cb8:	003f8806 	br	8014adc <__muldf3+0x154>
 8014cbc:	8023883a 	mov	r17,r16
 8014cc0:	b025883a 	mov	r18,r22
 8014cc4:	480d883a 	mov	r6,r9
 8014cc8:	280f883a 	mov	r7,r5
 8014ccc:	003f8306 	br	8014adc <__muldf3+0x154>
 8014cd0:	b026d43a 	srli	r19,r22,16
 8014cd4:	902ed43a 	srli	r23,r18,16
 8014cd8:	b5bfffcc 	andi	r22,r22,65535
 8014cdc:	94bfffcc 	andi	r18,r18,65535
 8014ce0:	b00b883a 	mov	r5,r22
 8014ce4:	9009883a 	mov	r4,r18
 8014ce8:	d8c00515 	stw	r3,20(sp)
 8014cec:	d9800715 	stw	r6,28(sp)
 8014cf0:	da000615 	stw	r8,24(sp)
 8014cf4:	80086340 	call	8008634 <__mulsi3>
 8014cf8:	980b883a 	mov	r5,r19
 8014cfc:	9009883a 	mov	r4,r18
 8014d00:	1029883a 	mov	r20,r2
 8014d04:	80086340 	call	8008634 <__mulsi3>
 8014d08:	b80b883a 	mov	r5,r23
 8014d0c:	9809883a 	mov	r4,r19
 8014d10:	102b883a 	mov	r21,r2
 8014d14:	80086340 	call	8008634 <__mulsi3>
 8014d18:	b809883a 	mov	r4,r23
 8014d1c:	b00b883a 	mov	r5,r22
 8014d20:	1039883a 	mov	fp,r2
 8014d24:	80086340 	call	8008634 <__mulsi3>
 8014d28:	a008d43a 	srli	r4,r20,16
 8014d2c:	1545883a 	add	r2,r2,r21
 8014d30:	d8c00517 	ldw	r3,20(sp)
 8014d34:	2085883a 	add	r2,r4,r2
 8014d38:	d9800717 	ldw	r6,28(sp)
 8014d3c:	da000617 	ldw	r8,24(sp)
 8014d40:	1540022e 	bgeu	r2,r21,8014d4c <__muldf3+0x3c4>
 8014d44:	01000074 	movhi	r4,1
 8014d48:	e139883a 	add	fp,fp,r4
 8014d4c:	100e943a 	slli	r7,r2,16
 8014d50:	1004d43a 	srli	r2,r2,16
 8014d54:	882ad43a 	srli	r21,r17,16
 8014d58:	a53fffcc 	andi	r20,r20,65535
 8014d5c:	8c7fffcc 	andi	r17,r17,65535
 8014d60:	3d29883a 	add	r20,r7,r20
 8014d64:	b00b883a 	mov	r5,r22
 8014d68:	8809883a 	mov	r4,r17
 8014d6c:	d8c00515 	stw	r3,20(sp)
 8014d70:	d9800715 	stw	r6,28(sp)
 8014d74:	da000615 	stw	r8,24(sp)
 8014d78:	dd000115 	stw	r20,4(sp)
 8014d7c:	d8800015 	stw	r2,0(sp)
 8014d80:	80086340 	call	8008634 <__mulsi3>
 8014d84:	980b883a 	mov	r5,r19
 8014d88:	8809883a 	mov	r4,r17
 8014d8c:	d8800215 	stw	r2,8(sp)
 8014d90:	80086340 	call	8008634 <__mulsi3>
 8014d94:	9809883a 	mov	r4,r19
 8014d98:	a80b883a 	mov	r5,r21
 8014d9c:	1029883a 	mov	r20,r2
 8014da0:	80086340 	call	8008634 <__mulsi3>
 8014da4:	b00b883a 	mov	r5,r22
 8014da8:	a809883a 	mov	r4,r21
 8014dac:	d8800415 	stw	r2,16(sp)
 8014db0:	80086340 	call	8008634 <__mulsi3>
 8014db4:	d9c00217 	ldw	r7,8(sp)
 8014db8:	1505883a 	add	r2,r2,r20
 8014dbc:	d8c00517 	ldw	r3,20(sp)
 8014dc0:	3826d43a 	srli	r19,r7,16
 8014dc4:	d9800717 	ldw	r6,28(sp)
 8014dc8:	da000617 	ldw	r8,24(sp)
 8014dcc:	9885883a 	add	r2,r19,r2
 8014dd0:	da400417 	ldw	r9,16(sp)
 8014dd4:	1500022e 	bgeu	r2,r20,8014de0 <__muldf3+0x458>
 8014dd8:	01000074 	movhi	r4,1
 8014ddc:	4913883a 	add	r9,r9,r4
 8014de0:	1028d43a 	srli	r20,r2,16
 8014de4:	1004943a 	slli	r2,r2,16
 8014de8:	802cd43a 	srli	r22,r16,16
 8014dec:	843fffcc 	andi	r16,r16,65535
 8014df0:	3cffffcc 	andi	r19,r7,65535
 8014df4:	9009883a 	mov	r4,r18
 8014df8:	800b883a 	mov	r5,r16
 8014dfc:	a269883a 	add	r20,r20,r9
 8014e00:	d8c00515 	stw	r3,20(sp)
 8014e04:	d9800715 	stw	r6,28(sp)
 8014e08:	da000615 	stw	r8,24(sp)
 8014e0c:	14e7883a 	add	r19,r2,r19
 8014e10:	80086340 	call	8008634 <__mulsi3>
 8014e14:	9009883a 	mov	r4,r18
 8014e18:	b00b883a 	mov	r5,r22
 8014e1c:	d8800315 	stw	r2,12(sp)
 8014e20:	80086340 	call	8008634 <__mulsi3>
 8014e24:	b809883a 	mov	r4,r23
 8014e28:	b00b883a 	mov	r5,r22
 8014e2c:	d8800215 	stw	r2,8(sp)
 8014e30:	80086340 	call	8008634 <__mulsi3>
 8014e34:	b80b883a 	mov	r5,r23
 8014e38:	8009883a 	mov	r4,r16
 8014e3c:	d8800415 	stw	r2,16(sp)
 8014e40:	80086340 	call	8008634 <__mulsi3>
 8014e44:	da800317 	ldw	r10,12(sp)
 8014e48:	d9c00217 	ldw	r7,8(sp)
 8014e4c:	d9000017 	ldw	r4,0(sp)
 8014e50:	502ed43a 	srli	r23,r10,16
 8014e54:	11c5883a 	add	r2,r2,r7
 8014e58:	24e5883a 	add	r18,r4,r19
 8014e5c:	b885883a 	add	r2,r23,r2
 8014e60:	d8c00517 	ldw	r3,20(sp)
 8014e64:	d9800717 	ldw	r6,28(sp)
 8014e68:	da000617 	ldw	r8,24(sp)
 8014e6c:	da400417 	ldw	r9,16(sp)
 8014e70:	11c0022e 	bgeu	r2,r7,8014e7c <__muldf3+0x4f4>
 8014e74:	01000074 	movhi	r4,1
 8014e78:	4913883a 	add	r9,r9,r4
 8014e7c:	100ed43a 	srli	r7,r2,16
 8014e80:	1004943a 	slli	r2,r2,16
 8014e84:	55ffffcc 	andi	r23,r10,65535
 8014e88:	3a53883a 	add	r9,r7,r9
 8014e8c:	8809883a 	mov	r4,r17
 8014e90:	800b883a 	mov	r5,r16
 8014e94:	d8c00515 	stw	r3,20(sp)
 8014e98:	d9800715 	stw	r6,28(sp)
 8014e9c:	da000615 	stw	r8,24(sp)
 8014ea0:	da400415 	stw	r9,16(sp)
 8014ea4:	15ef883a 	add	r23,r2,r23
 8014ea8:	80086340 	call	8008634 <__mulsi3>
 8014eac:	8809883a 	mov	r4,r17
 8014eb0:	b00b883a 	mov	r5,r22
 8014eb4:	d8800215 	stw	r2,8(sp)
 8014eb8:	80086340 	call	8008634 <__mulsi3>
 8014ebc:	b00b883a 	mov	r5,r22
 8014ec0:	a809883a 	mov	r4,r21
 8014ec4:	d8800315 	stw	r2,12(sp)
 8014ec8:	80086340 	call	8008634 <__mulsi3>
 8014ecc:	8009883a 	mov	r4,r16
 8014ed0:	a80b883a 	mov	r5,r21
 8014ed4:	1023883a 	mov	r17,r2
 8014ed8:	80086340 	call	8008634 <__mulsi3>
 8014edc:	d9c00217 	ldw	r7,8(sp)
 8014ee0:	da800317 	ldw	r10,12(sp)
 8014ee4:	d8c00517 	ldw	r3,20(sp)
 8014ee8:	3808d43a 	srli	r4,r7,16
 8014eec:	1285883a 	add	r2,r2,r10
 8014ef0:	d9800717 	ldw	r6,28(sp)
 8014ef4:	2085883a 	add	r2,r4,r2
 8014ef8:	da000617 	ldw	r8,24(sp)
 8014efc:	da400417 	ldw	r9,16(sp)
 8014f00:	1280022e 	bgeu	r2,r10,8014f0c <__muldf3+0x584>
 8014f04:	01000074 	movhi	r4,1
 8014f08:	8923883a 	add	r17,r17,r4
 8014f0c:	1008943a 	slli	r4,r2,16
 8014f10:	39ffffcc 	andi	r7,r7,65535
 8014f14:	e4b9883a 	add	fp,fp,r18
 8014f18:	21cf883a 	add	r7,r4,r7
 8014f1c:	e4e7803a 	cmpltu	r19,fp,r19
 8014f20:	3d0f883a 	add	r7,r7,r20
 8014f24:	bf39883a 	add	fp,r23,fp
 8014f28:	99c9883a 	add	r4,r19,r7
 8014f2c:	e5ef803a 	cmpltu	r23,fp,r23
 8014f30:	490b883a 	add	r5,r9,r4
 8014f34:	1004d43a 	srli	r2,r2,16
 8014f38:	b965883a 	add	r18,r23,r5
 8014f3c:	24c9803a 	cmpltu	r4,r4,r19
 8014f40:	3d29803a 	cmpltu	r20,r7,r20
 8014f44:	a128b03a 	or	r20,r20,r4
 8014f48:	95ef803a 	cmpltu	r23,r18,r23
 8014f4c:	2a53803a 	cmpltu	r9,r5,r9
 8014f50:	a0a9883a 	add	r20,r20,r2
 8014f54:	4deeb03a 	or	r23,r9,r23
 8014f58:	a5ef883a 	add	r23,r20,r23
 8014f5c:	bc63883a 	add	r17,r23,r17
 8014f60:	e004927a 	slli	r2,fp,9
 8014f64:	d9000117 	ldw	r4,4(sp)
 8014f68:	882e927a 	slli	r23,r17,9
 8014f6c:	9022d5fa 	srli	r17,r18,23
 8014f70:	e038d5fa 	srli	fp,fp,23
 8014f74:	1104b03a 	or	r2,r2,r4
 8014f78:	9024927a 	slli	r18,r18,9
 8014f7c:	1004c03a 	cmpne	r2,r2,zero
 8014f80:	bc62b03a 	or	r17,r23,r17
 8014f84:	1738b03a 	or	fp,r2,fp
 8014f88:	8880402c 	andhi	r2,r17,256
 8014f8c:	e4a4b03a 	or	r18,fp,r18
 8014f90:	10000726 	beq	r2,zero,8014fb0 <__muldf3+0x628>
 8014f94:	9006d07a 	srli	r3,r18,1
 8014f98:	880497fa 	slli	r2,r17,31
 8014f9c:	9480004c 	andi	r18,r18,1
 8014fa0:	8822d07a 	srli	r17,r17,1
 8014fa4:	1ca4b03a 	or	r18,r3,r18
 8014fa8:	14a4b03a 	or	r18,r2,r18
 8014fac:	4007883a 	mov	r3,r8
 8014fb0:	1880ffc4 	addi	r2,r3,1023
 8014fb4:	0080460e 	bge	zero,r2,80150d0 <__muldf3+0x748>
 8014fb8:	910001cc 	andi	r4,r18,7
 8014fbc:	20000726 	beq	r4,zero,8014fdc <__muldf3+0x654>
 8014fc0:	910003cc 	andi	r4,r18,15
 8014fc4:	01400104 	movi	r5,4
 8014fc8:	21400426 	beq	r4,r5,8014fdc <__muldf3+0x654>
 8014fcc:	9149883a 	add	r4,r18,r5
 8014fd0:	24a5803a 	cmpltu	r18,r4,r18
 8014fd4:	8ca3883a 	add	r17,r17,r18
 8014fd8:	2025883a 	mov	r18,r4
 8014fdc:	8900402c 	andhi	r4,r17,256
 8014fe0:	20000426 	beq	r4,zero,8014ff4 <__muldf3+0x66c>
 8014fe4:	18810004 	addi	r2,r3,1024
 8014fe8:	00ffc034 	movhi	r3,65280
 8014fec:	18ffffc4 	addi	r3,r3,-1
 8014ff0:	88e2703a 	and	r17,r17,r3
 8014ff4:	00c1ff84 	movi	r3,2046
 8014ff8:	18bf1316 	blt	r3,r2,8014c48 <__muldf3+0x2c0>
 8014ffc:	882c977a 	slli	r22,r17,29
 8015000:	9024d0fa 	srli	r18,r18,3
 8015004:	8822927a 	slli	r17,r17,9
 8015008:	1081ffcc 	andi	r2,r2,2047
 801500c:	b4acb03a 	or	r22,r22,r18
 8015010:	8820d33a 	srli	r16,r17,12
 8015014:	3027883a 	mov	r19,r6
 8015018:	003eba06 	br	8014b04 <__muldf3+0x17c>
 801501c:	8080022c 	andhi	r2,r16,8
 8015020:	10000926 	beq	r2,zero,8015048 <__muldf3+0x6c0>
 8015024:	8880022c 	andhi	r2,r17,8
 8015028:	1000071e 	bne	r2,zero,8015048 <__muldf3+0x6c0>
 801502c:	00800434 	movhi	r2,16
 8015030:	8c000234 	orhi	r16,r17,8
 8015034:	10bfffc4 	addi	r2,r2,-1
 8015038:	e027883a 	mov	r19,fp
 801503c:	80a0703a 	and	r16,r16,r2
 8015040:	902d883a 	mov	r22,r18
 8015044:	003f1706 	br	8014ca4 <__muldf3+0x31c>
 8015048:	00800434 	movhi	r2,16
 801504c:	84000234 	orhi	r16,r16,8
 8015050:	10bfffc4 	addi	r2,r2,-1
 8015054:	80a0703a 	and	r16,r16,r2
 8015058:	003f1206 	br	8014ca4 <__muldf3+0x31c>
 801505c:	147ff604 	addi	r17,r2,-40
 8015060:	3462983a 	sll	r17,r6,r17
 8015064:	0025883a 	mov	r18,zero
 8015068:	003ef306 	br	8014c38 <__muldf3+0x2b0>
 801506c:	3009883a 	mov	r4,r6
 8015070:	d9400215 	stw	r5,8(sp)
 8015074:	d9800715 	stw	r6,28(sp)
 8015078:	da400415 	stw	r9,16(sp)
 801507c:	da800315 	stw	r10,12(sp)
 8015080:	8015cf40 	call	8015cf4 <__clzsi2>
 8015084:	10800804 	addi	r2,r2,32
 8015088:	da800317 	ldw	r10,12(sp)
 801508c:	da400417 	ldw	r9,16(sp)
 8015090:	d9800717 	ldw	r6,28(sp)
 8015094:	d9400217 	ldw	r5,8(sp)
 8015098:	003edd06 	br	8014c10 <__muldf3+0x288>
 801509c:	143ff604 	addi	r16,r2,-40
 80150a0:	ac20983a 	sll	r16,r21,r16
 80150a4:	002d883a 	mov	r22,zero
 80150a8:	003ec106 	br	8014bb0 <__muldf3+0x228>
 80150ac:	d9800715 	stw	r6,28(sp)
 80150b0:	d9c00215 	stw	r7,8(sp)
 80150b4:	da400415 	stw	r9,16(sp)
 80150b8:	8015cf40 	call	8015cf4 <__clzsi2>
 80150bc:	10800804 	addi	r2,r2,32
 80150c0:	da400417 	ldw	r9,16(sp)
 80150c4:	d9c00217 	ldw	r7,8(sp)
 80150c8:	d9800717 	ldw	r6,28(sp)
 80150cc:	003eae06 	br	8014b88 <__muldf3+0x200>
 80150d0:	00c00044 	movi	r3,1
 80150d4:	1887c83a 	sub	r3,r3,r2
 80150d8:	01000e04 	movi	r4,56
 80150dc:	20fe8516 	blt	r4,r3,8014af4 <__muldf3+0x16c>
 80150e0:	010007c4 	movi	r4,31
 80150e4:	20c01b16 	blt	r4,r3,8015154 <__muldf3+0x7cc>
 80150e8:	00800804 	movi	r2,32
 80150ec:	10c5c83a 	sub	r2,r2,r3
 80150f0:	888a983a 	sll	r5,r17,r2
 80150f4:	90c8d83a 	srl	r4,r18,r3
 80150f8:	9084983a 	sll	r2,r18,r2
 80150fc:	88e2d83a 	srl	r17,r17,r3
 8015100:	2906b03a 	or	r3,r5,r4
 8015104:	1004c03a 	cmpne	r2,r2,zero
 8015108:	1886b03a 	or	r3,r3,r2
 801510c:	188001cc 	andi	r2,r3,7
 8015110:	10000726 	beq	r2,zero,8015130 <__muldf3+0x7a8>
 8015114:	188003cc 	andi	r2,r3,15
 8015118:	01000104 	movi	r4,4
 801511c:	11000426 	beq	r2,r4,8015130 <__muldf3+0x7a8>
 8015120:	1805883a 	mov	r2,r3
 8015124:	10c00104 	addi	r3,r2,4
 8015128:	1885803a 	cmpltu	r2,r3,r2
 801512c:	88a3883a 	add	r17,r17,r2
 8015130:	8880202c 	andhi	r2,r17,128
 8015134:	10001c26 	beq	r2,zero,80151a8 <__muldf3+0x820>
 8015138:	3027883a 	mov	r19,r6
 801513c:	00800044 	movi	r2,1
 8015140:	0021883a 	mov	r16,zero
 8015144:	002d883a 	mov	r22,zero
 8015148:	003e6e06 	br	8014b04 <__muldf3+0x17c>
 801514c:	4007883a 	mov	r3,r8
 8015150:	003f9706 	br	8014fb0 <__muldf3+0x628>
 8015154:	017ff844 	movi	r5,-31
 8015158:	2885c83a 	sub	r2,r5,r2
 801515c:	888ad83a 	srl	r5,r17,r2
 8015160:	00800804 	movi	r2,32
 8015164:	18801a26 	beq	r3,r2,80151d0 <__muldf3+0x848>
 8015168:	01001004 	movi	r4,64
 801516c:	20c7c83a 	sub	r3,r4,r3
 8015170:	88e2983a 	sll	r17,r17,r3
 8015174:	8ca4b03a 	or	r18,r17,r18
 8015178:	9004c03a 	cmpne	r2,r18,zero
 801517c:	2884b03a 	or	r2,r5,r2
 8015180:	144001cc 	andi	r17,r2,7
 8015184:	88000d1e 	bne	r17,zero,80151bc <__muldf3+0x834>
 8015188:	0021883a 	mov	r16,zero
 801518c:	102cd0fa 	srli	r22,r2,3
 8015190:	3027883a 	mov	r19,r6
 8015194:	0005883a 	mov	r2,zero
 8015198:	b46cb03a 	or	r22,r22,r17
 801519c:	003e5906 	br	8014b04 <__muldf3+0x17c>
 80151a0:	1007883a 	mov	r3,r2
 80151a4:	0023883a 	mov	r17,zero
 80151a8:	8820927a 	slli	r16,r17,9
 80151ac:	1805883a 	mov	r2,r3
 80151b0:	8822977a 	slli	r17,r17,29
 80151b4:	8020d33a 	srli	r16,r16,12
 80151b8:	003ff406 	br	801518c <__muldf3+0x804>
 80151bc:	10c003cc 	andi	r3,r2,15
 80151c0:	01000104 	movi	r4,4
 80151c4:	193ff626 	beq	r3,r4,80151a0 <__muldf3+0x818>
 80151c8:	0023883a 	mov	r17,zero
 80151cc:	003fd506 	br	8015124 <__muldf3+0x79c>
 80151d0:	0023883a 	mov	r17,zero
 80151d4:	003fe706 	br	8015174 <__muldf3+0x7ec>
 80151d8:	00800434 	movhi	r2,16
 80151dc:	8c000234 	orhi	r16,r17,8
 80151e0:	10bfffc4 	addi	r2,r2,-1
 80151e4:	3027883a 	mov	r19,r6
 80151e8:	80a0703a 	and	r16,r16,r2
 80151ec:	902d883a 	mov	r22,r18
 80151f0:	003eac06 	br	8014ca4 <__muldf3+0x31c>

080151f4 <__subdf3>:
 80151f4:	02000434 	movhi	r8,16
 80151f8:	423fffc4 	addi	r8,r8,-1
 80151fc:	defffb04 	addi	sp,sp,-20
 8015200:	2a14703a 	and	r10,r5,r8
 8015204:	3812d53a 	srli	r9,r7,20
 8015208:	3a10703a 	and	r8,r7,r8
 801520c:	2006d77a 	srli	r3,r4,29
 8015210:	3004d77a 	srli	r2,r6,29
 8015214:	dc000015 	stw	r16,0(sp)
 8015218:	501490fa 	slli	r10,r10,3
 801521c:	2820d53a 	srli	r16,r5,20
 8015220:	401090fa 	slli	r8,r8,3
 8015224:	dc800215 	stw	r18,8(sp)
 8015228:	dc400115 	stw	r17,4(sp)
 801522c:	dfc00415 	stw	ra,16(sp)
 8015230:	202290fa 	slli	r17,r4,3
 8015234:	dcc00315 	stw	r19,12(sp)
 8015238:	4a41ffcc 	andi	r9,r9,2047
 801523c:	0101ffc4 	movi	r4,2047
 8015240:	2824d7fa 	srli	r18,r5,31
 8015244:	8401ffcc 	andi	r16,r16,2047
 8015248:	50c6b03a 	or	r3,r10,r3
 801524c:	380ed7fa 	srli	r7,r7,31
 8015250:	408ab03a 	or	r5,r8,r2
 8015254:	300c90fa 	slli	r6,r6,3
 8015258:	49009626 	beq	r9,r4,80154b4 <__subdf3+0x2c0>
 801525c:	39c0005c 	xori	r7,r7,1
 8015260:	8245c83a 	sub	r2,r16,r9
 8015264:	3c807426 	beq	r7,r18,8015438 <__subdf3+0x244>
 8015268:	0080af0e 	bge	zero,r2,8015528 <__subdf3+0x334>
 801526c:	48002a1e 	bne	r9,zero,8015318 <__subdf3+0x124>
 8015270:	2988b03a 	or	r4,r5,r6
 8015274:	20009a1e 	bne	r4,zero,80154e0 <__subdf3+0x2ec>
 8015278:	888001cc 	andi	r2,r17,7
 801527c:	10000726 	beq	r2,zero,801529c <__subdf3+0xa8>
 8015280:	888003cc 	andi	r2,r17,15
 8015284:	01000104 	movi	r4,4
 8015288:	11000426 	beq	r2,r4,801529c <__subdf3+0xa8>
 801528c:	890b883a 	add	r5,r17,r4
 8015290:	2c63803a 	cmpltu	r17,r5,r17
 8015294:	1c47883a 	add	r3,r3,r17
 8015298:	2823883a 	mov	r17,r5
 801529c:	1880202c 	andhi	r2,r3,128
 80152a0:	10005926 	beq	r2,zero,8015408 <__subdf3+0x214>
 80152a4:	84000044 	addi	r16,r16,1
 80152a8:	0081ffc4 	movi	r2,2047
 80152ac:	8080be26 	beq	r16,r2,80155a8 <__subdf3+0x3b4>
 80152b0:	017fe034 	movhi	r5,65408
 80152b4:	297fffc4 	addi	r5,r5,-1
 80152b8:	1946703a 	and	r3,r3,r5
 80152bc:	1804977a 	slli	r2,r3,29
 80152c0:	1806927a 	slli	r3,r3,9
 80152c4:	8822d0fa 	srli	r17,r17,3
 80152c8:	8401ffcc 	andi	r16,r16,2047
 80152cc:	180ad33a 	srli	r5,r3,12
 80152d0:	9100004c 	andi	r4,r18,1
 80152d4:	1444b03a 	or	r2,r2,r17
 80152d8:	80c1ffcc 	andi	r3,r16,2047
 80152dc:	1820953a 	slli	r16,r3,20
 80152e0:	20c03fcc 	andi	r3,r4,255
 80152e4:	180897fa 	slli	r4,r3,31
 80152e8:	00c00434 	movhi	r3,16
 80152ec:	18ffffc4 	addi	r3,r3,-1
 80152f0:	28c6703a 	and	r3,r5,r3
 80152f4:	1c06b03a 	or	r3,r3,r16
 80152f8:	1906b03a 	or	r3,r3,r4
 80152fc:	dfc00417 	ldw	ra,16(sp)
 8015300:	dcc00317 	ldw	r19,12(sp)
 8015304:	dc800217 	ldw	r18,8(sp)
 8015308:	dc400117 	ldw	r17,4(sp)
 801530c:	dc000017 	ldw	r16,0(sp)
 8015310:	dec00504 	addi	sp,sp,20
 8015314:	f800283a 	ret
 8015318:	0101ffc4 	movi	r4,2047
 801531c:	813fd626 	beq	r16,r4,8015278 <__subdf3+0x84>
 8015320:	29402034 	orhi	r5,r5,128
 8015324:	01000e04 	movi	r4,56
 8015328:	2080a316 	blt	r4,r2,80155b8 <__subdf3+0x3c4>
 801532c:	010007c4 	movi	r4,31
 8015330:	2080c616 	blt	r4,r2,801564c <__subdf3+0x458>
 8015334:	01000804 	movi	r4,32
 8015338:	2089c83a 	sub	r4,r4,r2
 801533c:	2910983a 	sll	r8,r5,r4
 8015340:	308ed83a 	srl	r7,r6,r2
 8015344:	3108983a 	sll	r4,r6,r4
 8015348:	2884d83a 	srl	r2,r5,r2
 801534c:	41ccb03a 	or	r6,r8,r7
 8015350:	2008c03a 	cmpne	r4,r4,zero
 8015354:	310cb03a 	or	r6,r6,r4
 8015358:	898dc83a 	sub	r6,r17,r6
 801535c:	89a3803a 	cmpltu	r17,r17,r6
 8015360:	1887c83a 	sub	r3,r3,r2
 8015364:	1c47c83a 	sub	r3,r3,r17
 8015368:	3023883a 	mov	r17,r6
 801536c:	1880202c 	andhi	r2,r3,128
 8015370:	10002326 	beq	r2,zero,8015400 <__subdf3+0x20c>
 8015374:	04c02034 	movhi	r19,128
 8015378:	9cffffc4 	addi	r19,r19,-1
 801537c:	1ce6703a 	and	r19,r3,r19
 8015380:	98007a26 	beq	r19,zero,801556c <__subdf3+0x378>
 8015384:	9809883a 	mov	r4,r19
 8015388:	8015cf40 	call	8015cf4 <__clzsi2>
 801538c:	113ffe04 	addi	r4,r2,-8
 8015390:	00c007c4 	movi	r3,31
 8015394:	19007b16 	blt	r3,r4,8015584 <__subdf3+0x390>
 8015398:	00800804 	movi	r2,32
 801539c:	1105c83a 	sub	r2,r2,r4
 80153a0:	8884d83a 	srl	r2,r17,r2
 80153a4:	9906983a 	sll	r3,r19,r4
 80153a8:	8922983a 	sll	r17,r17,r4
 80153ac:	10c4b03a 	or	r2,r2,r3
 80153b0:	24007816 	blt	r4,r16,8015594 <__subdf3+0x3a0>
 80153b4:	2421c83a 	sub	r16,r4,r16
 80153b8:	80c00044 	addi	r3,r16,1
 80153bc:	010007c4 	movi	r4,31
 80153c0:	20c09516 	blt	r4,r3,8015618 <__subdf3+0x424>
 80153c4:	01400804 	movi	r5,32
 80153c8:	28cbc83a 	sub	r5,r5,r3
 80153cc:	88c8d83a 	srl	r4,r17,r3
 80153d0:	8962983a 	sll	r17,r17,r5
 80153d4:	114a983a 	sll	r5,r2,r5
 80153d8:	10c6d83a 	srl	r3,r2,r3
 80153dc:	8804c03a 	cmpne	r2,r17,zero
 80153e0:	290ab03a 	or	r5,r5,r4
 80153e4:	28a2b03a 	or	r17,r5,r2
 80153e8:	0021883a 	mov	r16,zero
 80153ec:	003fa206 	br	8015278 <__subdf3+0x84>
 80153f0:	2090b03a 	or	r8,r4,r2
 80153f4:	40018e26 	beq	r8,zero,8015a30 <__subdf3+0x83c>
 80153f8:	1007883a 	mov	r3,r2
 80153fc:	2023883a 	mov	r17,r4
 8015400:	888001cc 	andi	r2,r17,7
 8015404:	103f9e1e 	bne	r2,zero,8015280 <__subdf3+0x8c>
 8015408:	1804977a 	slli	r2,r3,29
 801540c:	8822d0fa 	srli	r17,r17,3
 8015410:	1810d0fa 	srli	r8,r3,3
 8015414:	9100004c 	andi	r4,r18,1
 8015418:	1444b03a 	or	r2,r2,r17
 801541c:	00c1ffc4 	movi	r3,2047
 8015420:	80c02826 	beq	r16,r3,80154c4 <__subdf3+0x2d0>
 8015424:	01400434 	movhi	r5,16
 8015428:	297fffc4 	addi	r5,r5,-1
 801542c:	80e0703a 	and	r16,r16,r3
 8015430:	414a703a 	and	r5,r8,r5
 8015434:	003fa806 	br	80152d8 <__subdf3+0xe4>
 8015438:	0080630e 	bge	zero,r2,80155c8 <__subdf3+0x3d4>
 801543c:	48003026 	beq	r9,zero,8015500 <__subdf3+0x30c>
 8015440:	0101ffc4 	movi	r4,2047
 8015444:	813f8c26 	beq	r16,r4,8015278 <__subdf3+0x84>
 8015448:	29402034 	orhi	r5,r5,128
 801544c:	01000e04 	movi	r4,56
 8015450:	2080a90e 	bge	r4,r2,80156f8 <__subdf3+0x504>
 8015454:	298cb03a 	or	r6,r5,r6
 8015458:	3012c03a 	cmpne	r9,r6,zero
 801545c:	0005883a 	mov	r2,zero
 8015460:	4c53883a 	add	r9,r9,r17
 8015464:	4c63803a 	cmpltu	r17,r9,r17
 8015468:	10c7883a 	add	r3,r2,r3
 801546c:	88c7883a 	add	r3,r17,r3
 8015470:	4823883a 	mov	r17,r9
 8015474:	1880202c 	andhi	r2,r3,128
 8015478:	1000d026 	beq	r2,zero,80157bc <__subdf3+0x5c8>
 801547c:	84000044 	addi	r16,r16,1
 8015480:	0081ffc4 	movi	r2,2047
 8015484:	8080fe26 	beq	r16,r2,8015880 <__subdf3+0x68c>
 8015488:	00bfe034 	movhi	r2,65408
 801548c:	10bfffc4 	addi	r2,r2,-1
 8015490:	1886703a 	and	r3,r3,r2
 8015494:	880ad07a 	srli	r5,r17,1
 8015498:	180497fa 	slli	r2,r3,31
 801549c:	8900004c 	andi	r4,r17,1
 80154a0:	2922b03a 	or	r17,r5,r4
 80154a4:	1806d07a 	srli	r3,r3,1
 80154a8:	1462b03a 	or	r17,r2,r17
 80154ac:	3825883a 	mov	r18,r7
 80154b0:	003f7106 	br	8015278 <__subdf3+0x84>
 80154b4:	2984b03a 	or	r2,r5,r6
 80154b8:	103f6826 	beq	r2,zero,801525c <__subdf3+0x68>
 80154bc:	39c03fcc 	andi	r7,r7,255
 80154c0:	003f6706 	br	8015260 <__subdf3+0x6c>
 80154c4:	4086b03a 	or	r3,r8,r2
 80154c8:	18015226 	beq	r3,zero,8015a14 <__subdf3+0x820>
 80154cc:	00c00434 	movhi	r3,16
 80154d0:	41400234 	orhi	r5,r8,8
 80154d4:	18ffffc4 	addi	r3,r3,-1
 80154d8:	28ca703a 	and	r5,r5,r3
 80154dc:	003f7e06 	br	80152d8 <__subdf3+0xe4>
 80154e0:	10bfffc4 	addi	r2,r2,-1
 80154e4:	1000491e 	bne	r2,zero,801560c <__subdf3+0x418>
 80154e8:	898fc83a 	sub	r7,r17,r6
 80154ec:	89e3803a 	cmpltu	r17,r17,r7
 80154f0:	1947c83a 	sub	r3,r3,r5
 80154f4:	1c47c83a 	sub	r3,r3,r17
 80154f8:	3823883a 	mov	r17,r7
 80154fc:	003f9b06 	br	801536c <__subdf3+0x178>
 8015500:	2988b03a 	or	r4,r5,r6
 8015504:	203f5c26 	beq	r4,zero,8015278 <__subdf3+0x84>
 8015508:	10bfffc4 	addi	r2,r2,-1
 801550c:	1000931e 	bne	r2,zero,801575c <__subdf3+0x568>
 8015510:	898d883a 	add	r6,r17,r6
 8015514:	3463803a 	cmpltu	r17,r6,r17
 8015518:	1947883a 	add	r3,r3,r5
 801551c:	88c7883a 	add	r3,r17,r3
 8015520:	3023883a 	mov	r17,r6
 8015524:	003fd306 	br	8015474 <__subdf3+0x280>
 8015528:	1000541e 	bne	r2,zero,801567c <__subdf3+0x488>
 801552c:	80800044 	addi	r2,r16,1
 8015530:	1081ffcc 	andi	r2,r2,2047
 8015534:	01000044 	movi	r4,1
 8015538:	2080a20e 	bge	r4,r2,80157c4 <__subdf3+0x5d0>
 801553c:	8989c83a 	sub	r4,r17,r6
 8015540:	8905803a 	cmpltu	r2,r17,r4
 8015544:	1967c83a 	sub	r19,r3,r5
 8015548:	98a7c83a 	sub	r19,r19,r2
 801554c:	9880202c 	andhi	r2,r19,128
 8015550:	10006326 	beq	r2,zero,80156e0 <__subdf3+0x4ec>
 8015554:	3463c83a 	sub	r17,r6,r17
 8015558:	28c7c83a 	sub	r3,r5,r3
 801555c:	344d803a 	cmpltu	r6,r6,r17
 8015560:	19a7c83a 	sub	r19,r3,r6
 8015564:	3825883a 	mov	r18,r7
 8015568:	983f861e 	bne	r19,zero,8015384 <__subdf3+0x190>
 801556c:	8809883a 	mov	r4,r17
 8015570:	8015cf40 	call	8015cf4 <__clzsi2>
 8015574:	10800804 	addi	r2,r2,32
 8015578:	113ffe04 	addi	r4,r2,-8
 801557c:	00c007c4 	movi	r3,31
 8015580:	193f850e 	bge	r3,r4,8015398 <__subdf3+0x1a4>
 8015584:	10bff604 	addi	r2,r2,-40
 8015588:	8884983a 	sll	r2,r17,r2
 801558c:	0023883a 	mov	r17,zero
 8015590:	243f880e 	bge	r4,r16,80153b4 <__subdf3+0x1c0>
 8015594:	00ffe034 	movhi	r3,65408
 8015598:	18ffffc4 	addi	r3,r3,-1
 801559c:	8121c83a 	sub	r16,r16,r4
 80155a0:	10c6703a 	and	r3,r2,r3
 80155a4:	003f3406 	br	8015278 <__subdf3+0x84>
 80155a8:	9100004c 	andi	r4,r18,1
 80155ac:	000b883a 	mov	r5,zero
 80155b0:	0005883a 	mov	r2,zero
 80155b4:	003f4806 	br	80152d8 <__subdf3+0xe4>
 80155b8:	298cb03a 	or	r6,r5,r6
 80155bc:	300cc03a 	cmpne	r6,r6,zero
 80155c0:	0005883a 	mov	r2,zero
 80155c4:	003f6406 	br	8015358 <__subdf3+0x164>
 80155c8:	10009a1e 	bne	r2,zero,8015834 <__subdf3+0x640>
 80155cc:	82400044 	addi	r9,r16,1
 80155d0:	4881ffcc 	andi	r2,r9,2047
 80155d4:	02800044 	movi	r10,1
 80155d8:	5080670e 	bge	r10,r2,8015778 <__subdf3+0x584>
 80155dc:	0081ffc4 	movi	r2,2047
 80155e0:	4880af26 	beq	r9,r2,80158a0 <__subdf3+0x6ac>
 80155e4:	898d883a 	add	r6,r17,r6
 80155e8:	1945883a 	add	r2,r3,r5
 80155ec:	3447803a 	cmpltu	r3,r6,r17
 80155f0:	1887883a 	add	r3,r3,r2
 80155f4:	182297fa 	slli	r17,r3,31
 80155f8:	300cd07a 	srli	r6,r6,1
 80155fc:	1806d07a 	srli	r3,r3,1
 8015600:	4821883a 	mov	r16,r9
 8015604:	89a2b03a 	or	r17,r17,r6
 8015608:	003f1b06 	br	8015278 <__subdf3+0x84>
 801560c:	0101ffc4 	movi	r4,2047
 8015610:	813f441e 	bne	r16,r4,8015324 <__subdf3+0x130>
 8015614:	003f1806 	br	8015278 <__subdf3+0x84>
 8015618:	843ff844 	addi	r16,r16,-31
 801561c:	01400804 	movi	r5,32
 8015620:	1408d83a 	srl	r4,r2,r16
 8015624:	19405026 	beq	r3,r5,8015768 <__subdf3+0x574>
 8015628:	01401004 	movi	r5,64
 801562c:	28c7c83a 	sub	r3,r5,r3
 8015630:	10c4983a 	sll	r2,r2,r3
 8015634:	88a2b03a 	or	r17,r17,r2
 8015638:	8822c03a 	cmpne	r17,r17,zero
 801563c:	2462b03a 	or	r17,r4,r17
 8015640:	0007883a 	mov	r3,zero
 8015644:	0021883a 	mov	r16,zero
 8015648:	003f6d06 	br	8015400 <__subdf3+0x20c>
 801564c:	11fff804 	addi	r7,r2,-32
 8015650:	01000804 	movi	r4,32
 8015654:	29ced83a 	srl	r7,r5,r7
 8015658:	11004526 	beq	r2,r4,8015770 <__subdf3+0x57c>
 801565c:	01001004 	movi	r4,64
 8015660:	2089c83a 	sub	r4,r4,r2
 8015664:	2904983a 	sll	r2,r5,r4
 8015668:	118cb03a 	or	r6,r2,r6
 801566c:	300cc03a 	cmpne	r6,r6,zero
 8015670:	398cb03a 	or	r6,r7,r6
 8015674:	0005883a 	mov	r2,zero
 8015678:	003f3706 	br	8015358 <__subdf3+0x164>
 801567c:	80002a26 	beq	r16,zero,8015728 <__subdf3+0x534>
 8015680:	0101ffc4 	movi	r4,2047
 8015684:	49006626 	beq	r9,r4,8015820 <__subdf3+0x62c>
 8015688:	0085c83a 	sub	r2,zero,r2
 801568c:	18c02034 	orhi	r3,r3,128
 8015690:	01000e04 	movi	r4,56
 8015694:	20807e16 	blt	r4,r2,8015890 <__subdf3+0x69c>
 8015698:	010007c4 	movi	r4,31
 801569c:	2080e716 	blt	r4,r2,8015a3c <__subdf3+0x848>
 80156a0:	01000804 	movi	r4,32
 80156a4:	2089c83a 	sub	r4,r4,r2
 80156a8:	1914983a 	sll	r10,r3,r4
 80156ac:	8890d83a 	srl	r8,r17,r2
 80156b0:	8908983a 	sll	r4,r17,r4
 80156b4:	1884d83a 	srl	r2,r3,r2
 80156b8:	5222b03a 	or	r17,r10,r8
 80156bc:	2006c03a 	cmpne	r3,r4,zero
 80156c0:	88e2b03a 	or	r17,r17,r3
 80156c4:	3463c83a 	sub	r17,r6,r17
 80156c8:	2885c83a 	sub	r2,r5,r2
 80156cc:	344d803a 	cmpltu	r6,r6,r17
 80156d0:	1187c83a 	sub	r3,r2,r6
 80156d4:	4821883a 	mov	r16,r9
 80156d8:	3825883a 	mov	r18,r7
 80156dc:	003f2306 	br	801536c <__subdf3+0x178>
 80156e0:	24d0b03a 	or	r8,r4,r19
 80156e4:	40001b1e 	bne	r8,zero,8015754 <__subdf3+0x560>
 80156e8:	0005883a 	mov	r2,zero
 80156ec:	0009883a 	mov	r4,zero
 80156f0:	0021883a 	mov	r16,zero
 80156f4:	003f4906 	br	801541c <__subdf3+0x228>
 80156f8:	010007c4 	movi	r4,31
 80156fc:	20803a16 	blt	r4,r2,80157e8 <__subdf3+0x5f4>
 8015700:	01000804 	movi	r4,32
 8015704:	2089c83a 	sub	r4,r4,r2
 8015708:	2912983a 	sll	r9,r5,r4
 801570c:	3090d83a 	srl	r8,r6,r2
 8015710:	3108983a 	sll	r4,r6,r4
 8015714:	2884d83a 	srl	r2,r5,r2
 8015718:	4a12b03a 	or	r9,r9,r8
 801571c:	2008c03a 	cmpne	r4,r4,zero
 8015720:	4912b03a 	or	r9,r9,r4
 8015724:	003f4e06 	br	8015460 <__subdf3+0x26c>
 8015728:	1c48b03a 	or	r4,r3,r17
 801572c:	20003c26 	beq	r4,zero,8015820 <__subdf3+0x62c>
 8015730:	0084303a 	nor	r2,zero,r2
 8015734:	1000381e 	bne	r2,zero,8015818 <__subdf3+0x624>
 8015738:	3463c83a 	sub	r17,r6,r17
 801573c:	28c5c83a 	sub	r2,r5,r3
 8015740:	344d803a 	cmpltu	r6,r6,r17
 8015744:	1187c83a 	sub	r3,r2,r6
 8015748:	4821883a 	mov	r16,r9
 801574c:	3825883a 	mov	r18,r7
 8015750:	003f0606 	br	801536c <__subdf3+0x178>
 8015754:	2023883a 	mov	r17,r4
 8015758:	003f0906 	br	8015380 <__subdf3+0x18c>
 801575c:	0101ffc4 	movi	r4,2047
 8015760:	813f3a1e 	bne	r16,r4,801544c <__subdf3+0x258>
 8015764:	003ec406 	br	8015278 <__subdf3+0x84>
 8015768:	0005883a 	mov	r2,zero
 801576c:	003fb106 	br	8015634 <__subdf3+0x440>
 8015770:	0005883a 	mov	r2,zero
 8015774:	003fbc06 	br	8015668 <__subdf3+0x474>
 8015778:	1c44b03a 	or	r2,r3,r17
 801577c:	80008e1e 	bne	r16,zero,80159b8 <__subdf3+0x7c4>
 8015780:	1000c826 	beq	r2,zero,8015aa4 <__subdf3+0x8b0>
 8015784:	2984b03a 	or	r2,r5,r6
 8015788:	103ebb26 	beq	r2,zero,8015278 <__subdf3+0x84>
 801578c:	8989883a 	add	r4,r17,r6
 8015790:	1945883a 	add	r2,r3,r5
 8015794:	2447803a 	cmpltu	r3,r4,r17
 8015798:	1887883a 	add	r3,r3,r2
 801579c:	1880202c 	andhi	r2,r3,128
 80157a0:	2023883a 	mov	r17,r4
 80157a4:	103f1626 	beq	r2,zero,8015400 <__subdf3+0x20c>
 80157a8:	00bfe034 	movhi	r2,65408
 80157ac:	10bfffc4 	addi	r2,r2,-1
 80157b0:	5021883a 	mov	r16,r10
 80157b4:	1886703a 	and	r3,r3,r2
 80157b8:	003eaf06 	br	8015278 <__subdf3+0x84>
 80157bc:	3825883a 	mov	r18,r7
 80157c0:	003f0f06 	br	8015400 <__subdf3+0x20c>
 80157c4:	1c44b03a 	or	r2,r3,r17
 80157c8:	8000251e 	bne	r16,zero,8015860 <__subdf3+0x66c>
 80157cc:	1000661e 	bne	r2,zero,8015968 <__subdf3+0x774>
 80157d0:	2990b03a 	or	r8,r5,r6
 80157d4:	40009626 	beq	r8,zero,8015a30 <__subdf3+0x83c>
 80157d8:	2807883a 	mov	r3,r5
 80157dc:	3023883a 	mov	r17,r6
 80157e0:	3825883a 	mov	r18,r7
 80157e4:	003ea406 	br	8015278 <__subdf3+0x84>
 80157e8:	127ff804 	addi	r9,r2,-32
 80157ec:	01000804 	movi	r4,32
 80157f0:	2a52d83a 	srl	r9,r5,r9
 80157f4:	11008c26 	beq	r2,r4,8015a28 <__subdf3+0x834>
 80157f8:	01001004 	movi	r4,64
 80157fc:	2085c83a 	sub	r2,r4,r2
 8015800:	2884983a 	sll	r2,r5,r2
 8015804:	118cb03a 	or	r6,r2,r6
 8015808:	300cc03a 	cmpne	r6,r6,zero
 801580c:	4992b03a 	or	r9,r9,r6
 8015810:	0005883a 	mov	r2,zero
 8015814:	003f1206 	br	8015460 <__subdf3+0x26c>
 8015818:	0101ffc4 	movi	r4,2047
 801581c:	493f9c1e 	bne	r9,r4,8015690 <__subdf3+0x49c>
 8015820:	2807883a 	mov	r3,r5
 8015824:	3023883a 	mov	r17,r6
 8015828:	4821883a 	mov	r16,r9
 801582c:	3825883a 	mov	r18,r7
 8015830:	003e9106 	br	8015278 <__subdf3+0x84>
 8015834:	80001f1e 	bne	r16,zero,80158b4 <__subdf3+0x6c0>
 8015838:	1c48b03a 	or	r4,r3,r17
 801583c:	20005a26 	beq	r4,zero,80159a8 <__subdf3+0x7b4>
 8015840:	0084303a 	nor	r2,zero,r2
 8015844:	1000561e 	bne	r2,zero,80159a0 <__subdf3+0x7ac>
 8015848:	89a3883a 	add	r17,r17,r6
 801584c:	1945883a 	add	r2,r3,r5
 8015850:	898d803a 	cmpltu	r6,r17,r6
 8015854:	3087883a 	add	r3,r6,r2
 8015858:	4821883a 	mov	r16,r9
 801585c:	003f0506 	br	8015474 <__subdf3+0x280>
 8015860:	10002b1e 	bne	r2,zero,8015910 <__subdf3+0x71c>
 8015864:	2984b03a 	or	r2,r5,r6
 8015868:	10008026 	beq	r2,zero,8015a6c <__subdf3+0x878>
 801586c:	2807883a 	mov	r3,r5
 8015870:	3023883a 	mov	r17,r6
 8015874:	3825883a 	mov	r18,r7
 8015878:	0401ffc4 	movi	r16,2047
 801587c:	003e7e06 	br	8015278 <__subdf3+0x84>
 8015880:	3809883a 	mov	r4,r7
 8015884:	0011883a 	mov	r8,zero
 8015888:	0005883a 	mov	r2,zero
 801588c:	003ee306 	br	801541c <__subdf3+0x228>
 8015890:	1c62b03a 	or	r17,r3,r17
 8015894:	8822c03a 	cmpne	r17,r17,zero
 8015898:	0005883a 	mov	r2,zero
 801589c:	003f8906 	br	80156c4 <__subdf3+0x4d0>
 80158a0:	3809883a 	mov	r4,r7
 80158a4:	4821883a 	mov	r16,r9
 80158a8:	0011883a 	mov	r8,zero
 80158ac:	0005883a 	mov	r2,zero
 80158b0:	003eda06 	br	801541c <__subdf3+0x228>
 80158b4:	0101ffc4 	movi	r4,2047
 80158b8:	49003b26 	beq	r9,r4,80159a8 <__subdf3+0x7b4>
 80158bc:	0085c83a 	sub	r2,zero,r2
 80158c0:	18c02034 	orhi	r3,r3,128
 80158c4:	01000e04 	movi	r4,56
 80158c8:	20806e16 	blt	r4,r2,8015a84 <__subdf3+0x890>
 80158cc:	010007c4 	movi	r4,31
 80158d0:	20807716 	blt	r4,r2,8015ab0 <__subdf3+0x8bc>
 80158d4:	01000804 	movi	r4,32
 80158d8:	2089c83a 	sub	r4,r4,r2
 80158dc:	1914983a 	sll	r10,r3,r4
 80158e0:	8890d83a 	srl	r8,r17,r2
 80158e4:	8908983a 	sll	r4,r17,r4
 80158e8:	1884d83a 	srl	r2,r3,r2
 80158ec:	5222b03a 	or	r17,r10,r8
 80158f0:	2006c03a 	cmpne	r3,r4,zero
 80158f4:	88e2b03a 	or	r17,r17,r3
 80158f8:	89a3883a 	add	r17,r17,r6
 80158fc:	1145883a 	add	r2,r2,r5
 8015900:	898d803a 	cmpltu	r6,r17,r6
 8015904:	3087883a 	add	r3,r6,r2
 8015908:	4821883a 	mov	r16,r9
 801590c:	003ed906 	br	8015474 <__subdf3+0x280>
 8015910:	2984b03a 	or	r2,r5,r6
 8015914:	10004226 	beq	r2,zero,8015a20 <__subdf3+0x82c>
 8015918:	1808d0fa 	srli	r4,r3,3
 801591c:	8822d0fa 	srli	r17,r17,3
 8015920:	1806977a 	slli	r3,r3,29
 8015924:	2080022c 	andhi	r2,r4,8
 8015928:	1c62b03a 	or	r17,r3,r17
 801592c:	10000826 	beq	r2,zero,8015950 <__subdf3+0x75c>
 8015930:	2812d0fa 	srli	r9,r5,3
 8015934:	4880022c 	andhi	r2,r9,8
 8015938:	1000051e 	bne	r2,zero,8015950 <__subdf3+0x75c>
 801593c:	300cd0fa 	srli	r6,r6,3
 8015940:	2804977a 	slli	r2,r5,29
 8015944:	4809883a 	mov	r4,r9
 8015948:	3825883a 	mov	r18,r7
 801594c:	11a2b03a 	or	r17,r2,r6
 8015950:	8806d77a 	srli	r3,r17,29
 8015954:	200890fa 	slli	r4,r4,3
 8015958:	882290fa 	slli	r17,r17,3
 801595c:	0401ffc4 	movi	r16,2047
 8015960:	1906b03a 	or	r3,r3,r4
 8015964:	003e4406 	br	8015278 <__subdf3+0x84>
 8015968:	2984b03a 	or	r2,r5,r6
 801596c:	103e4226 	beq	r2,zero,8015278 <__subdf3+0x84>
 8015970:	8989c83a 	sub	r4,r17,r6
 8015974:	8911803a 	cmpltu	r8,r17,r4
 8015978:	1945c83a 	sub	r2,r3,r5
 801597c:	1205c83a 	sub	r2,r2,r8
 8015980:	1200202c 	andhi	r8,r2,128
 8015984:	403e9a26 	beq	r8,zero,80153f0 <__subdf3+0x1fc>
 8015988:	3463c83a 	sub	r17,r6,r17
 801598c:	28c5c83a 	sub	r2,r5,r3
 8015990:	344d803a 	cmpltu	r6,r6,r17
 8015994:	1187c83a 	sub	r3,r2,r6
 8015998:	3825883a 	mov	r18,r7
 801599c:	003e3606 	br	8015278 <__subdf3+0x84>
 80159a0:	0101ffc4 	movi	r4,2047
 80159a4:	493fc71e 	bne	r9,r4,80158c4 <__subdf3+0x6d0>
 80159a8:	2807883a 	mov	r3,r5
 80159ac:	3023883a 	mov	r17,r6
 80159b0:	4821883a 	mov	r16,r9
 80159b4:	003e3006 	br	8015278 <__subdf3+0x84>
 80159b8:	10003626 	beq	r2,zero,8015a94 <__subdf3+0x8a0>
 80159bc:	2984b03a 	or	r2,r5,r6
 80159c0:	10001726 	beq	r2,zero,8015a20 <__subdf3+0x82c>
 80159c4:	1808d0fa 	srli	r4,r3,3
 80159c8:	8822d0fa 	srli	r17,r17,3
 80159cc:	1806977a 	slli	r3,r3,29
 80159d0:	2080022c 	andhi	r2,r4,8
 80159d4:	1c62b03a 	or	r17,r3,r17
 80159d8:	10000726 	beq	r2,zero,80159f8 <__subdf3+0x804>
 80159dc:	2812d0fa 	srli	r9,r5,3
 80159e0:	4880022c 	andhi	r2,r9,8
 80159e4:	1000041e 	bne	r2,zero,80159f8 <__subdf3+0x804>
 80159e8:	300cd0fa 	srli	r6,r6,3
 80159ec:	2804977a 	slli	r2,r5,29
 80159f0:	4809883a 	mov	r4,r9
 80159f4:	11a2b03a 	or	r17,r2,r6
 80159f8:	8806d77a 	srli	r3,r17,29
 80159fc:	200890fa 	slli	r4,r4,3
 8015a00:	882290fa 	slli	r17,r17,3
 8015a04:	3825883a 	mov	r18,r7
 8015a08:	1906b03a 	or	r3,r3,r4
 8015a0c:	0401ffc4 	movi	r16,2047
 8015a10:	003e1906 	br	8015278 <__subdf3+0x84>
 8015a14:	000b883a 	mov	r5,zero
 8015a18:	0005883a 	mov	r2,zero
 8015a1c:	003e2e06 	br	80152d8 <__subdf3+0xe4>
 8015a20:	0401ffc4 	movi	r16,2047
 8015a24:	003e1406 	br	8015278 <__subdf3+0x84>
 8015a28:	0005883a 	mov	r2,zero
 8015a2c:	003f7506 	br	8015804 <__subdf3+0x610>
 8015a30:	0005883a 	mov	r2,zero
 8015a34:	0009883a 	mov	r4,zero
 8015a38:	003e7806 	br	801541c <__subdf3+0x228>
 8015a3c:	123ff804 	addi	r8,r2,-32
 8015a40:	01000804 	movi	r4,32
 8015a44:	1a10d83a 	srl	r8,r3,r8
 8015a48:	11002526 	beq	r2,r4,8015ae0 <__subdf3+0x8ec>
 8015a4c:	01001004 	movi	r4,64
 8015a50:	2085c83a 	sub	r2,r4,r2
 8015a54:	1884983a 	sll	r2,r3,r2
 8015a58:	1444b03a 	or	r2,r2,r17
 8015a5c:	1004c03a 	cmpne	r2,r2,zero
 8015a60:	40a2b03a 	or	r17,r8,r2
 8015a64:	0005883a 	mov	r2,zero
 8015a68:	003f1606 	br	80156c4 <__subdf3+0x4d0>
 8015a6c:	02000434 	movhi	r8,16
 8015a70:	0009883a 	mov	r4,zero
 8015a74:	423fffc4 	addi	r8,r8,-1
 8015a78:	00bfffc4 	movi	r2,-1
 8015a7c:	0401ffc4 	movi	r16,2047
 8015a80:	003e6606 	br	801541c <__subdf3+0x228>
 8015a84:	1c62b03a 	or	r17,r3,r17
 8015a88:	8822c03a 	cmpne	r17,r17,zero
 8015a8c:	0005883a 	mov	r2,zero
 8015a90:	003f9906 	br	80158f8 <__subdf3+0x704>
 8015a94:	2807883a 	mov	r3,r5
 8015a98:	3023883a 	mov	r17,r6
 8015a9c:	0401ffc4 	movi	r16,2047
 8015aa0:	003df506 	br	8015278 <__subdf3+0x84>
 8015aa4:	2807883a 	mov	r3,r5
 8015aa8:	3023883a 	mov	r17,r6
 8015aac:	003df206 	br	8015278 <__subdf3+0x84>
 8015ab0:	123ff804 	addi	r8,r2,-32
 8015ab4:	01000804 	movi	r4,32
 8015ab8:	1a10d83a 	srl	r8,r3,r8
 8015abc:	11000a26 	beq	r2,r4,8015ae8 <__subdf3+0x8f4>
 8015ac0:	01001004 	movi	r4,64
 8015ac4:	2085c83a 	sub	r2,r4,r2
 8015ac8:	1884983a 	sll	r2,r3,r2
 8015acc:	1444b03a 	or	r2,r2,r17
 8015ad0:	1004c03a 	cmpne	r2,r2,zero
 8015ad4:	40a2b03a 	or	r17,r8,r2
 8015ad8:	0005883a 	mov	r2,zero
 8015adc:	003f8606 	br	80158f8 <__subdf3+0x704>
 8015ae0:	0005883a 	mov	r2,zero
 8015ae4:	003fdc06 	br	8015a58 <__subdf3+0x864>
 8015ae8:	0005883a 	mov	r2,zero
 8015aec:	003ff706 	br	8015acc <__subdf3+0x8d8>

08015af0 <__fixdfsi>:
 8015af0:	280cd53a 	srli	r6,r5,20
 8015af4:	00c00434 	movhi	r3,16
 8015af8:	18ffffc4 	addi	r3,r3,-1
 8015afc:	3181ffcc 	andi	r6,r6,2047
 8015b00:	01c0ff84 	movi	r7,1022
 8015b04:	28c6703a 	and	r3,r5,r3
 8015b08:	280ad7fa 	srli	r5,r5,31
 8015b0c:	3980120e 	bge	r7,r6,8015b58 <__fixdfsi+0x68>
 8015b10:	00810744 	movi	r2,1053
 8015b14:	11800c16 	blt	r2,r6,8015b48 <__fixdfsi+0x58>
 8015b18:	00810cc4 	movi	r2,1075
 8015b1c:	1185c83a 	sub	r2,r2,r6
 8015b20:	01c007c4 	movi	r7,31
 8015b24:	18c00434 	orhi	r3,r3,16
 8015b28:	38800d16 	blt	r7,r2,8015b60 <__fixdfsi+0x70>
 8015b2c:	31befb44 	addi	r6,r6,-1043
 8015b30:	2084d83a 	srl	r2,r4,r2
 8015b34:	1986983a 	sll	r3,r3,r6
 8015b38:	1884b03a 	or	r2,r3,r2
 8015b3c:	28000726 	beq	r5,zero,8015b5c <__fixdfsi+0x6c>
 8015b40:	0085c83a 	sub	r2,zero,r2
 8015b44:	f800283a 	ret
 8015b48:	00a00034 	movhi	r2,32768
 8015b4c:	10bfffc4 	addi	r2,r2,-1
 8015b50:	2885883a 	add	r2,r5,r2
 8015b54:	f800283a 	ret
 8015b58:	0005883a 	mov	r2,zero
 8015b5c:	f800283a 	ret
 8015b60:	008104c4 	movi	r2,1043
 8015b64:	1185c83a 	sub	r2,r2,r6
 8015b68:	1884d83a 	srl	r2,r3,r2
 8015b6c:	003ff306 	br	8015b3c <__fixdfsi+0x4c>

08015b70 <__floatsidf>:
 8015b70:	defffd04 	addi	sp,sp,-12
 8015b74:	dfc00215 	stw	ra,8(sp)
 8015b78:	dc400115 	stw	r17,4(sp)
 8015b7c:	dc000015 	stw	r16,0(sp)
 8015b80:	20002b26 	beq	r4,zero,8015c30 <__floatsidf+0xc0>
 8015b84:	2023883a 	mov	r17,r4
 8015b88:	2020d7fa 	srli	r16,r4,31
 8015b8c:	20002d16 	blt	r4,zero,8015c44 <__floatsidf+0xd4>
 8015b90:	8809883a 	mov	r4,r17
 8015b94:	8015cf40 	call	8015cf4 <__clzsi2>
 8015b98:	01410784 	movi	r5,1054
 8015b9c:	288bc83a 	sub	r5,r5,r2
 8015ba0:	01010cc4 	movi	r4,1075
 8015ba4:	2149c83a 	sub	r4,r4,r5
 8015ba8:	00c007c4 	movi	r3,31
 8015bac:	1900160e 	bge	r3,r4,8015c08 <__floatsidf+0x98>
 8015bb0:	00c104c4 	movi	r3,1043
 8015bb4:	1947c83a 	sub	r3,r3,r5
 8015bb8:	88c6983a 	sll	r3,r17,r3
 8015bbc:	00800434 	movhi	r2,16
 8015bc0:	10bfffc4 	addi	r2,r2,-1
 8015bc4:	1886703a 	and	r3,r3,r2
 8015bc8:	2941ffcc 	andi	r5,r5,2047
 8015bcc:	800d883a 	mov	r6,r16
 8015bd0:	0005883a 	mov	r2,zero
 8015bd4:	280a953a 	slli	r5,r5,20
 8015bd8:	31803fcc 	andi	r6,r6,255
 8015bdc:	01000434 	movhi	r4,16
 8015be0:	300c97fa 	slli	r6,r6,31
 8015be4:	213fffc4 	addi	r4,r4,-1
 8015be8:	1906703a 	and	r3,r3,r4
 8015bec:	1946b03a 	or	r3,r3,r5
 8015bf0:	1986b03a 	or	r3,r3,r6
 8015bf4:	dfc00217 	ldw	ra,8(sp)
 8015bf8:	dc400117 	ldw	r17,4(sp)
 8015bfc:	dc000017 	ldw	r16,0(sp)
 8015c00:	dec00304 	addi	sp,sp,12
 8015c04:	f800283a 	ret
 8015c08:	00c002c4 	movi	r3,11
 8015c0c:	1887c83a 	sub	r3,r3,r2
 8015c10:	88c6d83a 	srl	r3,r17,r3
 8015c14:	8904983a 	sll	r2,r17,r4
 8015c18:	01000434 	movhi	r4,16
 8015c1c:	213fffc4 	addi	r4,r4,-1
 8015c20:	2941ffcc 	andi	r5,r5,2047
 8015c24:	1906703a 	and	r3,r3,r4
 8015c28:	800d883a 	mov	r6,r16
 8015c2c:	003fe906 	br	8015bd4 <__floatsidf+0x64>
 8015c30:	000d883a 	mov	r6,zero
 8015c34:	000b883a 	mov	r5,zero
 8015c38:	0007883a 	mov	r3,zero
 8015c3c:	0005883a 	mov	r2,zero
 8015c40:	003fe406 	br	8015bd4 <__floatsidf+0x64>
 8015c44:	0123c83a 	sub	r17,zero,r4
 8015c48:	003fd106 	br	8015b90 <__floatsidf+0x20>

08015c4c <__floatunsidf>:
 8015c4c:	defffe04 	addi	sp,sp,-8
 8015c50:	dc000015 	stw	r16,0(sp)
 8015c54:	dfc00115 	stw	ra,4(sp)
 8015c58:	2021883a 	mov	r16,r4
 8015c5c:	20002226 	beq	r4,zero,8015ce8 <__floatunsidf+0x9c>
 8015c60:	8015cf40 	call	8015cf4 <__clzsi2>
 8015c64:	01010784 	movi	r4,1054
 8015c68:	2089c83a 	sub	r4,r4,r2
 8015c6c:	01810cc4 	movi	r6,1075
 8015c70:	310dc83a 	sub	r6,r6,r4
 8015c74:	00c007c4 	movi	r3,31
 8015c78:	1980120e 	bge	r3,r6,8015cc4 <__floatunsidf+0x78>
 8015c7c:	00c104c4 	movi	r3,1043
 8015c80:	1907c83a 	sub	r3,r3,r4
 8015c84:	80ca983a 	sll	r5,r16,r3
 8015c88:	00800434 	movhi	r2,16
 8015c8c:	10bfffc4 	addi	r2,r2,-1
 8015c90:	2101ffcc 	andi	r4,r4,2047
 8015c94:	0021883a 	mov	r16,zero
 8015c98:	288a703a 	and	r5,r5,r2
 8015c9c:	2008953a 	slli	r4,r4,20
 8015ca0:	00c00434 	movhi	r3,16
 8015ca4:	18ffffc4 	addi	r3,r3,-1
 8015ca8:	28c6703a 	and	r3,r5,r3
 8015cac:	8005883a 	mov	r2,r16
 8015cb0:	1906b03a 	or	r3,r3,r4
 8015cb4:	dfc00117 	ldw	ra,4(sp)
 8015cb8:	dc000017 	ldw	r16,0(sp)
 8015cbc:	dec00204 	addi	sp,sp,8
 8015cc0:	f800283a 	ret
 8015cc4:	00c002c4 	movi	r3,11
 8015cc8:	188bc83a 	sub	r5,r3,r2
 8015ccc:	814ad83a 	srl	r5,r16,r5
 8015cd0:	00c00434 	movhi	r3,16
 8015cd4:	18ffffc4 	addi	r3,r3,-1
 8015cd8:	81a0983a 	sll	r16,r16,r6
 8015cdc:	2101ffcc 	andi	r4,r4,2047
 8015ce0:	28ca703a 	and	r5,r5,r3
 8015ce4:	003fed06 	br	8015c9c <__floatunsidf+0x50>
 8015ce8:	0009883a 	mov	r4,zero
 8015cec:	000b883a 	mov	r5,zero
 8015cf0:	003fea06 	br	8015c9c <__floatunsidf+0x50>

08015cf4 <__clzsi2>:
 8015cf4:	00bfffd4 	movui	r2,65535
 8015cf8:	11000536 	bltu	r2,r4,8015d10 <__clzsi2+0x1c>
 8015cfc:	00803fc4 	movi	r2,255
 8015d00:	11000f36 	bltu	r2,r4,8015d40 <__clzsi2+0x4c>
 8015d04:	00800804 	movi	r2,32
 8015d08:	0007883a 	mov	r3,zero
 8015d0c:	00000506 	br	8015d24 <__clzsi2+0x30>
 8015d10:	00804034 	movhi	r2,256
 8015d14:	10bfffc4 	addi	r2,r2,-1
 8015d18:	11000c2e 	bgeu	r2,r4,8015d4c <__clzsi2+0x58>
 8015d1c:	00800204 	movi	r2,8
 8015d20:	00c00604 	movi	r3,24
 8015d24:	20c8d83a 	srl	r4,r4,r3
 8015d28:	00c200b4 	movhi	r3,2050
 8015d2c:	18e8c304 	addi	r3,r3,-23796
 8015d30:	1909883a 	add	r4,r3,r4
 8015d34:	20c00003 	ldbu	r3,0(r4)
 8015d38:	10c5c83a 	sub	r2,r2,r3
 8015d3c:	f800283a 	ret
 8015d40:	00800604 	movi	r2,24
 8015d44:	00c00204 	movi	r3,8
 8015d48:	003ff606 	br	8015d24 <__clzsi2+0x30>
 8015d4c:	00800404 	movi	r2,16
 8015d50:	1007883a 	mov	r3,r2
 8015d54:	003ff306 	br	8015d24 <__clzsi2+0x30>

08015d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015d58:	defffe04 	addi	sp,sp,-8
 8015d5c:	dfc00115 	stw	ra,4(sp)
 8015d60:	df000015 	stw	fp,0(sp)
 8015d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015d68:	d0a00f17 	ldw	r2,-32708(gp)
 8015d6c:	10000326 	beq	r2,zero,8015d7c <alt_get_errno+0x24>
 8015d70:	d0a00f17 	ldw	r2,-32708(gp)
 8015d74:	103ee83a 	callr	r2
 8015d78:	00000106 	br	8015d80 <alt_get_errno+0x28>
 8015d7c:	d0a8b004 	addi	r2,gp,-23872
}
 8015d80:	e037883a 	mov	sp,fp
 8015d84:	dfc00117 	ldw	ra,4(sp)
 8015d88:	df000017 	ldw	fp,0(sp)
 8015d8c:	dec00204 	addi	sp,sp,8
 8015d90:	f800283a 	ret

08015d94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8015d94:	defffb04 	addi	sp,sp,-20
 8015d98:	dfc00415 	stw	ra,16(sp)
 8015d9c:	df000315 	stw	fp,12(sp)
 8015da0:	df000304 	addi	fp,sp,12
 8015da4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8015da8:	e0bfff17 	ldw	r2,-4(fp)
 8015dac:	10000816 	blt	r2,zero,8015dd0 <close+0x3c>
 8015db0:	01400304 	movi	r5,12
 8015db4:	e13fff17 	ldw	r4,-4(fp)
 8015db8:	80086340 	call	8008634 <__mulsi3>
 8015dbc:	1007883a 	mov	r3,r2
 8015dc0:	008200b4 	movhi	r2,2050
 8015dc4:	10ac5904 	addi	r2,r2,-20124
 8015dc8:	1885883a 	add	r2,r3,r2
 8015dcc:	00000106 	br	8015dd4 <close+0x40>
 8015dd0:	0005883a 	mov	r2,zero
 8015dd4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8015dd8:	e0bffd17 	ldw	r2,-12(fp)
 8015ddc:	10001926 	beq	r2,zero,8015e44 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8015de0:	e0bffd17 	ldw	r2,-12(fp)
 8015de4:	10800017 	ldw	r2,0(r2)
 8015de8:	10800417 	ldw	r2,16(r2)
 8015dec:	10000626 	beq	r2,zero,8015e08 <close+0x74>
 8015df0:	e0bffd17 	ldw	r2,-12(fp)
 8015df4:	10800017 	ldw	r2,0(r2)
 8015df8:	10800417 	ldw	r2,16(r2)
 8015dfc:	e13ffd17 	ldw	r4,-12(fp)
 8015e00:	103ee83a 	callr	r2
 8015e04:	00000106 	br	8015e0c <close+0x78>
 8015e08:	0005883a 	mov	r2,zero
 8015e0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015e10:	e13fff17 	ldw	r4,-4(fp)
 8015e14:	8016b180 	call	8016b18 <alt_release_fd>
    if (rval < 0)
 8015e18:	e0bffe17 	ldw	r2,-8(fp)
 8015e1c:	1000070e 	bge	r2,zero,8015e3c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015e20:	8015d580 	call	8015d58 <alt_get_errno>
 8015e24:	1007883a 	mov	r3,r2
 8015e28:	e0bffe17 	ldw	r2,-8(fp)
 8015e2c:	0085c83a 	sub	r2,zero,r2
 8015e30:	18800015 	stw	r2,0(r3)
      return -1;
 8015e34:	00bfffc4 	movi	r2,-1
 8015e38:	00000706 	br	8015e58 <close+0xc4>
    }
    return 0;
 8015e3c:	0005883a 	mov	r2,zero
 8015e40:	00000506 	br	8015e58 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015e44:	8015d580 	call	8015d58 <alt_get_errno>
 8015e48:	1007883a 	mov	r3,r2
 8015e4c:	00801444 	movi	r2,81
 8015e50:	18800015 	stw	r2,0(r3)
    return -1;
 8015e54:	00bfffc4 	movi	r2,-1
  }
}
 8015e58:	e037883a 	mov	sp,fp
 8015e5c:	dfc00117 	ldw	ra,4(sp)
 8015e60:	df000017 	ldw	fp,0(sp)
 8015e64:	dec00204 	addi	sp,sp,8
 8015e68:	f800283a 	ret

08015e6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8015e6c:	defffc04 	addi	sp,sp,-16
 8015e70:	df000315 	stw	fp,12(sp)
 8015e74:	df000304 	addi	fp,sp,12
 8015e78:	e13ffd15 	stw	r4,-12(fp)
 8015e7c:	e17ffe15 	stw	r5,-8(fp)
 8015e80:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8015e84:	e0bfff17 	ldw	r2,-4(fp)
}
 8015e88:	e037883a 	mov	sp,fp
 8015e8c:	df000017 	ldw	fp,0(sp)
 8015e90:	dec00104 	addi	sp,sp,4
 8015e94:	f800283a 	ret

08015e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015e98:	defffe04 	addi	sp,sp,-8
 8015e9c:	dfc00115 	stw	ra,4(sp)
 8015ea0:	df000015 	stw	fp,0(sp)
 8015ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015ea8:	d0a00f17 	ldw	r2,-32708(gp)
 8015eac:	10000326 	beq	r2,zero,8015ebc <alt_get_errno+0x24>
 8015eb0:	d0a00f17 	ldw	r2,-32708(gp)
 8015eb4:	103ee83a 	callr	r2
 8015eb8:	00000106 	br	8015ec0 <alt_get_errno+0x28>
 8015ebc:	d0a8b004 	addi	r2,gp,-23872
}
 8015ec0:	e037883a 	mov	sp,fp
 8015ec4:	dfc00117 	ldw	ra,4(sp)
 8015ec8:	df000017 	ldw	fp,0(sp)
 8015ecc:	dec00204 	addi	sp,sp,8
 8015ed0:	f800283a 	ret

08015ed4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8015ed4:	defffb04 	addi	sp,sp,-20
 8015ed8:	dfc00415 	stw	ra,16(sp)
 8015edc:	df000315 	stw	fp,12(sp)
 8015ee0:	df000304 	addi	fp,sp,12
 8015ee4:	e13ffe15 	stw	r4,-8(fp)
 8015ee8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015eec:	e0bffe17 	ldw	r2,-8(fp)
 8015ef0:	10000816 	blt	r2,zero,8015f14 <fstat+0x40>
 8015ef4:	01400304 	movi	r5,12
 8015ef8:	e13ffe17 	ldw	r4,-8(fp)
 8015efc:	80086340 	call	8008634 <__mulsi3>
 8015f00:	1007883a 	mov	r3,r2
 8015f04:	008200b4 	movhi	r2,2050
 8015f08:	10ac5904 	addi	r2,r2,-20124
 8015f0c:	1885883a 	add	r2,r3,r2
 8015f10:	00000106 	br	8015f18 <fstat+0x44>
 8015f14:	0005883a 	mov	r2,zero
 8015f18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8015f1c:	e0bffd17 	ldw	r2,-12(fp)
 8015f20:	10001026 	beq	r2,zero,8015f64 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8015f24:	e0bffd17 	ldw	r2,-12(fp)
 8015f28:	10800017 	ldw	r2,0(r2)
 8015f2c:	10800817 	ldw	r2,32(r2)
 8015f30:	10000726 	beq	r2,zero,8015f50 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8015f34:	e0bffd17 	ldw	r2,-12(fp)
 8015f38:	10800017 	ldw	r2,0(r2)
 8015f3c:	10800817 	ldw	r2,32(r2)
 8015f40:	e17fff17 	ldw	r5,-4(fp)
 8015f44:	e13ffd17 	ldw	r4,-12(fp)
 8015f48:	103ee83a 	callr	r2
 8015f4c:	00000a06 	br	8015f78 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8015f50:	e0bfff17 	ldw	r2,-4(fp)
 8015f54:	00c80004 	movi	r3,8192
 8015f58:	10c00115 	stw	r3,4(r2)
      return 0;
 8015f5c:	0005883a 	mov	r2,zero
 8015f60:	00000506 	br	8015f78 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015f64:	8015e980 	call	8015e98 <alt_get_errno>
 8015f68:	1007883a 	mov	r3,r2
 8015f6c:	00801444 	movi	r2,81
 8015f70:	18800015 	stw	r2,0(r3)
    return -1;
 8015f74:	00bfffc4 	movi	r2,-1
  }
}
 8015f78:	e037883a 	mov	sp,fp
 8015f7c:	dfc00117 	ldw	ra,4(sp)
 8015f80:	df000017 	ldw	fp,0(sp)
 8015f84:	dec00204 	addi	sp,sp,8
 8015f88:	f800283a 	ret

08015f8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8015f8c:	defff904 	addi	sp,sp,-28
 8015f90:	dfc00615 	stw	ra,24(sp)
 8015f94:	df000515 	stw	fp,20(sp)
 8015f98:	df000504 	addi	fp,sp,20
 8015f9c:	e13ffc15 	stw	r4,-16(fp)
 8015fa0:	e17ffd15 	stw	r5,-12(fp)
 8015fa4:	e1bffe15 	stw	r6,-8(fp)
 8015fa8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8015fac:	e0800217 	ldw	r2,8(fp)
 8015fb0:	d8800015 	stw	r2,0(sp)
 8015fb4:	e1ffff17 	ldw	r7,-4(fp)
 8015fb8:	e1bffe17 	ldw	r6,-8(fp)
 8015fbc:	e17ffd17 	ldw	r5,-12(fp)
 8015fc0:	e13ffc17 	ldw	r4,-16(fp)
 8015fc4:	8003e280 	call	8003e28 <alt_iic_isr_register>
}  
 8015fc8:	e037883a 	mov	sp,fp
 8015fcc:	dfc00117 	ldw	ra,4(sp)
 8015fd0:	df000017 	ldw	fp,0(sp)
 8015fd4:	dec00204 	addi	sp,sp,8
 8015fd8:	f800283a 	ret

08015fdc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8015fdc:	defff904 	addi	sp,sp,-28
 8015fe0:	df000615 	stw	fp,24(sp)
 8015fe4:	df000604 	addi	fp,sp,24
 8015fe8:	e13ffe15 	stw	r4,-8(fp)
 8015fec:	e17fff15 	stw	r5,-4(fp)
 8015ff0:	e0bfff17 	ldw	r2,-4(fp)
 8015ff4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015ff8:	0005303a 	rdctl	r2,status
 8015ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016000:	e0fffb17 	ldw	r3,-20(fp)
 8016004:	00bfff84 	movi	r2,-2
 8016008:	1884703a 	and	r2,r3,r2
 801600c:	1001703a 	wrctl	status,r2
  
  return context;
 8016010:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8016014:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8016018:	00c00044 	movi	r3,1
 801601c:	e0bffa17 	ldw	r2,-24(fp)
 8016020:	1884983a 	sll	r2,r3,r2
 8016024:	1007883a 	mov	r3,r2
 8016028:	d0a8b717 	ldw	r2,-23844(gp)
 801602c:	1884b03a 	or	r2,r3,r2
 8016030:	d0a8b715 	stw	r2,-23844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8016034:	d0a8b717 	ldw	r2,-23844(gp)
 8016038:	100170fa 	wrctl	ienable,r2
 801603c:	e0bffc17 	ldw	r2,-16(fp)
 8016040:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016044:	e0bffd17 	ldw	r2,-12(fp)
 8016048:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801604c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8016050:	0001883a 	nop
}
 8016054:	e037883a 	mov	sp,fp
 8016058:	df000017 	ldw	fp,0(sp)
 801605c:	dec00104 	addi	sp,sp,4
 8016060:	f800283a 	ret

08016064 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8016064:	defff904 	addi	sp,sp,-28
 8016068:	df000615 	stw	fp,24(sp)
 801606c:	df000604 	addi	fp,sp,24
 8016070:	e13ffe15 	stw	r4,-8(fp)
 8016074:	e17fff15 	stw	r5,-4(fp)
 8016078:	e0bfff17 	ldw	r2,-4(fp)
 801607c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016080:	0005303a 	rdctl	r2,status
 8016084:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016088:	e0fffb17 	ldw	r3,-20(fp)
 801608c:	00bfff84 	movi	r2,-2
 8016090:	1884703a 	and	r2,r3,r2
 8016094:	1001703a 	wrctl	status,r2
  
  return context;
 8016098:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801609c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80160a0:	00c00044 	movi	r3,1
 80160a4:	e0bffa17 	ldw	r2,-24(fp)
 80160a8:	1884983a 	sll	r2,r3,r2
 80160ac:	0084303a 	nor	r2,zero,r2
 80160b0:	1007883a 	mov	r3,r2
 80160b4:	d0a8b717 	ldw	r2,-23844(gp)
 80160b8:	1884703a 	and	r2,r3,r2
 80160bc:	d0a8b715 	stw	r2,-23844(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80160c0:	d0a8b717 	ldw	r2,-23844(gp)
 80160c4:	100170fa 	wrctl	ienable,r2
 80160c8:	e0bffc17 	ldw	r2,-16(fp)
 80160cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80160d0:	e0bffd17 	ldw	r2,-12(fp)
 80160d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80160d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80160dc:	0001883a 	nop
}
 80160e0:	e037883a 	mov	sp,fp
 80160e4:	df000017 	ldw	fp,0(sp)
 80160e8:	dec00104 	addi	sp,sp,4
 80160ec:	f800283a 	ret

080160f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80160f0:	defffc04 	addi	sp,sp,-16
 80160f4:	df000315 	stw	fp,12(sp)
 80160f8:	df000304 	addi	fp,sp,12
 80160fc:	e13ffe15 	stw	r4,-8(fp)
 8016100:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8016104:	000530fa 	rdctl	r2,ienable
 8016108:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801610c:	00c00044 	movi	r3,1
 8016110:	e0bfff17 	ldw	r2,-4(fp)
 8016114:	1884983a 	sll	r2,r3,r2
 8016118:	1007883a 	mov	r3,r2
 801611c:	e0bffd17 	ldw	r2,-12(fp)
 8016120:	1884703a 	and	r2,r3,r2
 8016124:	1004c03a 	cmpne	r2,r2,zero
 8016128:	10803fcc 	andi	r2,r2,255
}
 801612c:	e037883a 	mov	sp,fp
 8016130:	df000017 	ldw	fp,0(sp)
 8016134:	dec00104 	addi	sp,sp,4
 8016138:	f800283a 	ret

0801613c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801613c:	defffe04 	addi	sp,sp,-8
 8016140:	dfc00115 	stw	ra,4(sp)
 8016144:	df000015 	stw	fp,0(sp)
 8016148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801614c:	d0a00f17 	ldw	r2,-32708(gp)
 8016150:	10000326 	beq	r2,zero,8016160 <alt_get_errno+0x24>
 8016154:	d0a00f17 	ldw	r2,-32708(gp)
 8016158:	103ee83a 	callr	r2
 801615c:	00000106 	br	8016164 <alt_get_errno+0x28>
 8016160:	d0a8b004 	addi	r2,gp,-23872
}
 8016164:	e037883a 	mov	sp,fp
 8016168:	dfc00117 	ldw	ra,4(sp)
 801616c:	df000017 	ldw	fp,0(sp)
 8016170:	dec00204 	addi	sp,sp,8
 8016174:	f800283a 	ret

08016178 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8016178:	deffed04 	addi	sp,sp,-76
 801617c:	dfc01215 	stw	ra,72(sp)
 8016180:	df001115 	stw	fp,68(sp)
 8016184:	df001104 	addi	fp,sp,68
 8016188:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801618c:	e0bfff17 	ldw	r2,-4(fp)
 8016190:	10000816 	blt	r2,zero,80161b4 <isatty+0x3c>
 8016194:	01400304 	movi	r5,12
 8016198:	e13fff17 	ldw	r4,-4(fp)
 801619c:	80086340 	call	8008634 <__mulsi3>
 80161a0:	1007883a 	mov	r3,r2
 80161a4:	008200b4 	movhi	r2,2050
 80161a8:	10ac5904 	addi	r2,r2,-20124
 80161ac:	1885883a 	add	r2,r3,r2
 80161b0:	00000106 	br	80161b8 <isatty+0x40>
 80161b4:	0005883a 	mov	r2,zero
 80161b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80161bc:	e0bfef17 	ldw	r2,-68(fp)
 80161c0:	10000e26 	beq	r2,zero,80161fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80161c4:	e0bfef17 	ldw	r2,-68(fp)
 80161c8:	10800017 	ldw	r2,0(r2)
 80161cc:	10800817 	ldw	r2,32(r2)
 80161d0:	1000021e 	bne	r2,zero,80161dc <isatty+0x64>
    {
      return 1;
 80161d4:	00800044 	movi	r2,1
 80161d8:	00000d06 	br	8016210 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80161dc:	e0bff004 	addi	r2,fp,-64
 80161e0:	100b883a 	mov	r5,r2
 80161e4:	e13fff17 	ldw	r4,-4(fp)
 80161e8:	8015ed40 	call	8015ed4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80161ec:	e0bff117 	ldw	r2,-60(fp)
 80161f0:	10880020 	cmpeqi	r2,r2,8192
 80161f4:	10803fcc 	andi	r2,r2,255
 80161f8:	00000506 	br	8016210 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80161fc:	801613c0 	call	801613c <alt_get_errno>
 8016200:	1007883a 	mov	r3,r2
 8016204:	00801444 	movi	r2,81
 8016208:	18800015 	stw	r2,0(r3)
    return 0;
 801620c:	0005883a 	mov	r2,zero
  }
}
 8016210:	e037883a 	mov	sp,fp
 8016214:	dfc00117 	ldw	ra,4(sp)
 8016218:	df000017 	ldw	fp,0(sp)
 801621c:	dec00204 	addi	sp,sp,8
 8016220:	f800283a 	ret

08016224 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8016224:	defffc04 	addi	sp,sp,-16
 8016228:	df000315 	stw	fp,12(sp)
 801622c:	df000304 	addi	fp,sp,12
 8016230:	e13ffd15 	stw	r4,-12(fp)
 8016234:	e17ffe15 	stw	r5,-8(fp)
 8016238:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 801623c:	e0fffe17 	ldw	r3,-8(fp)
 8016240:	e0bffd17 	ldw	r2,-12(fp)
 8016244:	18800c26 	beq	r3,r2,8016278 <alt_load_section+0x54>
  {
    while( to != end )
 8016248:	00000806 	br	801626c <alt_load_section+0x48>
    {
      *to++ = *from++;
 801624c:	e0bffe17 	ldw	r2,-8(fp)
 8016250:	10c00104 	addi	r3,r2,4
 8016254:	e0fffe15 	stw	r3,-8(fp)
 8016258:	e0fffd17 	ldw	r3,-12(fp)
 801625c:	19000104 	addi	r4,r3,4
 8016260:	e13ffd15 	stw	r4,-12(fp)
 8016264:	18c00017 	ldw	r3,0(r3)
 8016268:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 801626c:	e0fffe17 	ldw	r3,-8(fp)
 8016270:	e0bfff17 	ldw	r2,-4(fp)
 8016274:	18bff51e 	bne	r3,r2,801624c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8016278:	0001883a 	nop
 801627c:	e037883a 	mov	sp,fp
 8016280:	df000017 	ldw	fp,0(sp)
 8016284:	dec00104 	addi	sp,sp,4
 8016288:	f800283a 	ret

0801628c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 801628c:	defffe04 	addi	sp,sp,-8
 8016290:	dfc00115 	stw	ra,4(sp)
 8016294:	df000015 	stw	fp,0(sp)
 8016298:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 801629c:	018200b4 	movhi	r6,2050
 80162a0:	31b15c04 	addi	r6,r6,-14992
 80162a4:	014200b4 	movhi	r5,2050
 80162a8:	29692604 	addi	r5,r5,-23400
 80162ac:	010200b4 	movhi	r4,2050
 80162b0:	21315c04 	addi	r4,r4,-14992
 80162b4:	80162240 	call	8016224 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80162b8:	01820034 	movhi	r6,2048
 80162bc:	31809404 	addi	r6,r6,592
 80162c0:	01420034 	movhi	r5,2048
 80162c4:	29400804 	addi	r5,r5,32
 80162c8:	01020034 	movhi	r4,2048
 80162cc:	21000804 	addi	r4,r4,32
 80162d0:	80162240 	call	8016224 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80162d4:	018200b4 	movhi	r6,2050
 80162d8:	31a92604 	addi	r6,r6,-23400
 80162dc:	014200b4 	movhi	r5,2050
 80162e0:	29679404 	addi	r5,r5,-25008
 80162e4:	010200b4 	movhi	r4,2050
 80162e8:	21279404 	addi	r4,r4,-25008
 80162ec:	80162240 	call	8016224 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80162f0:	80191f00 	call	80191f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80162f4:	801960c0 	call	801960c <alt_icache_flush_all>
}
 80162f8:	0001883a 	nop
 80162fc:	e037883a 	mov	sp,fp
 8016300:	dfc00117 	ldw	ra,4(sp)
 8016304:	df000017 	ldw	fp,0(sp)
 8016308:	dec00204 	addi	sp,sp,8
 801630c:	f800283a 	ret

08016310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016310:	defffe04 	addi	sp,sp,-8
 8016314:	dfc00115 	stw	ra,4(sp)
 8016318:	df000015 	stw	fp,0(sp)
 801631c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016320:	d0a00f17 	ldw	r2,-32708(gp)
 8016324:	10000326 	beq	r2,zero,8016334 <alt_get_errno+0x24>
 8016328:	d0a00f17 	ldw	r2,-32708(gp)
 801632c:	103ee83a 	callr	r2
 8016330:	00000106 	br	8016338 <alt_get_errno+0x28>
 8016334:	d0a8b004 	addi	r2,gp,-23872
}
 8016338:	e037883a 	mov	sp,fp
 801633c:	dfc00117 	ldw	ra,4(sp)
 8016340:	df000017 	ldw	fp,0(sp)
 8016344:	dec00204 	addi	sp,sp,8
 8016348:	f800283a 	ret

0801634c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801634c:	defff904 	addi	sp,sp,-28
 8016350:	dfc00615 	stw	ra,24(sp)
 8016354:	df000515 	stw	fp,20(sp)
 8016358:	df000504 	addi	fp,sp,20
 801635c:	e13ffd15 	stw	r4,-12(fp)
 8016360:	e17ffe15 	stw	r5,-8(fp)
 8016364:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8016368:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801636c:	e0bffd17 	ldw	r2,-12(fp)
 8016370:	10000816 	blt	r2,zero,8016394 <lseek+0x48>
 8016374:	01400304 	movi	r5,12
 8016378:	e13ffd17 	ldw	r4,-12(fp)
 801637c:	80086340 	call	8008634 <__mulsi3>
 8016380:	1007883a 	mov	r3,r2
 8016384:	008200b4 	movhi	r2,2050
 8016388:	10ac5904 	addi	r2,r2,-20124
 801638c:	1885883a 	add	r2,r3,r2
 8016390:	00000106 	br	8016398 <lseek+0x4c>
 8016394:	0005883a 	mov	r2,zero
 8016398:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801639c:	e0bffc17 	ldw	r2,-16(fp)
 80163a0:	10001026 	beq	r2,zero,80163e4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80163a4:	e0bffc17 	ldw	r2,-16(fp)
 80163a8:	10800017 	ldw	r2,0(r2)
 80163ac:	10800717 	ldw	r2,28(r2)
 80163b0:	10000926 	beq	r2,zero,80163d8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80163b4:	e0bffc17 	ldw	r2,-16(fp)
 80163b8:	10800017 	ldw	r2,0(r2)
 80163bc:	10800717 	ldw	r2,28(r2)
 80163c0:	e1bfff17 	ldw	r6,-4(fp)
 80163c4:	e17ffe17 	ldw	r5,-8(fp)
 80163c8:	e13ffc17 	ldw	r4,-16(fp)
 80163cc:	103ee83a 	callr	r2
 80163d0:	e0bffb15 	stw	r2,-20(fp)
 80163d4:	00000506 	br	80163ec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80163d8:	00bfde84 	movi	r2,-134
 80163dc:	e0bffb15 	stw	r2,-20(fp)
 80163e0:	00000206 	br	80163ec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80163e4:	00bfebc4 	movi	r2,-81
 80163e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80163ec:	e0bffb17 	ldw	r2,-20(fp)
 80163f0:	1000070e 	bge	r2,zero,8016410 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80163f4:	80163100 	call	8016310 <alt_get_errno>
 80163f8:	1007883a 	mov	r3,r2
 80163fc:	e0bffb17 	ldw	r2,-20(fp)
 8016400:	0085c83a 	sub	r2,zero,r2
 8016404:	18800015 	stw	r2,0(r3)
    rc = -1;
 8016408:	00bfffc4 	movi	r2,-1
 801640c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8016410:	e0bffb17 	ldw	r2,-20(fp)
}
 8016414:	e037883a 	mov	sp,fp
 8016418:	dfc00117 	ldw	ra,4(sp)
 801641c:	df000017 	ldw	fp,0(sp)
 8016420:	dec00204 	addi	sp,sp,8
 8016424:	f800283a 	ret

08016428 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8016428:	defffd04 	addi	sp,sp,-12
 801642c:	dfc00215 	stw	ra,8(sp)
 8016430:	df000115 	stw	fp,4(sp)
 8016434:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8016438:	0009883a 	mov	r4,zero
 801643c:	8016dbc0 	call	8016dbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8016440:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8016444:	8016df40 	call	8016df4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8016448:	018200b4 	movhi	r6,2050
 801644c:	31a90604 	addi	r6,r6,-23528
 8016450:	014200b4 	movhi	r5,2050
 8016454:	29690604 	addi	r5,r5,-23528
 8016458:	010200b4 	movhi	r4,2050
 801645c:	21290604 	addi	r4,r4,-23528
 8016460:	80197100 	call	8019710 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8016464:	80192f00 	call	80192f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8016468:	010200b4 	movhi	r4,2050
 801646c:	2124d404 	addi	r4,r4,-27824
 8016470:	80199540 	call	8019954 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8016474:	d0a8b817 	ldw	r2,-23840(gp)
 8016478:	d0e8b917 	ldw	r3,-23836(gp)
 801647c:	d128ba17 	ldw	r4,-23832(gp)
 8016480:	200d883a 	mov	r6,r4
 8016484:	180b883a 	mov	r5,r3
 8016488:	1009883a 	mov	r4,r2
 801648c:	800804c0 	call	800804c <main>
 8016490:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8016494:	01000044 	movi	r4,1
 8016498:	8015d940 	call	8015d94 <close>
  exit (result);
 801649c:	e13fff17 	ldw	r4,-4(fp)
 80164a0:	80199680 	call	8019968 <exit>

080164a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80164a4:	defffe04 	addi	sp,sp,-8
 80164a8:	df000115 	stw	fp,4(sp)
 80164ac:	df000104 	addi	fp,sp,4
 80164b0:	e13fff15 	stw	r4,-4(fp)
}
 80164b4:	0001883a 	nop
 80164b8:	e037883a 	mov	sp,fp
 80164bc:	df000017 	ldw	fp,0(sp)
 80164c0:	dec00104 	addi	sp,sp,4
 80164c4:	f800283a 	ret

080164c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80164c8:	defffe04 	addi	sp,sp,-8
 80164cc:	df000115 	stw	fp,4(sp)
 80164d0:	df000104 	addi	fp,sp,4
 80164d4:	e13fff15 	stw	r4,-4(fp)
}
 80164d8:	0001883a 	nop
 80164dc:	e037883a 	mov	sp,fp
 80164e0:	df000017 	ldw	fp,0(sp)
 80164e4:	dec00104 	addi	sp,sp,4
 80164e8:	f800283a 	ret

080164ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80164ec:	defffe04 	addi	sp,sp,-8
 80164f0:	dfc00115 	stw	ra,4(sp)
 80164f4:	df000015 	stw	fp,0(sp)
 80164f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80164fc:	d0a00f17 	ldw	r2,-32708(gp)
 8016500:	10000326 	beq	r2,zero,8016510 <alt_get_errno+0x24>
 8016504:	d0a00f17 	ldw	r2,-32708(gp)
 8016508:	103ee83a 	callr	r2
 801650c:	00000106 	br	8016514 <alt_get_errno+0x28>
 8016510:	d0a8b004 	addi	r2,gp,-23872
}
 8016514:	e037883a 	mov	sp,fp
 8016518:	dfc00117 	ldw	ra,4(sp)
 801651c:	df000017 	ldw	fp,0(sp)
 8016520:	dec00204 	addi	sp,sp,8
 8016524:	f800283a 	ret

08016528 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8016528:	defffb04 	addi	sp,sp,-20
 801652c:	dfc00415 	stw	ra,16(sp)
 8016530:	df000315 	stw	fp,12(sp)
 8016534:	dc000215 	stw	r16,8(sp)
 8016538:	df000304 	addi	fp,sp,12
 801653c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8016540:	e0bffe17 	ldw	r2,-8(fp)
 8016544:	10800217 	ldw	r2,8(r2)
 8016548:	10d00034 	orhi	r3,r2,16384
 801654c:	e0bffe17 	ldw	r2,-8(fp)
 8016550:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8016554:	e03ffd15 	stw	zero,-12(fp)
 8016558:	00002306 	br	80165e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801655c:	040200b4 	movhi	r16,2050
 8016560:	842c5904 	addi	r16,r16,-20124
 8016564:	e0bffd17 	ldw	r2,-12(fp)
 8016568:	01400304 	movi	r5,12
 801656c:	1009883a 	mov	r4,r2
 8016570:	80086340 	call	8008634 <__mulsi3>
 8016574:	8085883a 	add	r2,r16,r2
 8016578:	10c00017 	ldw	r3,0(r2)
 801657c:	e0bffe17 	ldw	r2,-8(fp)
 8016580:	10800017 	ldw	r2,0(r2)
 8016584:	1880151e 	bne	r3,r2,80165dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016588:	040200b4 	movhi	r16,2050
 801658c:	842c5904 	addi	r16,r16,-20124
 8016590:	e0bffd17 	ldw	r2,-12(fp)
 8016594:	01400304 	movi	r5,12
 8016598:	1009883a 	mov	r4,r2
 801659c:	80086340 	call	8008634 <__mulsi3>
 80165a0:	8085883a 	add	r2,r16,r2
 80165a4:	10800204 	addi	r2,r2,8
 80165a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80165ac:	10000b0e 	bge	r2,zero,80165dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80165b0:	01400304 	movi	r5,12
 80165b4:	e13ffd17 	ldw	r4,-12(fp)
 80165b8:	80086340 	call	8008634 <__mulsi3>
 80165bc:	1007883a 	mov	r3,r2
 80165c0:	008200b4 	movhi	r2,2050
 80165c4:	10ac5904 	addi	r2,r2,-20124
 80165c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80165cc:	e0bffe17 	ldw	r2,-8(fp)
 80165d0:	18800226 	beq	r3,r2,80165dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80165d4:	00bffcc4 	movi	r2,-13
 80165d8:	00000806 	br	80165fc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80165dc:	e0bffd17 	ldw	r2,-12(fp)
 80165e0:	10800044 	addi	r2,r2,1
 80165e4:	e0bffd15 	stw	r2,-12(fp)
 80165e8:	d0a00e17 	ldw	r2,-32712(gp)
 80165ec:	1007883a 	mov	r3,r2
 80165f0:	e0bffd17 	ldw	r2,-12(fp)
 80165f4:	18bfd92e 	bgeu	r3,r2,801655c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80165f8:	0005883a 	mov	r2,zero
}
 80165fc:	e6ffff04 	addi	sp,fp,-4
 8016600:	dfc00217 	ldw	ra,8(sp)
 8016604:	df000117 	ldw	fp,4(sp)
 8016608:	dc000017 	ldw	r16,0(sp)
 801660c:	dec00304 	addi	sp,sp,12
 8016610:	f800283a 	ret

08016614 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8016614:	defff604 	addi	sp,sp,-40
 8016618:	dfc00915 	stw	ra,36(sp)
 801661c:	df000815 	stw	fp,32(sp)
 8016620:	df000804 	addi	fp,sp,32
 8016624:	e13ffd15 	stw	r4,-12(fp)
 8016628:	e17ffe15 	stw	r5,-8(fp)
 801662c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8016630:	00bfffc4 	movi	r2,-1
 8016634:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8016638:	00bffb44 	movi	r2,-19
 801663c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8016640:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8016644:	d1600c04 	addi	r5,gp,-32720
 8016648:	e13ffd17 	ldw	r4,-12(fp)
 801664c:	80193b00 	call	80193b0 <alt_find_dev>
 8016650:	e0bff815 	stw	r2,-32(fp)
 8016654:	e0bff817 	ldw	r2,-32(fp)
 8016658:	1000051e 	bne	r2,zero,8016670 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801665c:	e13ffd17 	ldw	r4,-12(fp)
 8016660:	80194400 	call	8019440 <alt_find_file>
 8016664:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8016668:	00800044 	movi	r2,1
 801666c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8016670:	e0bff817 	ldw	r2,-32(fp)
 8016674:	10002b26 	beq	r2,zero,8016724 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8016678:	e13ff817 	ldw	r4,-32(fp)
 801667c:	80195480 	call	8019548 <alt_get_fd>
 8016680:	e0bff915 	stw	r2,-28(fp)
 8016684:	e0bff917 	ldw	r2,-28(fp)
 8016688:	1000030e 	bge	r2,zero,8016698 <open+0x84>
    {
      status = index;
 801668c:	e0bff917 	ldw	r2,-28(fp)
 8016690:	e0bffa15 	stw	r2,-24(fp)
 8016694:	00002506 	br	801672c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8016698:	01400304 	movi	r5,12
 801669c:	e13ff917 	ldw	r4,-28(fp)
 80166a0:	80086340 	call	8008634 <__mulsi3>
 80166a4:	1007883a 	mov	r3,r2
 80166a8:	008200b4 	movhi	r2,2050
 80166ac:	10ac5904 	addi	r2,r2,-20124
 80166b0:	1885883a 	add	r2,r3,r2
 80166b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80166b8:	e0fffe17 	ldw	r3,-8(fp)
 80166bc:	00900034 	movhi	r2,16384
 80166c0:	10bfffc4 	addi	r2,r2,-1
 80166c4:	1886703a 	and	r3,r3,r2
 80166c8:	e0bffc17 	ldw	r2,-16(fp)
 80166cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80166d0:	e0bffb17 	ldw	r2,-20(fp)
 80166d4:	1000051e 	bne	r2,zero,80166ec <open+0xd8>
 80166d8:	e13ffc17 	ldw	r4,-16(fp)
 80166dc:	80165280 	call	8016528 <alt_file_locked>
 80166e0:	e0bffa15 	stw	r2,-24(fp)
 80166e4:	e0bffa17 	ldw	r2,-24(fp)
 80166e8:	10001016 	blt	r2,zero,801672c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80166ec:	e0bff817 	ldw	r2,-32(fp)
 80166f0:	10800317 	ldw	r2,12(r2)
 80166f4:	10000826 	beq	r2,zero,8016718 <open+0x104>
 80166f8:	e0bff817 	ldw	r2,-32(fp)
 80166fc:	10800317 	ldw	r2,12(r2)
 8016700:	e1ffff17 	ldw	r7,-4(fp)
 8016704:	e1bffe17 	ldw	r6,-8(fp)
 8016708:	e17ffd17 	ldw	r5,-12(fp)
 801670c:	e13ffc17 	ldw	r4,-16(fp)
 8016710:	103ee83a 	callr	r2
 8016714:	00000106 	br	801671c <open+0x108>
 8016718:	0005883a 	mov	r2,zero
 801671c:	e0bffa15 	stw	r2,-24(fp)
 8016720:	00000206 	br	801672c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8016724:	00bffb44 	movi	r2,-19
 8016728:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801672c:	e0bffa17 	ldw	r2,-24(fp)
 8016730:	1000090e 	bge	r2,zero,8016758 <open+0x144>
  {
    alt_release_fd (index);  
 8016734:	e13ff917 	ldw	r4,-28(fp)
 8016738:	8016b180 	call	8016b18 <alt_release_fd>
    ALT_ERRNO = -status;
 801673c:	80164ec0 	call	80164ec <alt_get_errno>
 8016740:	1007883a 	mov	r3,r2
 8016744:	e0bffa17 	ldw	r2,-24(fp)
 8016748:	0085c83a 	sub	r2,zero,r2
 801674c:	18800015 	stw	r2,0(r3)
    return -1;
 8016750:	00bfffc4 	movi	r2,-1
 8016754:	00000106 	br	801675c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8016758:	e0bff917 	ldw	r2,-28(fp)
}
 801675c:	e037883a 	mov	sp,fp
 8016760:	dfc00117 	ldw	ra,4(sp)
 8016764:	df000017 	ldw	fp,0(sp)
 8016768:	dec00204 	addi	sp,sp,8
 801676c:	f800283a 	ret

08016770 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8016770:	defff204 	addi	sp,sp,-56
 8016774:	dfc00a15 	stw	ra,40(sp)
 8016778:	df000915 	stw	fp,36(sp)
 801677c:	df000904 	addi	fp,sp,36
 8016780:	e13fff15 	stw	r4,-4(fp)
 8016784:	e1400215 	stw	r5,8(fp)
 8016788:	e1800315 	stw	r6,12(fp)
 801678c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8016790:	e0800204 	addi	r2,fp,8
 8016794:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8016798:	e0bfff17 	ldw	r2,-4(fp)
 801679c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 80167a0:	00006f06 	br	8016960 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 80167a4:	e0bff807 	ldb	r2,-32(fp)
 80167a8:	10800960 	cmpeqi	r2,r2,37
 80167ac:	1000041e 	bne	r2,zero,80167c0 <alt_printf+0x50>
        {
            alt_putchar(c);
 80167b0:	e0bff807 	ldb	r2,-32(fp)
 80167b4:	1009883a 	mov	r4,r2
 80167b8:	801699c0 	call	801699c <alt_putchar>
 80167bc:	00006806 	br	8016960 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 80167c0:	e0bff717 	ldw	r2,-36(fp)
 80167c4:	10c00044 	addi	r3,r2,1
 80167c8:	e0fff715 	stw	r3,-36(fp)
 80167cc:	10800003 	ldbu	r2,0(r2)
 80167d0:	e0bff805 	stb	r2,-32(fp)
 80167d4:	e0bff807 	ldb	r2,-32(fp)
 80167d8:	10006926 	beq	r2,zero,8016980 <alt_printf+0x210>
            {
                if (c == '%')
 80167dc:	e0bff807 	ldb	r2,-32(fp)
 80167e0:	10800958 	cmpnei	r2,r2,37
 80167e4:	1000041e 	bne	r2,zero,80167f8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 80167e8:	e0bff807 	ldb	r2,-32(fp)
 80167ec:	1009883a 	mov	r4,r2
 80167f0:	801699c0 	call	801699c <alt_putchar>
 80167f4:	00005a06 	br	8016960 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 80167f8:	e0bff807 	ldb	r2,-32(fp)
 80167fc:	108018d8 	cmpnei	r2,r2,99
 8016800:	1000081e 	bne	r2,zero,8016824 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8016804:	e0bffe17 	ldw	r2,-8(fp)
 8016808:	10c00104 	addi	r3,r2,4
 801680c:	e0fffe15 	stw	r3,-8(fp)
 8016810:	10800017 	ldw	r2,0(r2)
 8016814:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8016818:	e13ffd17 	ldw	r4,-12(fp)
 801681c:	801699c0 	call	801699c <alt_putchar>
 8016820:	00004f06 	br	8016960 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8016824:	e0bff807 	ldb	r2,-32(fp)
 8016828:	10801e18 	cmpnei	r2,r2,120
 801682c:	1000341e 	bne	r2,zero,8016900 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8016830:	e0bffe17 	ldw	r2,-8(fp)
 8016834:	10c00104 	addi	r3,r2,4
 8016838:	e0fffe15 	stw	r3,-8(fp)
 801683c:	10800017 	ldw	r2,0(r2)
 8016840:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8016844:	e0bffb17 	ldw	r2,-20(fp)
 8016848:	1000031e 	bne	r2,zero,8016858 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 801684c:	01000c04 	movi	r4,48
 8016850:	801699c0 	call	801699c <alt_putchar>
                        continue;
 8016854:	00004206 	br	8016960 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8016858:	00800704 	movi	r2,28
 801685c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8016860:	00000306 	br	8016870 <alt_printf+0x100>
                        digit_shift -= 4;
 8016864:	e0bff917 	ldw	r2,-28(fp)
 8016868:	10bfff04 	addi	r2,r2,-4
 801686c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8016870:	00c003c4 	movi	r3,15
 8016874:	e0bff917 	ldw	r2,-28(fp)
 8016878:	1884983a 	sll	r2,r3,r2
 801687c:	1007883a 	mov	r3,r2
 8016880:	e0bffb17 	ldw	r2,-20(fp)
 8016884:	1884703a 	and	r2,r3,r2
 8016888:	103ff626 	beq	r2,zero,8016864 <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 801688c:	00001906 	br	80168f4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8016890:	00c003c4 	movi	r3,15
 8016894:	e0bff917 	ldw	r2,-28(fp)
 8016898:	1884983a 	sll	r2,r3,r2
 801689c:	1007883a 	mov	r3,r2
 80168a0:	e0bffb17 	ldw	r2,-20(fp)
 80168a4:	1886703a 	and	r3,r3,r2
 80168a8:	e0bff917 	ldw	r2,-28(fp)
 80168ac:	1884d83a 	srl	r2,r3,r2
 80168b0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 80168b4:	e0bffc17 	ldw	r2,-16(fp)
 80168b8:	108002a8 	cmpgeui	r2,r2,10
 80168bc:	1000041e 	bne	r2,zero,80168d0 <alt_printf+0x160>
                            c = '0' + digit;
 80168c0:	e0bffc17 	ldw	r2,-16(fp)
 80168c4:	10800c04 	addi	r2,r2,48
 80168c8:	e0bff805 	stb	r2,-32(fp)
 80168cc:	00000306 	br	80168dc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 80168d0:	e0bffc17 	ldw	r2,-16(fp)
 80168d4:	108015c4 	addi	r2,r2,87
 80168d8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 80168dc:	e0bff807 	ldb	r2,-32(fp)
 80168e0:	1009883a 	mov	r4,r2
 80168e4:	801699c0 	call	801699c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 80168e8:	e0bff917 	ldw	r2,-28(fp)
 80168ec:	10bfff04 	addi	r2,r2,-4
 80168f0:	e0bff915 	stw	r2,-28(fp)
 80168f4:	e0bff917 	ldw	r2,-28(fp)
 80168f8:	103fe50e 	bge	r2,zero,8016890 <alt_printf+0x120>
 80168fc:	00001806 	br	8016960 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8016900:	e0bff807 	ldb	r2,-32(fp)
 8016904:	10801cd8 	cmpnei	r2,r2,115
 8016908:	1000151e 	bne	r2,zero,8016960 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 801690c:	e0bffe17 	ldw	r2,-8(fp)
 8016910:	10c00104 	addi	r3,r2,4
 8016914:	e0fffe15 	stw	r3,-8(fp)
 8016918:	10800017 	ldw	r2,0(r2)
 801691c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8016920:	00000906 	br	8016948 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8016924:	e0bffa17 	ldw	r2,-24(fp)
 8016928:	10c00044 	addi	r3,r2,1
 801692c:	e0fffa15 	stw	r3,-24(fp)
 8016930:	10800003 	ldbu	r2,0(r2)
 8016934:	10803fcc 	andi	r2,r2,255
 8016938:	1080201c 	xori	r2,r2,128
 801693c:	10bfe004 	addi	r2,r2,-128
 8016940:	1009883a 	mov	r4,r2
 8016944:	801699c0 	call	801699c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8016948:	e0bffa17 	ldw	r2,-24(fp)
 801694c:	10800003 	ldbu	r2,0(r2)
 8016950:	10803fcc 	andi	r2,r2,255
 8016954:	1080201c 	xori	r2,r2,128
 8016958:	10bfe004 	addi	r2,r2,-128
 801695c:	103ff11e 	bne	r2,zero,8016924 <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8016960:	e0bff717 	ldw	r2,-36(fp)
 8016964:	10c00044 	addi	r3,r2,1
 8016968:	e0fff715 	stw	r3,-36(fp)
 801696c:	10800003 	ldbu	r2,0(r2)
 8016970:	e0bff805 	stb	r2,-32(fp)
 8016974:	e0bff807 	ldb	r2,-32(fp)
 8016978:	103f8a1e 	bne	r2,zero,80167a4 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 801697c:	00000106 	br	8016984 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8016980:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8016984:	0001883a 	nop
 8016988:	e037883a 	mov	sp,fp
 801698c:	dfc00117 	ldw	ra,4(sp)
 8016990:	df000017 	ldw	fp,0(sp)
 8016994:	dec00504 	addi	sp,sp,20
 8016998:	f800283a 	ret

0801699c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 801699c:	defffd04 	addi	sp,sp,-12
 80169a0:	dfc00215 	stw	ra,8(sp)
 80169a4:	df000115 	stw	fp,4(sp)
 80169a8:	df000104 	addi	fp,sp,4
 80169ac:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 80169b0:	d0a00517 	ldw	r2,-32748(gp)
 80169b4:	10800217 	ldw	r2,8(r2)
 80169b8:	100b883a 	mov	r5,r2
 80169bc:	e13fff17 	ldw	r4,-4(fp)
 80169c0:	8019abc0 	call	8019abc <putc>
#endif
#endif
}
 80169c4:	e037883a 	mov	sp,fp
 80169c8:	dfc00117 	ldw	ra,4(sp)
 80169cc:	df000017 	ldw	fp,0(sp)
 80169d0:	dec00204 	addi	sp,sp,8
 80169d4:	f800283a 	ret

080169d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80169d8:	defffe04 	addi	sp,sp,-8
 80169dc:	dfc00115 	stw	ra,4(sp)
 80169e0:	df000015 	stw	fp,0(sp)
 80169e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80169e8:	d0a00f17 	ldw	r2,-32708(gp)
 80169ec:	10000326 	beq	r2,zero,80169fc <alt_get_errno+0x24>
 80169f0:	d0a00f17 	ldw	r2,-32708(gp)
 80169f4:	103ee83a 	callr	r2
 80169f8:	00000106 	br	8016a00 <alt_get_errno+0x28>
 80169fc:	d0a8b004 	addi	r2,gp,-23872
}
 8016a00:	e037883a 	mov	sp,fp
 8016a04:	dfc00117 	ldw	ra,4(sp)
 8016a08:	df000017 	ldw	fp,0(sp)
 8016a0c:	dec00204 	addi	sp,sp,8
 8016a10:	f800283a 	ret

08016a14 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8016a14:	defff904 	addi	sp,sp,-28
 8016a18:	dfc00615 	stw	ra,24(sp)
 8016a1c:	df000515 	stw	fp,20(sp)
 8016a20:	df000504 	addi	fp,sp,20
 8016a24:	e13ffd15 	stw	r4,-12(fp)
 8016a28:	e17ffe15 	stw	r5,-8(fp)
 8016a2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016a30:	e0bffd17 	ldw	r2,-12(fp)
 8016a34:	10000816 	blt	r2,zero,8016a58 <read+0x44>
 8016a38:	01400304 	movi	r5,12
 8016a3c:	e13ffd17 	ldw	r4,-12(fp)
 8016a40:	80086340 	call	8008634 <__mulsi3>
 8016a44:	1007883a 	mov	r3,r2
 8016a48:	008200b4 	movhi	r2,2050
 8016a4c:	10ac5904 	addi	r2,r2,-20124
 8016a50:	1885883a 	add	r2,r3,r2
 8016a54:	00000106 	br	8016a5c <read+0x48>
 8016a58:	0005883a 	mov	r2,zero
 8016a5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016a60:	e0bffb17 	ldw	r2,-20(fp)
 8016a64:	10002226 	beq	r2,zero,8016af0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8016a68:	e0bffb17 	ldw	r2,-20(fp)
 8016a6c:	10800217 	ldw	r2,8(r2)
 8016a70:	108000cc 	andi	r2,r2,3
 8016a74:	10800060 	cmpeqi	r2,r2,1
 8016a78:	1000181e 	bne	r2,zero,8016adc <read+0xc8>
        (fd->dev->read))
 8016a7c:	e0bffb17 	ldw	r2,-20(fp)
 8016a80:	10800017 	ldw	r2,0(r2)
 8016a84:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8016a88:	10001426 	beq	r2,zero,8016adc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8016a8c:	e0bffb17 	ldw	r2,-20(fp)
 8016a90:	10800017 	ldw	r2,0(r2)
 8016a94:	10800517 	ldw	r2,20(r2)
 8016a98:	e0ffff17 	ldw	r3,-4(fp)
 8016a9c:	180d883a 	mov	r6,r3
 8016aa0:	e17ffe17 	ldw	r5,-8(fp)
 8016aa4:	e13ffb17 	ldw	r4,-20(fp)
 8016aa8:	103ee83a 	callr	r2
 8016aac:	e0bffc15 	stw	r2,-16(fp)
 8016ab0:	e0bffc17 	ldw	r2,-16(fp)
 8016ab4:	1000070e 	bge	r2,zero,8016ad4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8016ab8:	80169d80 	call	80169d8 <alt_get_errno>
 8016abc:	1007883a 	mov	r3,r2
 8016ac0:	e0bffc17 	ldw	r2,-16(fp)
 8016ac4:	0085c83a 	sub	r2,zero,r2
 8016ac8:	18800015 	stw	r2,0(r3)
          return -1;
 8016acc:	00bfffc4 	movi	r2,-1
 8016ad0:	00000c06 	br	8016b04 <read+0xf0>
        }
        return rval;
 8016ad4:	e0bffc17 	ldw	r2,-16(fp)
 8016ad8:	00000a06 	br	8016b04 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8016adc:	80169d80 	call	80169d8 <alt_get_errno>
 8016ae0:	1007883a 	mov	r3,r2
 8016ae4:	00800344 	movi	r2,13
 8016ae8:	18800015 	stw	r2,0(r3)
 8016aec:	00000406 	br	8016b00 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8016af0:	80169d80 	call	80169d8 <alt_get_errno>
 8016af4:	1007883a 	mov	r3,r2
 8016af8:	00801444 	movi	r2,81
 8016afc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8016b00:	00bfffc4 	movi	r2,-1
}
 8016b04:	e037883a 	mov	sp,fp
 8016b08:	dfc00117 	ldw	ra,4(sp)
 8016b0c:	df000017 	ldw	fp,0(sp)
 8016b10:	dec00204 	addi	sp,sp,8
 8016b14:	f800283a 	ret

08016b18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8016b18:	defffc04 	addi	sp,sp,-16
 8016b1c:	dfc00315 	stw	ra,12(sp)
 8016b20:	df000215 	stw	fp,8(sp)
 8016b24:	dc000115 	stw	r16,4(sp)
 8016b28:	df000204 	addi	fp,sp,8
 8016b2c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8016b30:	e0bffe17 	ldw	r2,-8(fp)
 8016b34:	108000d0 	cmplti	r2,r2,3
 8016b38:	1000111e 	bne	r2,zero,8016b80 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8016b3c:	040200b4 	movhi	r16,2050
 8016b40:	842c5904 	addi	r16,r16,-20124
 8016b44:	e0bffe17 	ldw	r2,-8(fp)
 8016b48:	01400304 	movi	r5,12
 8016b4c:	1009883a 	mov	r4,r2
 8016b50:	80086340 	call	8008634 <__mulsi3>
 8016b54:	8085883a 	add	r2,r16,r2
 8016b58:	10800204 	addi	r2,r2,8
 8016b5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8016b60:	040200b4 	movhi	r16,2050
 8016b64:	842c5904 	addi	r16,r16,-20124
 8016b68:	e0bffe17 	ldw	r2,-8(fp)
 8016b6c:	01400304 	movi	r5,12
 8016b70:	1009883a 	mov	r4,r2
 8016b74:	80086340 	call	8008634 <__mulsi3>
 8016b78:	8085883a 	add	r2,r16,r2
 8016b7c:	10000015 	stw	zero,0(r2)
  }
}
 8016b80:	0001883a 	nop
 8016b84:	e6ffff04 	addi	sp,fp,-4
 8016b88:	dfc00217 	ldw	ra,8(sp)
 8016b8c:	df000117 	ldw	fp,4(sp)
 8016b90:	dc000017 	ldw	r16,0(sp)
 8016b94:	dec00304 	addi	sp,sp,12
 8016b98:	f800283a 	ret

08016b9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8016b9c:	defff904 	addi	sp,sp,-28
 8016ba0:	df000615 	stw	fp,24(sp)
 8016ba4:	df000604 	addi	fp,sp,24
 8016ba8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016bac:	0005303a 	rdctl	r2,status
 8016bb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016bb4:	e0fffe17 	ldw	r3,-8(fp)
 8016bb8:	00bfff84 	movi	r2,-2
 8016bbc:	1884703a 	and	r2,r3,r2
 8016bc0:	1001703a 	wrctl	status,r2
  
  return context;
 8016bc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8016bc8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8016bcc:	d0a01117 	ldw	r2,-32700(gp)
 8016bd0:	10c000c4 	addi	r3,r2,3
 8016bd4:	00bfff04 	movi	r2,-4
 8016bd8:	1884703a 	and	r2,r3,r2
 8016bdc:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8016be0:	d0e01117 	ldw	r3,-32700(gp)
 8016be4:	e0bfff17 	ldw	r2,-4(fp)
 8016be8:	1887883a 	add	r3,r3,r2
 8016bec:	00840034 	movhi	r2,4096
 8016bf0:	10800004 	addi	r2,r2,0
 8016bf4:	10c0062e 	bgeu	r2,r3,8016c10 <sbrk+0x74>
 8016bf8:	e0bffb17 	ldw	r2,-20(fp)
 8016bfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016c00:	e0bffa17 	ldw	r2,-24(fp)
 8016c04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8016c08:	00bfffc4 	movi	r2,-1
 8016c0c:	00000b06 	br	8016c3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8016c10:	d0a01117 	ldw	r2,-32700(gp)
 8016c14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8016c18:	d0e01117 	ldw	r3,-32700(gp)
 8016c1c:	e0bfff17 	ldw	r2,-4(fp)
 8016c20:	1885883a 	add	r2,r3,r2
 8016c24:	d0a01115 	stw	r2,-32700(gp)
 8016c28:	e0bffb17 	ldw	r2,-20(fp)
 8016c2c:	e0bffc15 	stw	r2,-16(fp)
 8016c30:	e0bffc17 	ldw	r2,-16(fp)
 8016c34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8016c38:	e0bffd17 	ldw	r2,-12(fp)
} 
 8016c3c:	e037883a 	mov	sp,fp
 8016c40:	df000017 	ldw	fp,0(sp)
 8016c44:	dec00104 	addi	sp,sp,4
 8016c48:	f800283a 	ret

08016c4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016c4c:	defffe04 	addi	sp,sp,-8
 8016c50:	dfc00115 	stw	ra,4(sp)
 8016c54:	df000015 	stw	fp,0(sp)
 8016c58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016c5c:	d0a00f17 	ldw	r2,-32708(gp)
 8016c60:	10000326 	beq	r2,zero,8016c70 <alt_get_errno+0x24>
 8016c64:	d0a00f17 	ldw	r2,-32708(gp)
 8016c68:	103ee83a 	callr	r2
 8016c6c:	00000106 	br	8016c74 <alt_get_errno+0x28>
 8016c70:	d0a8b004 	addi	r2,gp,-23872
}
 8016c74:	e037883a 	mov	sp,fp
 8016c78:	dfc00117 	ldw	ra,4(sp)
 8016c7c:	df000017 	ldw	fp,0(sp)
 8016c80:	dec00204 	addi	sp,sp,8
 8016c84:	f800283a 	ret

08016c88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8016c88:	defff904 	addi	sp,sp,-28
 8016c8c:	dfc00615 	stw	ra,24(sp)
 8016c90:	df000515 	stw	fp,20(sp)
 8016c94:	df000504 	addi	fp,sp,20
 8016c98:	e13ffd15 	stw	r4,-12(fp)
 8016c9c:	e17ffe15 	stw	r5,-8(fp)
 8016ca0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016ca4:	e0bffd17 	ldw	r2,-12(fp)
 8016ca8:	10000816 	blt	r2,zero,8016ccc <write+0x44>
 8016cac:	01400304 	movi	r5,12
 8016cb0:	e13ffd17 	ldw	r4,-12(fp)
 8016cb4:	80086340 	call	8008634 <__mulsi3>
 8016cb8:	1007883a 	mov	r3,r2
 8016cbc:	008200b4 	movhi	r2,2050
 8016cc0:	10ac5904 	addi	r2,r2,-20124
 8016cc4:	1885883a 	add	r2,r3,r2
 8016cc8:	00000106 	br	8016cd0 <write+0x48>
 8016ccc:	0005883a 	mov	r2,zero
 8016cd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016cd4:	e0bffb17 	ldw	r2,-20(fp)
 8016cd8:	10002126 	beq	r2,zero,8016d60 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8016cdc:	e0bffb17 	ldw	r2,-20(fp)
 8016ce0:	10800217 	ldw	r2,8(r2)
 8016ce4:	108000cc 	andi	r2,r2,3
 8016ce8:	10001826 	beq	r2,zero,8016d4c <write+0xc4>
 8016cec:	e0bffb17 	ldw	r2,-20(fp)
 8016cf0:	10800017 	ldw	r2,0(r2)
 8016cf4:	10800617 	ldw	r2,24(r2)
 8016cf8:	10001426 	beq	r2,zero,8016d4c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8016cfc:	e0bffb17 	ldw	r2,-20(fp)
 8016d00:	10800017 	ldw	r2,0(r2)
 8016d04:	10800617 	ldw	r2,24(r2)
 8016d08:	e0ffff17 	ldw	r3,-4(fp)
 8016d0c:	180d883a 	mov	r6,r3
 8016d10:	e17ffe17 	ldw	r5,-8(fp)
 8016d14:	e13ffb17 	ldw	r4,-20(fp)
 8016d18:	103ee83a 	callr	r2
 8016d1c:	e0bffc15 	stw	r2,-16(fp)
 8016d20:	e0bffc17 	ldw	r2,-16(fp)
 8016d24:	1000070e 	bge	r2,zero,8016d44 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8016d28:	8016c4c0 	call	8016c4c <alt_get_errno>
 8016d2c:	1007883a 	mov	r3,r2
 8016d30:	e0bffc17 	ldw	r2,-16(fp)
 8016d34:	0085c83a 	sub	r2,zero,r2
 8016d38:	18800015 	stw	r2,0(r3)
        return -1;
 8016d3c:	00bfffc4 	movi	r2,-1
 8016d40:	00000c06 	br	8016d74 <write+0xec>
      }
      return rval;
 8016d44:	e0bffc17 	ldw	r2,-16(fp)
 8016d48:	00000a06 	br	8016d74 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8016d4c:	8016c4c0 	call	8016c4c <alt_get_errno>
 8016d50:	1007883a 	mov	r3,r2
 8016d54:	00800344 	movi	r2,13
 8016d58:	18800015 	stw	r2,0(r3)
 8016d5c:	00000406 	br	8016d70 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8016d60:	8016c4c0 	call	8016c4c <alt_get_errno>
 8016d64:	1007883a 	mov	r3,r2
 8016d68:	00801444 	movi	r2,81
 8016d6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8016d70:	00bfffc4 	movi	r2,-1
}
 8016d74:	e037883a 	mov	sp,fp
 8016d78:	dfc00117 	ldw	ra,4(sp)
 8016d7c:	df000017 	ldw	fp,0(sp)
 8016d80:	dec00204 	addi	sp,sp,8
 8016d84:	f800283a 	ret

08016d88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8016d88:	defffd04 	addi	sp,sp,-12
 8016d8c:	dfc00215 	stw	ra,8(sp)
 8016d90:	df000115 	stw	fp,4(sp)
 8016d94:	df000104 	addi	fp,sp,4
 8016d98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8016d9c:	d1600c04 	addi	r5,gp,-32720
 8016da0:	e13fff17 	ldw	r4,-4(fp)
 8016da4:	801924c0 	call	801924c <alt_dev_llist_insert>
}
 8016da8:	e037883a 	mov	sp,fp
 8016dac:	dfc00117 	ldw	ra,4(sp)
 8016db0:	df000017 	ldw	fp,0(sp)
 8016db4:	dec00204 	addi	sp,sp,8
 8016db8:	f800283a 	ret

08016dbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8016dbc:	defffd04 	addi	sp,sp,-12
 8016dc0:	dfc00215 	stw	ra,8(sp)
 8016dc4:	df000115 	stw	fp,4(sp)
 8016dc8:	df000104 	addi	fp,sp,4
 8016dcc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8016dd0:	80199300 	call	8019930 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8016dd4:	00800044 	movi	r2,1
 8016dd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8016ddc:	0001883a 	nop
 8016de0:	e037883a 	mov	sp,fp
 8016de4:	dfc00117 	ldw	ra,4(sp)
 8016de8:	df000017 	ldw	fp,0(sp)
 8016dec:	dec00204 	addi	sp,sp,8
 8016df0:	f800283a 	ret

08016df4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8016df4:	defffe04 	addi	sp,sp,-8
 8016df8:	dfc00115 	stw	ra,4(sp)
 8016dfc:	df000015 	stw	fp,0(sp)
 8016e00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 8016e04:	01c0fa04 	movi	r7,1000
 8016e08:	01800044 	movi	r6,1
 8016e0c:	000b883a 	mov	r5,zero
 8016e10:	01040034 	movhi	r4,4096
 8016e14:	21112804 	addi	r4,r4,17568
 8016e18:	80187480 	call	8018748 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 8016e1c:	000d883a 	mov	r6,zero
 8016e20:	000b883a 	mov	r5,zero
 8016e24:	010200b4 	movhi	r4,2050
 8016e28:	212cc304 	addi	r4,r4,-19700
 8016e2c:	80170380 	call	8017038 <altera_avalon_jtag_uart_init>
 8016e30:	010200b4 	movhi	r4,2050
 8016e34:	212cb904 	addi	r4,r4,-19740
 8016e38:	8016d880 	call	8016d88 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
 8016e3c:	018000c4 	movi	r6,3
 8016e40:	000b883a 	mov	r5,zero
 8016e44:	010200b4 	movhi	r4,2050
 8016e48:	2130d104 	addi	r4,r4,-15548
 8016e4c:	80186280 	call	8018628 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
 8016e50:	01800104 	movi	r6,4
 8016e54:	000b883a 	mov	r5,zero
 8016e58:	010200b4 	movhi	r4,2050
 8016e5c:	2130dd04 	addi	r4,r4,-15500
 8016e60:	80186280 	call	8018628 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 8016e64:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 8016e68:	01800084 	movi	r6,2
 8016e6c:	000b883a 	mov	r5,zero
 8016e70:	010200b4 	movhi	r4,2050
 8016e74:	2130f304 	addi	r4,r4,-15412
 8016e78:	80188d40 	call	80188d4 <altera_avalon_uart_init>
 8016e7c:	010200b4 	movhi	r4,2050
 8016e80:	2130e904 	addi	r4,r4,-15452
 8016e84:	8016d880 	call	8016d88 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
 8016e88:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 8016e8c:	010200b4 	movhi	r4,2050
 8016e90:	21311a04 	addi	r4,r4,-15256
 8016e94:	8016d880 	call	8016d88 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 8016e98:	010200b4 	movhi	r4,2050
 8016e9c:	21312504 	addi	r4,r4,-15212
 8016ea0:	8016d880 	call	8016d88 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 8016ea4:	010200b4 	movhi	r4,2050
 8016ea8:	21313004 	addi	r4,r4,-15168
 8016eac:	8016d880 	call	8016d88 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 8016eb0:	010200b4 	movhi	r4,2050
 8016eb4:	21313b04 	addi	r4,r4,-15124
 8016eb8:	8016d880 	call	8016d88 <alt_dev_reg>
}
 8016ebc:	0001883a 	nop
 8016ec0:	e037883a 	mov	sp,fp
 8016ec4:	dfc00117 	ldw	ra,4(sp)
 8016ec8:	df000017 	ldw	fp,0(sp)
 8016ecc:	dec00204 	addi	sp,sp,8
 8016ed0:	f800283a 	ret

08016ed4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8016ed4:	defffa04 	addi	sp,sp,-24
 8016ed8:	dfc00515 	stw	ra,20(sp)
 8016edc:	df000415 	stw	fp,16(sp)
 8016ee0:	df000404 	addi	fp,sp,16
 8016ee4:	e13ffd15 	stw	r4,-12(fp)
 8016ee8:	e17ffe15 	stw	r5,-8(fp)
 8016eec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016ef0:	e0bffd17 	ldw	r2,-12(fp)
 8016ef4:	10800017 	ldw	r2,0(r2)
 8016ef8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8016efc:	e0bffc17 	ldw	r2,-16(fp)
 8016f00:	10c00a04 	addi	r3,r2,40
 8016f04:	e0bffd17 	ldw	r2,-12(fp)
 8016f08:	10800217 	ldw	r2,8(r2)
 8016f0c:	100f883a 	mov	r7,r2
 8016f10:	e1bfff17 	ldw	r6,-4(fp)
 8016f14:	e17ffe17 	ldw	r5,-8(fp)
 8016f18:	1809883a 	mov	r4,r3
 8016f1c:	80174fc0 	call	80174fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8016f20:	e037883a 	mov	sp,fp
 8016f24:	dfc00117 	ldw	ra,4(sp)
 8016f28:	df000017 	ldw	fp,0(sp)
 8016f2c:	dec00204 	addi	sp,sp,8
 8016f30:	f800283a 	ret

08016f34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8016f34:	defffa04 	addi	sp,sp,-24
 8016f38:	dfc00515 	stw	ra,20(sp)
 8016f3c:	df000415 	stw	fp,16(sp)
 8016f40:	df000404 	addi	fp,sp,16
 8016f44:	e13ffd15 	stw	r4,-12(fp)
 8016f48:	e17ffe15 	stw	r5,-8(fp)
 8016f4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016f50:	e0bffd17 	ldw	r2,-12(fp)
 8016f54:	10800017 	ldw	r2,0(r2)
 8016f58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8016f5c:	e0bffc17 	ldw	r2,-16(fp)
 8016f60:	10c00a04 	addi	r3,r2,40
 8016f64:	e0bffd17 	ldw	r2,-12(fp)
 8016f68:	10800217 	ldw	r2,8(r2)
 8016f6c:	100f883a 	mov	r7,r2
 8016f70:	e1bfff17 	ldw	r6,-4(fp)
 8016f74:	e17ffe17 	ldw	r5,-8(fp)
 8016f78:	1809883a 	mov	r4,r3
 8016f7c:	80177180 	call	8017718 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8016f80:	e037883a 	mov	sp,fp
 8016f84:	dfc00117 	ldw	ra,4(sp)
 8016f88:	df000017 	ldw	fp,0(sp)
 8016f8c:	dec00204 	addi	sp,sp,8
 8016f90:	f800283a 	ret

08016f94 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8016f94:	defffc04 	addi	sp,sp,-16
 8016f98:	dfc00315 	stw	ra,12(sp)
 8016f9c:	df000215 	stw	fp,8(sp)
 8016fa0:	df000204 	addi	fp,sp,8
 8016fa4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016fa8:	e0bfff17 	ldw	r2,-4(fp)
 8016fac:	10800017 	ldw	r2,0(r2)
 8016fb0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8016fb4:	e0bffe17 	ldw	r2,-8(fp)
 8016fb8:	10c00a04 	addi	r3,r2,40
 8016fbc:	e0bfff17 	ldw	r2,-4(fp)
 8016fc0:	10800217 	ldw	r2,8(r2)
 8016fc4:	100b883a 	mov	r5,r2
 8016fc8:	1809883a 	mov	r4,r3
 8016fcc:	80173a40 	call	80173a4 <altera_avalon_jtag_uart_close>
}
 8016fd0:	e037883a 	mov	sp,fp
 8016fd4:	dfc00117 	ldw	ra,4(sp)
 8016fd8:	df000017 	ldw	fp,0(sp)
 8016fdc:	dec00204 	addi	sp,sp,8
 8016fe0:	f800283a 	ret

08016fe4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8016fe4:	defffa04 	addi	sp,sp,-24
 8016fe8:	dfc00515 	stw	ra,20(sp)
 8016fec:	df000415 	stw	fp,16(sp)
 8016ff0:	df000404 	addi	fp,sp,16
 8016ff4:	e13ffd15 	stw	r4,-12(fp)
 8016ff8:	e17ffe15 	stw	r5,-8(fp)
 8016ffc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8017000:	e0bffd17 	ldw	r2,-12(fp)
 8017004:	10800017 	ldw	r2,0(r2)
 8017008:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801700c:	e0bffc17 	ldw	r2,-16(fp)
 8017010:	10800a04 	addi	r2,r2,40
 8017014:	e1bfff17 	ldw	r6,-4(fp)
 8017018:	e17ffe17 	ldw	r5,-8(fp)
 801701c:	1009883a 	mov	r4,r2
 8017020:	801740c0 	call	801740c <altera_avalon_jtag_uart_ioctl>
}
 8017024:	e037883a 	mov	sp,fp
 8017028:	dfc00117 	ldw	ra,4(sp)
 801702c:	df000017 	ldw	fp,0(sp)
 8017030:	dec00204 	addi	sp,sp,8
 8017034:	f800283a 	ret

08017038 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8017038:	defffa04 	addi	sp,sp,-24
 801703c:	dfc00515 	stw	ra,20(sp)
 8017040:	df000415 	stw	fp,16(sp)
 8017044:	df000404 	addi	fp,sp,16
 8017048:	e13ffd15 	stw	r4,-12(fp)
 801704c:	e17ffe15 	stw	r5,-8(fp)
 8017050:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8017054:	e0bffd17 	ldw	r2,-12(fp)
 8017058:	00c00044 	movi	r3,1
 801705c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8017060:	e0bffd17 	ldw	r2,-12(fp)
 8017064:	10800017 	ldw	r2,0(r2)
 8017068:	10800104 	addi	r2,r2,4
 801706c:	1007883a 	mov	r3,r2
 8017070:	e0bffd17 	ldw	r2,-12(fp)
 8017074:	10800817 	ldw	r2,32(r2)
 8017078:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801707c:	e0bffe17 	ldw	r2,-8(fp)
 8017080:	e0ffff17 	ldw	r3,-4(fp)
 8017084:	d8000015 	stw	zero,0(sp)
 8017088:	e1fffd17 	ldw	r7,-12(fp)
 801708c:	01820074 	movhi	r6,2049
 8017090:	319c3e04 	addi	r6,r6,28920
 8017094:	180b883a 	mov	r5,r3
 8017098:	1009883a 	mov	r4,r2
 801709c:	8015f8c0 	call	8015f8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80170a0:	e0bffd17 	ldw	r2,-12(fp)
 80170a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80170a8:	e0bffd17 	ldw	r2,-12(fp)
 80170ac:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80170b0:	d0e8bb17 	ldw	r3,-23828(gp)
 80170b4:	e1fffd17 	ldw	r7,-12(fp)
 80170b8:	01820074 	movhi	r6,2049
 80170bc:	319cc104 	addi	r6,r6,29444
 80170c0:	180b883a 	mov	r5,r3
 80170c4:	1009883a 	mov	r4,r2
 80170c8:	801909c0 	call	801909c <alt_alarm_start>
 80170cc:	1000040e 	bge	r2,zero,80170e0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80170d0:	e0fffd17 	ldw	r3,-12(fp)
 80170d4:	00a00034 	movhi	r2,32768
 80170d8:	10bfffc4 	addi	r2,r2,-1
 80170dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80170e0:	0001883a 	nop
 80170e4:	e037883a 	mov	sp,fp
 80170e8:	dfc00117 	ldw	ra,4(sp)
 80170ec:	df000017 	ldw	fp,0(sp)
 80170f0:	dec00204 	addi	sp,sp,8
 80170f4:	f800283a 	ret

080170f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80170f8:	defff804 	addi	sp,sp,-32
 80170fc:	df000715 	stw	fp,28(sp)
 8017100:	df000704 	addi	fp,sp,28
 8017104:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8017108:	e0bfff17 	ldw	r2,-4(fp)
 801710c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8017110:	e0bffb17 	ldw	r2,-20(fp)
 8017114:	10800017 	ldw	r2,0(r2)
 8017118:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801711c:	e0bffc17 	ldw	r2,-16(fp)
 8017120:	10800104 	addi	r2,r2,4
 8017124:	10800037 	ldwio	r2,0(r2)
 8017128:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801712c:	e0bffd17 	ldw	r2,-12(fp)
 8017130:	1080c00c 	andi	r2,r2,768
 8017134:	10006d26 	beq	r2,zero,80172ec <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8017138:	e0bffd17 	ldw	r2,-12(fp)
 801713c:	1080400c 	andi	r2,r2,256
 8017140:	10003526 	beq	r2,zero,8017218 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8017144:	00800074 	movhi	r2,1
 8017148:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801714c:	e0bffb17 	ldw	r2,-20(fp)
 8017150:	10800a17 	ldw	r2,40(r2)
 8017154:	10800044 	addi	r2,r2,1
 8017158:	1081ffcc 	andi	r2,r2,2047
 801715c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8017160:	e0bffb17 	ldw	r2,-20(fp)
 8017164:	10c00b17 	ldw	r3,44(r2)
 8017168:	e0bffe17 	ldw	r2,-8(fp)
 801716c:	18801526 	beq	r3,r2,80171c4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8017170:	e0bffc17 	ldw	r2,-16(fp)
 8017174:	10800037 	ldwio	r2,0(r2)
 8017178:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801717c:	e0bff917 	ldw	r2,-28(fp)
 8017180:	10a0000c 	andi	r2,r2,32768
 8017184:	10001126 	beq	r2,zero,80171cc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8017188:	e0bffb17 	ldw	r2,-20(fp)
 801718c:	10800a17 	ldw	r2,40(r2)
 8017190:	e0fff917 	ldw	r3,-28(fp)
 8017194:	1809883a 	mov	r4,r3
 8017198:	e0fffb17 	ldw	r3,-20(fp)
 801719c:	1885883a 	add	r2,r3,r2
 80171a0:	10800e04 	addi	r2,r2,56
 80171a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80171a8:	e0bffb17 	ldw	r2,-20(fp)
 80171ac:	10800a17 	ldw	r2,40(r2)
 80171b0:	10800044 	addi	r2,r2,1
 80171b4:	10c1ffcc 	andi	r3,r2,2047
 80171b8:	e0bffb17 	ldw	r2,-20(fp)
 80171bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80171c0:	003fe206 	br	801714c <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80171c4:	0001883a 	nop
 80171c8:	00000106 	br	80171d0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80171cc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80171d0:	e0bff917 	ldw	r2,-28(fp)
 80171d4:	10bfffec 	andhi	r2,r2,65535
 80171d8:	10000f26 	beq	r2,zero,8017218 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80171dc:	e0bffb17 	ldw	r2,-20(fp)
 80171e0:	10c00817 	ldw	r3,32(r2)
 80171e4:	00bfff84 	movi	r2,-2
 80171e8:	1886703a 	and	r3,r3,r2
 80171ec:	e0bffb17 	ldw	r2,-20(fp)
 80171f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80171f4:	e0bffc17 	ldw	r2,-16(fp)
 80171f8:	10800104 	addi	r2,r2,4
 80171fc:	1007883a 	mov	r3,r2
 8017200:	e0bffb17 	ldw	r2,-20(fp)
 8017204:	10800817 	ldw	r2,32(r2)
 8017208:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801720c:	e0bffc17 	ldw	r2,-16(fp)
 8017210:	10800104 	addi	r2,r2,4
 8017214:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8017218:	e0bffd17 	ldw	r2,-12(fp)
 801721c:	1080800c 	andi	r2,r2,512
 8017220:	103fbe26 	beq	r2,zero,801711c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8017224:	e0bffd17 	ldw	r2,-12(fp)
 8017228:	1004d43a 	srli	r2,r2,16
 801722c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8017230:	00001406 	br	8017284 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8017234:	e0bffc17 	ldw	r2,-16(fp)
 8017238:	e0fffb17 	ldw	r3,-20(fp)
 801723c:	18c00d17 	ldw	r3,52(r3)
 8017240:	e13ffb17 	ldw	r4,-20(fp)
 8017244:	20c7883a 	add	r3,r4,r3
 8017248:	18c20e04 	addi	r3,r3,2104
 801724c:	18c00003 	ldbu	r3,0(r3)
 8017250:	18c03fcc 	andi	r3,r3,255
 8017254:	18c0201c 	xori	r3,r3,128
 8017258:	18ffe004 	addi	r3,r3,-128
 801725c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8017260:	e0bffb17 	ldw	r2,-20(fp)
 8017264:	10800d17 	ldw	r2,52(r2)
 8017268:	10800044 	addi	r2,r2,1
 801726c:	10c1ffcc 	andi	r3,r2,2047
 8017270:	e0bffb17 	ldw	r2,-20(fp)
 8017274:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8017278:	e0bffa17 	ldw	r2,-24(fp)
 801727c:	10bfffc4 	addi	r2,r2,-1
 8017280:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8017284:	e0bffa17 	ldw	r2,-24(fp)
 8017288:	10000526 	beq	r2,zero,80172a0 <altera_avalon_jtag_uart_irq+0x1a8>
 801728c:	e0bffb17 	ldw	r2,-20(fp)
 8017290:	10c00d17 	ldw	r3,52(r2)
 8017294:	e0bffb17 	ldw	r2,-20(fp)
 8017298:	10800c17 	ldw	r2,48(r2)
 801729c:	18bfe51e 	bne	r3,r2,8017234 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80172a0:	e0bffa17 	ldw	r2,-24(fp)
 80172a4:	103f9d26 	beq	r2,zero,801711c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80172a8:	e0bffb17 	ldw	r2,-20(fp)
 80172ac:	10c00817 	ldw	r3,32(r2)
 80172b0:	00bfff44 	movi	r2,-3
 80172b4:	1886703a 	and	r3,r3,r2
 80172b8:	e0bffb17 	ldw	r2,-20(fp)
 80172bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80172c0:	e0bffb17 	ldw	r2,-20(fp)
 80172c4:	10800017 	ldw	r2,0(r2)
 80172c8:	10800104 	addi	r2,r2,4
 80172cc:	1007883a 	mov	r3,r2
 80172d0:	e0bffb17 	ldw	r2,-20(fp)
 80172d4:	10800817 	ldw	r2,32(r2)
 80172d8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80172dc:	e0bffc17 	ldw	r2,-16(fp)
 80172e0:	10800104 	addi	r2,r2,4
 80172e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80172e8:	003f8c06 	br	801711c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80172ec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80172f0:	0001883a 	nop
 80172f4:	e037883a 	mov	sp,fp
 80172f8:	df000017 	ldw	fp,0(sp)
 80172fc:	dec00104 	addi	sp,sp,4
 8017300:	f800283a 	ret

08017304 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8017304:	defff804 	addi	sp,sp,-32
 8017308:	df000715 	stw	fp,28(sp)
 801730c:	df000704 	addi	fp,sp,28
 8017310:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8017314:	e0bffb17 	ldw	r2,-20(fp)
 8017318:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801731c:	e0bff917 	ldw	r2,-28(fp)
 8017320:	10800017 	ldw	r2,0(r2)
 8017324:	10800104 	addi	r2,r2,4
 8017328:	10800037 	ldwio	r2,0(r2)
 801732c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8017330:	e0bffa17 	ldw	r2,-24(fp)
 8017334:	1081000c 	andi	r2,r2,1024
 8017338:	10000b26 	beq	r2,zero,8017368 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801733c:	e0bff917 	ldw	r2,-28(fp)
 8017340:	10800017 	ldw	r2,0(r2)
 8017344:	10800104 	addi	r2,r2,4
 8017348:	1007883a 	mov	r3,r2
 801734c:	e0bff917 	ldw	r2,-28(fp)
 8017350:	10800817 	ldw	r2,32(r2)
 8017354:	10810014 	ori	r2,r2,1024
 8017358:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801735c:	e0bff917 	ldw	r2,-28(fp)
 8017360:	10000915 	stw	zero,36(r2)
 8017364:	00000a06 	br	8017390 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8017368:	e0bff917 	ldw	r2,-28(fp)
 801736c:	10c00917 	ldw	r3,36(r2)
 8017370:	00a00034 	movhi	r2,32768
 8017374:	10bfff04 	addi	r2,r2,-4
 8017378:	10c00536 	bltu	r2,r3,8017390 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 801737c:	e0bff917 	ldw	r2,-28(fp)
 8017380:	10800917 	ldw	r2,36(r2)
 8017384:	10c00044 	addi	r3,r2,1
 8017388:	e0bff917 	ldw	r2,-28(fp)
 801738c:	10c00915 	stw	r3,36(r2)
 8017390:	d0a8bb17 	ldw	r2,-23828(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8017394:	e037883a 	mov	sp,fp
 8017398:	df000017 	ldw	fp,0(sp)
 801739c:	dec00104 	addi	sp,sp,4
 80173a0:	f800283a 	ret

080173a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80173a4:	defffd04 	addi	sp,sp,-12
 80173a8:	df000215 	stw	fp,8(sp)
 80173ac:	df000204 	addi	fp,sp,8
 80173b0:	e13ffe15 	stw	r4,-8(fp)
 80173b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80173b8:	00000506 	br	80173d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80173bc:	e0bfff17 	ldw	r2,-4(fp)
 80173c0:	1090000c 	andi	r2,r2,16384
 80173c4:	10000226 	beq	r2,zero,80173d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80173c8:	00bffd44 	movi	r2,-11
 80173cc:	00000b06 	br	80173fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80173d0:	e0bffe17 	ldw	r2,-8(fp)
 80173d4:	10c00d17 	ldw	r3,52(r2)
 80173d8:	e0bffe17 	ldw	r2,-8(fp)
 80173dc:	10800c17 	ldw	r2,48(r2)
 80173e0:	18800526 	beq	r3,r2,80173f8 <altera_avalon_jtag_uart_close+0x54>
 80173e4:	e0bffe17 	ldw	r2,-8(fp)
 80173e8:	10c00917 	ldw	r3,36(r2)
 80173ec:	e0bffe17 	ldw	r2,-8(fp)
 80173f0:	10800117 	ldw	r2,4(r2)
 80173f4:	18bff136 	bltu	r3,r2,80173bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80173f8:	0005883a 	mov	r2,zero
}
 80173fc:	e037883a 	mov	sp,fp
 8017400:	df000017 	ldw	fp,0(sp)
 8017404:	dec00104 	addi	sp,sp,4
 8017408:	f800283a 	ret

0801740c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801740c:	defffa04 	addi	sp,sp,-24
 8017410:	df000515 	stw	fp,20(sp)
 8017414:	df000504 	addi	fp,sp,20
 8017418:	e13ffd15 	stw	r4,-12(fp)
 801741c:	e17ffe15 	stw	r5,-8(fp)
 8017420:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8017424:	00bff9c4 	movi	r2,-25
 8017428:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 801742c:	e0bffe17 	ldw	r2,-8(fp)
 8017430:	10da8060 	cmpeqi	r3,r2,27137
 8017434:	1800031e 	bne	r3,zero,8017444 <altera_avalon_jtag_uart_ioctl+0x38>
 8017438:	109a80a0 	cmpeqi	r2,r2,27138
 801743c:	1000181e 	bne	r2,zero,80174a0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8017440:	00002906 	br	80174e8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8017444:	e0bffd17 	ldw	r2,-12(fp)
 8017448:	10c00117 	ldw	r3,4(r2)
 801744c:	00a00034 	movhi	r2,32768
 8017450:	10bfffc4 	addi	r2,r2,-1
 8017454:	18802126 	beq	r3,r2,80174dc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8017458:	e0bfff17 	ldw	r2,-4(fp)
 801745c:	10800017 	ldw	r2,0(r2)
 8017460:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8017464:	e0bffc17 	ldw	r2,-16(fp)
 8017468:	10800090 	cmplti	r2,r2,2
 801746c:	1000061e 	bne	r2,zero,8017488 <altera_avalon_jtag_uart_ioctl+0x7c>
 8017470:	e0fffc17 	ldw	r3,-16(fp)
 8017474:	00a00034 	movhi	r2,32768
 8017478:	10bfffc4 	addi	r2,r2,-1
 801747c:	18800226 	beq	r3,r2,8017488 <altera_avalon_jtag_uart_ioctl+0x7c>
 8017480:	e0bffc17 	ldw	r2,-16(fp)
 8017484:	00000206 	br	8017490 <altera_avalon_jtag_uart_ioctl+0x84>
 8017488:	00a00034 	movhi	r2,32768
 801748c:	10bfff84 	addi	r2,r2,-2
 8017490:	e0fffd17 	ldw	r3,-12(fp)
 8017494:	18800115 	stw	r2,4(r3)
      rc = 0;
 8017498:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801749c:	00000f06 	br	80174dc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80174a0:	e0bffd17 	ldw	r2,-12(fp)
 80174a4:	10c00117 	ldw	r3,4(r2)
 80174a8:	00a00034 	movhi	r2,32768
 80174ac:	10bfffc4 	addi	r2,r2,-1
 80174b0:	18800c26 	beq	r3,r2,80174e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80174b4:	e0bffd17 	ldw	r2,-12(fp)
 80174b8:	10c00917 	ldw	r3,36(r2)
 80174bc:	e0bffd17 	ldw	r2,-12(fp)
 80174c0:	10800117 	ldw	r2,4(r2)
 80174c4:	1885803a 	cmpltu	r2,r3,r2
 80174c8:	10c03fcc 	andi	r3,r2,255
 80174cc:	e0bfff17 	ldw	r2,-4(fp)
 80174d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80174d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80174d8:	00000206 	br	80174e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80174dc:	0001883a 	nop
 80174e0:	00000106 	br	80174e8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80174e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80174e8:	e0bffb17 	ldw	r2,-20(fp)
}
 80174ec:	e037883a 	mov	sp,fp
 80174f0:	df000017 	ldw	fp,0(sp)
 80174f4:	dec00104 	addi	sp,sp,4
 80174f8:	f800283a 	ret

080174fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80174fc:	defff304 	addi	sp,sp,-52
 8017500:	dfc00c15 	stw	ra,48(sp)
 8017504:	df000b15 	stw	fp,44(sp)
 8017508:	df000b04 	addi	fp,sp,44
 801750c:	e13ffc15 	stw	r4,-16(fp)
 8017510:	e17ffd15 	stw	r5,-12(fp)
 8017514:	e1bffe15 	stw	r6,-8(fp)
 8017518:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 801751c:	e0bffd17 	ldw	r2,-12(fp)
 8017520:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8017524:	00004706 	br	8017644 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8017528:	e0bffc17 	ldw	r2,-16(fp)
 801752c:	10800a17 	ldw	r2,40(r2)
 8017530:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8017534:	e0bffc17 	ldw	r2,-16(fp)
 8017538:	10800b17 	ldw	r2,44(r2)
 801753c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8017540:	e0fff717 	ldw	r3,-36(fp)
 8017544:	e0bff817 	ldw	r2,-32(fp)
 8017548:	18800536 	bltu	r3,r2,8017560 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801754c:	e0fff717 	ldw	r3,-36(fp)
 8017550:	e0bff817 	ldw	r2,-32(fp)
 8017554:	1885c83a 	sub	r2,r3,r2
 8017558:	e0bff615 	stw	r2,-40(fp)
 801755c:	00000406 	br	8017570 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8017560:	00c20004 	movi	r3,2048
 8017564:	e0bff817 	ldw	r2,-32(fp)
 8017568:	1885c83a 	sub	r2,r3,r2
 801756c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8017570:	e0bff617 	ldw	r2,-40(fp)
 8017574:	10001e26 	beq	r2,zero,80175f0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8017578:	e0fffe17 	ldw	r3,-8(fp)
 801757c:	e0bff617 	ldw	r2,-40(fp)
 8017580:	1880022e 	bgeu	r3,r2,801758c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8017584:	e0bffe17 	ldw	r2,-8(fp)
 8017588:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801758c:	e0bffc17 	ldw	r2,-16(fp)
 8017590:	10c00e04 	addi	r3,r2,56
 8017594:	e0bff817 	ldw	r2,-32(fp)
 8017598:	1885883a 	add	r2,r3,r2
 801759c:	e1bff617 	ldw	r6,-40(fp)
 80175a0:	100b883a 	mov	r5,r2
 80175a4:	e13ff517 	ldw	r4,-44(fp)
 80175a8:	800971c0 	call	800971c <memcpy>
      ptr   += n;
 80175ac:	e0fff517 	ldw	r3,-44(fp)
 80175b0:	e0bff617 	ldw	r2,-40(fp)
 80175b4:	1885883a 	add	r2,r3,r2
 80175b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80175bc:	e0fffe17 	ldw	r3,-8(fp)
 80175c0:	e0bff617 	ldw	r2,-40(fp)
 80175c4:	1885c83a 	sub	r2,r3,r2
 80175c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80175cc:	e0fff817 	ldw	r3,-32(fp)
 80175d0:	e0bff617 	ldw	r2,-40(fp)
 80175d4:	1885883a 	add	r2,r3,r2
 80175d8:	10c1ffcc 	andi	r3,r2,2047
 80175dc:	e0bffc17 	ldw	r2,-16(fp)
 80175e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80175e4:	e0bffe17 	ldw	r2,-8(fp)
 80175e8:	00bfcf16 	blt	zero,r2,8017528 <altera_avalon_jtag_uart_read+0x2c>
 80175ec:	00000106 	br	80175f4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80175f0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80175f4:	e0fff517 	ldw	r3,-44(fp)
 80175f8:	e0bffd17 	ldw	r2,-12(fp)
 80175fc:	1880141e 	bne	r3,r2,8017650 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8017600:	e0bfff17 	ldw	r2,-4(fp)
 8017604:	1090000c 	andi	r2,r2,16384
 8017608:	1000131e 	bne	r2,zero,8017658 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801760c:	0001883a 	nop
 8017610:	e0bffc17 	ldw	r2,-16(fp)
 8017614:	10c00a17 	ldw	r3,40(r2)
 8017618:	e0bff717 	ldw	r2,-36(fp)
 801761c:	1880051e 	bne	r3,r2,8017634 <altera_avalon_jtag_uart_read+0x138>
 8017620:	e0bffc17 	ldw	r2,-16(fp)
 8017624:	10c00917 	ldw	r3,36(r2)
 8017628:	e0bffc17 	ldw	r2,-16(fp)
 801762c:	10800117 	ldw	r2,4(r2)
 8017630:	18bff736 	bltu	r3,r2,8017610 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8017634:	e0bffc17 	ldw	r2,-16(fp)
 8017638:	10c00a17 	ldw	r3,40(r2)
 801763c:	e0bff717 	ldw	r2,-36(fp)
 8017640:	18800726 	beq	r3,r2,8017660 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8017644:	e0bffe17 	ldw	r2,-8(fp)
 8017648:	00bfb716 	blt	zero,r2,8017528 <altera_avalon_jtag_uart_read+0x2c>
 801764c:	00000506 	br	8017664 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8017650:	0001883a 	nop
 8017654:	00000306 	br	8017664 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8017658:	0001883a 	nop
 801765c:	00000106 	br	8017664 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8017660:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8017664:	e0fff517 	ldw	r3,-44(fp)
 8017668:	e0bffd17 	ldw	r2,-12(fp)
 801766c:	18801826 	beq	r3,r2,80176d0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017670:	0005303a 	rdctl	r2,status
 8017674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017678:	e0fffb17 	ldw	r3,-20(fp)
 801767c:	00bfff84 	movi	r2,-2
 8017680:	1884703a 	and	r2,r3,r2
 8017684:	1001703a 	wrctl	status,r2
  
  return context;
 8017688:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801768c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8017690:	e0bffc17 	ldw	r2,-16(fp)
 8017694:	10800817 	ldw	r2,32(r2)
 8017698:	10c00054 	ori	r3,r2,1
 801769c:	e0bffc17 	ldw	r2,-16(fp)
 80176a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80176a4:	e0bffc17 	ldw	r2,-16(fp)
 80176a8:	10800017 	ldw	r2,0(r2)
 80176ac:	10800104 	addi	r2,r2,4
 80176b0:	1007883a 	mov	r3,r2
 80176b4:	e0bffc17 	ldw	r2,-16(fp)
 80176b8:	10800817 	ldw	r2,32(r2)
 80176bc:	18800035 	stwio	r2,0(r3)
 80176c0:	e0bffa17 	ldw	r2,-24(fp)
 80176c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80176c8:	e0bff917 	ldw	r2,-28(fp)
 80176cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80176d0:	e0fff517 	ldw	r3,-44(fp)
 80176d4:	e0bffd17 	ldw	r2,-12(fp)
 80176d8:	18800426 	beq	r3,r2,80176ec <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80176dc:	e0fff517 	ldw	r3,-44(fp)
 80176e0:	e0bffd17 	ldw	r2,-12(fp)
 80176e4:	1885c83a 	sub	r2,r3,r2
 80176e8:	00000606 	br	8017704 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80176ec:	e0bfff17 	ldw	r2,-4(fp)
 80176f0:	1090000c 	andi	r2,r2,16384
 80176f4:	10000226 	beq	r2,zero,8017700 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80176f8:	00bffd44 	movi	r2,-11
 80176fc:	00000106 	br	8017704 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8017700:	00bffec4 	movi	r2,-5
}
 8017704:	e037883a 	mov	sp,fp
 8017708:	dfc00117 	ldw	ra,4(sp)
 801770c:	df000017 	ldw	fp,0(sp)
 8017710:	dec00204 	addi	sp,sp,8
 8017714:	f800283a 	ret

08017718 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8017718:	defff304 	addi	sp,sp,-52
 801771c:	dfc00c15 	stw	ra,48(sp)
 8017720:	df000b15 	stw	fp,44(sp)
 8017724:	df000b04 	addi	fp,sp,44
 8017728:	e13ffc15 	stw	r4,-16(fp)
 801772c:	e17ffd15 	stw	r5,-12(fp)
 8017730:	e1bffe15 	stw	r6,-8(fp)
 8017734:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8017738:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801773c:	e0bffd17 	ldw	r2,-12(fp)
 8017740:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017744:	00003706 	br	8017824 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8017748:	e0bffc17 	ldw	r2,-16(fp)
 801774c:	10800c17 	ldw	r2,48(r2)
 8017750:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8017754:	e0bffc17 	ldw	r2,-16(fp)
 8017758:	10800d17 	ldw	r2,52(r2)
 801775c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8017760:	e0fff917 	ldw	r3,-28(fp)
 8017764:	e0bff517 	ldw	r2,-44(fp)
 8017768:	1880062e 	bgeu	r3,r2,8017784 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801776c:	e0fff517 	ldw	r3,-44(fp)
 8017770:	e0bff917 	ldw	r2,-28(fp)
 8017774:	1885c83a 	sub	r2,r3,r2
 8017778:	10bfffc4 	addi	r2,r2,-1
 801777c:	e0bff615 	stw	r2,-40(fp)
 8017780:	00000b06 	br	80177b0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8017784:	e0bff517 	ldw	r2,-44(fp)
 8017788:	10000526 	beq	r2,zero,80177a0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801778c:	00c20004 	movi	r3,2048
 8017790:	e0bff917 	ldw	r2,-28(fp)
 8017794:	1885c83a 	sub	r2,r3,r2
 8017798:	e0bff615 	stw	r2,-40(fp)
 801779c:	00000406 	br	80177b0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80177a0:	00c1ffc4 	movi	r3,2047
 80177a4:	e0bff917 	ldw	r2,-28(fp)
 80177a8:	1885c83a 	sub	r2,r3,r2
 80177ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80177b0:	e0bff617 	ldw	r2,-40(fp)
 80177b4:	10001e26 	beq	r2,zero,8017830 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80177b8:	e0fffe17 	ldw	r3,-8(fp)
 80177bc:	e0bff617 	ldw	r2,-40(fp)
 80177c0:	1880022e 	bgeu	r3,r2,80177cc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80177c4:	e0bffe17 	ldw	r2,-8(fp)
 80177c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80177cc:	e0bffc17 	ldw	r2,-16(fp)
 80177d0:	10c20e04 	addi	r3,r2,2104
 80177d4:	e0bff917 	ldw	r2,-28(fp)
 80177d8:	1885883a 	add	r2,r3,r2
 80177dc:	e1bff617 	ldw	r6,-40(fp)
 80177e0:	e17ffd17 	ldw	r5,-12(fp)
 80177e4:	1009883a 	mov	r4,r2
 80177e8:	800971c0 	call	800971c <memcpy>
      ptr   += n;
 80177ec:	e0fffd17 	ldw	r3,-12(fp)
 80177f0:	e0bff617 	ldw	r2,-40(fp)
 80177f4:	1885883a 	add	r2,r3,r2
 80177f8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80177fc:	e0fffe17 	ldw	r3,-8(fp)
 8017800:	e0bff617 	ldw	r2,-40(fp)
 8017804:	1885c83a 	sub	r2,r3,r2
 8017808:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801780c:	e0fff917 	ldw	r3,-28(fp)
 8017810:	e0bff617 	ldw	r2,-40(fp)
 8017814:	1885883a 	add	r2,r3,r2
 8017818:	10c1ffcc 	andi	r3,r2,2047
 801781c:	e0bffc17 	ldw	r2,-16(fp)
 8017820:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017824:	e0bffe17 	ldw	r2,-8(fp)
 8017828:	00bfc716 	blt	zero,r2,8017748 <altera_avalon_jtag_uart_write+0x30>
 801782c:	00000106 	br	8017834 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8017830:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017834:	0005303a 	rdctl	r2,status
 8017838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801783c:	e0fffb17 	ldw	r3,-20(fp)
 8017840:	00bfff84 	movi	r2,-2
 8017844:	1884703a 	and	r2,r3,r2
 8017848:	1001703a 	wrctl	status,r2
  
  return context;
 801784c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8017850:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8017854:	e0bffc17 	ldw	r2,-16(fp)
 8017858:	10800817 	ldw	r2,32(r2)
 801785c:	10c00094 	ori	r3,r2,2
 8017860:	e0bffc17 	ldw	r2,-16(fp)
 8017864:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017868:	e0bffc17 	ldw	r2,-16(fp)
 801786c:	10800017 	ldw	r2,0(r2)
 8017870:	10800104 	addi	r2,r2,4
 8017874:	1007883a 	mov	r3,r2
 8017878:	e0bffc17 	ldw	r2,-16(fp)
 801787c:	10800817 	ldw	r2,32(r2)
 8017880:	18800035 	stwio	r2,0(r3)
 8017884:	e0bffa17 	ldw	r2,-24(fp)
 8017888:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801788c:	e0bff817 	ldw	r2,-32(fp)
 8017890:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8017894:	e0bffe17 	ldw	r2,-8(fp)
 8017898:	0080100e 	bge	zero,r2,80178dc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 801789c:	e0bfff17 	ldw	r2,-4(fp)
 80178a0:	1090000c 	andi	r2,r2,16384
 80178a4:	1000101e 	bne	r2,zero,80178e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80178a8:	0001883a 	nop
 80178ac:	e0bffc17 	ldw	r2,-16(fp)
 80178b0:	10c00d17 	ldw	r3,52(r2)
 80178b4:	e0bff517 	ldw	r2,-44(fp)
 80178b8:	1880051e 	bne	r3,r2,80178d0 <altera_avalon_jtag_uart_write+0x1b8>
 80178bc:	e0bffc17 	ldw	r2,-16(fp)
 80178c0:	10c00917 	ldw	r3,36(r2)
 80178c4:	e0bffc17 	ldw	r2,-16(fp)
 80178c8:	10800117 	ldw	r2,4(r2)
 80178cc:	18bff736 	bltu	r3,r2,80178ac <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80178d0:	e0bffc17 	ldw	r2,-16(fp)
 80178d4:	10800917 	ldw	r2,36(r2)
 80178d8:	1000051e 	bne	r2,zero,80178f0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80178dc:	e0bffe17 	ldw	r2,-8(fp)
 80178e0:	00bfd016 	blt	zero,r2,8017824 <altera_avalon_jtag_uart_write+0x10c>
 80178e4:	00000306 	br	80178f4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80178e8:	0001883a 	nop
 80178ec:	00000106 	br	80178f4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80178f0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80178f4:	e0fffd17 	ldw	r3,-12(fp)
 80178f8:	e0bff717 	ldw	r2,-36(fp)
 80178fc:	18800426 	beq	r3,r2,8017910 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8017900:	e0fffd17 	ldw	r3,-12(fp)
 8017904:	e0bff717 	ldw	r2,-36(fp)
 8017908:	1885c83a 	sub	r2,r3,r2
 801790c:	00000606 	br	8017928 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8017910:	e0bfff17 	ldw	r2,-4(fp)
 8017914:	1090000c 	andi	r2,r2,16384
 8017918:	10000226 	beq	r2,zero,8017924 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 801791c:	00bffd44 	movi	r2,-11
 8017920:	00000106 	br	8017928 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8017924:	00bffec4 	movi	r2,-5
}
 8017928:	e037883a 	mov	sp,fp
 801792c:	dfc00117 	ldw	ra,4(sp)
 8017930:	df000017 	ldw	fp,0(sp)
 8017934:	dec00204 	addi	sp,sp,8
 8017938:	f800283a 	ret

0801793c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801793c:	defffe04 	addi	sp,sp,-8
 8017940:	dfc00115 	stw	ra,4(sp)
 8017944:	df000015 	stw	fp,0(sp)
 8017948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801794c:	d0a00f17 	ldw	r2,-32708(gp)
 8017950:	10000326 	beq	r2,zero,8017960 <alt_get_errno+0x24>
 8017954:	d0a00f17 	ldw	r2,-32708(gp)
 8017958:	103ee83a 	callr	r2
 801795c:	00000106 	br	8017964 <alt_get_errno+0x28>
 8017960:	d0a8b004 	addi	r2,gp,-23872
}
 8017964:	e037883a 	mov	sp,fp
 8017968:	dfc00117 	ldw	ra,4(sp)
 801796c:	df000017 	ldw	fp,0(sp)
 8017970:	dec00204 	addi	sp,sp,8
 8017974:	f800283a 	ret

08017978 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 8017978:	defffc04 	addi	sp,sp,-16
 801797c:	df000315 	stw	fp,12(sp)
 8017980:	df000304 	addi	fp,sp,12
 8017984:	e13ffe15 	stw	r4,-8(fp)
 8017988:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 801798c:	e0bffe17 	ldw	r2,-8(fp)
 8017990:	10800317 	ldw	r2,12(r2)
 8017994:	10800037 	ldwio	r2,0(r2)
 8017998:	1080040c 	andi	r2,r2,16
 801799c:	10000226 	beq	r2,zero,80179a8 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 80179a0:	00bffc04 	movi	r2,-16
 80179a4:	00003906 	br	8017a8c <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 80179a8:	e0bffe17 	ldw	r2,-8(fp)
 80179ac:	10800317 	ldw	r2,12(r2)
 80179b0:	10800404 	addi	r2,r2,16
 80179b4:	e0fffe17 	ldw	r3,-8(fp)
 80179b8:	18c00317 	ldw	r3,12(r3)
 80179bc:	18c00404 	addi	r3,r3,16
 80179c0:	19000037 	ldwio	r4,0(r3)
 80179c4:	00fff7c4 	movi	r3,-33
 80179c8:	20c6703a 	and	r3,r4,r3
 80179cc:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 80179d0:	e0bffe17 	ldw	r2,-8(fp)
 80179d4:	10800317 	ldw	r2,12(r2)
 80179d8:	00c03fc4 	movi	r3,255
 80179dc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 80179e0:	e0bffe17 	ldw	r2,-8(fp)
 80179e4:	10800317 	ldw	r2,12(r2)
 80179e8:	10800804 	addi	r2,r2,32
 80179ec:	e0ffff17 	ldw	r3,-4(fp)
 80179f0:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 80179f4:	e0bffe17 	ldw	r2,-8(fp)
 80179f8:	10800917 	ldw	r2,36(r2)
 80179fc:	10001126 	beq	r2,zero,8017a44 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8017a00:	e0bffe17 	ldw	r2,-8(fp)
 8017a04:	10800317 	ldw	r2,12(r2)
 8017a08:	10800404 	addi	r2,r2,16
 8017a0c:	10800037 	ldwio	r2,0(r2)
 8017a10:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 8017a14:	e0bffe17 	ldw	r2,-8(fp)
 8017a18:	10c00b17 	ldw	r3,44(r2)
 8017a1c:	e0bffd17 	ldw	r2,-12(fp)
 8017a20:	1884b03a 	or	r2,r3,r2
 8017a24:	10801814 	ori	r2,r2,96
 8017a28:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8017a2c:	e0bffe17 	ldw	r2,-8(fp)
 8017a30:	10800317 	ldw	r2,12(r2)
 8017a34:	10800404 	addi	r2,r2,16
 8017a38:	e0fffd17 	ldw	r3,-12(fp)
 8017a3c:	10c00035 	stwio	r3,0(r2)
 8017a40:	00001106 	br	8017a88 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8017a44:	e0bffe17 	ldw	r2,-8(fp)
 8017a48:	10800317 	ldw	r2,12(r2)
 8017a4c:	10800404 	addi	r2,r2,16
 8017a50:	10800037 	ldwio	r2,0(r2)
 8017a54:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 8017a58:	e0bffd17 	ldw	r2,-12(fp)
 8017a5c:	10801814 	ori	r2,r2,96
 8017a60:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 8017a64:	e0fffd17 	ldw	r3,-12(fp)
 8017a68:	00bffbc4 	movi	r2,-17
 8017a6c:	1884703a 	and	r2,r3,r2
 8017a70:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8017a74:	e0bffe17 	ldw	r2,-8(fp)
 8017a78:	10800317 	ldw	r2,12(r2)
 8017a7c:	10800404 	addi	r2,r2,16
 8017a80:	e0fffd17 	ldw	r3,-12(fp)
 8017a84:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 8017a88:	0005883a 	mov	r2,zero
}
 8017a8c:	e037883a 	mov	sp,fp
 8017a90:	df000017 	ldw	fp,0(sp)
 8017a94:	dec00104 	addi	sp,sp,4
 8017a98:	f800283a 	ret

08017a9c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 8017a9c:	defffc04 	addi	sp,sp,-16
 8017aa0:	df000315 	stw	fp,12(sp)
 8017aa4:	df000304 	addi	fp,sp,12
 8017aa8:	e13ffe15 	stw	r4,-8(fp)
 8017aac:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8017ab0:	0001883a 	nop
 8017ab4:	e0bffe17 	ldw	r2,-8(fp)
 8017ab8:	10800317 	ldw	r2,12(r2)
 8017abc:	10800037 	ldwio	r2,0(r2)
 8017ac0:	1080040c 	andi	r2,r2,16
 8017ac4:	103ffb1e 	bne	r2,zero,8017ab4 <alt_avalon_sgdma_do_sync_transfer+0x18>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8017ac8:	e0bffe17 	ldw	r2,-8(fp)
 8017acc:	10800317 	ldw	r2,12(r2)
 8017ad0:	10800404 	addi	r2,r2,16
 8017ad4:	e0fffe17 	ldw	r3,-8(fp)
 8017ad8:	18c00317 	ldw	r3,12(r3)
 8017adc:	18c00404 	addi	r3,r3,16
 8017ae0:	19000037 	ldwio	r4,0(r3)
 8017ae4:	00fff7c4 	movi	r3,-33
 8017ae8:	20c6703a 	and	r3,r4,r3
 8017aec:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8017af0:	e0bffe17 	ldw	r2,-8(fp)
 8017af4:	10800317 	ldw	r2,12(r2)
 8017af8:	00c03fc4 	movi	r3,255
 8017afc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 8017b00:	e0bffe17 	ldw	r2,-8(fp)
 8017b04:	10800317 	ldw	r2,12(r2)
 8017b08:	10800804 	addi	r2,r2,32
 8017b0c:	e0ffff17 	ldw	r3,-4(fp)
 8017b10:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8017b14:	e0bffe17 	ldw	r2,-8(fp)
 8017b18:	10800317 	ldw	r2,12(r2)
 8017b1c:	10800404 	addi	r2,r2,16
 8017b20:	e0fffe17 	ldw	r3,-8(fp)
 8017b24:	18c00317 	ldw	r3,12(r3)
 8017b28:	18c00404 	addi	r3,r3,16
 8017b2c:	18c00037 	ldwio	r3,0(r3)
 8017b30:	18c01814 	ori	r3,r3,96
 8017b34:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8017b38:	0001883a 	nop
 8017b3c:	e0bffe17 	ldw	r2,-8(fp)
 8017b40:	10800317 	ldw	r2,12(r2)
 8017b44:	10800037 	ldwio	r2,0(r2)
 8017b48:	1080040c 	andi	r2,r2,16
 8017b4c:	103ffb1e 	bne	r2,zero,8017b3c <alt_avalon_sgdma_do_sync_transfer+0xa0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 8017b50:	e0bffe17 	ldw	r2,-8(fp)
 8017b54:	10800317 	ldw	r2,12(r2)
 8017b58:	10800404 	addi	r2,r2,16
 8017b5c:	e0fffe17 	ldw	r3,-8(fp)
 8017b60:	18c00317 	ldw	r3,12(r3)
 8017b64:	18c00404 	addi	r3,r3,16
 8017b68:	19000037 	ldwio	r4,0(r3)
 8017b6c:	00fff7c4 	movi	r3,-33
 8017b70:	20c6703a 	and	r3,r4,r3
 8017b74:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 8017b78:	e0bffe17 	ldw	r2,-8(fp)
 8017b7c:	10800317 	ldw	r2,12(r2)
 8017b80:	10800037 	ldwio	r2,0(r2)
 8017b84:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8017b88:	e0bffe17 	ldw	r2,-8(fp)
 8017b8c:	10800317 	ldw	r2,12(r2)
 8017b90:	00c03fc4 	movi	r3,255
 8017b94:	10c00035 	stwio	r3,0(r2)

  return status;
 8017b98:	e0bffd03 	ldbu	r2,-12(fp)
}
 8017b9c:	e037883a 	mov	sp,fp
 8017ba0:	df000017 	ldw	fp,0(sp)
 8017ba4:	dec00104 	addi	sp,sp,4
 8017ba8:	f800283a 	ret

08017bac <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 8017bac:	defff404 	addi	sp,sp,-48
 8017bb0:	dfc00b15 	stw	ra,44(sp)
 8017bb4:	df000a15 	stw	fp,40(sp)
 8017bb8:	df000a04 	addi	fp,sp,40
 8017bbc:	e13ffb15 	stw	r4,-20(fp)
 8017bc0:	e17ffc15 	stw	r5,-16(fp)
 8017bc4:	e1bffd15 	stw	r6,-12(fp)
 8017bc8:	e1fffe15 	stw	r7,-8(fp)
 8017bcc:	e0800217 	ldw	r2,8(fp)
 8017bd0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 8017bd4:	e0bfff0b 	ldhu	r2,-4(fp)
 8017bd8:	d8000415 	stw	zero,16(sp)
 8017bdc:	d8000315 	stw	zero,12(sp)
 8017be0:	e0c00417 	ldw	r3,16(fp)
 8017be4:	d8c00215 	stw	r3,8(sp)
 8017be8:	e0c00317 	ldw	r3,12(fp)
 8017bec:	d8c00115 	stw	r3,4(sp)
 8017bf0:	d8800015 	stw	r2,0(sp)
 8017bf4:	e1fffe17 	ldw	r7,-8(fp)
 8017bf8:	e1bffd17 	ldw	r6,-12(fp)
 8017bfc:	e17ffc17 	ldw	r5,-16(fp)
 8017c00:	e13ffb17 	ldw	r4,-20(fp)
 8017c04:	8017c200 	call	8017c20 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 8017c08:	0001883a 	nop
 8017c0c:	e037883a 	mov	sp,fp
 8017c10:	dfc00117 	ldw	ra,4(sp)
 8017c14:	df000017 	ldw	fp,0(sp)
 8017c18:	dec00204 	addi	sp,sp,8
 8017c1c:	f800283a 	ret

08017c20 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 8017c20:	defff204 	addi	sp,sp,-56
 8017c24:	dfc00d15 	stw	ra,52(sp)
 8017c28:	df000c15 	stw	fp,48(sp)
 8017c2c:	df000c04 	addi	fp,sp,48
 8017c30:	e13ffb15 	stw	r4,-20(fp)
 8017c34:	e17ffc15 	stw	r5,-16(fp)
 8017c38:	e1bffd15 	stw	r6,-12(fp)
 8017c3c:	e1fffe15 	stw	r7,-8(fp)
 8017c40:	e0800217 	ldw	r2,8(fp)
 8017c44:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8017c48:	e0bfff0b 	ldhu	r2,-4(fp)
 8017c4c:	d8000615 	stw	zero,24(sp)
 8017c50:	e0c00617 	ldw	r3,24(fp)
 8017c54:	d8c00515 	stw	r3,20(sp)
 8017c58:	e0c00517 	ldw	r3,20(fp)
 8017c5c:	d8c00415 	stw	r3,16(sp)
 8017c60:	e0c00417 	ldw	r3,16(fp)
 8017c64:	d8c00315 	stw	r3,12(sp)
 8017c68:	e0c00317 	ldw	r3,12(fp)
 8017c6c:	d8c00215 	stw	r3,8(sp)
 8017c70:	d8000115 	stw	zero,4(sp)
 8017c74:	d8800015 	stw	r2,0(sp)
 8017c78:	e1fffe17 	ldw	r7,-8(fp)
 8017c7c:	e1bffd17 	ldw	r6,-12(fp)
 8017c80:	e17ffc17 	ldw	r5,-16(fp)
 8017c84:	e13ffb17 	ldw	r4,-20(fp)
 8017c88:	80181b40 	call	80181b4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 8017c8c:	0001883a 	nop
 8017c90:	e037883a 	mov	sp,fp
 8017c94:	dfc00117 	ldw	ra,4(sp)
 8017c98:	df000017 	ldw	fp,0(sp)
 8017c9c:	dec00204 	addi	sp,sp,8
 8017ca0:	f800283a 	ret

08017ca4 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 8017ca4:	defff804 	addi	sp,sp,-32
 8017ca8:	dfc00715 	stw	ra,28(sp)
 8017cac:	df000615 	stw	fp,24(sp)
 8017cb0:	df000604 	addi	fp,sp,24
 8017cb4:	e13ffc15 	stw	r4,-16(fp)
 8017cb8:	e17ffd15 	stw	r5,-12(fp)
 8017cbc:	e1bffe15 	stw	r6,-8(fp)
 8017cc0:	3805883a 	mov	r2,r7
 8017cc4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 8017cc8:	e0ffff0b 	ldhu	r3,-4(fp)
 8017ccc:	d8000115 	stw	zero,4(sp)
 8017cd0:	e0800217 	ldw	r2,8(fp)
 8017cd4:	d8800015 	stw	r2,0(sp)
 8017cd8:	180f883a 	mov	r7,r3
 8017cdc:	e1bffe17 	ldw	r6,-8(fp)
 8017ce0:	e17ffd17 	ldw	r5,-12(fp)
 8017ce4:	e13ffc17 	ldw	r4,-16(fp)
 8017ce8:	8017d040 	call	8017d04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 8017cec:	0001883a 	nop
 8017cf0:	e037883a 	mov	sp,fp
 8017cf4:	dfc00117 	ldw	ra,4(sp)
 8017cf8:	df000017 	ldw	fp,0(sp)
 8017cfc:	dec00204 	addi	sp,sp,8
 8017d00:	f800283a 	ret

08017d04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 8017d04:	defff304 	addi	sp,sp,-52
 8017d08:	dfc00c15 	stw	ra,48(sp)
 8017d0c:	df000b15 	stw	fp,44(sp)
 8017d10:	df000b04 	addi	fp,sp,44
 8017d14:	e13ffc15 	stw	r4,-16(fp)
 8017d18:	e17ffd15 	stw	r5,-12(fp)
 8017d1c:	e1bffe15 	stw	r6,-8(fp)
 8017d20:	3805883a 	mov	r2,r7
 8017d24:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8017d28:	e0bfff0b 	ldhu	r2,-4(fp)
 8017d2c:	d8000615 	stw	zero,24(sp)
 8017d30:	e0c00317 	ldw	r3,12(fp)
 8017d34:	d8c00515 	stw	r3,20(sp)
 8017d38:	d8000415 	stw	zero,16(sp)
 8017d3c:	e0c00217 	ldw	r3,8(fp)
 8017d40:	d8c00315 	stw	r3,12(sp)
 8017d44:	d8000215 	stw	zero,8(sp)
 8017d48:	d8000115 	stw	zero,4(sp)
 8017d4c:	d8800015 	stw	r2,0(sp)
 8017d50:	e1fffe17 	ldw	r7,-8(fp)
 8017d54:	000d883a 	mov	r6,zero
 8017d58:	e17ffd17 	ldw	r5,-12(fp)
 8017d5c:	e13ffc17 	ldw	r4,-16(fp)
 8017d60:	80181b40 	call	80181b4 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 8017d64:	0001883a 	nop
 8017d68:	e037883a 	mov	sp,fp
 8017d6c:	dfc00117 	ldw	ra,4(sp)
 8017d70:	df000017 	ldw	fp,0(sp)
 8017d74:	dec00204 	addi	sp,sp,8
 8017d78:	f800283a 	ret

08017d7c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 8017d7c:	defff404 	addi	sp,sp,-48
 8017d80:	dfc00b15 	stw	ra,44(sp)
 8017d84:	df000a15 	stw	fp,40(sp)
 8017d88:	df000a04 	addi	fp,sp,40
 8017d8c:	e13ffb15 	stw	r4,-20(fp)
 8017d90:	e17ffc15 	stw	r5,-16(fp)
 8017d94:	e1bffd15 	stw	r6,-12(fp)
 8017d98:	3807883a 	mov	r3,r7
 8017d9c:	e0800517 	ldw	r2,20(fp)
 8017da0:	e0fffe0d 	sth	r3,-8(fp)
 8017da4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 8017da8:	e0fffe0b 	ldhu	r3,-8(fp)
 8017dac:	e0bfff03 	ldbu	r2,-4(fp)
 8017db0:	d8800415 	stw	r2,16(sp)
 8017db4:	d8000315 	stw	zero,12(sp)
 8017db8:	e0800417 	ldw	r2,16(fp)
 8017dbc:	d8800215 	stw	r2,8(sp)
 8017dc0:	e0800317 	ldw	r2,12(fp)
 8017dc4:	d8800115 	stw	r2,4(sp)
 8017dc8:	e0800217 	ldw	r2,8(fp)
 8017dcc:	d8800015 	stw	r2,0(sp)
 8017dd0:	180f883a 	mov	r7,r3
 8017dd4:	e1bffd17 	ldw	r6,-12(fp)
 8017dd8:	e17ffc17 	ldw	r5,-16(fp)
 8017ddc:	e13ffb17 	ldw	r4,-20(fp)
 8017de0:	8017dfc0 	call	8017dfc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 8017de4:	0001883a 	nop
 8017de8:	e037883a 	mov	sp,fp
 8017dec:	dfc00117 	ldw	ra,4(sp)
 8017df0:	df000017 	ldw	fp,0(sp)
 8017df4:	dec00204 	addi	sp,sp,8
 8017df8:	f800283a 	ret

08017dfc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 8017dfc:	defff204 	addi	sp,sp,-56
 8017e00:	dfc00d15 	stw	ra,52(sp)
 8017e04:	df000c15 	stw	fp,48(sp)
 8017e08:	df000c04 	addi	fp,sp,48
 8017e0c:	e13ffb15 	stw	r4,-20(fp)
 8017e10:	e17ffc15 	stw	r5,-16(fp)
 8017e14:	e1bffd15 	stw	r6,-12(fp)
 8017e18:	3807883a 	mov	r3,r7
 8017e1c:	e0800617 	ldw	r2,24(fp)
 8017e20:	e0fffe0d 	sth	r3,-8(fp)
 8017e24:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8017e28:	e0bffe0b 	ldhu	r2,-8(fp)
 8017e2c:	e0ffff03 	ldbu	r3,-4(fp)
 8017e30:	d8c00615 	stw	r3,24(sp)
 8017e34:	d8000515 	stw	zero,20(sp)
 8017e38:	e0c00517 	ldw	r3,20(fp)
 8017e3c:	d8c00415 	stw	r3,16(sp)
 8017e40:	e0c00317 	ldw	r3,12(fp)
 8017e44:	d8c00315 	stw	r3,12(sp)
 8017e48:	e0c00217 	ldw	r3,8(fp)
 8017e4c:	d8c00215 	stw	r3,8(sp)
 8017e50:	e0c00417 	ldw	r3,16(fp)
 8017e54:	d8c00115 	stw	r3,4(sp)
 8017e58:	d8800015 	stw	r2,0(sp)
 8017e5c:	000f883a 	mov	r7,zero
 8017e60:	e1bffd17 	ldw	r6,-12(fp)
 8017e64:	e17ffc17 	ldw	r5,-16(fp)
 8017e68:	e13ffb17 	ldw	r4,-20(fp)
 8017e6c:	80181b40 	call	80181b4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 8017e70:	0001883a 	nop
 8017e74:	e037883a 	mov	sp,fp
 8017e78:	dfc00117 	ldw	ra,4(sp)
 8017e7c:	df000017 	ldw	fp,0(sp)
 8017e80:	dec00204 	addi	sp,sp,8
 8017e84:	f800283a 	ret

08017e88 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 8017e88:	defffb04 	addi	sp,sp,-20
 8017e8c:	df000415 	stw	fp,16(sp)
 8017e90:	df000404 	addi	fp,sp,16
 8017e94:	e13ffc15 	stw	r4,-16(fp)
 8017e98:	e17ffd15 	stw	r5,-12(fp)
 8017e9c:	e1bffe15 	stw	r6,-8(fp)
 8017ea0:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 8017ea4:	e0bffc17 	ldw	r2,-16(fp)
 8017ea8:	e0fffd17 	ldw	r3,-12(fp)
 8017eac:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 8017eb0:	e0bffc17 	ldw	r2,-16(fp)
 8017eb4:	e0ffff17 	ldw	r3,-4(fp)
 8017eb8:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 8017ebc:	e0bffc17 	ldw	r2,-16(fp)
 8017ec0:	e0fffe17 	ldw	r3,-8(fp)
 8017ec4:	10c00b15 	stw	r3,44(r2)
}
 8017ec8:	0001883a 	nop
 8017ecc:	e037883a 	mov	sp,fp
 8017ed0:	df000017 	ldw	fp,0(sp)
 8017ed4:	dec00104 	addi	sp,sp,4
 8017ed8:	f800283a 	ret

08017edc <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 8017edc:	defffd04 	addi	sp,sp,-12
 8017ee0:	df000215 	stw	fp,8(sp)
 8017ee4:	df000204 	addi	fp,sp,8
 8017ee8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8017eec:	e0bfff17 	ldw	r2,-4(fp)
 8017ef0:	10800317 	ldw	r2,12(r2)
 8017ef4:	10800404 	addi	r2,r2,16
 8017ef8:	10800037 	ldwio	r2,0(r2)
 8017efc:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 8017f00:	e0bffe17 	ldw	r2,-8(fp)
 8017f04:	10800814 	ori	r2,r2,32
 8017f08:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8017f0c:	e0bfff17 	ldw	r2,-4(fp)
 8017f10:	10800317 	ldw	r2,12(r2)
 8017f14:	10800404 	addi	r2,r2,16
 8017f18:	e0fffe17 	ldw	r3,-8(fp)
 8017f1c:	10c00035 	stwio	r3,0(r2)
}
 8017f20:	0001883a 	nop
 8017f24:	e037883a 	mov	sp,fp
 8017f28:	df000017 	ldw	fp,0(sp)
 8017f2c:	dec00104 	addi	sp,sp,4
 8017f30:	f800283a 	ret

08017f34 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 8017f34:	defffd04 	addi	sp,sp,-12
 8017f38:	df000215 	stw	fp,8(sp)
 8017f3c:	df000204 	addi	fp,sp,8
 8017f40:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8017f44:	e0bfff17 	ldw	r2,-4(fp)
 8017f48:	10800317 	ldw	r2,12(r2)
 8017f4c:	10800404 	addi	r2,r2,16
 8017f50:	10800037 	ldwio	r2,0(r2)
 8017f54:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 8017f58:	e0fffe17 	ldw	r3,-8(fp)
 8017f5c:	00bff7c4 	movi	r2,-33
 8017f60:	1884703a 	and	r2,r3,r2
 8017f64:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8017f68:	e0bfff17 	ldw	r2,-4(fp)
 8017f6c:	10800317 	ldw	r2,12(r2)
 8017f70:	10800404 	addi	r2,r2,16
 8017f74:	e0fffe17 	ldw	r3,-8(fp)
 8017f78:	10c00035 	stwio	r3,0(r2)
}
 8017f7c:	0001883a 	nop
 8017f80:	e037883a 	mov	sp,fp
 8017f84:	df000017 	ldw	fp,0(sp)
 8017f88:	dec00104 	addi	sp,sp,4
 8017f8c:	f800283a 	ret

08017f90 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 8017f90:	defffe04 	addi	sp,sp,-8
 8017f94:	df000115 	stw	fp,4(sp)
 8017f98:	df000104 	addi	fp,sp,4
 8017f9c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 8017fa0:	e0bfff17 	ldw	r2,-4(fp)
 8017fa4:	10800784 	addi	r2,r2,30
 8017fa8:	10800023 	ldbuio	r2,0(r2)
 8017fac:	10803fcc 	andi	r2,r2,255
 8017fb0:	10801fcc 	andi	r2,r2,127
 8017fb4:	10000226 	beq	r2,zero,8017fc0 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 8017fb8:	00bffec4 	movi	r2,-5
 8017fbc:	00000906 	br	8017fe4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 8017fc0:	e0bfff17 	ldw	r2,-4(fp)
 8017fc4:	108007c4 	addi	r2,r2,31
 8017fc8:	10800023 	ldbuio	r2,0(r2)
 8017fcc:	10803fcc 	andi	r2,r2,255
 8017fd0:	1080200c 	andi	r2,r2,128
 8017fd4:	10000226 	beq	r2,zero,8017fe0 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 8017fd8:	00bfe244 	movi	r2,-119
 8017fdc:	00000106 	br	8017fe4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 8017fe0:	0005883a 	mov	r2,zero
}
 8017fe4:	e037883a 	mov	sp,fp
 8017fe8:	df000017 	ldw	fp,0(sp)
 8017fec:	dec00104 	addi	sp,sp,4
 8017ff0:	f800283a 	ret

08017ff4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 8017ff4:	defffc04 	addi	sp,sp,-16
 8017ff8:	dfc00315 	stw	ra,12(sp)
 8017ffc:	df000215 	stw	fp,8(sp)
 8018000:	df000204 	addi	fp,sp,8
 8018004:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 8018008:	d1601204 	addi	r5,gp,-32696
 801800c:	e13fff17 	ldw	r4,-4(fp)
 8018010:	80193b00 	call	80193b0 <alt_find_dev>
 8018014:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 8018018:	e0bffe17 	ldw	r2,-8(fp)
 801801c:	1000041e 	bne	r2,zero,8018030 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 8018020:	801793c0 	call	801793c <alt_get_errno>
 8018024:	1007883a 	mov	r3,r2
 8018028:	008004c4 	movi	r2,19
 801802c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8018030:	e0bffe17 	ldw	r2,-8(fp)
}
 8018034:	e037883a 	mov	sp,fp
 8018038:	dfc00117 	ldw	ra,4(sp)
 801803c:	df000017 	ldw	fp,0(sp)
 8018040:	dec00204 	addi	sp,sp,8
 8018044:	f800283a 	ret

08018048 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 8018048:	defff104 	addi	sp,sp,-60
 801804c:	dfc00e15 	stw	ra,56(sp)
 8018050:	df000d15 	stw	fp,52(sp)
 8018054:	df000d04 	addi	fp,sp,52
 8018058:	e13ffa15 	stw	r4,-24(fp)
 801805c:	e17ffb15 	stw	r5,-20(fp)
 8018060:	e1bffc15 	stw	r6,-16(fp)
 8018064:	e1fffd15 	stw	r7,-12(fp)
 8018068:	e0c00217 	ldw	r3,8(fp)
 801806c:	e0800617 	ldw	r2,24(fp)
 8018070:	e0fffe0d 	sth	r3,-8(fp)
 8018074:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 8018078:	e0bffe0b 	ldhu	r2,-8(fp)
 801807c:	e0ffff03 	ldbu	r3,-4(fp)
 8018080:	d8c00615 	stw	r3,24(sp)
 8018084:	d8000515 	stw	zero,20(sp)
 8018088:	d8000415 	stw	zero,16(sp)
 801808c:	e0c00517 	ldw	r3,20(fp)
 8018090:	d8c00315 	stw	r3,12(sp)
 8018094:	e0c00417 	ldw	r3,16(fp)
 8018098:	d8c00215 	stw	r3,8(sp)
 801809c:	e0c00317 	ldw	r3,12(fp)
 80180a0:	d8c00115 	stw	r3,4(sp)
 80180a4:	d8800015 	stw	r2,0(sp)
 80180a8:	e1fffd17 	ldw	r7,-12(fp)
 80180ac:	e1bffc17 	ldw	r6,-16(fp)
 80180b0:	e17ffb17 	ldw	r5,-20(fp)
 80180b4:	e13ffa17 	ldw	r4,-24(fp)
 80180b8:	80181b40 	call	80181b4 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 80180bc:	0001883a 	nop
 80180c0:	e037883a 	mov	sp,fp
 80180c4:	dfc00117 	ldw	ra,4(sp)
 80180c8:	df000017 	ldw	fp,0(sp)
 80180cc:	dec00204 	addi	sp,sp,8
 80180d0:	f800283a 	ret

080180d4 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 80180d4:	defffc04 	addi	sp,sp,-16
 80180d8:	df000315 	stw	fp,12(sp)
 80180dc:	df000304 	addi	fp,sp,12
 80180e0:	e13ffe15 	stw	r4,-8(fp)
 80180e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 80180e8:	e0bffe17 	ldw	r2,-8(fp)
 80180ec:	10800317 	ldw	r2,12(r2)
 80180f0:	10800404 	addi	r2,r2,16
 80180f4:	10800037 	ldwio	r2,0(r2)
 80180f8:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 80180fc:	e0fffd17 	ldw	r3,-12(fp)
 8018100:	00a00434 	movhi	r2,32784
 8018104:	10bfffc4 	addi	r2,r2,-1
 8018108:	1884703a 	and	r2,r3,r2
 801810c:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 8018110:	e0bfff17 	ldw	r2,-4(fp)
 8018114:	1004953a 	slli	r2,r2,20
 8018118:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 801811c:	e0bffd17 	ldw	r2,-12(fp)
 8018120:	1884b03a 	or	r2,r3,r2
 8018124:	10800134 	orhi	r2,r2,4
 8018128:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801812c:	e0bffe17 	ldw	r2,-8(fp)
 8018130:	10800317 	ldw	r2,12(r2)
 8018134:	10800404 	addi	r2,r2,16
 8018138:	e0fffd17 	ldw	r3,-12(fp)
 801813c:	10c00035 	stwio	r3,0(r2)
  
  return;
 8018140:	0001883a 	nop
}
 8018144:	e037883a 	mov	sp,fp
 8018148:	df000017 	ldw	fp,0(sp)
 801814c:	dec00104 	addi	sp,sp,4
 8018150:	f800283a 	ret

08018154 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 8018154:	defffd04 	addi	sp,sp,-12
 8018158:	df000215 	stw	fp,8(sp)
 801815c:	df000204 	addi	fp,sp,8
 8018160:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8018164:	e0bfff17 	ldw	r2,-4(fp)
 8018168:	10800317 	ldw	r2,12(r2)
 801816c:	10800404 	addi	r2,r2,16
 8018170:	10800037 	ldwio	r2,0(r2)
 8018174:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 8018178:	e0fffe17 	ldw	r3,-8(fp)
 801817c:	00bfff34 	movhi	r2,65532
 8018180:	10bfffc4 	addi	r2,r2,-1
 8018184:	1884703a 	and	r2,r3,r2
 8018188:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801818c:	e0bfff17 	ldw	r2,-4(fp)
 8018190:	10800317 	ldw	r2,12(r2)
 8018194:	10800404 	addi	r2,r2,16
 8018198:	e0fffe17 	ldw	r3,-8(fp)
 801819c:	10c00035 	stwio	r3,0(r2)
  
  return;
 80181a0:	0001883a 	nop
}
 80181a4:	e037883a 	mov	sp,fp
 80181a8:	df000017 	ldw	fp,0(sp)
 80181ac:	dec00104 	addi	sp,sp,4
 80181b0:	f800283a 	ret

080181b4 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 80181b4:	defff804 	addi	sp,sp,-32
 80181b8:	dfc00715 	stw	ra,28(sp)
 80181bc:	df000615 	stw	fp,24(sp)
 80181c0:	df000604 	addi	fp,sp,24
 80181c4:	e13ffa15 	stw	r4,-24(fp)
 80181c8:	e17ffb15 	stw	r5,-20(fp)
 80181cc:	e1bffc15 	stw	r6,-16(fp)
 80181d0:	e1fffd15 	stw	r7,-12(fp)
 80181d4:	e0c00217 	ldw	r3,8(fp)
 80181d8:	e0800817 	ldw	r2,32(fp)
 80181dc:	e0fffe0d 	sth	r3,-8(fp)
 80181e0:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 80181e4:	e0bffb17 	ldw	r2,-20(fp)
 80181e8:	108007c4 	addi	r2,r2,31
 80181ec:	e0fffb17 	ldw	r3,-20(fp)
 80181f0:	18c007c3 	ldbu	r3,31(r3)
 80181f4:	19003fcc 	andi	r4,r3,255
 80181f8:	00ffdfc4 	movi	r3,-129
 80181fc:	20c6703a 	and	r3,r4,r3
 8018200:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 8018204:	e0bffa17 	ldw	r2,-24(fp)
 8018208:	e0fffc17 	ldw	r3,-16(fp)
 801820c:	19403fcc 	andi	r5,r3,255
 8018210:	10c00003 	ldbu	r3,0(r2)
 8018214:	1806703a 	and	r3,r3,zero
 8018218:	1809883a 	mov	r4,r3
 801821c:	2807883a 	mov	r3,r5
 8018220:	20c6b03a 	or	r3,r4,r3
 8018224:	10c00005 	stb	r3,0(r2)
 8018228:	e0fffc17 	ldw	r3,-16(fp)
 801822c:	1806d23a 	srli	r3,r3,8
 8018230:	19403fcc 	andi	r5,r3,255
 8018234:	10c00043 	ldbu	r3,1(r2)
 8018238:	1806703a 	and	r3,r3,zero
 801823c:	1809883a 	mov	r4,r3
 8018240:	2807883a 	mov	r3,r5
 8018244:	20c6b03a 	or	r3,r4,r3
 8018248:	10c00045 	stb	r3,1(r2)
 801824c:	e0fffc17 	ldw	r3,-16(fp)
 8018250:	1806d43a 	srli	r3,r3,16
 8018254:	19403fcc 	andi	r5,r3,255
 8018258:	10c00083 	ldbu	r3,2(r2)
 801825c:	1806703a 	and	r3,r3,zero
 8018260:	1809883a 	mov	r4,r3
 8018264:	2807883a 	mov	r3,r5
 8018268:	20c6b03a 	or	r3,r4,r3
 801826c:	10c00085 	stb	r3,2(r2)
 8018270:	e0fffc17 	ldw	r3,-16(fp)
 8018274:	180ad63a 	srli	r5,r3,24
 8018278:	10c000c3 	ldbu	r3,3(r2)
 801827c:	1806703a 	and	r3,r3,zero
 8018280:	1809883a 	mov	r4,r3
 8018284:	2807883a 	mov	r3,r5
 8018288:	20c6b03a 	or	r3,r4,r3
 801828c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 8018290:	e0bffa17 	ldw	r2,-24(fp)
 8018294:	e0fffd17 	ldw	r3,-12(fp)
 8018298:	19403fcc 	andi	r5,r3,255
 801829c:	10c00203 	ldbu	r3,8(r2)
 80182a0:	1806703a 	and	r3,r3,zero
 80182a4:	1809883a 	mov	r4,r3
 80182a8:	2807883a 	mov	r3,r5
 80182ac:	20c6b03a 	or	r3,r4,r3
 80182b0:	10c00205 	stb	r3,8(r2)
 80182b4:	e0fffd17 	ldw	r3,-12(fp)
 80182b8:	1806d23a 	srli	r3,r3,8
 80182bc:	19403fcc 	andi	r5,r3,255
 80182c0:	10c00243 	ldbu	r3,9(r2)
 80182c4:	1806703a 	and	r3,r3,zero
 80182c8:	1809883a 	mov	r4,r3
 80182cc:	2807883a 	mov	r3,r5
 80182d0:	20c6b03a 	or	r3,r4,r3
 80182d4:	10c00245 	stb	r3,9(r2)
 80182d8:	e0fffd17 	ldw	r3,-12(fp)
 80182dc:	1806d43a 	srli	r3,r3,16
 80182e0:	19403fcc 	andi	r5,r3,255
 80182e4:	10c00283 	ldbu	r3,10(r2)
 80182e8:	1806703a 	and	r3,r3,zero
 80182ec:	1809883a 	mov	r4,r3
 80182f0:	2807883a 	mov	r3,r5
 80182f4:	20c6b03a 	or	r3,r4,r3
 80182f8:	10c00285 	stb	r3,10(r2)
 80182fc:	e0fffd17 	ldw	r3,-12(fp)
 8018300:	180ad63a 	srli	r5,r3,24
 8018304:	10c002c3 	ldbu	r3,11(r2)
 8018308:	1806703a 	and	r3,r3,zero
 801830c:	1809883a 	mov	r4,r3
 8018310:	2807883a 	mov	r3,r5
 8018314:	20c6b03a 	or	r3,r4,r3
 8018318:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 801831c:	e0bffa17 	ldw	r2,-24(fp)
 8018320:	e0fffb17 	ldw	r3,-20(fp)
 8018324:	19403fcc 	andi	r5,r3,255
 8018328:	10c00403 	ldbu	r3,16(r2)
 801832c:	1806703a 	and	r3,r3,zero
 8018330:	1809883a 	mov	r4,r3
 8018334:	2807883a 	mov	r3,r5
 8018338:	20c6b03a 	or	r3,r4,r3
 801833c:	10c00405 	stb	r3,16(r2)
 8018340:	e0fffb17 	ldw	r3,-20(fp)
 8018344:	1806d23a 	srli	r3,r3,8
 8018348:	19403fcc 	andi	r5,r3,255
 801834c:	10c00443 	ldbu	r3,17(r2)
 8018350:	1806703a 	and	r3,r3,zero
 8018354:	1809883a 	mov	r4,r3
 8018358:	2807883a 	mov	r3,r5
 801835c:	20c6b03a 	or	r3,r4,r3
 8018360:	10c00445 	stb	r3,17(r2)
 8018364:	e0fffb17 	ldw	r3,-20(fp)
 8018368:	1806d43a 	srli	r3,r3,16
 801836c:	19403fcc 	andi	r5,r3,255
 8018370:	10c00483 	ldbu	r3,18(r2)
 8018374:	1806703a 	and	r3,r3,zero
 8018378:	1809883a 	mov	r4,r3
 801837c:	2807883a 	mov	r3,r5
 8018380:	20c6b03a 	or	r3,r4,r3
 8018384:	10c00485 	stb	r3,18(r2)
 8018388:	e0fffb17 	ldw	r3,-20(fp)
 801838c:	180ad63a 	srli	r5,r3,24
 8018390:	10c004c3 	ldbu	r3,19(r2)
 8018394:	1806703a 	and	r3,r3,zero
 8018398:	1809883a 	mov	r4,r3
 801839c:	2807883a 	mov	r3,r5
 80183a0:	20c6b03a 	or	r3,r4,r3
 80183a4:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 80183a8:	e0bffa17 	ldw	r2,-24(fp)
 80183ac:	10c00103 	ldbu	r3,4(r2)
 80183b0:	1806703a 	and	r3,r3,zero
 80183b4:	10c00105 	stb	r3,4(r2)
 80183b8:	10c00143 	ldbu	r3,5(r2)
 80183bc:	1806703a 	and	r3,r3,zero
 80183c0:	10c00145 	stb	r3,5(r2)
 80183c4:	10c00183 	ldbu	r3,6(r2)
 80183c8:	1806703a 	and	r3,r3,zero
 80183cc:	10c00185 	stb	r3,6(r2)
 80183d0:	10c001c3 	ldbu	r3,7(r2)
 80183d4:	1806703a 	and	r3,r3,zero
 80183d8:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 80183dc:	e0bffa17 	ldw	r2,-24(fp)
 80183e0:	10c00303 	ldbu	r3,12(r2)
 80183e4:	1806703a 	and	r3,r3,zero
 80183e8:	10c00305 	stb	r3,12(r2)
 80183ec:	10c00343 	ldbu	r3,13(r2)
 80183f0:	1806703a 	and	r3,r3,zero
 80183f4:	10c00345 	stb	r3,13(r2)
 80183f8:	10c00383 	ldbu	r3,14(r2)
 80183fc:	1806703a 	and	r3,r3,zero
 8018400:	10c00385 	stb	r3,14(r2)
 8018404:	10c003c3 	ldbu	r3,15(r2)
 8018408:	1806703a 	and	r3,r3,zero
 801840c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 8018410:	e0bffa17 	ldw	r2,-24(fp)
 8018414:	10c00503 	ldbu	r3,20(r2)
 8018418:	1806703a 	and	r3,r3,zero
 801841c:	10c00505 	stb	r3,20(r2)
 8018420:	10c00543 	ldbu	r3,21(r2)
 8018424:	1806703a 	and	r3,r3,zero
 8018428:	10c00545 	stb	r3,21(r2)
 801842c:	10c00583 	ldbu	r3,22(r2)
 8018430:	1806703a 	and	r3,r3,zero
 8018434:	10c00585 	stb	r3,22(r2)
 8018438:	10c005c3 	ldbu	r3,23(r2)
 801843c:	1806703a 	and	r3,r3,zero
 8018440:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 8018444:	e0bffa17 	ldw	r2,-24(fp)
 8018448:	e0fffe17 	ldw	r3,-8(fp)
 801844c:	19403fcc 	andi	r5,r3,255
 8018450:	10c00603 	ldbu	r3,24(r2)
 8018454:	1806703a 	and	r3,r3,zero
 8018458:	1809883a 	mov	r4,r3
 801845c:	2807883a 	mov	r3,r5
 8018460:	20c6b03a 	or	r3,r4,r3
 8018464:	10c00605 	stb	r3,24(r2)
 8018468:	e0fffe17 	ldw	r3,-8(fp)
 801846c:	1806d23a 	srli	r3,r3,8
 8018470:	19403fcc 	andi	r5,r3,255
 8018474:	10c00643 	ldbu	r3,25(r2)
 8018478:	1806703a 	and	r3,r3,zero
 801847c:	1809883a 	mov	r4,r3
 8018480:	2807883a 	mov	r3,r5
 8018484:	20c6b03a 	or	r3,r4,r3
 8018488:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 801848c:	e0bffa17 	ldw	r2,-24(fp)
 8018490:	10c00703 	ldbu	r3,28(r2)
 8018494:	1806703a 	and	r3,r3,zero
 8018498:	10c00705 	stb	r3,28(r2)
 801849c:	10c00743 	ldbu	r3,29(r2)
 80184a0:	1806703a 	and	r3,r3,zero
 80184a4:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 80184a8:	e0bffa17 	ldw	r2,-24(fp)
 80184ac:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 80184b0:	e0800617 	ldw	r2,24(fp)
 80184b4:	1007883a 	mov	r3,r2
 80184b8:	e0bffa17 	ldw	r2,-24(fp)
 80184bc:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 80184c0:	e0800717 	ldw	r2,28(fp)
 80184c4:	1007883a 	mov	r3,r2
 80184c8:	e0bffa17 	ldw	r2,-24(fp)
 80184cc:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 80184d0:	e0800317 	ldw	r2,12(fp)
 80184d4:	10000226 	beq	r2,zero,80184e0 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 80184d8:	00bfe044 	movi	r2,-127
 80184dc:	00000106 	br	80184e4 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 80184e0:	00bfe004 	movi	r2,-128
 80184e4:	e0c00417 	ldw	r3,16(fp)
 80184e8:	18000226 	beq	r3,zero,80184f4 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 80184ec:	00c00084 	movi	r3,2
 80184f0:	00000106 	br	80184f8 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 80184f4:	0007883a 	mov	r3,zero
 80184f8:	10c4b03a 	or	r2,r2,r3
 80184fc:	1007883a 	mov	r3,r2
 8018500:	e0800517 	ldw	r2,20(fp)
 8018504:	10000226 	beq	r2,zero,8018510 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 8018508:	00800104 	movi	r2,4
 801850c:	00000106 	br	8018514 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 8018510:	0005883a 	mov	r2,zero
 8018514:	1884b03a 	or	r2,r3,r2
 8018518:	1007883a 	mov	r3,r2
 801851c:	e0bfff03 	ldbu	r2,-4(fp)
 8018520:	10000426 	beq	r2,zero,8018534 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 8018524:	e0bfff03 	ldbu	r2,-4(fp)
 8018528:	108003cc 	andi	r2,r2,15
 801852c:	100490fa 	slli	r2,r2,3
 8018530:	00000106 	br	8018538 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 8018534:	0005883a 	mov	r2,zero
 8018538:	1884b03a 	or	r2,r3,r2
 801853c:	1007883a 	mov	r3,r2
 8018540:	e0bffa17 	ldw	r2,-24(fp)
 8018544:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 8018548:	01400804 	movi	r5,32
 801854c:	e13ffa17 	ldw	r4,-24(fp)
 8018550:	80191c80 	call	80191c8 <alt_dcache_flush>
}
 8018554:	0001883a 	nop
 8018558:	e037883a 	mov	sp,fp
 801855c:	dfc00117 	ldw	ra,4(sp)
 8018560:	df000017 	ldw	fp,0(sp)
 8018564:	dec00204 	addi	sp,sp,8
 8018568:	f800283a 	ret

0801856c <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 801856c:	defff904 	addi	sp,sp,-28
 8018570:	dfc00615 	stw	ra,24(sp)
 8018574:	df000515 	stw	fp,20(sp)
 8018578:	df000504 	addi	fp,sp,20
 801857c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 8018580:	e0bfff17 	ldw	r2,-4(fp)
 8018584:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 8018588:	e0bffb17 	ldw	r2,-20(fp)
 801858c:	10800317 	ldw	r2,12(r2)
 8018590:	10800404 	addi	r2,r2,16
 8018594:	e0fffb17 	ldw	r3,-20(fp)
 8018598:	18c00317 	ldw	r3,12(r3)
 801859c:	18c00404 	addi	r3,r3,16
 80185a0:	18c00037 	ldwio	r3,0(r3)
 80185a4:	18e00034 	orhi	r3,r3,32768
 80185a8:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 80185ac:	e0bffb17 	ldw	r2,-20(fp)
 80185b0:	10800317 	ldw	r2,12(r2)
 80185b4:	10800404 	addi	r2,r2,16
 80185b8:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 80185bc:	e0bffb17 	ldw	r2,-20(fp)
 80185c0:	10800917 	ldw	r2,36(r2)
 80185c4:	10001226 	beq	r2,zero,8018610 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80185c8:	0005303a 	rdctl	r2,status
 80185cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80185d0:	e0fffd17 	ldw	r3,-12(fp)
 80185d4:	00bfff84 	movi	r2,-2
 80185d8:	1884703a 	and	r2,r3,r2
 80185dc:	1001703a 	wrctl	status,r2
  
  return context;
 80185e0:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 80185e4:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 80185e8:	e0bffb17 	ldw	r2,-20(fp)
 80185ec:	10800917 	ldw	r2,36(r2)
 80185f0:	e0fffb17 	ldw	r3,-20(fp)
 80185f4:	18c00a17 	ldw	r3,40(r3)
 80185f8:	1809883a 	mov	r4,r3
 80185fc:	103ee83a 	callr	r2
 8018600:	e0bffc17 	ldw	r2,-16(fp)
 8018604:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018608:	e0bffe17 	ldw	r2,-8(fp)
 801860c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 8018610:	0001883a 	nop
 8018614:	e037883a 	mov	sp,fp
 8018618:	dfc00117 	ldw	ra,4(sp)
 801861c:	df000017 	ldw	fp,0(sp)
 8018620:	dec00204 	addi	sp,sp,8
 8018624:	f800283a 	ret

08018628 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 8018628:	defffa04 	addi	sp,sp,-24
 801862c:	dfc00515 	stw	ra,20(sp)
 8018630:	df000415 	stw	fp,16(sp)
 8018634:	df000404 	addi	fp,sp,16
 8018638:	e13ffd15 	stw	r4,-12(fp)
 801863c:	e17ffe15 	stw	r5,-8(fp)
 8018640:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8018644:	e0bffd17 	ldw	r2,-12(fp)
 8018648:	10800317 	ldw	r2,12(r2)
 801864c:	10800404 	addi	r2,r2,16
 8018650:	00c00074 	movhi	r3,1
 8018654:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8018658:	e0bffd17 	ldw	r2,-12(fp)
 801865c:	10800317 	ldw	r2,12(r2)
 8018660:	10800404 	addi	r2,r2,16
 8018664:	00c00074 	movhi	r3,1
 8018668:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 801866c:	e0bffd17 	ldw	r2,-12(fp)
 8018670:	10800317 	ldw	r2,12(r2)
 8018674:	10800404 	addi	r2,r2,16
 8018678:	0007883a 	mov	r3,zero
 801867c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8018680:	e0bffd17 	ldw	r2,-12(fp)
 8018684:	10800317 	ldw	r2,12(r2)
 8018688:	00c03fc4 	movi	r3,255
 801868c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 8018690:	d1601204 	addi	r5,gp,-32696
 8018694:	e13ffd17 	ldw	r4,-12(fp)
 8018698:	801924c0 	call	801924c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 801869c:	d8000015 	stw	zero,0(sp)
 80186a0:	e1fffd17 	ldw	r7,-12(fp)
 80186a4:	018200b4 	movhi	r6,2050
 80186a8:	31a15b04 	addi	r6,r6,-31380
 80186ac:	e17fff17 	ldw	r5,-4(fp)
 80186b0:	e13ffe17 	ldw	r4,-8(fp)
 80186b4:	8015f8c0 	call	8015f8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 80186b8:	0001883a 	nop
 80186bc:	e037883a 	mov	sp,fp
 80186c0:	dfc00117 	ldw	ra,4(sp)
 80186c4:	df000017 	ldw	fp,0(sp)
 80186c8:	dec00204 	addi	sp,sp,8
 80186cc:	f800283a 	ret

080186d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80186d0:	defffa04 	addi	sp,sp,-24
 80186d4:	dfc00515 	stw	ra,20(sp)
 80186d8:	df000415 	stw	fp,16(sp)
 80186dc:	df000404 	addi	fp,sp,16
 80186e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80186e4:	0007883a 	mov	r3,zero
 80186e8:	e0bfff17 	ldw	r2,-4(fp)
 80186ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80186f0:	e0bfff17 	ldw	r2,-4(fp)
 80186f4:	10800104 	addi	r2,r2,4
 80186f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80186fc:	0005303a 	rdctl	r2,status
 8018700:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018704:	e0fffd17 	ldw	r3,-12(fp)
 8018708:	00bfff84 	movi	r2,-2
 801870c:	1884703a 	and	r2,r3,r2
 8018710:	1001703a 	wrctl	status,r2
  
  return context;
 8018714:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8018718:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801871c:	80198280 	call	8019828 <alt_tick>
 8018720:	e0bffc17 	ldw	r2,-16(fp)
 8018724:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018728:	e0bffe17 	ldw	r2,-8(fp)
 801872c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8018730:	0001883a 	nop
 8018734:	e037883a 	mov	sp,fp
 8018738:	dfc00117 	ldw	ra,4(sp)
 801873c:	df000017 	ldw	fp,0(sp)
 8018740:	dec00204 	addi	sp,sp,8
 8018744:	f800283a 	ret

08018748 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8018748:	defff804 	addi	sp,sp,-32
 801874c:	dfc00715 	stw	ra,28(sp)
 8018750:	df000615 	stw	fp,24(sp)
 8018754:	df000604 	addi	fp,sp,24
 8018758:	e13ffc15 	stw	r4,-16(fp)
 801875c:	e17ffd15 	stw	r5,-12(fp)
 8018760:	e1bffe15 	stw	r6,-8(fp)
 8018764:	e1ffff15 	stw	r7,-4(fp)
 8018768:	e0bfff17 	ldw	r2,-4(fp)
 801876c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8018770:	d0a8bb17 	ldw	r2,-23828(gp)
 8018774:	1000021e 	bne	r2,zero,8018780 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8018778:	e0bffb17 	ldw	r2,-20(fp)
 801877c:	d0a8bb15 	stw	r2,-23828(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8018780:	e0bffc17 	ldw	r2,-16(fp)
 8018784:	10800104 	addi	r2,r2,4
 8018788:	00c001c4 	movi	r3,7
 801878c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8018790:	d8000015 	stw	zero,0(sp)
 8018794:	e1fffc17 	ldw	r7,-16(fp)
 8018798:	018200b4 	movhi	r6,2050
 801879c:	31a1b404 	addi	r6,r6,-31024
 80187a0:	e17ffe17 	ldw	r5,-8(fp)
 80187a4:	e13ffd17 	ldw	r4,-12(fp)
 80187a8:	8015f8c0 	call	8015f8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80187ac:	0001883a 	nop
 80187b0:	e037883a 	mov	sp,fp
 80187b4:	dfc00117 	ldw	ra,4(sp)
 80187b8:	df000017 	ldw	fp,0(sp)
 80187bc:	dec00204 	addi	sp,sp,8
 80187c0:	f800283a 	ret

080187c4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80187c4:	defffa04 	addi	sp,sp,-24
 80187c8:	dfc00515 	stw	ra,20(sp)
 80187cc:	df000415 	stw	fp,16(sp)
 80187d0:	df000404 	addi	fp,sp,16
 80187d4:	e13ffd15 	stw	r4,-12(fp)
 80187d8:	e17ffe15 	stw	r5,-8(fp)
 80187dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 80187e0:	e0bffd17 	ldw	r2,-12(fp)
 80187e4:	10800017 	ldw	r2,0(r2)
 80187e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 80187ec:	e0bffc17 	ldw	r2,-16(fp)
 80187f0:	10c00a04 	addi	r3,r2,40
 80187f4:	e0bffd17 	ldw	r2,-12(fp)
 80187f8:	10800217 	ldw	r2,8(r2)
 80187fc:	100f883a 	mov	r7,r2
 8018800:	e1bfff17 	ldw	r6,-4(fp)
 8018804:	e17ffe17 	ldw	r5,-8(fp)
 8018808:	1809883a 	mov	r4,r3
 801880c:	8018cd80 	call	8018cd8 <altera_avalon_uart_read>
      fd->fd_flags);
}
 8018810:	e037883a 	mov	sp,fp
 8018814:	dfc00117 	ldw	ra,4(sp)
 8018818:	df000017 	ldw	fp,0(sp)
 801881c:	dec00204 	addi	sp,sp,8
 8018820:	f800283a 	ret

08018824 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8018824:	defffa04 	addi	sp,sp,-24
 8018828:	dfc00515 	stw	ra,20(sp)
 801882c:	df000415 	stw	fp,16(sp)
 8018830:	df000404 	addi	fp,sp,16
 8018834:	e13ffd15 	stw	r4,-12(fp)
 8018838:	e17ffe15 	stw	r5,-8(fp)
 801883c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8018840:	e0bffd17 	ldw	r2,-12(fp)
 8018844:	10800017 	ldw	r2,0(r2)
 8018848:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 801884c:	e0bffc17 	ldw	r2,-16(fp)
 8018850:	10c00a04 	addi	r3,r2,40
 8018854:	e0bffd17 	ldw	r2,-12(fp)
 8018858:	10800217 	ldw	r2,8(r2)
 801885c:	100f883a 	mov	r7,r2
 8018860:	e1bfff17 	ldw	r6,-4(fp)
 8018864:	e17ffe17 	ldw	r5,-8(fp)
 8018868:	1809883a 	mov	r4,r3
 801886c:	8018ef00 	call	8018ef0 <altera_avalon_uart_write>
      fd->fd_flags);
}
 8018870:	e037883a 	mov	sp,fp
 8018874:	dfc00117 	ldw	ra,4(sp)
 8018878:	df000017 	ldw	fp,0(sp)
 801887c:	dec00204 	addi	sp,sp,8
 8018880:	f800283a 	ret

08018884 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 8018884:	defffc04 	addi	sp,sp,-16
 8018888:	dfc00315 	stw	ra,12(sp)
 801888c:	df000215 	stw	fp,8(sp)
 8018890:	df000204 	addi	fp,sp,8
 8018894:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8018898:	e0bfff17 	ldw	r2,-4(fp)
 801889c:	10800017 	ldw	r2,0(r2)
 80188a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 80188a4:	e0bffe17 	ldw	r2,-8(fp)
 80188a8:	10c00a04 	addi	r3,r2,40
 80188ac:	e0bfff17 	ldw	r2,-4(fp)
 80188b0:	10800217 	ldw	r2,8(r2)
 80188b4:	100b883a 	mov	r5,r2
 80188b8:	1809883a 	mov	r4,r3
 80188bc:	8018c480 	call	8018c48 <altera_avalon_uart_close>
}
 80188c0:	e037883a 	mov	sp,fp
 80188c4:	dfc00117 	ldw	ra,4(sp)
 80188c8:	df000017 	ldw	fp,0(sp)
 80188cc:	dec00204 	addi	sp,sp,8
 80188d0:	f800283a 	ret

080188d4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 80188d4:	defff804 	addi	sp,sp,-32
 80188d8:	dfc00715 	stw	ra,28(sp)
 80188dc:	df000615 	stw	fp,24(sp)
 80188e0:	df000604 	addi	fp,sp,24
 80188e4:	e13ffd15 	stw	r4,-12(fp)
 80188e8:	e17ffe15 	stw	r5,-8(fp)
 80188ec:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 80188f0:	e0bffd17 	ldw	r2,-12(fp)
 80188f4:	10800017 	ldw	r2,0(r2)
 80188f8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 80188fc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8018900:	1000041e 	bne	r2,zero,8018914 <altera_avalon_uart_init+0x40>
 8018904:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8018908:	1000021e 	bne	r2,zero,8018914 <altera_avalon_uart_init+0x40>
 801890c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8018910:	10000226 	beq	r2,zero,801891c <altera_avalon_uart_init+0x48>
 8018914:	00800044 	movi	r2,1
 8018918:	00000106 	br	8018920 <altera_avalon_uart_init+0x4c>
 801891c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8018920:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 8018924:	e0bffc17 	ldw	r2,-16(fp)
 8018928:	10000f1e 	bne	r2,zero,8018968 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 801892c:	e0bffd17 	ldw	r2,-12(fp)
 8018930:	00c32004 	movi	r3,3200
 8018934:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 8018938:	e0bffb17 	ldw	r2,-20(fp)
 801893c:	10800304 	addi	r2,r2,12
 8018940:	e0fffd17 	ldw	r3,-12(fp)
 8018944:	18c00117 	ldw	r3,4(r3)
 8018948:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 801894c:	d8000015 	stw	zero,0(sp)
 8018950:	e1fffd17 	ldw	r7,-12(fp)
 8018954:	018200b4 	movhi	r6,2050
 8018958:	31a26004 	addi	r6,r6,-30336
 801895c:	e17fff17 	ldw	r5,-4(fp)
 8018960:	e13ffe17 	ldw	r4,-8(fp)
 8018964:	8015f8c0 	call	8015f8c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 8018968:	0001883a 	nop
 801896c:	e037883a 	mov	sp,fp
 8018970:	dfc00117 	ldw	ra,4(sp)
 8018974:	df000017 	ldw	fp,0(sp)
 8018978:	dec00204 	addi	sp,sp,8
 801897c:	f800283a 	ret

08018980 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 8018980:	defffa04 	addi	sp,sp,-24
 8018984:	dfc00515 	stw	ra,20(sp)
 8018988:	df000415 	stw	fp,16(sp)
 801898c:	df000404 	addi	fp,sp,16
 8018990:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 8018994:	e0bfff17 	ldw	r2,-4(fp)
 8018998:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 801899c:	e0bffc17 	ldw	r2,-16(fp)
 80189a0:	10800017 	ldw	r2,0(r2)
 80189a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 80189a8:	e0bffd17 	ldw	r2,-12(fp)
 80189ac:	10800204 	addi	r2,r2,8
 80189b0:	10800037 	ldwio	r2,0(r2)
 80189b4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 80189b8:	e0bffd17 	ldw	r2,-12(fp)
 80189bc:	10800204 	addi	r2,r2,8
 80189c0:	0007883a 	mov	r3,zero
 80189c4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 80189c8:	e0bffd17 	ldw	r2,-12(fp)
 80189cc:	10800204 	addi	r2,r2,8
 80189d0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 80189d4:	e0bffe17 	ldw	r2,-8(fp)
 80189d8:	1080200c 	andi	r2,r2,128
 80189dc:	10000326 	beq	r2,zero,80189ec <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 80189e0:	e17ffe17 	ldw	r5,-8(fp)
 80189e4:	e13ffc17 	ldw	r4,-16(fp)
 80189e8:	8018a1c0 	call	8018a1c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 80189ec:	e0bffe17 	ldw	r2,-8(fp)
 80189f0:	1081100c 	andi	r2,r2,1088
 80189f4:	10000326 	beq	r2,zero,8018a04 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 80189f8:	e17ffe17 	ldw	r5,-8(fp)
 80189fc:	e13ffc17 	ldw	r4,-16(fp)
 8018a00:	8018b000 	call	8018b00 <altera_avalon_uart_txirq>
  }
  

}
 8018a04:	0001883a 	nop
 8018a08:	e037883a 	mov	sp,fp
 8018a0c:	dfc00117 	ldw	ra,4(sp)
 8018a10:	df000017 	ldw	fp,0(sp)
 8018a14:	dec00204 	addi	sp,sp,8
 8018a18:	f800283a 	ret

08018a1c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8018a1c:	defffc04 	addi	sp,sp,-16
 8018a20:	df000315 	stw	fp,12(sp)
 8018a24:	df000304 	addi	fp,sp,12
 8018a28:	e13ffe15 	stw	r4,-8(fp)
 8018a2c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 8018a30:	e0bfff17 	ldw	r2,-4(fp)
 8018a34:	108000cc 	andi	r2,r2,3
 8018a38:	10002c1e 	bne	r2,zero,8018aec <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 8018a3c:	e0bffe17 	ldw	r2,-8(fp)
 8018a40:	10800317 	ldw	r2,12(r2)
 8018a44:	e0bffe17 	ldw	r2,-8(fp)
 8018a48:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8018a4c:	e0bffe17 	ldw	r2,-8(fp)
 8018a50:	10800317 	ldw	r2,12(r2)
 8018a54:	10800044 	addi	r2,r2,1
 8018a58:	10800fcc 	andi	r2,r2,63
 8018a5c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 8018a60:	e0bffe17 	ldw	r2,-8(fp)
 8018a64:	10800317 	ldw	r2,12(r2)
 8018a68:	e0fffe17 	ldw	r3,-8(fp)
 8018a6c:	18c00017 	ldw	r3,0(r3)
 8018a70:	18c00037 	ldwio	r3,0(r3)
 8018a74:	1809883a 	mov	r4,r3
 8018a78:	e0fffe17 	ldw	r3,-8(fp)
 8018a7c:	1885883a 	add	r2,r3,r2
 8018a80:	10800704 	addi	r2,r2,28
 8018a84:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 8018a88:	e0bffe17 	ldw	r2,-8(fp)
 8018a8c:	e0fffd17 	ldw	r3,-12(fp)
 8018a90:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8018a94:	e0bffe17 	ldw	r2,-8(fp)
 8018a98:	10800317 	ldw	r2,12(r2)
 8018a9c:	10800044 	addi	r2,r2,1
 8018aa0:	10800fcc 	andi	r2,r2,63
 8018aa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 8018aa8:	e0bffe17 	ldw	r2,-8(fp)
 8018aac:	10c00217 	ldw	r3,8(r2)
 8018ab0:	e0bffd17 	ldw	r2,-12(fp)
 8018ab4:	18800e1e 	bne	r3,r2,8018af0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8018ab8:	e0bffe17 	ldw	r2,-8(fp)
 8018abc:	10c00117 	ldw	r3,4(r2)
 8018ac0:	00bfdfc4 	movi	r2,-129
 8018ac4:	1886703a 	and	r3,r3,r2
 8018ac8:	e0bffe17 	ldw	r2,-8(fp)
 8018acc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 8018ad0:	e0bffe17 	ldw	r2,-8(fp)
 8018ad4:	10800017 	ldw	r2,0(r2)
 8018ad8:	10800304 	addi	r2,r2,12
 8018adc:	e0fffe17 	ldw	r3,-8(fp)
 8018ae0:	18c00117 	ldw	r3,4(r3)
 8018ae4:	10c00035 	stwio	r3,0(r2)
 8018ae8:	00000106 	br	8018af0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 8018aec:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 8018af0:	e037883a 	mov	sp,fp
 8018af4:	df000017 	ldw	fp,0(sp)
 8018af8:	dec00104 	addi	sp,sp,4
 8018afc:	f800283a 	ret

08018b00 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8018b00:	defffb04 	addi	sp,sp,-20
 8018b04:	df000415 	stw	fp,16(sp)
 8018b08:	df000404 	addi	fp,sp,16
 8018b0c:	e13ffc15 	stw	r4,-16(fp)
 8018b10:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 8018b14:	e0bffc17 	ldw	r2,-16(fp)
 8018b18:	10c00417 	ldw	r3,16(r2)
 8018b1c:	e0bffc17 	ldw	r2,-16(fp)
 8018b20:	10800517 	ldw	r2,20(r2)
 8018b24:	18803226 	beq	r3,r2,8018bf0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8018b28:	e0bffc17 	ldw	r2,-16(fp)
 8018b2c:	10800617 	ldw	r2,24(r2)
 8018b30:	1080008c 	andi	r2,r2,2
 8018b34:	10000326 	beq	r2,zero,8018b44 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8018b38:	e0bffd17 	ldw	r2,-12(fp)
 8018b3c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8018b40:	10001d26 	beq	r2,zero,8018bb8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 8018b44:	e0bffc17 	ldw	r2,-16(fp)
 8018b48:	10800417 	ldw	r2,16(r2)
 8018b4c:	e0bffc17 	ldw	r2,-16(fp)
 8018b50:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 8018b54:	e0bffc17 	ldw	r2,-16(fp)
 8018b58:	10800017 	ldw	r2,0(r2)
 8018b5c:	10800104 	addi	r2,r2,4
 8018b60:	e0fffc17 	ldw	r3,-16(fp)
 8018b64:	18c00417 	ldw	r3,16(r3)
 8018b68:	e13ffc17 	ldw	r4,-16(fp)
 8018b6c:	20c7883a 	add	r3,r4,r3
 8018b70:	18c01704 	addi	r3,r3,92
 8018b74:	18c00003 	ldbu	r3,0(r3)
 8018b78:	18c03fcc 	andi	r3,r3,255
 8018b7c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 8018b80:	e0bffc17 	ldw	r2,-16(fp)
 8018b84:	10800417 	ldw	r2,16(r2)
 8018b88:	10800044 	addi	r2,r2,1
 8018b8c:	e0fffc17 	ldw	r3,-16(fp)
 8018b90:	18800415 	stw	r2,16(r3)
 8018b94:	10c00fcc 	andi	r3,r2,63
 8018b98:	e0bffc17 	ldw	r2,-16(fp)
 8018b9c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8018ba0:	e0bffc17 	ldw	r2,-16(fp)
 8018ba4:	10800117 	ldw	r2,4(r2)
 8018ba8:	10c01014 	ori	r3,r2,64
 8018bac:	e0bffc17 	ldw	r2,-16(fp)
 8018bb0:	10c00115 	stw	r3,4(r2)
 8018bb4:	00000e06 	br	8018bf0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 8018bb8:	e0bffc17 	ldw	r2,-16(fp)
 8018bbc:	10800017 	ldw	r2,0(r2)
 8018bc0:	10800204 	addi	r2,r2,8
 8018bc4:	10800037 	ldwio	r2,0(r2)
 8018bc8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8018bcc:	e0bffd17 	ldw	r2,-12(fp)
 8018bd0:	1082000c 	andi	r2,r2,2048
 8018bd4:	1000061e 	bne	r2,zero,8018bf0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8018bd8:	e0bffc17 	ldw	r2,-16(fp)
 8018bdc:	10c00117 	ldw	r3,4(r2)
 8018be0:	00bfefc4 	movi	r2,-65
 8018be4:	1886703a 	and	r3,r3,r2
 8018be8:	e0bffc17 	ldw	r2,-16(fp)
 8018bec:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 8018bf0:	e0bffc17 	ldw	r2,-16(fp)
 8018bf4:	10c00417 	ldw	r3,16(r2)
 8018bf8:	e0bffc17 	ldw	r2,-16(fp)
 8018bfc:	10800517 	ldw	r2,20(r2)
 8018c00:	1880061e 	bne	r3,r2,8018c1c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8018c04:	e0bffc17 	ldw	r2,-16(fp)
 8018c08:	10c00117 	ldw	r3,4(r2)
 8018c0c:	00beefc4 	movi	r2,-1089
 8018c10:	1886703a 	and	r3,r3,r2
 8018c14:	e0bffc17 	ldw	r2,-16(fp)
 8018c18:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8018c1c:	e0bffc17 	ldw	r2,-16(fp)
 8018c20:	10800017 	ldw	r2,0(r2)
 8018c24:	10800304 	addi	r2,r2,12
 8018c28:	e0fffc17 	ldw	r3,-16(fp)
 8018c2c:	18c00117 	ldw	r3,4(r3)
 8018c30:	10c00035 	stwio	r3,0(r2)
}
 8018c34:	0001883a 	nop
 8018c38:	e037883a 	mov	sp,fp
 8018c3c:	df000017 	ldw	fp,0(sp)
 8018c40:	dec00104 	addi	sp,sp,4
 8018c44:	f800283a 	ret

08018c48 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 8018c48:	defffd04 	addi	sp,sp,-12
 8018c4c:	df000215 	stw	fp,8(sp)
 8018c50:	df000204 	addi	fp,sp,8
 8018c54:	e13ffe15 	stw	r4,-8(fp)
 8018c58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8018c5c:	00000506 	br	8018c74 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8018c60:	e0bfff17 	ldw	r2,-4(fp)
 8018c64:	1090000c 	andi	r2,r2,16384
 8018c68:	10000226 	beq	r2,zero,8018c74 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8018c6c:	00bffd44 	movi	r2,-11
 8018c70:	00000606 	br	8018c8c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8018c74:	e0bffe17 	ldw	r2,-8(fp)
 8018c78:	10c00417 	ldw	r3,16(r2)
 8018c7c:	e0bffe17 	ldw	r2,-8(fp)
 8018c80:	10800517 	ldw	r2,20(r2)
 8018c84:	18bff61e 	bne	r3,r2,8018c60 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8018c88:	0005883a 	mov	r2,zero
}
 8018c8c:	e037883a 	mov	sp,fp
 8018c90:	df000017 	ldw	fp,0(sp)
 8018c94:	dec00104 	addi	sp,sp,4
 8018c98:	f800283a 	ret

08018c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018c9c:	defffe04 	addi	sp,sp,-8
 8018ca0:	dfc00115 	stw	ra,4(sp)
 8018ca4:	df000015 	stw	fp,0(sp)
 8018ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018cac:	d0a00f17 	ldw	r2,-32708(gp)
 8018cb0:	10000326 	beq	r2,zero,8018cc0 <alt_get_errno+0x24>
 8018cb4:	d0a00f17 	ldw	r2,-32708(gp)
 8018cb8:	103ee83a 	callr	r2
 8018cbc:	00000106 	br	8018cc4 <alt_get_errno+0x28>
 8018cc0:	d0a8b004 	addi	r2,gp,-23872
}
 8018cc4:	e037883a 	mov	sp,fp
 8018cc8:	dfc00117 	ldw	ra,4(sp)
 8018ccc:	df000017 	ldw	fp,0(sp)
 8018cd0:	dec00204 	addi	sp,sp,8
 8018cd4:	f800283a 	ret

08018cd8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 8018cd8:	defff204 	addi	sp,sp,-56
 8018cdc:	dfc00d15 	stw	ra,52(sp)
 8018ce0:	df000c15 	stw	fp,48(sp)
 8018ce4:	df000c04 	addi	fp,sp,48
 8018ce8:	e13ffc15 	stw	r4,-16(fp)
 8018cec:	e17ffd15 	stw	r5,-12(fp)
 8018cf0:	e1bffe15 	stw	r6,-8(fp)
 8018cf4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 8018cf8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 8018cfc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 8018d00:	e0bfff17 	ldw	r2,-4(fp)
 8018d04:	1090000c 	andi	r2,r2,16384
 8018d08:	1005003a 	cmpeq	r2,r2,zero
 8018d0c:	10803fcc 	andi	r2,r2,255
 8018d10:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8018d14:	00001306 	br	8018d64 <altera_avalon_uart_read+0x8c>
    {
      count++;
 8018d18:	e0bff517 	ldw	r2,-44(fp)
 8018d1c:	10800044 	addi	r2,r2,1
 8018d20:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 8018d24:	e0bffd17 	ldw	r2,-12(fp)
 8018d28:	10c00044 	addi	r3,r2,1
 8018d2c:	e0fffd15 	stw	r3,-12(fp)
 8018d30:	e0fffc17 	ldw	r3,-16(fp)
 8018d34:	18c00217 	ldw	r3,8(r3)
 8018d38:	e13ffc17 	ldw	r4,-16(fp)
 8018d3c:	20c7883a 	add	r3,r4,r3
 8018d40:	18c00704 	addi	r3,r3,28
 8018d44:	18c00003 	ldbu	r3,0(r3)
 8018d48:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 8018d4c:	e0bffc17 	ldw	r2,-16(fp)
 8018d50:	10800217 	ldw	r2,8(r2)
 8018d54:	10800044 	addi	r2,r2,1
 8018d58:	10c00fcc 	andi	r3,r2,63
 8018d5c:	e0bffc17 	ldw	r2,-16(fp)
 8018d60:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8018d64:	e0fff517 	ldw	r3,-44(fp)
 8018d68:	e0bffe17 	ldw	r2,-8(fp)
 8018d6c:	1880050e 	bge	r3,r2,8018d84 <altera_avalon_uart_read+0xac>
 8018d70:	e0bffc17 	ldw	r2,-16(fp)
 8018d74:	10c00217 	ldw	r3,8(r2)
 8018d78:	e0bffc17 	ldw	r2,-16(fp)
 8018d7c:	10800317 	ldw	r2,12(r2)
 8018d80:	18bfe51e 	bne	r3,r2,8018d18 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 8018d84:	e0bff517 	ldw	r2,-44(fp)
 8018d88:	1000251e 	bne	r2,zero,8018e20 <altera_avalon_uart_read+0x148>
 8018d8c:	e0bffc17 	ldw	r2,-16(fp)
 8018d90:	10c00217 	ldw	r3,8(r2)
 8018d94:	e0bffc17 	ldw	r2,-16(fp)
 8018d98:	10800317 	ldw	r2,12(r2)
 8018d9c:	1880201e 	bne	r3,r2,8018e20 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 8018da0:	e0bff617 	ldw	r2,-40(fp)
 8018da4:	1000071e 	bne	r2,zero,8018dc4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 8018da8:	8018c9c0 	call	8018c9c <alt_get_errno>
 8018dac:	1007883a 	mov	r3,r2
 8018db0:	008002c4 	movi	r2,11
 8018db4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 8018db8:	00800044 	movi	r2,1
 8018dbc:	e0bff405 	stb	r2,-48(fp)
        break;
 8018dc0:	00001b06 	br	8018e30 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018dc4:	0005303a 	rdctl	r2,status
 8018dc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018dcc:	e0fff917 	ldw	r3,-28(fp)
 8018dd0:	00bfff84 	movi	r2,-2
 8018dd4:	1884703a 	and	r2,r3,r2
 8018dd8:	1001703a 	wrctl	status,r2
  
  return context;
 8018ddc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 8018de0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8018de4:	e0bffc17 	ldw	r2,-16(fp)
 8018de8:	10800117 	ldw	r2,4(r2)
 8018dec:	10c02014 	ori	r3,r2,128
 8018df0:	e0bffc17 	ldw	r2,-16(fp)
 8018df4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8018df8:	e0bffc17 	ldw	r2,-16(fp)
 8018dfc:	10800017 	ldw	r2,0(r2)
 8018e00:	10800304 	addi	r2,r2,12
 8018e04:	e0fffc17 	ldw	r3,-16(fp)
 8018e08:	18c00117 	ldw	r3,4(r3)
 8018e0c:	10c00035 	stwio	r3,0(r2)
 8018e10:	e0bff817 	ldw	r2,-32(fp)
 8018e14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018e18:	e0bffa17 	ldw	r2,-24(fp)
 8018e1c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 8018e20:	e0bff517 	ldw	r2,-44(fp)
 8018e24:	1000021e 	bne	r2,zero,8018e30 <altera_avalon_uart_read+0x158>
 8018e28:	e0bffe17 	ldw	r2,-8(fp)
 8018e2c:	103fcd1e 	bne	r2,zero,8018d64 <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018e30:	0005303a 	rdctl	r2,status
 8018e34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018e38:	e0fffb17 	ldw	r3,-20(fp)
 8018e3c:	00bfff84 	movi	r2,-2
 8018e40:	1884703a 	and	r2,r3,r2
 8018e44:	1001703a 	wrctl	status,r2
  
  return context;
 8018e48:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 8018e4c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8018e50:	e0bffc17 	ldw	r2,-16(fp)
 8018e54:	10800117 	ldw	r2,4(r2)
 8018e58:	10c02014 	ori	r3,r2,128
 8018e5c:	e0bffc17 	ldw	r2,-16(fp)
 8018e60:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8018e64:	e0bffc17 	ldw	r2,-16(fp)
 8018e68:	10800017 	ldw	r2,0(r2)
 8018e6c:	10800304 	addi	r2,r2,12
 8018e70:	e0fffc17 	ldw	r3,-16(fp)
 8018e74:	18c00117 	ldw	r3,4(r3)
 8018e78:	10c00035 	stwio	r3,0(r2)
 8018e7c:	e0bff817 	ldw	r2,-32(fp)
 8018e80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018e84:	e0bff717 	ldw	r2,-36(fp)
 8018e88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 8018e8c:	e0bff403 	ldbu	r2,-48(fp)
 8018e90:	10000226 	beq	r2,zero,8018e9c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 8018e94:	00bffd44 	movi	r2,-11
 8018e98:	00000106 	br	8018ea0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 8018e9c:	e0bff517 	ldw	r2,-44(fp)
  }
}
 8018ea0:	e037883a 	mov	sp,fp
 8018ea4:	dfc00117 	ldw	ra,4(sp)
 8018ea8:	df000017 	ldw	fp,0(sp)
 8018eac:	dec00204 	addi	sp,sp,8
 8018eb0:	f800283a 	ret

08018eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018eb4:	defffe04 	addi	sp,sp,-8
 8018eb8:	dfc00115 	stw	ra,4(sp)
 8018ebc:	df000015 	stw	fp,0(sp)
 8018ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018ec4:	d0a00f17 	ldw	r2,-32708(gp)
 8018ec8:	10000326 	beq	r2,zero,8018ed8 <alt_get_errno+0x24>
 8018ecc:	d0a00f17 	ldw	r2,-32708(gp)
 8018ed0:	103ee83a 	callr	r2
 8018ed4:	00000106 	br	8018edc <alt_get_errno+0x28>
 8018ed8:	d0a8b004 	addi	r2,gp,-23872
}
 8018edc:	e037883a 	mov	sp,fp
 8018ee0:	dfc00117 	ldw	ra,4(sp)
 8018ee4:	df000017 	ldw	fp,0(sp)
 8018ee8:	dec00204 	addi	sp,sp,8
 8018eec:	f800283a 	ret

08018ef0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 8018ef0:	defff204 	addi	sp,sp,-56
 8018ef4:	dfc00d15 	stw	ra,52(sp)
 8018ef8:	df000c15 	stw	fp,48(sp)
 8018efc:	df000c04 	addi	fp,sp,48
 8018f00:	e13ffc15 	stw	r4,-16(fp)
 8018f04:	e17ffd15 	stw	r5,-12(fp)
 8018f08:	e1bffe15 	stw	r6,-8(fp)
 8018f0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 8018f10:	e0bffe17 	ldw	r2,-8(fp)
 8018f14:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 8018f18:	e0bfff17 	ldw	r2,-4(fp)
 8018f1c:	1090000c 	andi	r2,r2,16384
 8018f20:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 8018f24:	00003c06 	br	8019018 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8018f28:	e0bffc17 	ldw	r2,-16(fp)
 8018f2c:	10800517 	ldw	r2,20(r2)
 8018f30:	10800044 	addi	r2,r2,1
 8018f34:	10800fcc 	andi	r2,r2,63
 8018f38:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 8018f3c:	e0bffc17 	ldw	r2,-16(fp)
 8018f40:	10c00417 	ldw	r3,16(r2)
 8018f44:	e0bff717 	ldw	r2,-36(fp)
 8018f48:	1880221e 	bne	r3,r2,8018fd4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 8018f4c:	e0bff517 	ldw	r2,-44(fp)
 8018f50:	10000526 	beq	r2,zero,8018f68 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 8018f54:	8018eb40 	call	8018eb4 <alt_get_errno>
 8018f58:	1007883a 	mov	r3,r2
 8018f5c:	008002c4 	movi	r2,11
 8018f60:	18800015 	stw	r2,0(r3)
        break;
 8018f64:	00002e06 	br	8019020 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018f68:	0005303a 	rdctl	r2,status
 8018f6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018f70:	e0fff917 	ldw	r3,-28(fp)
 8018f74:	00bfff84 	movi	r2,-2
 8018f78:	1884703a 	and	r2,r3,r2
 8018f7c:	1001703a 	wrctl	status,r2
  
  return context;
 8018f80:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 8018f84:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8018f88:	e0bffc17 	ldw	r2,-16(fp)
 8018f8c:	10800117 	ldw	r2,4(r2)
 8018f90:	10c11014 	ori	r3,r2,1088
 8018f94:	e0bffc17 	ldw	r2,-16(fp)
 8018f98:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8018f9c:	e0bffc17 	ldw	r2,-16(fp)
 8018fa0:	10800017 	ldw	r2,0(r2)
 8018fa4:	10800304 	addi	r2,r2,12
 8018fa8:	e0fffc17 	ldw	r3,-16(fp)
 8018fac:	18c00117 	ldw	r3,4(r3)
 8018fb0:	10c00035 	stwio	r3,0(r2)
 8018fb4:	e0bff817 	ldw	r2,-32(fp)
 8018fb8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018fbc:	e0bff617 	ldw	r2,-40(fp)
 8018fc0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 8018fc4:	e0bffc17 	ldw	r2,-16(fp)
 8018fc8:	10c00417 	ldw	r3,16(r2)
 8018fcc:	e0bff717 	ldw	r2,-36(fp)
 8018fd0:	18bffc26 	beq	r3,r2,8018fc4 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 8018fd4:	e0bff417 	ldw	r2,-48(fp)
 8018fd8:	10bfffc4 	addi	r2,r2,-1
 8018fdc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 8018fe0:	e0bffc17 	ldw	r2,-16(fp)
 8018fe4:	10c00517 	ldw	r3,20(r2)
 8018fe8:	e0bffd17 	ldw	r2,-12(fp)
 8018fec:	11000044 	addi	r4,r2,1
 8018ff0:	e13ffd15 	stw	r4,-12(fp)
 8018ff4:	10800003 	ldbu	r2,0(r2)
 8018ff8:	1009883a 	mov	r4,r2
 8018ffc:	e0bffc17 	ldw	r2,-16(fp)
 8019000:	10c5883a 	add	r2,r2,r3
 8019004:	10801704 	addi	r2,r2,92
 8019008:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 801900c:	e0bffc17 	ldw	r2,-16(fp)
 8019010:	e0fff717 	ldw	r3,-36(fp)
 8019014:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 8019018:	e0bff417 	ldw	r2,-48(fp)
 801901c:	103fc21e 	bne	r2,zero,8018f28 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019020:	0005303a 	rdctl	r2,status
 8019024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019028:	e0fffb17 	ldw	r3,-20(fp)
 801902c:	00bfff84 	movi	r2,-2
 8019030:	1884703a 	and	r2,r3,r2
 8019034:	1001703a 	wrctl	status,r2
  
  return context;
 8019038:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 801903c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8019040:	e0bffc17 	ldw	r2,-16(fp)
 8019044:	10800117 	ldw	r2,4(r2)
 8019048:	10c11014 	ori	r3,r2,1088
 801904c:	e0bffc17 	ldw	r2,-16(fp)
 8019050:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8019054:	e0bffc17 	ldw	r2,-16(fp)
 8019058:	10800017 	ldw	r2,0(r2)
 801905c:	10800304 	addi	r2,r2,12
 8019060:	e0fffc17 	ldw	r3,-16(fp)
 8019064:	18c00117 	ldw	r3,4(r3)
 8019068:	10c00035 	stwio	r3,0(r2)
 801906c:	e0bff817 	ldw	r2,-32(fp)
 8019070:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019074:	e0bffa17 	ldw	r2,-24(fp)
 8019078:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 801907c:	e0fffe17 	ldw	r3,-8(fp)
 8019080:	e0bff417 	ldw	r2,-48(fp)
 8019084:	1885c83a 	sub	r2,r3,r2
}
 8019088:	e037883a 	mov	sp,fp
 801908c:	dfc00117 	ldw	ra,4(sp)
 8019090:	df000017 	ldw	fp,0(sp)
 8019094:	dec00204 	addi	sp,sp,8
 8019098:	f800283a 	ret

0801909c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801909c:	defff504 	addi	sp,sp,-44
 80190a0:	df000a15 	stw	fp,40(sp)
 80190a4:	df000a04 	addi	fp,sp,40
 80190a8:	e13ffc15 	stw	r4,-16(fp)
 80190ac:	e17ffd15 	stw	r5,-12(fp)
 80190b0:	e1bffe15 	stw	r6,-8(fp)
 80190b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80190b8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80190bc:	d0a8bb17 	ldw	r2,-23828(gp)
  
  if (alt_ticks_per_second ())
 80190c0:	10003c26 	beq	r2,zero,80191b4 <alt_alarm_start+0x118>
  {
    if (alarm)
 80190c4:	e0bffc17 	ldw	r2,-16(fp)
 80190c8:	10003826 	beq	r2,zero,80191ac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80190cc:	e0bffc17 	ldw	r2,-16(fp)
 80190d0:	e0fffe17 	ldw	r3,-8(fp)
 80190d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80190d8:	e0bffc17 	ldw	r2,-16(fp)
 80190dc:	e0ffff17 	ldw	r3,-4(fp)
 80190e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80190e4:	0005303a 	rdctl	r2,status
 80190e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80190ec:	e0fff917 	ldw	r3,-28(fp)
 80190f0:	00bfff84 	movi	r2,-2
 80190f4:	1884703a 	and	r2,r3,r2
 80190f8:	1001703a 	wrctl	status,r2
  
  return context;
 80190fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8019100:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8019104:	d0a8bc17 	ldw	r2,-23824(gp)
      
      current_nticks = alt_nticks();
 8019108:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801910c:	e0fffd17 	ldw	r3,-12(fp)
 8019110:	e0bff617 	ldw	r2,-40(fp)
 8019114:	1885883a 	add	r2,r3,r2
 8019118:	10c00044 	addi	r3,r2,1
 801911c:	e0bffc17 	ldw	r2,-16(fp)
 8019120:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8019124:	e0bffc17 	ldw	r2,-16(fp)
 8019128:	10c00217 	ldw	r3,8(r2)
 801912c:	e0bff617 	ldw	r2,-40(fp)
 8019130:	1880042e 	bgeu	r3,r2,8019144 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8019134:	e0bffc17 	ldw	r2,-16(fp)
 8019138:	00c00044 	movi	r3,1
 801913c:	10c00405 	stb	r3,16(r2)
 8019140:	00000206 	br	801914c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8019144:	e0bffc17 	ldw	r2,-16(fp)
 8019148:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801914c:	e0bffc17 	ldw	r2,-16(fp)
 8019150:	d0e01404 	addi	r3,gp,-32688
 8019154:	e0fffa15 	stw	r3,-24(fp)
 8019158:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801915c:	e0bffb17 	ldw	r2,-20(fp)
 8019160:	e0fffa17 	ldw	r3,-24(fp)
 8019164:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8019168:	e0bffa17 	ldw	r2,-24(fp)
 801916c:	10c00017 	ldw	r3,0(r2)
 8019170:	e0bffb17 	ldw	r2,-20(fp)
 8019174:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8019178:	e0bffa17 	ldw	r2,-24(fp)
 801917c:	10800017 	ldw	r2,0(r2)
 8019180:	e0fffb17 	ldw	r3,-20(fp)
 8019184:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8019188:	e0bffa17 	ldw	r2,-24(fp)
 801918c:	e0fffb17 	ldw	r3,-20(fp)
 8019190:	10c00015 	stw	r3,0(r2)
 8019194:	e0bff817 	ldw	r2,-32(fp)
 8019198:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801919c:	e0bff717 	ldw	r2,-36(fp)
 80191a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80191a4:	0005883a 	mov	r2,zero
 80191a8:	00000306 	br	80191b8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80191ac:	00bffa84 	movi	r2,-22
 80191b0:	00000106 	br	80191b8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80191b4:	00bfde84 	movi	r2,-134
  }
}
 80191b8:	e037883a 	mov	sp,fp
 80191bc:	df000017 	ldw	fp,0(sp)
 80191c0:	dec00104 	addi	sp,sp,4
 80191c4:	f800283a 	ret

080191c8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 80191c8:	defffd04 	addi	sp,sp,-12
 80191cc:	df000215 	stw	fp,8(sp)
 80191d0:	df000204 	addi	fp,sp,8
 80191d4:	e13ffe15 	stw	r4,-8(fp)
 80191d8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80191dc:	0001883a 	nop
 80191e0:	e037883a 	mov	sp,fp
 80191e4:	df000017 	ldw	fp,0(sp)
 80191e8:	dec00104 	addi	sp,sp,4
 80191ec:	f800283a 	ret

080191f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80191f0:	deffff04 	addi	sp,sp,-4
 80191f4:	df000015 	stw	fp,0(sp)
 80191f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80191fc:	0001883a 	nop
 8019200:	e037883a 	mov	sp,fp
 8019204:	df000017 	ldw	fp,0(sp)
 8019208:	dec00104 	addi	sp,sp,4
 801920c:	f800283a 	ret

08019210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019210:	defffe04 	addi	sp,sp,-8
 8019214:	dfc00115 	stw	ra,4(sp)
 8019218:	df000015 	stw	fp,0(sp)
 801921c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019220:	d0a00f17 	ldw	r2,-32708(gp)
 8019224:	10000326 	beq	r2,zero,8019234 <alt_get_errno+0x24>
 8019228:	d0a00f17 	ldw	r2,-32708(gp)
 801922c:	103ee83a 	callr	r2
 8019230:	00000106 	br	8019238 <alt_get_errno+0x28>
 8019234:	d0a8b004 	addi	r2,gp,-23872
}
 8019238:	e037883a 	mov	sp,fp
 801923c:	dfc00117 	ldw	ra,4(sp)
 8019240:	df000017 	ldw	fp,0(sp)
 8019244:	dec00204 	addi	sp,sp,8
 8019248:	f800283a 	ret

0801924c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 801924c:	defffa04 	addi	sp,sp,-24
 8019250:	dfc00515 	stw	ra,20(sp)
 8019254:	df000415 	stw	fp,16(sp)
 8019258:	df000404 	addi	fp,sp,16
 801925c:	e13ffe15 	stw	r4,-8(fp)
 8019260:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8019264:	e0bffe17 	ldw	r2,-8(fp)
 8019268:	10000326 	beq	r2,zero,8019278 <alt_dev_llist_insert+0x2c>
 801926c:	e0bffe17 	ldw	r2,-8(fp)
 8019270:	10800217 	ldw	r2,8(r2)
 8019274:	1000061e 	bne	r2,zero,8019290 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8019278:	80192100 	call	8019210 <alt_get_errno>
 801927c:	1007883a 	mov	r3,r2
 8019280:	00800584 	movi	r2,22
 8019284:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8019288:	00bffa84 	movi	r2,-22
 801928c:	00001306 	br	80192dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8019290:	e0bffe17 	ldw	r2,-8(fp)
 8019294:	e0ffff17 	ldw	r3,-4(fp)
 8019298:	e0fffc15 	stw	r3,-16(fp)
 801929c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80192a0:	e0bffd17 	ldw	r2,-12(fp)
 80192a4:	e0fffc17 	ldw	r3,-16(fp)
 80192a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80192ac:	e0bffc17 	ldw	r2,-16(fp)
 80192b0:	10c00017 	ldw	r3,0(r2)
 80192b4:	e0bffd17 	ldw	r2,-12(fp)
 80192b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80192bc:	e0bffc17 	ldw	r2,-16(fp)
 80192c0:	10800017 	ldw	r2,0(r2)
 80192c4:	e0fffd17 	ldw	r3,-12(fp)
 80192c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80192cc:	e0bffc17 	ldw	r2,-16(fp)
 80192d0:	e0fffd17 	ldw	r3,-12(fp)
 80192d4:	10c00015 	stw	r3,0(r2)

  return 0;  
 80192d8:	0005883a 	mov	r2,zero
}
 80192dc:	e037883a 	mov	sp,fp
 80192e0:	dfc00117 	ldw	ra,4(sp)
 80192e4:	df000017 	ldw	fp,0(sp)
 80192e8:	dec00204 	addi	sp,sp,8
 80192ec:	f800283a 	ret

080192f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80192f0:	defffd04 	addi	sp,sp,-12
 80192f4:	dfc00215 	stw	ra,8(sp)
 80192f8:	df000115 	stw	fp,4(sp)
 80192fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8019300:	008200b4 	movhi	r2,2050
 8019304:	10a79304 	addi	r2,r2,-25012
 8019308:	e0bfff15 	stw	r2,-4(fp)
 801930c:	00000606 	br	8019328 <_do_ctors+0x38>
        (*ctor) (); 
 8019310:	e0bfff17 	ldw	r2,-4(fp)
 8019314:	10800017 	ldw	r2,0(r2)
 8019318:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801931c:	e0bfff17 	ldw	r2,-4(fp)
 8019320:	10bfff04 	addi	r2,r2,-4
 8019324:	e0bfff15 	stw	r2,-4(fp)
 8019328:	e0ffff17 	ldw	r3,-4(fp)
 801932c:	008200b4 	movhi	r2,2050
 8019330:	10a79404 	addi	r2,r2,-25008
 8019334:	18bff62e 	bgeu	r3,r2,8019310 <_do_ctors+0x20>
        (*ctor) (); 
}
 8019338:	0001883a 	nop
 801933c:	e037883a 	mov	sp,fp
 8019340:	dfc00117 	ldw	ra,4(sp)
 8019344:	df000017 	ldw	fp,0(sp)
 8019348:	dec00204 	addi	sp,sp,8
 801934c:	f800283a 	ret

08019350 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8019350:	defffd04 	addi	sp,sp,-12
 8019354:	dfc00215 	stw	ra,8(sp)
 8019358:	df000115 	stw	fp,4(sp)
 801935c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8019360:	008200b4 	movhi	r2,2050
 8019364:	10a79304 	addi	r2,r2,-25012
 8019368:	e0bfff15 	stw	r2,-4(fp)
 801936c:	00000606 	br	8019388 <_do_dtors+0x38>
        (*dtor) (); 
 8019370:	e0bfff17 	ldw	r2,-4(fp)
 8019374:	10800017 	ldw	r2,0(r2)
 8019378:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801937c:	e0bfff17 	ldw	r2,-4(fp)
 8019380:	10bfff04 	addi	r2,r2,-4
 8019384:	e0bfff15 	stw	r2,-4(fp)
 8019388:	e0ffff17 	ldw	r3,-4(fp)
 801938c:	008200b4 	movhi	r2,2050
 8019390:	10a79404 	addi	r2,r2,-25008
 8019394:	18bff62e 	bgeu	r3,r2,8019370 <_do_dtors+0x20>
        (*dtor) (); 
}
 8019398:	0001883a 	nop
 801939c:	e037883a 	mov	sp,fp
 80193a0:	dfc00117 	ldw	ra,4(sp)
 80193a4:	df000017 	ldw	fp,0(sp)
 80193a8:	dec00204 	addi	sp,sp,8
 80193ac:	f800283a 	ret

080193b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80193b0:	defffa04 	addi	sp,sp,-24
 80193b4:	dfc00515 	stw	ra,20(sp)
 80193b8:	df000415 	stw	fp,16(sp)
 80193bc:	df000404 	addi	fp,sp,16
 80193c0:	e13ffe15 	stw	r4,-8(fp)
 80193c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80193c8:	e0bfff17 	ldw	r2,-4(fp)
 80193cc:	10800017 	ldw	r2,0(r2)
 80193d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80193d4:	e13ffe17 	ldw	r4,-8(fp)
 80193d8:	8009eac0 	call	8009eac <strlen>
 80193dc:	10800044 	addi	r2,r2,1
 80193e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80193e4:	00000d06 	br	801941c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80193e8:	e0bffc17 	ldw	r2,-16(fp)
 80193ec:	10800217 	ldw	r2,8(r2)
 80193f0:	e0fffd17 	ldw	r3,-12(fp)
 80193f4:	180d883a 	mov	r6,r3
 80193f8:	e17ffe17 	ldw	r5,-8(fp)
 80193fc:	1009883a 	mov	r4,r2
 8019400:	80199a00 	call	80199a0 <memcmp>
 8019404:	1000021e 	bne	r2,zero,8019410 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8019408:	e0bffc17 	ldw	r2,-16(fp)
 801940c:	00000706 	br	801942c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8019410:	e0bffc17 	ldw	r2,-16(fp)
 8019414:	10800017 	ldw	r2,0(r2)
 8019418:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801941c:	e0fffc17 	ldw	r3,-16(fp)
 8019420:	e0bfff17 	ldw	r2,-4(fp)
 8019424:	18bff01e 	bne	r3,r2,80193e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8019428:	0005883a 	mov	r2,zero
}
 801942c:	e037883a 	mov	sp,fp
 8019430:	dfc00117 	ldw	ra,4(sp)
 8019434:	df000017 	ldw	fp,0(sp)
 8019438:	dec00204 	addi	sp,sp,8
 801943c:	f800283a 	ret

08019440 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8019440:	defffb04 	addi	sp,sp,-20
 8019444:	dfc00415 	stw	ra,16(sp)
 8019448:	df000315 	stw	fp,12(sp)
 801944c:	df000304 	addi	fp,sp,12
 8019450:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8019454:	d0a00a17 	ldw	r2,-32728(gp)
 8019458:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801945c:	00003106 	br	8019524 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8019460:	e0bffd17 	ldw	r2,-12(fp)
 8019464:	10800217 	ldw	r2,8(r2)
 8019468:	1009883a 	mov	r4,r2
 801946c:	8009eac0 	call	8009eac <strlen>
 8019470:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8019474:	e0bffd17 	ldw	r2,-12(fp)
 8019478:	10c00217 	ldw	r3,8(r2)
 801947c:	e0bffe17 	ldw	r2,-8(fp)
 8019480:	10bfffc4 	addi	r2,r2,-1
 8019484:	1885883a 	add	r2,r3,r2
 8019488:	10800003 	ldbu	r2,0(r2)
 801948c:	10803fcc 	andi	r2,r2,255
 8019490:	1080201c 	xori	r2,r2,128
 8019494:	10bfe004 	addi	r2,r2,-128
 8019498:	10800bd8 	cmpnei	r2,r2,47
 801949c:	1000031e 	bne	r2,zero,80194ac <alt_find_file+0x6c>
    {
      len -= 1;
 80194a0:	e0bffe17 	ldw	r2,-8(fp)
 80194a4:	10bfffc4 	addi	r2,r2,-1
 80194a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80194ac:	e0bffe17 	ldw	r2,-8(fp)
 80194b0:	e0ffff17 	ldw	r3,-4(fp)
 80194b4:	1885883a 	add	r2,r3,r2
 80194b8:	10800003 	ldbu	r2,0(r2)
 80194bc:	10803fcc 	andi	r2,r2,255
 80194c0:	1080201c 	xori	r2,r2,128
 80194c4:	10bfe004 	addi	r2,r2,-128
 80194c8:	10800be0 	cmpeqi	r2,r2,47
 80194cc:	1000081e 	bne	r2,zero,80194f0 <alt_find_file+0xb0>
 80194d0:	e0bffe17 	ldw	r2,-8(fp)
 80194d4:	e0ffff17 	ldw	r3,-4(fp)
 80194d8:	1885883a 	add	r2,r3,r2
 80194dc:	10800003 	ldbu	r2,0(r2)
 80194e0:	10803fcc 	andi	r2,r2,255
 80194e4:	1080201c 	xori	r2,r2,128
 80194e8:	10bfe004 	addi	r2,r2,-128
 80194ec:	10000a1e 	bne	r2,zero,8019518 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80194f0:	e0bffd17 	ldw	r2,-12(fp)
 80194f4:	10800217 	ldw	r2,8(r2)
 80194f8:	e0fffe17 	ldw	r3,-8(fp)
 80194fc:	180d883a 	mov	r6,r3
 8019500:	e17fff17 	ldw	r5,-4(fp)
 8019504:	1009883a 	mov	r4,r2
 8019508:	80199a00 	call	80199a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801950c:	1000021e 	bne	r2,zero,8019518 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8019510:	e0bffd17 	ldw	r2,-12(fp)
 8019514:	00000706 	br	8019534 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8019518:	e0bffd17 	ldw	r2,-12(fp)
 801951c:	10800017 	ldw	r2,0(r2)
 8019520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8019524:	e0fffd17 	ldw	r3,-12(fp)
 8019528:	d0a00a04 	addi	r2,gp,-32728
 801952c:	18bfcc1e 	bne	r3,r2,8019460 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8019530:	0005883a 	mov	r2,zero
}
 8019534:	e037883a 	mov	sp,fp
 8019538:	dfc00117 	ldw	ra,4(sp)
 801953c:	df000017 	ldw	fp,0(sp)
 8019540:	dec00204 	addi	sp,sp,8
 8019544:	f800283a 	ret

08019548 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8019548:	defffa04 	addi	sp,sp,-24
 801954c:	dfc00515 	stw	ra,20(sp)
 8019550:	df000415 	stw	fp,16(sp)
 8019554:	dc000315 	stw	r16,12(sp)
 8019558:	df000404 	addi	fp,sp,16
 801955c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8019560:	00bffa04 	movi	r2,-24
 8019564:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8019568:	e03ffc15 	stw	zero,-16(fp)
 801956c:	00001d06 	br	80195e4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8019570:	040200b4 	movhi	r16,2050
 8019574:	842c5904 	addi	r16,r16,-20124
 8019578:	e0bffc17 	ldw	r2,-16(fp)
 801957c:	01400304 	movi	r5,12
 8019580:	1009883a 	mov	r4,r2
 8019584:	80086340 	call	8008634 <__mulsi3>
 8019588:	8085883a 	add	r2,r16,r2
 801958c:	10800017 	ldw	r2,0(r2)
 8019590:	1000111e 	bne	r2,zero,80195d8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8019594:	040200b4 	movhi	r16,2050
 8019598:	842c5904 	addi	r16,r16,-20124
 801959c:	e0bffc17 	ldw	r2,-16(fp)
 80195a0:	01400304 	movi	r5,12
 80195a4:	1009883a 	mov	r4,r2
 80195a8:	80086340 	call	8008634 <__mulsi3>
 80195ac:	8085883a 	add	r2,r16,r2
 80195b0:	e0fffe17 	ldw	r3,-8(fp)
 80195b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80195b8:	d0e00e17 	ldw	r3,-32712(gp)
 80195bc:	e0bffc17 	ldw	r2,-16(fp)
 80195c0:	1880020e 	bge	r3,r2,80195cc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80195c4:	e0bffc17 	ldw	r2,-16(fp)
 80195c8:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 80195cc:	e0bffc17 	ldw	r2,-16(fp)
 80195d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80195d4:	00000606 	br	80195f0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80195d8:	e0bffc17 	ldw	r2,-16(fp)
 80195dc:	10800044 	addi	r2,r2,1
 80195e0:	e0bffc15 	stw	r2,-16(fp)
 80195e4:	e0bffc17 	ldw	r2,-16(fp)
 80195e8:	10800810 	cmplti	r2,r2,32
 80195ec:	103fe01e 	bne	r2,zero,8019570 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80195f0:	e0bffd17 	ldw	r2,-12(fp)
}
 80195f4:	e6ffff04 	addi	sp,fp,-4
 80195f8:	dfc00217 	ldw	ra,8(sp)
 80195fc:	df000117 	ldw	fp,4(sp)
 8019600:	dc000017 	ldw	r16,0(sp)
 8019604:	dec00304 	addi	sp,sp,12
 8019608:	f800283a 	ret

0801960c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801960c:	deffff04 	addi	sp,sp,-4
 8019610:	df000015 	stw	fp,0(sp)
 8019614:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8019618:	0001883a 	nop
 801961c:	e037883a 	mov	sp,fp
 8019620:	df000017 	ldw	fp,0(sp)
 8019624:	dec00104 	addi	sp,sp,4
 8019628:	f800283a 	ret

0801962c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801962c:	defff804 	addi	sp,sp,-32
 8019630:	dfc00715 	stw	ra,28(sp)
 8019634:	df000615 	stw	fp,24(sp)
 8019638:	dc000515 	stw	r16,20(sp)
 801963c:	df000604 	addi	fp,sp,24
 8019640:	e13ffb15 	stw	r4,-20(fp)
 8019644:	e17ffc15 	stw	r5,-16(fp)
 8019648:	e1bffd15 	stw	r6,-12(fp)
 801964c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8019650:	e1bffe17 	ldw	r6,-8(fp)
 8019654:	e17ffd17 	ldw	r5,-12(fp)
 8019658:	e13ffc17 	ldw	r4,-16(fp)
 801965c:	80166140 	call	8016614 <open>
 8019660:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8019664:	e0bffa17 	ldw	r2,-24(fp)
 8019668:	10002216 	blt	r2,zero,80196f4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801966c:	040200b4 	movhi	r16,2050
 8019670:	842c5904 	addi	r16,r16,-20124
 8019674:	e0bffa17 	ldw	r2,-24(fp)
 8019678:	01400304 	movi	r5,12
 801967c:	1009883a 	mov	r4,r2
 8019680:	80086340 	call	8008634 <__mulsi3>
 8019684:	8085883a 	add	r2,r16,r2
 8019688:	10c00017 	ldw	r3,0(r2)
 801968c:	e0bffb17 	ldw	r2,-20(fp)
 8019690:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8019694:	040200b4 	movhi	r16,2050
 8019698:	842c5904 	addi	r16,r16,-20124
 801969c:	e0bffa17 	ldw	r2,-24(fp)
 80196a0:	01400304 	movi	r5,12
 80196a4:	1009883a 	mov	r4,r2
 80196a8:	80086340 	call	8008634 <__mulsi3>
 80196ac:	8085883a 	add	r2,r16,r2
 80196b0:	10800104 	addi	r2,r2,4
 80196b4:	10c00017 	ldw	r3,0(r2)
 80196b8:	e0bffb17 	ldw	r2,-20(fp)
 80196bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80196c0:	040200b4 	movhi	r16,2050
 80196c4:	842c5904 	addi	r16,r16,-20124
 80196c8:	e0bffa17 	ldw	r2,-24(fp)
 80196cc:	01400304 	movi	r5,12
 80196d0:	1009883a 	mov	r4,r2
 80196d4:	80086340 	call	8008634 <__mulsi3>
 80196d8:	8085883a 	add	r2,r16,r2
 80196dc:	10800204 	addi	r2,r2,8
 80196e0:	10c00017 	ldw	r3,0(r2)
 80196e4:	e0bffb17 	ldw	r2,-20(fp)
 80196e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80196ec:	e13ffa17 	ldw	r4,-24(fp)
 80196f0:	8016b180 	call	8016b18 <alt_release_fd>
  }
} 
 80196f4:	0001883a 	nop
 80196f8:	e6ffff04 	addi	sp,fp,-4
 80196fc:	dfc00217 	ldw	ra,8(sp)
 8019700:	df000117 	ldw	fp,4(sp)
 8019704:	dc000017 	ldw	r16,0(sp)
 8019708:	dec00304 	addi	sp,sp,12
 801970c:	f800283a 	ret

08019710 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8019710:	defffb04 	addi	sp,sp,-20
 8019714:	dfc00415 	stw	ra,16(sp)
 8019718:	df000315 	stw	fp,12(sp)
 801971c:	df000304 	addi	fp,sp,12
 8019720:	e13ffd15 	stw	r4,-12(fp)
 8019724:	e17ffe15 	stw	r5,-8(fp)
 8019728:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801972c:	01c07fc4 	movi	r7,511
 8019730:	01800044 	movi	r6,1
 8019734:	e17ffd17 	ldw	r5,-12(fp)
 8019738:	010200b4 	movhi	r4,2050
 801973c:	212c5c04 	addi	r4,r4,-20112
 8019740:	801962c0 	call	801962c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8019744:	01c07fc4 	movi	r7,511
 8019748:	000d883a 	mov	r6,zero
 801974c:	e17ffe17 	ldw	r5,-8(fp)
 8019750:	010200b4 	movhi	r4,2050
 8019754:	212c5904 	addi	r4,r4,-20124
 8019758:	801962c0 	call	801962c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801975c:	01c07fc4 	movi	r7,511
 8019760:	01800044 	movi	r6,1
 8019764:	e17fff17 	ldw	r5,-4(fp)
 8019768:	010200b4 	movhi	r4,2050
 801976c:	212c5f04 	addi	r4,r4,-20100
 8019770:	801962c0 	call	801962c <alt_open_fd>
}  
 8019774:	0001883a 	nop
 8019778:	e037883a 	mov	sp,fp
 801977c:	dfc00117 	ldw	ra,4(sp)
 8019780:	df000017 	ldw	fp,0(sp)
 8019784:	dec00204 	addi	sp,sp,8
 8019788:	f800283a 	ret

0801978c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801978c:	defffa04 	addi	sp,sp,-24
 8019790:	df000515 	stw	fp,20(sp)
 8019794:	df000504 	addi	fp,sp,20
 8019798:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801979c:	0005303a 	rdctl	r2,status
 80197a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80197a4:	e0fffc17 	ldw	r3,-16(fp)
 80197a8:	00bfff84 	movi	r2,-2
 80197ac:	1884703a 	and	r2,r3,r2
 80197b0:	1001703a 	wrctl	status,r2
  
  return context;
 80197b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80197b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80197bc:	e0bfff17 	ldw	r2,-4(fp)
 80197c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80197c4:	e0bffd17 	ldw	r2,-12(fp)
 80197c8:	10800017 	ldw	r2,0(r2)
 80197cc:	e0fffd17 	ldw	r3,-12(fp)
 80197d0:	18c00117 	ldw	r3,4(r3)
 80197d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80197d8:	e0bffd17 	ldw	r2,-12(fp)
 80197dc:	10800117 	ldw	r2,4(r2)
 80197e0:	e0fffd17 	ldw	r3,-12(fp)
 80197e4:	18c00017 	ldw	r3,0(r3)
 80197e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80197ec:	e0bffd17 	ldw	r2,-12(fp)
 80197f0:	e0fffd17 	ldw	r3,-12(fp)
 80197f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80197f8:	e0bffd17 	ldw	r2,-12(fp)
 80197fc:	e0fffd17 	ldw	r3,-12(fp)
 8019800:	10c00015 	stw	r3,0(r2)
 8019804:	e0bffb17 	ldw	r2,-20(fp)
 8019808:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801980c:	e0bffe17 	ldw	r2,-8(fp)
 8019810:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8019814:	0001883a 	nop
 8019818:	e037883a 	mov	sp,fp
 801981c:	df000017 	ldw	fp,0(sp)
 8019820:	dec00104 	addi	sp,sp,4
 8019824:	f800283a 	ret

08019828 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8019828:	defffb04 	addi	sp,sp,-20
 801982c:	dfc00415 	stw	ra,16(sp)
 8019830:	df000315 	stw	fp,12(sp)
 8019834:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8019838:	d0a01417 	ldw	r2,-32688(gp)
 801983c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8019840:	d0a8bc17 	ldw	r2,-23824(gp)
 8019844:	10800044 	addi	r2,r2,1
 8019848:	d0a8bc15 	stw	r2,-23824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801984c:	00002e06 	br	8019908 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8019850:	e0bffd17 	ldw	r2,-12(fp)
 8019854:	10800017 	ldw	r2,0(r2)
 8019858:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801985c:	e0bffd17 	ldw	r2,-12(fp)
 8019860:	10800403 	ldbu	r2,16(r2)
 8019864:	10803fcc 	andi	r2,r2,255
 8019868:	10000426 	beq	r2,zero,801987c <alt_tick+0x54>
 801986c:	d0a8bc17 	ldw	r2,-23824(gp)
 8019870:	1000021e 	bne	r2,zero,801987c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8019874:	e0bffd17 	ldw	r2,-12(fp)
 8019878:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801987c:	e0bffd17 	ldw	r2,-12(fp)
 8019880:	10800217 	ldw	r2,8(r2)
 8019884:	d0e8bc17 	ldw	r3,-23824(gp)
 8019888:	18801d36 	bltu	r3,r2,8019900 <alt_tick+0xd8>
 801988c:	e0bffd17 	ldw	r2,-12(fp)
 8019890:	10800403 	ldbu	r2,16(r2)
 8019894:	10803fcc 	andi	r2,r2,255
 8019898:	1000191e 	bne	r2,zero,8019900 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801989c:	e0bffd17 	ldw	r2,-12(fp)
 80198a0:	10800317 	ldw	r2,12(r2)
 80198a4:	e0fffd17 	ldw	r3,-12(fp)
 80198a8:	18c00517 	ldw	r3,20(r3)
 80198ac:	1809883a 	mov	r4,r3
 80198b0:	103ee83a 	callr	r2
 80198b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80198b8:	e0bfff17 	ldw	r2,-4(fp)
 80198bc:	1000031e 	bne	r2,zero,80198cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80198c0:	e13ffd17 	ldw	r4,-12(fp)
 80198c4:	801978c0 	call	801978c <alt_alarm_stop>
 80198c8:	00000d06 	br	8019900 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80198cc:	e0bffd17 	ldw	r2,-12(fp)
 80198d0:	10c00217 	ldw	r3,8(r2)
 80198d4:	e0bfff17 	ldw	r2,-4(fp)
 80198d8:	1887883a 	add	r3,r3,r2
 80198dc:	e0bffd17 	ldw	r2,-12(fp)
 80198e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80198e4:	e0bffd17 	ldw	r2,-12(fp)
 80198e8:	10c00217 	ldw	r3,8(r2)
 80198ec:	d0a8bc17 	ldw	r2,-23824(gp)
 80198f0:	1880032e 	bgeu	r3,r2,8019900 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80198f4:	e0bffd17 	ldw	r2,-12(fp)
 80198f8:	00c00044 	movi	r3,1
 80198fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8019900:	e0bffe17 	ldw	r2,-8(fp)
 8019904:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8019908:	e0fffd17 	ldw	r3,-12(fp)
 801990c:	d0a01404 	addi	r2,gp,-32688
 8019910:	18bfcf1e 	bne	r3,r2,8019850 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8019914:	0001883a 	nop
}
 8019918:	0001883a 	nop
 801991c:	e037883a 	mov	sp,fp
 8019920:	dfc00117 	ldw	ra,4(sp)
 8019924:	df000017 	ldw	fp,0(sp)
 8019928:	dec00204 	addi	sp,sp,8
 801992c:	f800283a 	ret

08019930 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8019930:	deffff04 	addi	sp,sp,-4
 8019934:	df000015 	stw	fp,0(sp)
 8019938:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801993c:	000170fa 	wrctl	ienable,zero
}
 8019940:	0001883a 	nop
 8019944:	e037883a 	mov	sp,fp
 8019948:	df000017 	ldw	fp,0(sp)
 801994c:	dec00104 	addi	sp,sp,4
 8019950:	f800283a 	ret

08019954 <atexit>:
 8019954:	200b883a 	mov	r5,r4
 8019958:	000f883a 	mov	r7,zero
 801995c:	000d883a 	mov	r6,zero
 8019960:	0009883a 	mov	r4,zero
 8019964:	8019b841 	jmpi	8019b84 <__register_exitproc>

08019968 <exit>:
 8019968:	defffe04 	addi	sp,sp,-8
 801996c:	000b883a 	mov	r5,zero
 8019970:	dc000015 	stw	r16,0(sp)
 8019974:	dfc00115 	stw	ra,4(sp)
 8019978:	2021883a 	mov	r16,r4
 801997c:	8019c9c0 	call	8019c9c <__call_exitprocs>
 8019980:	008200b4 	movhi	r2,2050
 8019984:	10b14a04 	addi	r2,r2,-15064
 8019988:	11000017 	ldw	r4,0(r2)
 801998c:	20800f17 	ldw	r2,60(r4)
 8019990:	10000126 	beq	r2,zero,8019998 <exit+0x30>
 8019994:	103ee83a 	callr	r2
 8019998:	8009883a 	mov	r4,r16
 801999c:	8019e1c0 	call	8019e1c <_exit>

080199a0 <memcmp>:
 80199a0:	01c000c4 	movi	r7,3
 80199a4:	3980192e 	bgeu	r7,r6,8019a0c <memcmp+0x6c>
 80199a8:	2144b03a 	or	r2,r4,r5
 80199ac:	11c4703a 	and	r2,r2,r7
 80199b0:	10000f26 	beq	r2,zero,80199f0 <memcmp+0x50>
 80199b4:	20800003 	ldbu	r2,0(r4)
 80199b8:	28c00003 	ldbu	r3,0(r5)
 80199bc:	10c0151e 	bne	r2,r3,8019a14 <memcmp+0x74>
 80199c0:	31bfff84 	addi	r6,r6,-2
 80199c4:	01ffffc4 	movi	r7,-1
 80199c8:	00000406 	br	80199dc <memcmp+0x3c>
 80199cc:	20800003 	ldbu	r2,0(r4)
 80199d0:	28c00003 	ldbu	r3,0(r5)
 80199d4:	31bfffc4 	addi	r6,r6,-1
 80199d8:	10c00e1e 	bne	r2,r3,8019a14 <memcmp+0x74>
 80199dc:	21000044 	addi	r4,r4,1
 80199e0:	29400044 	addi	r5,r5,1
 80199e4:	31fff91e 	bne	r6,r7,80199cc <memcmp+0x2c>
 80199e8:	0005883a 	mov	r2,zero
 80199ec:	f800283a 	ret
 80199f0:	20c00017 	ldw	r3,0(r4)
 80199f4:	28800017 	ldw	r2,0(r5)
 80199f8:	18bfee1e 	bne	r3,r2,80199b4 <memcmp+0x14>
 80199fc:	31bfff04 	addi	r6,r6,-4
 8019a00:	21000104 	addi	r4,r4,4
 8019a04:	29400104 	addi	r5,r5,4
 8019a08:	39bff936 	bltu	r7,r6,80199f0 <memcmp+0x50>
 8019a0c:	303fe91e 	bne	r6,zero,80199b4 <memcmp+0x14>
 8019a10:	003ff506 	br	80199e8 <memcmp+0x48>
 8019a14:	10c5c83a 	sub	r2,r2,r3
 8019a18:	f800283a 	ret

08019a1c <_putc_r>:
 8019a1c:	defffc04 	addi	sp,sp,-16
 8019a20:	dc000215 	stw	r16,8(sp)
 8019a24:	dfc00315 	stw	ra,12(sp)
 8019a28:	2021883a 	mov	r16,r4
 8019a2c:	20000226 	beq	r4,zero,8019a38 <_putc_r+0x1c>
 8019a30:	20800e17 	ldw	r2,56(r4)
 8019a34:	10001b26 	beq	r2,zero,8019aa4 <_putc_r+0x88>
 8019a38:	30800217 	ldw	r2,8(r6)
 8019a3c:	10bfffc4 	addi	r2,r2,-1
 8019a40:	30800215 	stw	r2,8(r6)
 8019a44:	10000a16 	blt	r2,zero,8019a70 <_putc_r+0x54>
 8019a48:	30800017 	ldw	r2,0(r6)
 8019a4c:	11400005 	stb	r5,0(r2)
 8019a50:	30800017 	ldw	r2,0(r6)
 8019a54:	10c00044 	addi	r3,r2,1
 8019a58:	30c00015 	stw	r3,0(r6)
 8019a5c:	10800003 	ldbu	r2,0(r2)
 8019a60:	dfc00317 	ldw	ra,12(sp)
 8019a64:	dc000217 	ldw	r16,8(sp)
 8019a68:	dec00404 	addi	sp,sp,16
 8019a6c:	f800283a 	ret
 8019a70:	30c00617 	ldw	r3,24(r6)
 8019a74:	10c00616 	blt	r2,r3,8019a90 <_putc_r+0x74>
 8019a78:	30800017 	ldw	r2,0(r6)
 8019a7c:	00c00284 	movi	r3,10
 8019a80:	11400005 	stb	r5,0(r2)
 8019a84:	30800017 	ldw	r2,0(r6)
 8019a88:	11400003 	ldbu	r5,0(r2)
 8019a8c:	28fff11e 	bne	r5,r3,8019a54 <_putc_r+0x38>
 8019a90:	8009883a 	mov	r4,r16
 8019a94:	dfc00317 	ldw	ra,12(sp)
 8019a98:	dc000217 	ldw	r16,8(sp)
 8019a9c:	dec00404 	addi	sp,sp,16
 8019aa0:	80125b41 	jmpi	80125b4 <__swbuf_r>
 8019aa4:	d9400015 	stw	r5,0(sp)
 8019aa8:	d9800115 	stw	r6,4(sp)
 8019aac:	800e3b80 	call	800e3b8 <__sinit>
 8019ab0:	d9800117 	ldw	r6,4(sp)
 8019ab4:	d9400017 	ldw	r5,0(sp)
 8019ab8:	003fdf06 	br	8019a38 <_putc_r+0x1c>

08019abc <putc>:
 8019abc:	008200b4 	movhi	r2,2050
 8019ac0:	defffc04 	addi	sp,sp,-16
 8019ac4:	10b14b04 	addi	r2,r2,-15060
 8019ac8:	dc000115 	stw	r16,4(sp)
 8019acc:	14000017 	ldw	r16,0(r2)
 8019ad0:	dc400215 	stw	r17,8(sp)
 8019ad4:	dfc00315 	stw	ra,12(sp)
 8019ad8:	2023883a 	mov	r17,r4
 8019adc:	80000226 	beq	r16,zero,8019ae8 <putc+0x2c>
 8019ae0:	80800e17 	ldw	r2,56(r16)
 8019ae4:	10001a26 	beq	r2,zero,8019b50 <putc+0x94>
 8019ae8:	28800217 	ldw	r2,8(r5)
 8019aec:	10bfffc4 	addi	r2,r2,-1
 8019af0:	28800215 	stw	r2,8(r5)
 8019af4:	10000b16 	blt	r2,zero,8019b24 <putc+0x68>
 8019af8:	28800017 	ldw	r2,0(r5)
 8019afc:	14400005 	stb	r17,0(r2)
 8019b00:	28800017 	ldw	r2,0(r5)
 8019b04:	10c00044 	addi	r3,r2,1
 8019b08:	28c00015 	stw	r3,0(r5)
 8019b0c:	10800003 	ldbu	r2,0(r2)
 8019b10:	dfc00317 	ldw	ra,12(sp)
 8019b14:	dc400217 	ldw	r17,8(sp)
 8019b18:	dc000117 	ldw	r16,4(sp)
 8019b1c:	dec00404 	addi	sp,sp,16
 8019b20:	f800283a 	ret
 8019b24:	28c00617 	ldw	r3,24(r5)
 8019b28:	10c00e16 	blt	r2,r3,8019b64 <putc+0xa8>
 8019b2c:	28800017 	ldw	r2,0(r5)
 8019b30:	01000284 	movi	r4,10
 8019b34:	14400005 	stb	r17,0(r2)
 8019b38:	28800017 	ldw	r2,0(r5)
 8019b3c:	10c00003 	ldbu	r3,0(r2)
 8019b40:	193ff01e 	bne	r3,r4,8019b04 <putc+0x48>
 8019b44:	280d883a 	mov	r6,r5
 8019b48:	180b883a 	mov	r5,r3
 8019b4c:	00000706 	br	8019b6c <putc+0xb0>
 8019b50:	8009883a 	mov	r4,r16
 8019b54:	d9400015 	stw	r5,0(sp)
 8019b58:	800e3b80 	call	800e3b8 <__sinit>
 8019b5c:	d9400017 	ldw	r5,0(sp)
 8019b60:	003fe106 	br	8019ae8 <putc+0x2c>
 8019b64:	280d883a 	mov	r6,r5
 8019b68:	880b883a 	mov	r5,r17
 8019b6c:	8009883a 	mov	r4,r16
 8019b70:	dfc00317 	ldw	ra,12(sp)
 8019b74:	dc400217 	ldw	r17,8(sp)
 8019b78:	dc000117 	ldw	r16,4(sp)
 8019b7c:	dec00404 	addi	sp,sp,16
 8019b80:	80125b41 	jmpi	80125b4 <__swbuf_r>

08019b84 <__register_exitproc>:
 8019b84:	defffa04 	addi	sp,sp,-24
 8019b88:	dc000315 	stw	r16,12(sp)
 8019b8c:	040200b4 	movhi	r16,2050
 8019b90:	84314a04 	addi	r16,r16,-15064
 8019b94:	80c00017 	ldw	r3,0(r16)
 8019b98:	dc400415 	stw	r17,16(sp)
 8019b9c:	dfc00515 	stw	ra,20(sp)
 8019ba0:	18805217 	ldw	r2,328(r3)
 8019ba4:	2023883a 	mov	r17,r4
 8019ba8:	10003726 	beq	r2,zero,8019c88 <__register_exitproc+0x104>
 8019bac:	10c00117 	ldw	r3,4(r2)
 8019bb0:	010007c4 	movi	r4,31
 8019bb4:	20c00e16 	blt	r4,r3,8019bf0 <__register_exitproc+0x6c>
 8019bb8:	1a000044 	addi	r8,r3,1
 8019bbc:	8800221e 	bne	r17,zero,8019c48 <__register_exitproc+0xc4>
 8019bc0:	18c00084 	addi	r3,r3,2
 8019bc4:	18c7883a 	add	r3,r3,r3
 8019bc8:	18c7883a 	add	r3,r3,r3
 8019bcc:	12000115 	stw	r8,4(r2)
 8019bd0:	10c7883a 	add	r3,r2,r3
 8019bd4:	19400015 	stw	r5,0(r3)
 8019bd8:	0005883a 	mov	r2,zero
 8019bdc:	dfc00517 	ldw	ra,20(sp)
 8019be0:	dc400417 	ldw	r17,16(sp)
 8019be4:	dc000317 	ldw	r16,12(sp)
 8019be8:	dec00604 	addi	sp,sp,24
 8019bec:	f800283a 	ret
 8019bf0:	00800034 	movhi	r2,0
 8019bf4:	10800004 	addi	r2,r2,0
 8019bf8:	10002626 	beq	r2,zero,8019c94 <__register_exitproc+0x110>
 8019bfc:	01006404 	movi	r4,400
 8019c00:	d9400015 	stw	r5,0(sp)
 8019c04:	d9800115 	stw	r6,4(sp)
 8019c08:	d9c00215 	stw	r7,8(sp)
 8019c0c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8019c10:	d9400017 	ldw	r5,0(sp)
 8019c14:	d9800117 	ldw	r6,4(sp)
 8019c18:	d9c00217 	ldw	r7,8(sp)
 8019c1c:	10001d26 	beq	r2,zero,8019c94 <__register_exitproc+0x110>
 8019c20:	81000017 	ldw	r4,0(r16)
 8019c24:	10000115 	stw	zero,4(r2)
 8019c28:	02000044 	movi	r8,1
 8019c2c:	22405217 	ldw	r9,328(r4)
 8019c30:	0007883a 	mov	r3,zero
 8019c34:	12400015 	stw	r9,0(r2)
 8019c38:	20805215 	stw	r2,328(r4)
 8019c3c:	10006215 	stw	zero,392(r2)
 8019c40:	10006315 	stw	zero,396(r2)
 8019c44:	883fde26 	beq	r17,zero,8019bc0 <__register_exitproc+0x3c>
 8019c48:	18c9883a 	add	r4,r3,r3
 8019c4c:	2109883a 	add	r4,r4,r4
 8019c50:	1109883a 	add	r4,r2,r4
 8019c54:	21802215 	stw	r6,136(r4)
 8019c58:	01800044 	movi	r6,1
 8019c5c:	12406217 	ldw	r9,392(r2)
 8019c60:	30cc983a 	sll	r6,r6,r3
 8019c64:	4992b03a 	or	r9,r9,r6
 8019c68:	12406215 	stw	r9,392(r2)
 8019c6c:	21c04215 	stw	r7,264(r4)
 8019c70:	01000084 	movi	r4,2
 8019c74:	893fd21e 	bne	r17,r4,8019bc0 <__register_exitproc+0x3c>
 8019c78:	11006317 	ldw	r4,396(r2)
 8019c7c:	218cb03a 	or	r6,r4,r6
 8019c80:	11806315 	stw	r6,396(r2)
 8019c84:	003fce06 	br	8019bc0 <__register_exitproc+0x3c>
 8019c88:	18805304 	addi	r2,r3,332
 8019c8c:	18805215 	stw	r2,328(r3)
 8019c90:	003fc606 	br	8019bac <__register_exitproc+0x28>
 8019c94:	00bfffc4 	movi	r2,-1
 8019c98:	003fd006 	br	8019bdc <__register_exitproc+0x58>

08019c9c <__call_exitprocs>:
 8019c9c:	defff504 	addi	sp,sp,-44
 8019ca0:	df000915 	stw	fp,36(sp)
 8019ca4:	dd400615 	stw	r21,24(sp)
 8019ca8:	dc800315 	stw	r18,12(sp)
 8019cac:	dfc00a15 	stw	ra,40(sp)
 8019cb0:	ddc00815 	stw	r23,32(sp)
 8019cb4:	dd800715 	stw	r22,28(sp)
 8019cb8:	dd000515 	stw	r20,20(sp)
 8019cbc:	dcc00415 	stw	r19,16(sp)
 8019cc0:	dc400215 	stw	r17,8(sp)
 8019cc4:	dc000115 	stw	r16,4(sp)
 8019cc8:	d9000015 	stw	r4,0(sp)
 8019ccc:	2839883a 	mov	fp,r5
 8019cd0:	04800044 	movi	r18,1
 8019cd4:	057fffc4 	movi	r21,-1
 8019cd8:	008200b4 	movhi	r2,2050
 8019cdc:	10b14a04 	addi	r2,r2,-15064
 8019ce0:	12000017 	ldw	r8,0(r2)
 8019ce4:	45005217 	ldw	r20,328(r8)
 8019ce8:	44c05204 	addi	r19,r8,328
 8019cec:	a0001c26 	beq	r20,zero,8019d60 <__call_exitprocs+0xc4>
 8019cf0:	a0800117 	ldw	r2,4(r20)
 8019cf4:	15ffffc4 	addi	r23,r2,-1
 8019cf8:	b8000d16 	blt	r23,zero,8019d30 <__call_exitprocs+0x94>
 8019cfc:	14000044 	addi	r16,r2,1
 8019d00:	8421883a 	add	r16,r16,r16
 8019d04:	8421883a 	add	r16,r16,r16
 8019d08:	84402004 	addi	r17,r16,128
 8019d0c:	a463883a 	add	r17,r20,r17
 8019d10:	a421883a 	add	r16,r20,r16
 8019d14:	e0001e26 	beq	fp,zero,8019d90 <__call_exitprocs+0xf4>
 8019d18:	80804017 	ldw	r2,256(r16)
 8019d1c:	e0801c26 	beq	fp,r2,8019d90 <__call_exitprocs+0xf4>
 8019d20:	bdffffc4 	addi	r23,r23,-1
 8019d24:	843fff04 	addi	r16,r16,-4
 8019d28:	8c7fff04 	addi	r17,r17,-4
 8019d2c:	bd7ff91e 	bne	r23,r21,8019d14 <__call_exitprocs+0x78>
 8019d30:	00800034 	movhi	r2,0
 8019d34:	10800004 	addi	r2,r2,0
 8019d38:	10000926 	beq	r2,zero,8019d60 <__call_exitprocs+0xc4>
 8019d3c:	a0800117 	ldw	r2,4(r20)
 8019d40:	1000301e 	bne	r2,zero,8019e04 <__call_exitprocs+0x168>
 8019d44:	a0800017 	ldw	r2,0(r20)
 8019d48:	10003226 	beq	r2,zero,8019e14 <__call_exitprocs+0x178>
 8019d4c:	a009883a 	mov	r4,r20
 8019d50:	98800015 	stw	r2,0(r19)
 8019d54:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8019d58:	9d000017 	ldw	r20,0(r19)
 8019d5c:	a03fe41e 	bne	r20,zero,8019cf0 <__call_exitprocs+0x54>
 8019d60:	dfc00a17 	ldw	ra,40(sp)
 8019d64:	df000917 	ldw	fp,36(sp)
 8019d68:	ddc00817 	ldw	r23,32(sp)
 8019d6c:	dd800717 	ldw	r22,28(sp)
 8019d70:	dd400617 	ldw	r21,24(sp)
 8019d74:	dd000517 	ldw	r20,20(sp)
 8019d78:	dcc00417 	ldw	r19,16(sp)
 8019d7c:	dc800317 	ldw	r18,12(sp)
 8019d80:	dc400217 	ldw	r17,8(sp)
 8019d84:	dc000117 	ldw	r16,4(sp)
 8019d88:	dec00b04 	addi	sp,sp,44
 8019d8c:	f800283a 	ret
 8019d90:	a0800117 	ldw	r2,4(r20)
 8019d94:	80c00017 	ldw	r3,0(r16)
 8019d98:	10bfffc4 	addi	r2,r2,-1
 8019d9c:	15c01426 	beq	r2,r23,8019df0 <__call_exitprocs+0x154>
 8019da0:	80000015 	stw	zero,0(r16)
 8019da4:	183fde26 	beq	r3,zero,8019d20 <__call_exitprocs+0x84>
 8019da8:	95c8983a 	sll	r4,r18,r23
 8019dac:	a0806217 	ldw	r2,392(r20)
 8019db0:	a5800117 	ldw	r22,4(r20)
 8019db4:	2084703a 	and	r2,r4,r2
 8019db8:	10000b26 	beq	r2,zero,8019de8 <__call_exitprocs+0x14c>
 8019dbc:	a0806317 	ldw	r2,396(r20)
 8019dc0:	2088703a 	and	r4,r4,r2
 8019dc4:	20000c1e 	bne	r4,zero,8019df8 <__call_exitprocs+0x15c>
 8019dc8:	89400017 	ldw	r5,0(r17)
 8019dcc:	d9000017 	ldw	r4,0(sp)
 8019dd0:	183ee83a 	callr	r3
 8019dd4:	a0800117 	ldw	r2,4(r20)
 8019dd8:	15bfbf1e 	bne	r2,r22,8019cd8 <__call_exitprocs+0x3c>
 8019ddc:	98800017 	ldw	r2,0(r19)
 8019de0:	153fcf26 	beq	r2,r20,8019d20 <__call_exitprocs+0x84>
 8019de4:	003fbc06 	br	8019cd8 <__call_exitprocs+0x3c>
 8019de8:	183ee83a 	callr	r3
 8019dec:	003ff906 	br	8019dd4 <__call_exitprocs+0x138>
 8019df0:	a5c00115 	stw	r23,4(r20)
 8019df4:	003feb06 	br	8019da4 <__call_exitprocs+0x108>
 8019df8:	89000017 	ldw	r4,0(r17)
 8019dfc:	183ee83a 	callr	r3
 8019e00:	003ff406 	br	8019dd4 <__call_exitprocs+0x138>
 8019e04:	a0800017 	ldw	r2,0(r20)
 8019e08:	a027883a 	mov	r19,r20
 8019e0c:	1029883a 	mov	r20,r2
 8019e10:	003fb606 	br	8019cec <__call_exitprocs+0x50>
 8019e14:	0005883a 	mov	r2,zero
 8019e18:	003ffb06 	br	8019e08 <__call_exitprocs+0x16c>

08019e1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8019e1c:	defffd04 	addi	sp,sp,-12
 8019e20:	df000215 	stw	fp,8(sp)
 8019e24:	df000204 	addi	fp,sp,8
 8019e28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8019e2c:	0001883a 	nop
 8019e30:	e0bfff17 	ldw	r2,-4(fp)
 8019e34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8019e38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8019e3c:	10000226 	beq	r2,zero,8019e48 <_exit+0x2c>
    ALT_SIM_FAIL();
 8019e40:	002af070 	cmpltui	zero,zero,43969
 8019e44:	00000106 	br	8019e4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8019e48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8019e4c:	003fff06 	br	8019e4c <_exit+0x30>
