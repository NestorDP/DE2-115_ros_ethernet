
ros_ethernet.elf:     file format elf32-littlenios2
ros_ethernet.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000250

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000ee58 memsz 0x0000ee58 flags r-x
    LOAD off    0x0000fe78 vaddr 0x0800ee78 paddr 0x08010ad0 align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x00012728 vaddr 0x08012728 paddr 0x08012728 align 2**12
         filesz 0x00000000 memsz 0x008003b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ea10  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000218  0800ec60  0800ec60  0000fc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0800ee78  08010ad0  0000fe78  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0080045a  08012728  08012728  00012728  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08812ad8  08812ad8  00011ad0  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  10001000  10001000  00011ad0  2**0
                  CONTENTS
  8 .onchip_memory 00000000  10002000  10002000  00011ad0  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00011ad0  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000d18  00000000  00000000  00011af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001d05e  00000000  00000000  00012810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007d9e  00000000  00000000  0002f86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a5e7  00000000  00000000  0003760c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003470  00000000  00000000  00041bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004fb8  00000000  00000000  00045064  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004ada  00000000  00000000  0004a01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0004eaf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000648  00000000  00000000  0004eb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0005483a  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0005483d  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00054840  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00054841  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00054842  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00054846  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0005484a  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  0005484e  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  00054852  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  00054856  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000006  00000000  00000000  0005485a  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000002e  00000000  00000000  00054860  2**0
                  CONTENTS, READONLY
 31 .jdi          00004268  00000000  00000000  0005488e  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000a711b  00000000  00000000  00058af6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000250 l    d  .text	00000000 .text
0800ec60 l    d  .rodata	00000000 .rodata
0800ee78 l    d  .rwdata	00000000 .rwdata
08012728 l    d  .bss	00000000 .bss
08812ad8 l    d  .sdram	00000000 .sdram
10001000 l    d  .descriptor_memory	00000000 .descriptor_memory
10002000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ros_ethernet_bsp//obj/HAL/src/crt0.o
08000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/Source/portable/GCC/NiosII/port_asm.o
08000020 l       .exceptions	00000000 save_context
0800009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
080000ac l       .exceptions	00000000 hw_irq_test
08000150 l       .exceptions	00000000 soft_exceptions
080000c0 l       .exceptions	00000000 hw_irq_handler
080000d4 l       .exceptions	00000000 restore_context
0800016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 BlockQ.c
08012728 l     O .bss	00000006 sBlockingConsumerCount
0801272e l     O .bss	00000006 sBlockingProducerCount
0800059c l     F .text	000000a0 vBlockingQueueConsumer
08000510 l     F .text	0000008c vBlockingQueueProducer
08012734 l     O .bss	00000006 sLastBlockingConsumerCount.2740
0801273a l     O .bss	00000006 sLastBlockingProducerCount.2741
00000000 l    df *ABS*	00000000 GenQTest.c
08012740 l     O .bss	00000004 xErrorDetected
08012744 l     O .bss	00000004 ulLoopCounter
08012748 l     O .bss	00000004 ulLoopCounter2
0801274c l     O .bss	00000004 ulGuardedVariable
08012750 l     O .bss	00000004 xHighPriorityMutexTask
08012754 l     O .bss	00000004 xMediumPriorityMutexTask
08012758 l     O .bss	00000004 xBlockWasAborted
08000864 l     F .text	00000468 prvSendFrontAndBackTest
08000fb0 l     F .text	0000005c prvLowPriorityMutexTask
0800100c l     F .text	0000002c prvMediumPriorityMutexTask
08001038 l     F .text	0000007c prvHighPriorityMutexTask
08000ccc l     F .text	0000018c prvTakeTwoMutexesReturnInDifferentOrder
08000e58 l     F .text	00000158 prvTakeTwoMutexesReturnInSameOrder
0801275c l     O .bss	00000004 ulLastLoopCounter.2773
08012760 l     O .bss	00000004 ulLastLoopCounter2.2774
00000000 l    df *ABS*	00000000 PollQ.c
08012764 l     O .bss	00000004 xPollingConsumerCount
08012768 l     O .bss	00000004 xPollingProducerCount
0801276c l     O .bss	00000004 xPolledQueue.2707
08001250 l     F .text	000000b0 vPolledQueueConsumer
080011ac l     F .text	000000a4 vPolledQueueProducer
00000000 l    df *ABS*	00000000 QPeek.c
08012770 l     O .bss	00000004 xErrorDetected
08012774 l     O .bss	00000004 ulLoopCounter
080016d0 l     F .text	00000164 prvLowPriorityPeekTask
08001648 l     F .text	00000088 prvMediumPriorityPeekTask
08001588 l     F .text	000000c0 prvHighPriorityPeekTask
08001434 l     F .text	00000154 prvHighestPriorityPeekTask
08012778 l     O .bss	00000004 ulLastLoopCounter.2743
00000000 l    df *ABS*	00000000 blocktim.c
08012788 l     O .bss	00000004 xTestQueue
0801278c l     O .bss	00000004 xSecondary
08012790 l     O .bss	00000004 xPrimaryCycles
08012794 l     O .bss	00000004 xSecondaryCycles
08012798 l     O .bss	00000004 xErrorOccurred
0801279c l     O .bss	00000004 xRunIndicator
08001910 l     F .text	00000418 vPrimaryBlockTimeTestTask
08001d28 l     F .text	0000012c vSecondaryBlockTimeTestTask
08001e54 l     F .text	0000011c prvBasicDelayTests
080127a0 l     O .bss	00000004 xLastPrimaryCycleCount.2356
080127a4 l     O .bss	00000004 xLastSecondaryCycleCount.2357
00000000 l    df *ABS*	00000000 comtest.c
080127a8 l     O .bss	00000004 xPort
080127ac l     O .bss	00000004 uxBaseLED
080127b0 l     O .bss	00000004 uxRxLoops
08002074 l     F .text	000000b4 vComTxTask
08002128 l     F .text	00000118 vComRxTask
00000000 l    df *ABS*	00000000 countsem.c
080127b4 l     O .bss	00000004 xErrorDetected
080128d0 l     O .bss	00000018 xParameters
08002508 l     F .text	000000a8 prvCountingSemaphoreTask
08002380 l     F .text	000000c0 prvDecrementSemaphoreCount
08002440 l     F .text	000000c8 prvIncrementSemaphoreCount
080127b8 l     O .bss	00000004 uxLastCount0.2321
080127bc l     O .bss	00000004 uxLastCount1.2322
00000000 l    df *ABS*	00000000 death.c
080127c0 l     O .bss	00000002 usCreationCount
080127c4 l     O .bss	00000004 uxTasksRunningAtStart
08010a80 l     O .rwdata	00000004 uxMaxNumberOfExtraTasksRunning
0800271c l     F .text	000000a8 vCreateTasks
08002690 l     F .text	0000008c vSuicidalTask
08010a84 l     O .rwdata	00000002 usLastCreationCount.2611
080127c8 l     O .bss	00000004 uxTasksRunningNow.2613
00000000 l    df *ABS*	00000000 dynamic.c
080127d0 l     O .bss	00000004 xContinuousIncrementHandle
080127d4 l     O .bss	00000004 xLimitedIncrementHandle
080127d8 l     O .bss	00000004 ulCounter
080127dc l     O .bss	00000002 usCheckVariable
080127e0 l     O .bss	00000004 xSuspendedQueueSendError
080127e4 l     O .bss	00000004 xSuspendedQueueReceiveError
080127e8 l     O .bss	00000004 ulExpectedValue
080029a4 l     F .text	00000060 vContinuousIncrementTask
08002950 l     F .text	00000054 vLimitedIncrementTask
08002a04 l     F .text	000000dc vCounterControlTask
08002ae0 l     F .text	0000005c vQueueSendWhenSuspendedTask
08002b3c l     F .text	00000084 vQueueReceiveWhenSuspendedTask
080127ec l     O .bss	00000004 ulValueToSend.2744
080127f0 l     O .bss	00000002 usLastTaskCheck.2757
080127f4 l     O .bss	00000004 ulLastExpectedValue.2758
00000000 l    df *ABS*	00000000 flash.c
080127fc l     O .bss	00000004 uxFlashTaskNumber
08002cb4 l     F .text	00000090 vLEDFlashTask
00000000 l    df *ABS*	00000000 integer.c
08012800 l     O .bss	00000004 xTaskCheck
08002dc8 l     F .text	0000009c vCompeteingIntMathTask
00000000 l    df *ABS*	00000000 recmutex.c
08012804 l     O .bss	00000004 xMutex
08012808 l     O .bss	00000004 xErrorOccurred
0801280c l     O .bss	00000004 xControllingIsSuspended
08012810 l     O .bss	00000004 xBlockingIsSuspended
08012814 l     O .bss	00000004 uxControllingCycles
08012818 l     O .bss	00000004 uxBlockingCycles
0801281c l     O .bss	00000004 uxPollingCycles
08012820 l     O .bss	00000004 xControllingTaskHandle
08012824 l     O .bss	00000004 xBlockingTaskHandle
08002f98 l     F .text	000000fc prvRecursiveMutexControllingTask
08003094 l     F .text	000000a8 prvRecursiveMutexBlockingTask
0800313c l     F .text	000000b4 prvRecursiveMutexPollingTask
08012828 l     O .bss	00000004 uxLastControllingCycles.2320
0801282c l     O .bss	00000004 uxLastBlockingCycles.2321
08012830 l     O .bss	00000004 uxLastPollingCycles.2322
00000000 l    df *ABS*	00000000 semtest.c
08012834 l     O .bss	00000008 sCheckVariables
0801283c l     O .bss	00000002 sNextCheckVariable
08003464 l     F .text	00000184 prvSemaphoreTest
0801283e l     O .bss	00000008 sLastCheckVariables.2730
00000000 l    df *ABS*	00000000 ParTest.c
08012848 l     O .bss	00000004 ulLedStates
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
08003bd0 l     F .text	000000a4 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
080128e8 l     O .bss	00800000 ucHeap
08010a88 l     O .rwdata	00000002 heapSTRUCT_SIZE
0801284c l     O .bss	00000008 xStart
08012854 l     O .bss	00000008 xEnd
08010a8c l     O .rwdata	00000004 xFreeBytesRemaining
0801285c l     O .bss	00000004 xHeapHasBeenInitialised.2596
080041e8 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
08004430 l     F .text	00000084 prvInitialiseNewQueue
080044b4 l     F .text	00000060 prvInitialiseMutex
0800528c l     F .text	0000018c prvCopyDataToQueue
08005640 l     F .text	00000058 prvIsQueueFull
080054b4 l     F .text	000000f4 prvUnlockQueue
08005418 l     F .text	0000009c prvCopyDataFromQueue
080055a8 l     F .text	00000050 prvIsQueueEmpty
0800523c l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
088128e8 l     O .bss	00000064 pxReadyTasksLists
0881294c l     O .bss	00000014 xDelayedTaskList1
08812960 l     O .bss	00000014 xDelayedTaskList2
08012864 l     O .bss	00000004 pxDelayedTaskList
08012868 l     O .bss	00000004 pxOverflowDelayedTaskList
08812974 l     O .bss	00000014 xPendingReadyList
08812988 l     O .bss	00000014 xTasksWaitingTermination
0801286c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0881299c l     O .bss	00000014 xSuspendedTaskList
08012870 l     O .bss	00000004 uxCurrentNumberOfTasks
08012874 l     O .bss	00000004 xTickCount
08012878 l     O .bss	00000004 uxTopReadyPriority
0801287c l     O .bss	00000004 xSchedulerRunning
08012880 l     O .bss	00000004 uxPendedTicks
08012884 l     O .bss	00000004 xYieldPending
08012888 l     O .bss	00000004 xNumOfOverflows
0801288c l     O .bss	00000004 uxTaskNumber
08012890 l     O .bss	00000004 xNextTaskUnblockTime
08012894 l     O .bss	00000004 xIdleTaskHandle
08012898 l     O .bss	00000004 uxSchedulerSuspended
080057d0 l     F .text	000001e4 prvInitialiseNewTask
080059b4 l     F .text	00000108 prvAddNewTaskToReadyList
08006c94 l     F .text	000000c0 prvInitialiseTaskLists
08006e98 l     F .text	00000044 prvDeleteTCB
08006edc l     F .text	00000054 prvResetNextTaskUnblockTime
08007b3c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
08006050 l     F .text	0000006c prvTaskIsTaskSuspended
08006c78 l     F .text	0000001c prvIdleTask
08006d54 l     F .text	00000080 prvCheckTasksWaitingTermination
08006dd4 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 serial.c
0801289c l     O .bss	00000004 xRxedChars
080128a0 l     O .bss	00000004 xCharsForTx
08007e94 l     F .text	00000074 vUARTInterruptHandler
08007f08 l     F .text	000000a4 vUARTReceiveHandler
08007fac l     F .text	000000a0 vUARTTransmitHandler
00000000 l    df *ABS*	00000000 hello_world.c
080080c4 l     F .text	00000034 prvPrintTask1
080080f8 l     F .text	00000034 prvPrintTask2
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
080086e4 l     F .text	00000008 __fp_unlock
080086f8 l     F .text	0000019c __sinit.part.1
08008894 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800ee78 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
0800af38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800b04c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800b078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0800b31c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800b404 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800b4f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800b6cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08010abc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800b940 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800ba7c l     F .text	00000034 alt_dev_reg
0800f84c l     O .rwdata	00001060 jtag
080108ac l     O .rwdata	00000030 sgdma_rx
080108dc l     O .rwdata	00000030 sgdma_tx
0801090c l     O .rwdata	000000c4 uart
080109d0 l     O .rwdata	0000002c Button_Pio
080109fc l     O .rwdata	0000002c IO_Pio
08010a28 l     O .rwdata	0000002c LED_Pio
08010a54 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800bdec l     F .text	0000020c altera_avalon_jtag_uart_irq
0800bff8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0800c630 l     F .text	0000003c alt_get_errno
0800d260 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800d3c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0800d674 l     F .text	0000009c altera_avalon_uart_irq
0800d710 l     F .text	000000e4 altera_avalon_uart_rxirq
0800d7f4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0800d990 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0800dba8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800df04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800e154 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0800e2b4 l     F .text	0000003c alt_get_errno
0800e2f0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800028c g     F .text	00000284 vStartBlockingQueueTasks
0800aee4 g     F .text	00000054 _isatty_r
0800b608 g     F .text	0000007c alt_main
08008578 g     F .text	000000c0 _puts_r
088129d8 g     O .bss	00000100 alt_irq
0800ac0c g     F .text	00000060 _lseek_r
080000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
080068b0 g     F .text	00000064 vTaskPlaceOnUnorderedEventList
080041a8 g     F .text	00000020 xPortGetFreeHeapSize
08010ad0 g       *ABS*	00000000 __flash_rwdata_start
08812ad8 g       *ABS*	00000000 __alt_heap_start
08005cf0 g     F .text	00000058 uxTaskPriorityGet
08001834 g     F .text	00000044 xAreQueuePeekTasksStillRunning
0800c790 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0800a1c0 g     F .text	0000005c __sseek
08008a44 g     F .text	00000010 __sinit
0800889c g     F .text	00000078 __sfmoreglue
0800b6a8 g     F .text	00000024 __malloc_unlock
080010b4 g     F .text	00000060 xAreGenericQueueTasksStillRunning
0800cea8 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
080099d4 g     F .text	0000015c memmove
08001f70 g     F .text	00000068 xAreBlockTimeTestTasksStillRunning
0800731c g     F .text	00000054 vTaskEnterCritical
08008a2c g     F .text	00000018 _cleanup
080048a8 g     F .text	000000e8 xQueueGenericSendFromISR
0800655c g     F .text	00000040 pcTaskGetName
0800e6dc g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08004570 g     F .text	00000090 xQueueGiveMutexRecursive
08002ee0 g     F .text	000000b8 vStartRecursiveMutexTasks
08012860 g     O .bss	00000004 pxCurrentTCB
0800c9f8 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800ae88 g     F .text	0000005c _fstat_r
080128b4 g     O .bss	00000004 errno
0800a13c g     F .text	00000008 __seofread
080128c0 g     O .bss	00000004 alt_argv
08018a80 g       *ABS*	00000000 _gp
08005d94 g     F .text	000001c0 vTaskPrioritySet
08006b34 g     F .text	0000003c vTaskInternalSetTimeOutState
0800f6cc g     O .rwdata	00000180 alt_fd_list
08002240 g     F .text	0000003c xAreComTestTasksStillRunning
08003b78 g     F .text	00000038 xPortStartScheduler
08006310 g     F .text	00000048 vTaskEndScheduler
0800e0a4 g     F .text	00000090 alt_find_dev
08008308 g     F .text	00000148 memcpy
08006860 g     F .text	00000050 vTaskPlaceOnEventList
08006a14 g     F .text	000000d4 vTaskRemoveFromUnorderedEventList
080031f0 g     F .text	0000009c xAreRecursiveMutexTasksStillRunning
080086ec g     F .text	0000000c _cleanup_r
0801277c g     O .bss	00000004 xHighPriorityTask
0800e238 g     F .text	0000007c alt_io_redirect
080050b8 g     F .text	0000007c xQueuePeekFromISR
0800ec60 g       *ABS*	00000000 __DTOR_END__
08008638 g     F .text	00000014 puts
080040dc g     F .text	000000cc vPortFree
08004c14 g     F .text	00000210 xQueueSemaphoreTake
0800caf0 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0800c1f0 g     F .text	0000021c altera_avalon_jtag_uart_read
08008224 g     F .text	00000064 .hidden __udivsi3
08002c40 g     F .text	00000074 vStartLEDFlashTasks
0800b358 g     F .text	000000ac isatty
08012780 g     O .bss	00000004 xMediumPriorityTask
08006e38 g     F .text	00000060 uxTaskGetStackHighWaterMark
08003874 g     F .text	0000008c vListInsertEnd
080128b0 g     O .bss	00000004 __malloc_top_pad
0800284c g     F .text	00000104 vStartDynamicPriorityTasks
08008a94 g     F .text	000004c8 __sfvwrite_r
08007cdc g     F .text	00000024 vSerialClose
0800cc28 g     F .text	0000005c alt_avalon_sgdma_stop
0800a094 g     F .text	00000054 _sbrk_r
08006194 g     F .text	000000ec xTaskResumeFromISR
0800ae28 g     F .text	00000060 _read_r
08003848 g     F .text	0000002c vListInitialiseItem
0800debc g     F .text	00000028 alt_dcache_flush
08003774 g     F .text	0000006c vParTestToggleLED
08010ab0 g     O .rwdata	00000004 alt_max_fd
08003c74 g     F .text	00000044 vPortSysTickHandler
0800a42c g     F .text	000000f0 _fclose_r
08004a6c g     F .text	000001a8 xQueueReceive
0800a7a8 g     F .text	00000030 fflush
080128ac g     O .bss	00000004 __malloc_max_sbrked_mem
08005d48 g     F .text	0000004c uxTaskPriorityGetFromISR
08003cb8 g     F .text	00000170 alt_irq_register
080036d4 g     F .text	000000a0 vParTestSetLED
0800b52c g     F .text	000000dc lseek
08010a90 g     O .rwdata	00000004 _global_impure_ptr
08009b30 g     F .text	00000564 _realloc_r
08812ad8 g       *ABS*	00000000 __bss_end
08003e28 g     F .text	000000e0 alt_iic_isr_register
0800c66c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0800063c g     F .text	00000128 xAreBlockingQueuesStillRunning
0800e5d4 g     F .text	00000108 alt_tick
08003f08 g     F .text	000001d4 pvPortMalloc
0800d5c8 g     F .text	000000ac altera_avalon_uart_init
08001300 g     F .text	00000048 xArePollingQueuesStillRunning
08008a64 g     F .text	00000018 __fp_lock_all
0800b2d0 g     F .text	0000004c alt_ic_irq_enabled
08005200 g     F .text	0000003c vQueueDelete
08003bb0 g     F .text	00000020 vPortEndScheduler
080037e0 g     F .text	00000068 vListInitialise
0800e538 g     F .text	0000009c alt_alarm_stop
10001000 g       *ABS*	00000000 __alt_mem_descriptor_memory
080128b8 g     O .bss	00000004 alt_irq_active
0800017c g     F .exceptions	000000d4 alt_irq_handler
0800f6a4 g     O .rwdata	00000028 alt_dev_null
080064e8 g     F .text	00000028 xTaskGetTickCount
080046f4 g     F .text	000001b4 xQueueGenericSend
0800cc84 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
0800dee4 g     F .text	00000020 alt_dcache_flush_all
08000764 g     F .text	00000100 vStartGenericQueueTasks
080025b0 g     F .text	0000008c xAreCountingSemaphoreTasksStillRunning
080070b8 g     F .text	00000108 xTaskPriorityDisinherit
08010ad0 g       *ABS*	00000000 __ram_rwdata_end
10002000 g       *ABS*	00000000 __alt_mem_onchip_memory
08010aa8 g     O .rwdata	00000008 alt_dev_list
0800b97c g     F .text	00000100 write
0800cdc8 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
08006914 g     F .text	00000100 xTaskRemoveFromEventList
0800ee78 g       *ABS*	00000000 __ram_rodata_end
0800b0b4 g     F .text	000000b8 fstat
08004e24 g     F .text	000001b0 xQueuePeek
08007e08 g     F .text	0000008c vSerialPutString
08007d74 g     F .text	00000094 xSerialPutChar
08008288 g     F .text	00000058 .hidden __umodsi3
0800ca70 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0800cb7c g     F .text	00000054 alt_avalon_sgdma_register_callback
08812ad8 g       *ABS*	00000000 end
08005abc g     F .text	000000e8 vTaskDelete
080027c4 g     F .text	00000088 xIsCreateTaskStillRunning
0800dbe4 g     F .text	000001ac altera_avalon_uart_write
0800bd2c g     F .text	000000c0 altera_avalon_jtag_uart_init
08007414 g     F .text	00000038 pvTaskIncrementMutexHeldCount
0800ec60 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800ce48 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
0800d43c g     F .text	0000007c alt_avalon_timer_sc_init
0800d518 g     F .text	00000060 altera_avalon_uart_write_fd
0800d578 g     F .text	00000050 altera_avalon_uart_close_fd
0800c40c g     F .text	00000224 altera_avalon_jtag_uart_write
0800c8a0 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
08008a54 g     F .text	00000004 __sfp_lock_acquire
080098f0 g     F .text	000000e4 memchr
08006b70 g     F .text	000000e0 xTaskCheckForTimeOut
0800c998 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
0800a8fc g     F .text	00000310 _free_r
08006f58 g     F .text	00000160 xTaskPriorityInherit
0800eaac g     F .text	00000180 __call_exitprocs
08001fd8 g     F .text	0000009c vAltStartComTestTasks
0800744c g     F .text	000000b0 ulTaskNotifyTake
08010a98 g     O .rwdata	00000004 __malloc_sbrk_base
08000250 g     F .text	0000003c _start
080128c8 g     O .bss	00000004 _alt_tick_rate
08006358 g     F .text	0000002c vTaskSuspendAll
0800cce8 g     F .text	00000054 alt_avalon_sgdma_open
08006510 g     F .text	0000002c xTaskGetTickCountFromISR
080128cc g     O .bss	00000004 _alt_nticks
0800b708 g     F .text	00000104 read
0800bae8 g     F .text	000000e0 alt_sys_init
080039d8 g     F .text	00000098 uxListRemove
0800e994 g     F .text	00000118 __register_exitproc
0800c098 g     F .text	00000068 altera_avalon_jtag_uart_close
080082e0 g     F .text	00000028 .hidden __mulsi3
0800ee78 g       *ABS*	00000000 __ram_rwdata_start
0800ec60 g       *ABS*	00000000 __ram_rodata_start
088129b0 g     O .bss	00000028 __malloc_current_mallinfo
08007ac4 g     F .text	00000078 xTaskNotifyStateClear
080060bc g     F .text	000000d8 vTaskResume
08006768 g     F .text	000000f8 vTaskSwitchContext
0800bbc8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800e808 g     F .text	000000c4 alt_get_fd
0800a3d8 g     F .text	00000054 _close_r
080074fc g     F .text	000000f4 xTaskNotifyWait
0800e918 g     F .text	0000007c memcmp
0800bc88 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08812ad8 g       *ABS*	00000000 __alt_stack_base
0800bcd8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800a284 g     F .text	00000154 __swsetup_r
08005f54 g     F .text	000000fc vTaskSuspend
08008914 g     F .text	00000118 __sfp
0800653c g     F .text	00000020 uxTaskGetNumberOfTasks
0800f29c g     O .rwdata	00000408 __malloc_av_
08008a60 g     F .text	00000004 __sinit_lock_release
0800a0e8 g     F .text	00000054 __sread
0800e700 g     F .text	00000108 alt_find_file
0800df40 g     F .text	000000a4 alt_dev_llist_insert
0800b684 g     F .text	00000024 __malloc_lock
0800b890 g     F .text	000000b0 sbrk
08004600 g     F .text	0000009c xQueueTakeMutexRecursive
0800cbd0 g     F .text	00000058 alt_avalon_sgdma_start
0800a74c g     F .text	0000005c _fflush_r
08012784 g     O .bss	00000004 xHighestPriorityTask
080075f0 g     F .text	000001b8 xTaskGenericNotify
08012728 g       *ABS*	00000000 __bss_start
08008450 g     F .text	00000128 memset
0800804c g     F .text	00000078 main
080128c4 g     O .bss	00000004 alt_envp
08001878 g     F .text	00000098 vCreateBlockTimeTasks
080128a8 g     O .bss	00000004 __malloc_max_total_mem
0800bc28 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08003900 g     F .text	000000d8 vListInsert
08010ac0 g     O .rwdata	00000008 alt_sgdma_list
0800a21c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800a51c g     F .text	00000014 fclose
080090e4 g     F .text	0000080c _malloc_r
08010ab4 g     O .rwdata	00000004 alt_errno
08005ba4 g     F .text	000000f0 vTaskDelayUntil
080035e8 g     F .text	000000b8 xAreSemaphoreTasksStillRunning
08008f5c g     F .text	000000c4 _fwalk
08004fd4 g     F .text	000000e4 xQueueReceiveFromISR
08006f30 g     F .text	00000028 xTaskGetCurrentTaskHandle
0800812c g     F .text	00000084 .hidden __divsi3
08004388 g     F .text	000000a8 xQueueGenericCreate
0800a7d8 g     F .text	00000124 _malloc_trim_r
0800ec60 g       *ABS*	00000000 __CTOR_END__
0800469c g     F .text	00000058 xQueueCreateCountingSemaphore
0800ec60 g       *ABS*	00000000 __flash_rodata_start
0800ec60 g       *ABS*	00000000 __DTOR_LIST__
080127cc g     O .bss	00000004 xCreatedTask
080077a8 g     F .text	000001f0 xTaskGenericNotifyFromISR
0800bab0 g     F .text	00000038 alt_irq_init
08002d44 g     F .text	00000084 vStartIntegerMathTasks
0800b80c g     F .text	00000084 alt_release_fd
08006384 g     F .text	00000164 xTaskResumeAll
08005174 g     F .text	00000054 uxQueueSpacesAvailable
08006280 g     F .text	00000090 vTaskStartScheduler
0800e8cc g     F .text	00000014 atexit
0800a224 g     F .text	00000060 _write_r
08003a70 g     F .text	00000028 prvReadGp
08005698 g     F .text	00000050 xQueueIsQueueFullFromISR
08001348 g     F .text	000000ec vStartQueuePeekTasks
08010a94 g     O .rwdata	00000004 _impure_ptr
080128bc g     O .bss	00000004 alt_argc
0800a530 g     F .text	0000021c __sflush_r
08007d00 g     F .text	00000074 xSerialGetChar
0800e044 g     F .text	00000060 _do_dtors
08002e64 g     F .text	0000007c xAreIntegerMathsTaskStillRunning
08001114 g     F .text	00000098 vStartPolledQueueTasks
0800227c g     F .text	00000104 vStartCountingSemaphoreTasks
080036a0 g     F .text	00000034 vParTestInitialise
08008a7c g     F .text	00000018 __fp_unlock_all
08006c50 g     F .text	00000028 vTaskMissedYield
08010aa0 g     O .rwdata	00000008 alt_fs_list
08005134 g     F .text	00000040 uxQueueMessagesWaiting
0800659c g     F .text	000001cc xTaskIncrementTick
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800b16c g     F .text	00000050 alt_ic_isr_register
0800425c g     F .text	0000012c xQueueGenericReset
08010ad0 g       *ABS*	00000000 _edata
0800263c g     F .text	00000054 vCreateSuicidalTasks
0800d4b8 g     F .text	00000060 altera_avalon_uart_read_fd
08812ad8 g       *ABS*	00000000 _end
08000250 g       *ABS*	00000000 __ram_exceptions_end
0800c100 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080056e8 g     F .text	000000e8 xTaskCreate
080128a4 g     O .bss	00000004 uartControl
080041c8 g     F .text	00000020 vPortInitialiseBlocks
0800b244 g     F .text	0000008c alt_ic_irq_disable
0800cd3c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
0800a144 g     F .text	0000007c __swrite
08010a9c g     O .rwdata	00000004 __malloc_trim_threshold
0800e8e0 g     F .text	00000038 exit
08009020 g     F .text	000000c4 _fwalk_reent
080081b0 g     F .text	00000074 .hidden __modsi3
08005c94 g     F .text	0000005c vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
08008a58 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080071c0 g     F .text	0000015c vTaskPriorityDisinheritAfterTimeout
080127f8 g     O .bss	00000004 xSuspendedTestQueue
0800d93c g     F .text	00000054 altera_avalon_uart_close
0800ec2c g     F .text	00000034 _exit
0800dd90 g     F .text	0000012c alt_alarm_start
0800ac6c g     F .text	000001bc __smakebuf_r
08007370 g     F .text	00000060 vTaskExitCritical
08002bc0 g     F .text	00000080 xAreDynamicPriorityTasksStillRunning
0800864c g     F .text	00000098 strlen
08003a98 g     F .text	000000e0 pxPortInitialiseStack
0800e3dc g     F .text	0000015c open
0800e134 g     F .text	00000020 alt_icache_flush_all
08006ae8 g     F .text	0000004c vTaskSetTimeOutState
08010ab8 g     O .rwdata	00000004 alt_priority_mask
0800b1bc g     F .text	00000088 alt_ic_irq_enable
0800d9cc g     F .text	000001dc altera_avalon_uart_read
080051c8 g     F .text	00000038 uxQueueMessagesWaitingFromISR
080055f8 g     F .text	00000048 xQueueIsQueueEmptyFromISR
0800c914 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0800328c g     F .text	000001d8 vStartSemaphoreTasks
08010ac8 g     O .rwdata	00000008 alt_alarm_list
0800dfe4 g     F .text	00000060 _do_ctors
080073d0 g     F .text	00000044 uxTaskResetEventItemValue
08004514 g     F .text	0000005c xQueueCreateMutex
0800af74 g     F .text	000000d8 close
08007c24 g     F .text	000000b8 xSerialPortInitMinimal
08007998 g     F .text	0000012c vTaskNotifyGiveFromISR
0800b46c g     F .text	00000084 alt_load
0800d31c g     F .text	000000a8 alt_avalon_sgdma_init
08004990 g     F .text	000000dc xQueueGiveFromISR
08008a5c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08409414 	ori	at,at,592
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 8000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 8000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 8000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 800002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 8000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 8000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 8000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 800003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 8000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 8000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 8000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 800004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 8000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 800006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 8000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 8000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 8000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 800007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 8000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 8000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 8000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 800008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 8000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 8000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 8000098:	df001c15 	stw	fp,112(sp)

0800009c <save_sp_to_pxCurrentTCB>:
 800009c:	06020074 	movhi	et,2049

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 80000a0:	c60a1804 	addi	et,et,10336
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 80000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 80000a8:	c6c00015 	stw	sp,0(et)

080000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 80000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 80000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 80000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 80000b8:	10002526 	beq	r2,zero,8000150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 80000bc:	20002426 	beq	r4,zero,8000150 <soft_exceptions>

080000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 80000c0:	800017c0 	call	800017c <alt_irq_handler>

080000c4 <restore_sp_from_pxCurrentTCB>:
 80000c4:	06020074 	movhi	et,2049

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 80000c8:	c60a1804 	addi	et,et,10336
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 80000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 80000d0:	c6c00017 	ldw	sp,0(et)

080000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 80000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 80000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 80000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 80000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 80000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 80000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 80000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 80000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 80000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 80000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 80000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 8000100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 8000104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 8000108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 800010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 8000110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 8000114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 8000118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 800011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 8000120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 8000124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 8000128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 800012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 8000130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 8000134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 8000138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 800013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 8000140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 8000144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 8000148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 800014c:	ef80083a 	eret

08000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 8000150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 8000154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 8000158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 800015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 8000160:	c0000226 	beq	et,zero,800016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 8000164:	003da03a 	break	0
  	br		restore_context			# its something else
 8000168:	003fda06 	br	80000d4 <restore_context>

0800016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 800016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 8000170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 8000174:	80067680 	call	8006768 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 8000178:	003fd206 	br	80000c4 <restore_sp_from_pxCurrentTCB>

0800017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 800017c:	defff904 	addi	sp,sp,-28
 8000180:	dfc00615 	stw	ra,24(sp)
 8000184:	df000515 	stw	fp,20(sp)
 8000188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800018c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000190:	0005313a 	rdctl	r2,ipending
 8000194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800019c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 80001a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 80001a4:	00800044 	movi	r2,1
 80001a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 80001ac:	e0fffb17 	ldw	r3,-20(fp)
 80001b0:	e0bffc17 	ldw	r2,-16(fp)
 80001b4:	1884703a 	and	r2,r3,r2
 80001b8:	10001426 	beq	r2,zero,800020c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 80001bc:	00822074 	movhi	r2,2177
 80001c0:	108a7604 	addi	r2,r2,10712
 80001c4:	e0fffd17 	ldw	r3,-12(fp)
 80001c8:	180690fa 	slli	r3,r3,3
 80001cc:	10c5883a 	add	r2,r2,r3
 80001d0:	10c00017 	ldw	r3,0(r2)
 80001d4:	00822074 	movhi	r2,2177
 80001d8:	108a7604 	addi	r2,r2,10712
 80001dc:	e13ffd17 	ldw	r4,-12(fp)
 80001e0:	200890fa 	slli	r4,r4,3
 80001e4:	1105883a 	add	r2,r2,r4
 80001e8:	10800104 	addi	r2,r2,4
 80001ec:	10800017 	ldw	r2,0(r2)
 80001f0:	1009883a 	mov	r4,r2
 80001f4:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 80001f8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80001fc:	0005313a 	rdctl	r2,ipending
 8000200:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000204:	e0bfff17 	ldw	r2,-4(fp)
 8000208:	00000706 	br	8000228 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800020c:	e0bffc17 	ldw	r2,-16(fp)
 8000210:	1085883a 	add	r2,r2,r2
 8000214:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000218:	e0bffd17 	ldw	r2,-12(fp)
 800021c:	10800044 	addi	r2,r2,1
 8000220:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000224:	003fe106 	br	80001ac <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 8000228:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800022c:	e0bffb17 	ldw	r2,-20(fp)
 8000230:	103fdb1e 	bne	r2,zero,80001a0 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000234:	0001883a 	nop
}
 8000238:	0001883a 	nop
 800023c:	e037883a 	mov	sp,fp
 8000240:	dfc00117 	ldw	ra,4(sp)
 8000244:	df000017 	ldw	fp,0(sp)
 8000248:	dec00204 	addi	sp,sp,8
 800024c:	f800283a 	ret

Disassembly of section .text:

08000250 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000250:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000258:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800025c:	d6a2a014 	ori	gp,gp,35456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000260:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000264:	1089ca14 	ori	r2,r2,10024

    movhi r3, %hi(__bss_end)
 8000268:	00c22074 	movhi	r3,2177
    ori r3, r3, %lo(__bss_end)
 800026c:	18cab614 	ori	r3,r3,10968

    beq r2, r3, 1f
 8000270:	10c00326 	beq	r2,r3,8000280 <_start+0x30>

0:
    stw zero, (r2)
 8000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800027c:	10fffd36 	bltu	r2,r3,8000274 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000280:	800b46c0 	call	800b46c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000284:	800b6080 	call	800b608 <alt_main>

08000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000288:	003fff06 	br	8000288 <alt_after_alt_main>

0800028c <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
 800028c:	defff104 	addi	sp,sp,-60
 8000290:	dfc00e15 	stw	ra,56(sp)
 8000294:	df000d15 	stw	fp,52(sp)
 8000298:	df000d04 	addi	fp,sp,52
 800029c:	e13fff15 	stw	r4,-4(fp)
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 80002a0:	00800044 	movi	r2,1
 80002a4:	e0bff515 	stw	r2,-44(fp)
 80002a8:	00800144 	movi	r2,5
 80002ac:	e0bff615 	stw	r2,-40(fp)
const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 80002b0:	0080fa04 	movi	r2,1000
 80002b4:	e0bff715 	stw	r2,-36(fp)
const TickType_t xDontBlock = ( TickType_t ) 0;
 80002b8:	e03ff815 	stw	zero,-32(fp)

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80002bc:	01000304 	movi	r4,12
 80002c0:	8003f080 	call	8003f08 <pvPortMalloc>
 80002c4:	e0bff915 	stw	r2,-28(fp)

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 80002c8:	000d883a 	mov	r6,zero
 80002cc:	01400084 	movi	r5,2
 80002d0:	e13ff517 	ldw	r4,-44(fp)
 80002d4:	80043880 	call	8004388 <xQueueGenericCreate>
 80002d8:	1007883a 	mov	r3,r2
 80002dc:	e0bff917 	ldw	r2,-28(fp)
 80002e0:	10c00015 	stw	r3,0(r2)

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 80002e4:	e0bff917 	ldw	r2,-28(fp)
 80002e8:	e0fff717 	ldw	r3,-36(fp)
 80002ec:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 80002f0:	e0bff917 	ldw	r2,-28(fp)
 80002f4:	d0e72a04 	addi	r3,gp,-25432
 80002f8:	10c00215 	stw	r3,8(r2)

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80002fc:	01000304 	movi	r4,12
 8000300:	8003f080 	call	8003f08 <pvPortMalloc>
 8000304:	e0bffa15 	stw	r2,-24(fp)

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 8000308:	e0bff917 	ldw	r2,-28(fp)
 800030c:	10c00017 	ldw	r3,0(r2)
 8000310:	e0bffa17 	ldw	r2,-24(fp)
 8000314:	10c00015 	stw	r3,0(r2)

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 8000318:	e0bffa17 	ldw	r2,-24(fp)
 800031c:	e0fff817 	ldw	r3,-32(fp)
 8000320:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 8000324:	e0bffa17 	ldw	r2,-24(fp)
 8000328:	d0e72b84 	addi	r3,gp,-25426
 800032c:	10c00215 	stw	r3,8(r2)


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 8000330:	d8000115 	stw	zero,4(sp)
 8000334:	e0bfff17 	ldw	r2,-4(fp)
 8000338:	d8800015 	stw	r2,0(sp)
 800033c:	e1fff917 	ldw	r7,-28(fp)
 8000340:	01810004 	movi	r6,1024
 8000344:	01420074 	movhi	r5,2049
 8000348:	297b1804 	addi	r5,r5,-5024
 800034c:	01020034 	movhi	r4,2048
 8000350:	21016704 	addi	r4,r4,1436
 8000354:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 8000358:	d8000115 	stw	zero,4(sp)
 800035c:	d8000015 	stw	zero,0(sp)
 8000360:	e1fffa17 	ldw	r7,-24(fp)
 8000364:	01810004 	movi	r6,1024
 8000368:	01420074 	movhi	r5,2049
 800036c:	297b1a04 	addi	r5,r5,-5016
 8000370:	01020034 	movhi	r4,2048
 8000374:	21014404 	addi	r4,r4,1296
 8000378:	80056e80 	call	80056e8 <xTaskCreate>


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800037c:	01000304 	movi	r4,12
 8000380:	8003f080 	call	8003f08 <pvPortMalloc>
 8000384:	e0bffb15 	stw	r2,-20(fp)
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 8000388:	000d883a 	mov	r6,zero
 800038c:	01400084 	movi	r5,2
 8000390:	e13ff517 	ldw	r4,-44(fp)
 8000394:	80043880 	call	8004388 <xQueueGenericCreate>
 8000398:	1007883a 	mov	r3,r2
 800039c:	e0bffb17 	ldw	r2,-20(fp)
 80003a0:	10c00015 	stw	r3,0(r2)
	pxQueueParameters3->xBlockTime = xDontBlock;
 80003a4:	e0bffb17 	ldw	r2,-20(fp)
 80003a8:	e0fff817 	ldw	r3,-32(fp)
 80003ac:	10c00115 	stw	r3,4(r2)
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 80003b0:	e0bffb17 	ldw	r2,-20(fp)
 80003b4:	d0e72c04 	addi	r3,gp,-25424
 80003b8:	10c00215 	stw	r3,8(r2)

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80003bc:	01000304 	movi	r4,12
 80003c0:	8003f080 	call	8003f08 <pvPortMalloc>
 80003c4:	e0bffc15 	stw	r2,-16(fp)
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 80003c8:	e0bffb17 	ldw	r2,-20(fp)
 80003cc:	10c00017 	ldw	r3,0(r2)
 80003d0:	e0bffc17 	ldw	r2,-16(fp)
 80003d4:	10c00015 	stw	r3,0(r2)
	pxQueueParameters4->xBlockTime = xBlockTime;
 80003d8:	e0bffc17 	ldw	r2,-16(fp)
 80003dc:	e0fff717 	ldw	r3,-36(fp)
 80003e0:	10c00115 	stw	r3,4(r2)
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 80003e4:	e0bffc17 	ldw	r2,-16(fp)
 80003e8:	d0e72a84 	addi	r3,gp,-25430
 80003ec:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 80003f0:	d8000115 	stw	zero,4(sp)
 80003f4:	d8000015 	stw	zero,0(sp)
 80003f8:	e1fffb17 	ldw	r7,-20(fp)
 80003fc:	01810004 	movi	r6,1024
 8000400:	01420074 	movhi	r5,2049
 8000404:	297b1c04 	addi	r5,r5,-5008
 8000408:	01020034 	movhi	r4,2048
 800040c:	21016704 	addi	r4,r4,1436
 8000410:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 8000414:	d8000115 	stw	zero,4(sp)
 8000418:	e0bfff17 	ldw	r2,-4(fp)
 800041c:	d8800015 	stw	r2,0(sp)
 8000420:	e1fffc17 	ldw	r7,-16(fp)
 8000424:	01810004 	movi	r6,1024
 8000428:	01420074 	movhi	r5,2049
 800042c:	297b1e04 	addi	r5,r5,-5000
 8000430:	01020034 	movhi	r4,2048
 8000434:	21014404 	addi	r4,r4,1296
 8000438:	80056e80 	call	80056e8 <xTaskCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800043c:	01000304 	movi	r4,12
 8000440:	8003f080 	call	8003f08 <pvPortMalloc>
 8000444:	e0bffd15 	stw	r2,-12(fp)
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 8000448:	000d883a 	mov	r6,zero
 800044c:	01400084 	movi	r5,2
 8000450:	e13ff617 	ldw	r4,-40(fp)
 8000454:	80043880 	call	8004388 <xQueueGenericCreate>
 8000458:	1007883a 	mov	r3,r2
 800045c:	e0bffd17 	ldw	r2,-12(fp)
 8000460:	10c00015 	stw	r3,0(r2)
	pxQueueParameters5->xBlockTime = xBlockTime;
 8000464:	e0bffd17 	ldw	r2,-12(fp)
 8000468:	e0fff717 	ldw	r3,-36(fp)
 800046c:	10c00115 	stw	r3,4(r2)
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 8000470:	e0bffd17 	ldw	r2,-12(fp)
 8000474:	d0e72c84 	addi	r3,gp,-25422
 8000478:	10c00215 	stw	r3,8(r2)

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800047c:	01000304 	movi	r4,12
 8000480:	8003f080 	call	8003f08 <pvPortMalloc>
 8000484:	e0bffe15 	stw	r2,-8(fp)
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 8000488:	e0bffd17 	ldw	r2,-12(fp)
 800048c:	10c00017 	ldw	r3,0(r2)
 8000490:	e0bffe17 	ldw	r2,-8(fp)
 8000494:	10c00015 	stw	r3,0(r2)
	pxQueueParameters6->xBlockTime = xBlockTime;
 8000498:	e0bffe17 	ldw	r2,-8(fp)
 800049c:	e0fff717 	ldw	r3,-36(fp)
 80004a0:	10c00115 	stw	r3,4(r2)
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 80004a4:	e0bffe17 	ldw	r2,-8(fp)
 80004a8:	d0e72b04 	addi	r3,gp,-25428
 80004ac:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 80004b0:	d8000115 	stw	zero,4(sp)
 80004b4:	d8000015 	stw	zero,0(sp)
 80004b8:	e1fffd17 	ldw	r7,-12(fp)
 80004bc:	01810004 	movi	r6,1024
 80004c0:	01420074 	movhi	r5,2049
 80004c4:	297b2004 	addi	r5,r5,-4992
 80004c8:	01020034 	movhi	r4,2048
 80004cc:	21014404 	addi	r4,r4,1296
 80004d0:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 80004d4:	d8000115 	stw	zero,4(sp)
 80004d8:	d8000015 	stw	zero,0(sp)
 80004dc:	e1fffe17 	ldw	r7,-8(fp)
 80004e0:	01810004 	movi	r6,1024
 80004e4:	01420074 	movhi	r5,2049
 80004e8:	297b2204 	addi	r5,r5,-4984
 80004ec:	01020034 	movhi	r4,2048
 80004f0:	21016704 	addi	r4,r4,1436
 80004f4:	80056e80 	call	80056e8 <xTaskCreate>
}
 80004f8:	0001883a 	nop
 80004fc:	e037883a 	mov	sp,fp
 8000500:	dfc00117 	ldw	ra,4(sp)
 8000504:	df000017 	ldw	fp,0(sp)
 8000508:	dec00204 	addi	sp,sp,8
 800050c:	f800283a 	ret

08000510 <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
 8000510:	defffa04 	addi	sp,sp,-24
 8000514:	dfc00515 	stw	ra,20(sp)
 8000518:	df000415 	stw	fp,16(sp)
 800051c:	df000404 	addi	fp,sp,16
 8000520:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = 0;
 8000524:	e03ffe0d 	sth	zero,-8(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 8000528:	e03ffc0d 	sth	zero,-16(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 800052c:	e0bfff17 	ldw	r2,-4(fp)
 8000530:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 8000534:	e0bffd17 	ldw	r2,-12(fp)
 8000538:	10c00017 	ldw	r3,0(r2)
 800053c:	e0bffd17 	ldw	r2,-12(fp)
 8000540:	11000117 	ldw	r4,4(r2)
 8000544:	e0bffe04 	addi	r2,fp,-8
 8000548:	000f883a 	mov	r7,zero
 800054c:	200d883a 	mov	r6,r4
 8000550:	100b883a 	mov	r5,r2
 8000554:	1809883a 	mov	r4,r3
 8000558:	80046f40 	call	80046f4 <xQueueGenericSend>
 800055c:	10800060 	cmpeqi	r2,r2,1
 8000560:	1000031e 	bne	r2,zero,8000570 <vBlockingQueueProducer+0x60>
		{
			sErrorEverOccurred = pdTRUE;
 8000564:	00800044 	movi	r2,1
 8000568:	e0bffc0d 	sth	r2,-16(fp)
 800056c:	003ff106 	br	8000534 <vBlockingQueueProducer+0x24>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 8000570:	e0bffc0f 	ldh	r2,-16(fp)
 8000574:	1000051e 	bne	r2,zero,800058c <vBlockingQueueProducer+0x7c>
			{
				( *pxQueueParameters->psCheckVariable )++;
 8000578:	e0bffd17 	ldw	r2,-12(fp)
 800057c:	10800217 	ldw	r2,8(r2)
 8000580:	10c0000b 	ldhu	r3,0(r2)
 8000584:	18c00044 	addi	r3,r3,1
 8000588:	10c0000d 	sth	r3,0(r2)
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 800058c:	e0bffe0b 	ldhu	r2,-8(fp)
 8000590:	10800044 	addi	r2,r2,1
 8000594:	e0bffe0d 	sth	r2,-8(fp)

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 8000598:	003fe606 	br	8000534 <vBlockingQueueProducer+0x24>

0800059c <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
 800059c:	defffa04 	addi	sp,sp,-24
 80005a0:	dfc00515 	stw	ra,20(sp)
 80005a4:	df000415 	stw	fp,16(sp)
 80005a8:	df000404 	addi	fp,sp,16
 80005ac:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = 0;
 80005b0:	e03ffc0d 	sth	zero,-16(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 80005b4:	e03ffc8d 	sth	zero,-14(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 80005b8:	e0bfff17 	ldw	r2,-4(fp)
 80005bc:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 80005c0:	e0bffd17 	ldw	r2,-12(fp)
 80005c4:	10c00017 	ldw	r3,0(r2)
 80005c8:	e0bffd17 	ldw	r2,-12(fp)
 80005cc:	11000117 	ldw	r4,4(r2)
 80005d0:	e0bffe04 	addi	r2,fp,-8
 80005d4:	200d883a 	mov	r6,r4
 80005d8:	100b883a 	mov	r5,r2
 80005dc:	1809883a 	mov	r4,r3
 80005e0:	8004a6c0 	call	8004a6c <xQueueReceive>
 80005e4:	10800058 	cmpnei	r2,r2,1
 80005e8:	103ff51e 	bne	r2,zero,80005c0 <vBlockingQueueConsumer+0x24>
		{
			if( usData != usExpectedValue )
 80005ec:	e0bffe0b 	ldhu	r2,-8(fp)
 80005f0:	10ffffcc 	andi	r3,r2,65535
 80005f4:	e0bffc0b 	ldhu	r2,-16(fp)
 80005f8:	18800526 	beq	r3,r2,8000610 <vBlockingQueueConsumer+0x74>
			{
				/* Catch-up. */
				usExpectedValue = usData;
 80005fc:	e0bffe0b 	ldhu	r2,-8(fp)
 8000600:	e0bffc0d 	sth	r2,-16(fp)

				sErrorEverOccurred = pdTRUE;
 8000604:	00800044 	movi	r2,1
 8000608:	e0bffc8d 	sth	r2,-14(fp)
 800060c:	003fec06 	br	80005c0 <vBlockingQueueConsumer+0x24>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
 8000610:	e0bffc8f 	ldh	r2,-14(fp)
 8000614:	1000051e 	bne	r2,zero,800062c <vBlockingQueueConsumer+0x90>
				{
					( *pxQueueParameters->psCheckVariable )++;
 8000618:	e0bffd17 	ldw	r2,-12(fp)
 800061c:	10800217 	ldw	r2,8(r2)
 8000620:	10c0000b 	ldhu	r3,0(r2)
 8000624:	18c00044 	addi	r3,r3,1
 8000628:	10c0000d 	sth	r3,0(r2)
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
 800062c:	e0bffc0b 	ldhu	r2,-16(fp)
 8000630:	10800044 	addi	r2,r2,1
 8000634:	e0bffc0d 	sth	r2,-16(fp)
					taskYIELD();
				}
			}
			#endif
		}
	}
 8000638:	003fe106 	br	80005c0 <vBlockingQueueConsumer+0x24>

0800063c <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
 800063c:	defffd04 	addi	sp,sp,-12
 8000640:	df000215 	stw	fp,8(sp)
 8000644:	df000204 	addi	fp,sp,8
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
 8000648:	00800044 	movi	r2,1
 800064c:	e0bffe15 	stw	r2,-8(fp)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000650:	e03fff15 	stw	zero,-4(fp)
 8000654:	00003b06 	br	8000744 <xAreBlockingQueuesStillRunning+0x108>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 8000658:	e0bfff17 	ldw	r2,-4(fp)
 800065c:	1087883a 	add	r3,r2,r2
 8000660:	d0a72a04 	addi	r2,gp,-25432
 8000664:	1885883a 	add	r2,r3,r2
 8000668:	1100000b 	ldhu	r4,0(r2)
 800066c:	e0bfff17 	ldw	r2,-4(fp)
 8000670:	1087883a 	add	r3,r2,r2
 8000674:	d0a72d04 	addi	r2,gp,-25420
 8000678:	1885883a 	add	r2,r3,r2
 800067c:	1080000b 	ldhu	r2,0(r2)
 8000680:	20ffffcc 	andi	r3,r4,65535
 8000684:	18e0001c 	xori	r3,r3,32768
 8000688:	18e00004 	addi	r3,r3,-32768
 800068c:	10bfffcc 	andi	r2,r2,65535
 8000690:	10a0001c 	xori	r2,r2,32768
 8000694:	10a00004 	addi	r2,r2,-32768
 8000698:	1880011e 	bne	r3,r2,80006a0 <xAreBlockingQueuesStillRunning+0x64>
		{
			xReturn = pdFALSE;
 800069c:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 80006a0:	e0bfff17 	ldw	r2,-4(fp)
 80006a4:	1087883a 	add	r3,r2,r2
 80006a8:	d0a72a04 	addi	r2,gp,-25432
 80006ac:	1885883a 	add	r2,r3,r2
 80006b0:	10c0000b 	ldhu	r3,0(r2)
 80006b4:	e0bfff17 	ldw	r2,-4(fp)
 80006b8:	1089883a 	add	r4,r2,r2
 80006bc:	d0a72d04 	addi	r2,gp,-25420
 80006c0:	2085883a 	add	r2,r4,r2
 80006c4:	10c0000d 	sth	r3,0(r2)


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 80006c8:	e0bfff17 	ldw	r2,-4(fp)
 80006cc:	1087883a 	add	r3,r2,r2
 80006d0:	d0a72b84 	addi	r2,gp,-25426
 80006d4:	1885883a 	add	r2,r3,r2
 80006d8:	1100000b 	ldhu	r4,0(r2)
 80006dc:	e0bfff17 	ldw	r2,-4(fp)
 80006e0:	1087883a 	add	r3,r2,r2
 80006e4:	d0a72e84 	addi	r2,gp,-25414
 80006e8:	1885883a 	add	r2,r3,r2
 80006ec:	1080000b 	ldhu	r2,0(r2)
 80006f0:	20ffffcc 	andi	r3,r4,65535
 80006f4:	18e0001c 	xori	r3,r3,32768
 80006f8:	18e00004 	addi	r3,r3,-32768
 80006fc:	10bfffcc 	andi	r2,r2,65535
 8000700:	10a0001c 	xori	r2,r2,32768
 8000704:	10a00004 	addi	r2,r2,-32768
 8000708:	1880011e 	bne	r3,r2,8000710 <xAreBlockingQueuesStillRunning+0xd4>
		{
			xReturn = pdFALSE;
 800070c:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 8000710:	e0bfff17 	ldw	r2,-4(fp)
 8000714:	1087883a 	add	r3,r2,r2
 8000718:	d0a72b84 	addi	r2,gp,-25426
 800071c:	1885883a 	add	r2,r3,r2
 8000720:	10c0000b 	ldhu	r3,0(r2)
 8000724:	e0bfff17 	ldw	r2,-4(fp)
 8000728:	1089883a 	add	r4,r2,r2
 800072c:	d0a72e84 	addi	r2,gp,-25414
 8000730:	2085883a 	add	r2,r4,r2
 8000734:	10c0000d 	sth	r3,0(r2)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000738:	e0bfff17 	ldw	r2,-4(fp)
 800073c:	10800044 	addi	r2,r2,1
 8000740:	e0bfff15 	stw	r2,-4(fp)
 8000744:	e0bfff17 	ldw	r2,-4(fp)
 8000748:	108000d0 	cmplti	r2,r2,3
 800074c:	103fc21e 	bne	r2,zero,8000658 <xAreBlockingQueuesStillRunning+0x1c>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
 8000750:	e0bffe17 	ldw	r2,-8(fp)
}
 8000754:	e037883a 	mov	sp,fp
 8000758:	df000017 	ldw	fp,0(sp)
 800075c:	dec00104 	addi	sp,sp,4
 8000760:	f800283a 	ret

08000764 <vStartGenericQueueTasks>:
static volatile BaseType_t xBlockWasAborted = pdFALSE;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 8000764:	defff904 	addi	sp,sp,-28
 8000768:	dfc00615 	stw	ra,24(sp)
 800076c:	df000515 	stw	fp,20(sp)
 8000770:	df000504 	addi	fp,sp,20
 8000774:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 8000778:	000d883a 	mov	r6,zero
 800077c:	01400104 	movi	r5,4
 8000780:	01000144 	movi	r4,5
 8000784:	80043880 	call	8004388 <xQueueGenericCreate>
 8000788:	e0bffd15 	stw	r2,-12(fp)

	if( xQueue != NULL )
 800078c:	e0bffd17 	ldw	r2,-12(fp)
 8000790:	10000a26 	beq	r2,zero,80007bc <vStartGenericQueueTasks+0x58>
		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );

		/* Create the demo task and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvSendFrontAndBackTest, "GenQ", genqGENERIC_QUEUE_TEST_TASK_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 8000794:	d8000115 	stw	zero,4(sp)
 8000798:	e0bfff17 	ldw	r2,-4(fp)
 800079c:	d8800015 	stw	r2,0(sp)
 80007a0:	e1fffd17 	ldw	r7,-12(fp)
 80007a4:	01810004 	movi	r6,1024
 80007a8:	01420074 	movhi	r5,2049
 80007ac:	297b2404 	addi	r5,r5,-4976
 80007b0:	01020034 	movhi	r4,2048
 80007b4:	21021904 	addi	r4,r4,2148
 80007b8:	80056e80 	call	80056e8 <xTaskCreate>
	}

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 80007bc:	01000044 	movi	r4,1
 80007c0:	80045140 	call	8004514 <xQueueCreateMutex>
 80007c4:	e0bffe15 	stw	r2,-8(fp)

	if( xMutex != NULL )
 80007c8:	e0bffe17 	ldw	r2,-8(fp)
 80007cc:	10001f26 	beq	r2,zero,800084c <vStartGenericQueueTasks+0xe8>
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );

		/* Create the mutex demo tasks and pass it the mutex just created.  We
		are passing the mutex handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvLowPriorityMutexTask, "MuLow", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 80007d0:	d8000115 	stw	zero,4(sp)
 80007d4:	d8000015 	stw	zero,0(sp)
 80007d8:	e1fffe17 	ldw	r7,-8(fp)
 80007dc:	01810004 	movi	r6,1024
 80007e0:	01420074 	movhi	r5,2049
 80007e4:	297b2604 	addi	r5,r5,-4968
 80007e8:	01020034 	movhi	r4,2048
 80007ec:	2103ec04 	addi	r4,r4,4016
 80007f0:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 80007f4:	d0a73504 	addi	r2,gp,-25388
 80007f8:	d8800115 	stw	r2,4(sp)
 80007fc:	00800084 	movi	r2,2
 8000800:	d8800015 	stw	r2,0(sp)
 8000804:	000f883a 	mov	r7,zero
 8000808:	01810004 	movi	r6,1024
 800080c:	01420074 	movhi	r5,2049
 8000810:	297b2804 	addi	r5,r5,-4960
 8000814:	01020034 	movhi	r4,2048
 8000818:	21040304 	addi	r4,r4,4108
 800081c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 8000820:	d0a73404 	addi	r2,gp,-25392
 8000824:	d8800115 	stw	r2,4(sp)
 8000828:	008000c4 	movi	r2,3
 800082c:	d8800015 	stw	r2,0(sp)
 8000830:	e1fffe17 	ldw	r7,-8(fp)
 8000834:	01810004 	movi	r6,1024
 8000838:	01420074 	movhi	r5,2049
 800083c:	297b2a04 	addi	r5,r5,-4952
 8000840:	01020034 	movhi	r4,2048
 8000844:	21040e04 	addi	r4,r4,4152
 8000848:	80056e80 	call	80056e8 <xTaskCreate>
		{
			xTaskCreate( prvHighPriorityMutexTask, "MuHigh2", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_MEDIUM_PRIORITY, &xSecondMediumPriorityMutexTask );
		}
		#endif /* INCLUDE_xTaskAbortDelay */
	}
}
 800084c:	0001883a 	nop
 8000850:	e037883a 	mov	sp,fp
 8000854:	dfc00117 	ldw	ra,4(sp)
 8000858:	df000017 	ldw	fp,0(sp)
 800085c:	dec00204 	addi	sp,sp,8
 8000860:	f800283a 	ret

08000864 <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 8000864:	defff904 	addi	sp,sp,-28
 8000868:	dfc00615 	stw	ra,24(sp)
 800086c:	df000515 	stw	fp,20(sp)
 8000870:	df000504 	addi	fp,sp,20
 8000874:	e13fff15 	stw	r4,-4(fp)

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 8000878:	e0bfff17 	ldw	r2,-4(fp)
 800087c:	e0bffb15 	stw	r2,-20(fp)
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		ulLoopCounterSnapshot = ulLoopCounter;
 8000880:	d0a73117 	ldw	r2,-25404(gp)
 8000884:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 8000888:	e0bffe04 	addi	r2,fp,-8
 800088c:	01c00044 	movi	r7,1
 8000890:	000d883a 	mov	r6,zero
 8000894:	100b883a 	mov	r5,r2
 8000898:	e13ffb17 	ldw	r4,-20(fp)
 800089c:	80046f40 	call	80046f4 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80008a0:	e13ffb17 	ldw	r4,-20(fp)
 80008a4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80008a8:	10800060 	cmpeqi	r2,r2,1
 80008ac:	1000021e 	bne	r2,zero,80008b8 <prvSendFrontAndBackTest+0x54>
		{
			xErrorDetected = pdTRUE;
 80008b0:	00800044 	movi	r2,1
 80008b4:	d0a73015 	stw	r2,-25408(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 80008b8:	e0bffc04 	addi	r2,fp,-16
 80008bc:	000d883a 	mov	r6,zero
 80008c0:	100b883a 	mov	r5,r2
 80008c4:	e13ffb17 	ldw	r4,-20(fp)
 80008c8:	8004a6c0 	call	8004a6c <xQueueReceive>
 80008cc:	10800060 	cmpeqi	r2,r2,1
 80008d0:	1000021e 	bne	r2,zero,80008dc <prvSendFrontAndBackTest+0x78>
		{
			xErrorDetected = pdTRUE;
 80008d4:	00800044 	movi	r2,1
 80008d8:	d0a73015 	stw	r2,-25408(gp)
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 80008dc:	d0e73117 	ldw	r3,-25404(gp)
 80008e0:	e0bffc17 	ldw	r2,-16(fp)
 80008e4:	18800226 	beq	r3,r2,80008f0 <prvSendFrontAndBackTest+0x8c>
		{
			xErrorDetected = pdTRUE;
 80008e8:	00800044 	movi	r2,1
 80008ec:	d0a73015 	stw	r2,-25408(gp)
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 80008f0:	e13ffb17 	ldw	r4,-20(fp)
 80008f4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80008f8:	10000226 	beq	r2,zero,8000904 <prvSendFrontAndBackTest+0xa0>
		{
			xErrorDetected = pdTRUE;
 80008fc:	00800044 	movi	r2,1
 8000900:	d0a73015 	stw	r2,-25408(gp)
		}

		ulLoopCounterSnapshot = ulLoopCounter;
 8000904:	d0a73117 	ldw	r2,-25404(gp)
 8000908:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 800090c:	e0bffe04 	addi	r2,fp,-8
 8000910:	000f883a 	mov	r7,zero
 8000914:	000d883a 	mov	r6,zero
 8000918:	100b883a 	mov	r5,r2
 800091c:	e13ffb17 	ldw	r4,-20(fp)
 8000920:	80046f40 	call	80046f4 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8000924:	e13ffb17 	ldw	r4,-20(fp)
 8000928:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 800092c:	10800060 	cmpeqi	r2,r2,1
 8000930:	1000021e 	bne	r2,zero,800093c <prvSendFrontAndBackTest+0xd8>
		{
			xErrorDetected = pdTRUE;
 8000934:	00800044 	movi	r2,1
 8000938:	d0a73015 	stw	r2,-25408(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 800093c:	e0bffc04 	addi	r2,fp,-16
 8000940:	000d883a 	mov	r6,zero
 8000944:	100b883a 	mov	r5,r2
 8000948:	e13ffb17 	ldw	r4,-20(fp)
 800094c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8000950:	10800060 	cmpeqi	r2,r2,1
 8000954:	1000021e 	bne	r2,zero,8000960 <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
 8000958:	00800044 	movi	r2,1
 800095c:	d0a73015 	stw	r2,-25408(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000960:	e13ffb17 	ldw	r4,-20(fp)
 8000964:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000968:	10000226 	beq	r2,zero,8000974 <prvSendFrontAndBackTest+0x110>
		{
			xErrorDetected = pdTRUE;
 800096c:	00800044 	movi	r2,1
 8000970:	d0a73015 	stw	r2,-25408(gp)
		}

		/* The data sent to the queue should equal the data just received from
		the queue. */
		if( ulLoopCounter != ulData )
 8000974:	d0e73117 	ldw	r3,-25404(gp)
 8000978:	e0bffc17 	ldw	r2,-16(fp)
 800097c:	18800226 	beq	r3,r2,8000988 <prvSendFrontAndBackTest+0x124>
		{
			xErrorDetected = pdTRUE;
 8000980:	00800044 	movi	r2,1
 8000984:	d0a73015 	stw	r2,-25408(gp)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8000988:	00800084 	movi	r2,2
 800098c:	e0bffc15 	stw	r2,-16(fp)
 8000990:	00000906 	br	80009b8 <prvSendFrontAndBackTest+0x154>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000994:	e0bffc04 	addi	r2,fp,-16
 8000998:	000f883a 	mov	r7,zero
 800099c:	000d883a 	mov	r6,zero
 80009a0:	100b883a 	mov	r5,r2
 80009a4:	e13ffb17 	ldw	r4,-20(fp)
 80009a8:	80046f40 	call	80046f4 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 80009ac:	e0bffc17 	ldw	r2,-16(fp)
 80009b0:	10800044 	addi	r2,r2,1
 80009b4:	e0bffc15 	stw	r2,-16(fp)
 80009b8:	e0bffc17 	ldw	r2,-16(fp)
 80009bc:	10800170 	cmpltui	r2,r2,5
 80009c0:	103ff41e 	bne	r2,zero,8000994 <prvSendFrontAndBackTest+0x130>
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 80009c4:	e13ffb17 	ldw	r4,-20(fp)
 80009c8:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80009cc:	108000e0 	cmpeqi	r2,r2,3
 80009d0:	1000021e 	bne	r2,zero,80009dc <prvSendFrontAndBackTest+0x178>
		{
			xErrorDetected = pdTRUE;
 80009d4:	00800044 	movi	r2,1
 80009d8:	d0a73015 	stw	r2,-25408(gp)
		}
		ulData = 1;
 80009dc:	00800044 	movi	r2,1
 80009e0:	e0bffc15 	stw	r2,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 80009e4:	e0bffc04 	addi	r2,fp,-16
 80009e8:	01c00044 	movi	r7,1
 80009ec:	000d883a 	mov	r6,zero
 80009f0:	100b883a 	mov	r5,r2
 80009f4:	e13ffb17 	ldw	r4,-20(fp)
 80009f8:	80046f40 	call	80046f4 <xQueueGenericSend>
		ulData = 0;
 80009fc:	e03ffc15 	stw	zero,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000a00:	e0bffc04 	addi	r2,fp,-16
 8000a04:	01c00044 	movi	r7,1
 8000a08:	000d883a 	mov	r6,zero
 8000a0c:	100b883a 	mov	r5,r2
 8000a10:	e13ffb17 	ldw	r4,-20(fp)
 8000a14:	80046f40 	call	80046f4 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8000a18:	e13ffb17 	ldw	r4,-20(fp)
 8000a1c:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000a20:	10800160 	cmpeqi	r2,r2,5
 8000a24:	1000021e 	bne	r2,zero,8000a30 <prvSendFrontAndBackTest+0x1cc>
		{
			xErrorDetected = pdTRUE;
 8000a28:	00800044 	movi	r2,1
 8000a2c:	d0a73015 	stw	r2,-25408(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000a30:	e0bffc04 	addi	r2,fp,-16
 8000a34:	01c00044 	movi	r7,1
 8000a38:	000d883a 	mov	r6,zero
 8000a3c:	100b883a 	mov	r5,r2
 8000a40:	e13ffb17 	ldw	r4,-20(fp)
 8000a44:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000a48:	10000226 	beq	r2,zero,8000a54 <prvSendFrontAndBackTest+0x1f0>
		{
			xErrorDetected = pdTRUE;
 8000a4c:	00800044 	movi	r2,1
 8000a50:	d0a73015 	stw	r2,-25408(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000a54:	e0bffc04 	addi	r2,fp,-16
 8000a58:	000f883a 	mov	r7,zero
 8000a5c:	000d883a 	mov	r6,zero
 8000a60:	100b883a 	mov	r5,r2
 8000a64:	e13ffb17 	ldw	r4,-20(fp)
 8000a68:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000a6c:	10000226 	beq	r2,zero,8000a78 <prvSendFrontAndBackTest+0x214>
		{
			xErrorDetected = pdTRUE;
 8000a70:	00800044 	movi	r2,1
 8000a74:	d0a73015 	stw	r2,-25408(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000a78:	e03ffc15 	stw	zero,-16(fp)
 8000a7c:	00002206 	br	8000b08 <prvSendFrontAndBackTest+0x2a4>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000a80:	e0bffd04 	addi	r2,fp,-12
 8000a84:	000d883a 	mov	r6,zero
 8000a88:	100b883a 	mov	r5,r2
 8000a8c:	e13ffb17 	ldw	r4,-20(fp)
 8000a90:	8004e240 	call	8004e24 <xQueuePeek>
 8000a94:	10800060 	cmpeqi	r2,r2,1
 8000a98:	1000021e 	bne	r2,zero,8000aa4 <prvSendFrontAndBackTest+0x240>
			{
				xErrorDetected = pdTRUE;
 8000a9c:	00800044 	movi	r2,1
 8000aa0:	d0a73015 	stw	r2,-25408(gp)
			}

			if( ulData != ulData2 )
 8000aa4:	e0fffc17 	ldw	r3,-16(fp)
 8000aa8:	e0bffd17 	ldw	r2,-12(fp)
 8000aac:	18800226 	beq	r3,r2,8000ab8 <prvSendFrontAndBackTest+0x254>
			{
				xErrorDetected = pdTRUE;
 8000ab0:	00800044 	movi	r2,1
 8000ab4:	d0a73015 	stw	r2,-25408(gp)
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 8000ab8:	e0bffd17 	ldw	r2,-12(fp)
 8000abc:	0084303a 	nor	r2,zero,r2
 8000ac0:	e0bffd15 	stw	r2,-12(fp)
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000ac4:	e0bffd04 	addi	r2,fp,-12
 8000ac8:	000d883a 	mov	r6,zero
 8000acc:	100b883a 	mov	r5,r2
 8000ad0:	e13ffb17 	ldw	r4,-20(fp)
 8000ad4:	8004a6c0 	call	8004a6c <xQueueReceive>
 8000ad8:	10800060 	cmpeqi	r2,r2,1
 8000adc:	1000021e 	bne	r2,zero,8000ae8 <prvSendFrontAndBackTest+0x284>
			{
				xErrorDetected = pdTRUE;
 8000ae0:	00800044 	movi	r2,1
 8000ae4:	d0a73015 	stw	r2,-25408(gp)
			}

			if( ulData != ulData2 )
 8000ae8:	e0fffc17 	ldw	r3,-16(fp)
 8000aec:	e0bffd17 	ldw	r2,-12(fp)
 8000af0:	18800226 	beq	r3,r2,8000afc <prvSendFrontAndBackTest+0x298>
			{
				xErrorDetected = pdTRUE;
 8000af4:	00800044 	movi	r2,1
 8000af8:	d0a73015 	stw	r2,-25408(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000afc:	e0bffc17 	ldw	r2,-16(fp)
 8000b00:	10800044 	addi	r2,r2,1
 8000b04:	e0bffc15 	stw	r2,-16(fp)
 8000b08:	e0bffc17 	ldw	r2,-16(fp)
 8000b0c:	10800170 	cmpltui	r2,r2,5
 8000b10:	103fdb1e 	bne	r2,zero,8000a80 <prvSendFrontAndBackTest+0x21c>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000b14:	e13ffb17 	ldw	r4,-20(fp)
 8000b18:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000b1c:	10000226 	beq	r2,zero,8000b28 <prvSendFrontAndBackTest+0x2c4>
		{
			xErrorDetected = pdTRUE;
 8000b20:	00800044 	movi	r2,1
 8000b24:	d0a73015 	stw	r2,-25408(gp)
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 8000b28:	00800284 	movi	r2,10
 8000b2c:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8000b30:	e0bffc04 	addi	r2,fp,-16
 8000b34:	000f883a 	mov	r7,zero
 8000b38:	000d883a 	mov	r6,zero
 8000b3c:	100b883a 	mov	r5,r2
 8000b40:	e13ffb17 	ldw	r4,-20(fp)
 8000b44:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000b48:	10800060 	cmpeqi	r2,r2,1
 8000b4c:	1000021e 	bne	r2,zero,8000b58 <prvSendFrontAndBackTest+0x2f4>
		{
			xErrorDetected = pdTRUE;
 8000b50:	00800044 	movi	r2,1
 8000b54:	d0a73015 	stw	r2,-25408(gp)
		}
		ulData = 11;
 8000b58:	008002c4 	movi	r2,11
 8000b5c:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8000b60:	e0bffc04 	addi	r2,fp,-16
 8000b64:	000f883a 	mov	r7,zero
 8000b68:	000d883a 	mov	r6,zero
 8000b6c:	100b883a 	mov	r5,r2
 8000b70:	e13ffb17 	ldw	r4,-20(fp)
 8000b74:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000b78:	10800060 	cmpeqi	r2,r2,1
 8000b7c:	1000021e 	bne	r2,zero,8000b88 <prvSendFrontAndBackTest+0x324>
		{
			xErrorDetected = pdTRUE;
 8000b80:	00800044 	movi	r2,1
 8000b84:	d0a73015 	stw	r2,-25408(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 8000b88:	e13ffb17 	ldw	r4,-20(fp)
 8000b8c:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000b90:	108000a0 	cmpeqi	r2,r2,2
 8000b94:	1000021e 	bne	r2,zero,8000ba0 <prvSendFrontAndBackTest+0x33c>
		{
			xErrorDetected = pdTRUE;
 8000b98:	00800044 	movi	r2,1
 8000b9c:	d0a73015 	stw	r2,-25408(gp)
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8000ba0:	00800244 	movi	r2,9
 8000ba4:	e0bffc15 	stw	r2,-16(fp)
 8000ba8:	00000d06 	br	8000be0 <prvSendFrontAndBackTest+0x37c>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000bac:	e0bffc04 	addi	r2,fp,-16
 8000bb0:	01c00044 	movi	r7,1
 8000bb4:	000d883a 	mov	r6,zero
 8000bb8:	100b883a 	mov	r5,r2
 8000bbc:	e13ffb17 	ldw	r4,-20(fp)
 8000bc0:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000bc4:	10800060 	cmpeqi	r2,r2,1
 8000bc8:	1000021e 	bne	r2,zero,8000bd4 <prvSendFrontAndBackTest+0x370>
			{
				xErrorDetected = pdTRUE;
 8000bcc:	00800044 	movi	r2,1
 8000bd0:	d0a73015 	stw	r2,-25408(gp)
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8000bd4:	e0bffc17 	ldw	r2,-16(fp)
 8000bd8:	10bfffc4 	addi	r2,r2,-1
 8000bdc:	e0bffc15 	stw	r2,-16(fp)
 8000be0:	e0bffc17 	ldw	r2,-16(fp)
 8000be4:	108001e8 	cmpgeui	r2,r2,7
 8000be8:	103ff01e 	bne	r2,zero,8000bac <prvSendFrontAndBackTest+0x348>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8000bec:	e13ffb17 	ldw	r4,-20(fp)
 8000bf0:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000bf4:	10800160 	cmpeqi	r2,r2,5
 8000bf8:	1000021e 	bne	r2,zero,8000c04 <prvSendFrontAndBackTest+0x3a0>
		{
			xErrorDetected = pdTRUE;
 8000bfc:	00800044 	movi	r2,1
 8000c00:	d0a73015 	stw	r2,-25408(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000c04:	e0bffc04 	addi	r2,fp,-16
 8000c08:	01c00044 	movi	r7,1
 8000c0c:	000d883a 	mov	r6,zero
 8000c10:	100b883a 	mov	r5,r2
 8000c14:	e13ffb17 	ldw	r4,-20(fp)
 8000c18:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000c1c:	10000226 	beq	r2,zero,8000c28 <prvSendFrontAndBackTest+0x3c4>
		{
			xErrorDetected = pdTRUE;
 8000c20:	00800044 	movi	r2,1
 8000c24:	d0a73015 	stw	r2,-25408(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000c28:	e0bffc04 	addi	r2,fp,-16
 8000c2c:	000f883a 	mov	r7,zero
 8000c30:	000d883a 	mov	r6,zero
 8000c34:	100b883a 	mov	r5,r2
 8000c38:	e13ffb17 	ldw	r4,-20(fp)
 8000c3c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000c40:	10000226 	beq	r2,zero,8000c4c <prvSendFrontAndBackTest+0x3e8>
		{
			xErrorDetected = pdTRUE;
 8000c44:	00800044 	movi	r2,1
 8000c48:	d0a73015 	stw	r2,-25408(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8000c4c:	008001c4 	movi	r2,7
 8000c50:	e0bffc15 	stw	r2,-16(fp)
 8000c54:	00001106 	br	8000c9c <prvSendFrontAndBackTest+0x438>
		{
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000c58:	e0bffd04 	addi	r2,fp,-12
 8000c5c:	000d883a 	mov	r6,zero
 8000c60:	100b883a 	mov	r5,r2
 8000c64:	e13ffb17 	ldw	r4,-20(fp)
 8000c68:	8004a6c0 	call	8004a6c <xQueueReceive>
 8000c6c:	10800060 	cmpeqi	r2,r2,1
 8000c70:	1000021e 	bne	r2,zero,8000c7c <prvSendFrontAndBackTest+0x418>
			{
				xErrorDetected = pdTRUE;
 8000c74:	00800044 	movi	r2,1
 8000c78:	d0a73015 	stw	r2,-25408(gp)
			}

			if( ulData != ulData2 )
 8000c7c:	e0fffc17 	ldw	r3,-16(fp)
 8000c80:	e0bffd17 	ldw	r2,-12(fp)
 8000c84:	18800226 	beq	r3,r2,8000c90 <prvSendFrontAndBackTest+0x42c>
			{
				xErrorDetected = pdTRUE;
 8000c88:	00800044 	movi	r2,1
 8000c8c:	d0a73015 	stw	r2,-25408(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8000c90:	e0bffc17 	ldw	r2,-16(fp)
 8000c94:	10800044 	addi	r2,r2,1
 8000c98:	e0bffc15 	stw	r2,-16(fp)
 8000c9c:	e0bffc17 	ldw	r2,-16(fp)
 8000ca0:	10800330 	cmpltui	r2,r2,12
 8000ca4:	103fec1e 	bne	r2,zero,8000c58 <prvSendFrontAndBackTest+0x3f4>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000ca8:	e13ffb17 	ldw	r4,-20(fp)
 8000cac:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8000cb0:	10000226 	beq	r2,zero,8000cbc <prvSendFrontAndBackTest+0x458>
		{
			xErrorDetected = pdTRUE;
 8000cb4:	00800044 	movi	r2,1
 8000cb8:	d0a73015 	stw	r2,-25408(gp)
		}

		/* Increment the loop counter to indicate these tasks are still
		executing. */
		ulLoopCounter++;
 8000cbc:	d0a73117 	ldw	r2,-25404(gp)
 8000cc0:	10800044 	addi	r2,r2,1
 8000cc4:	d0a73115 	stw	r2,-25404(gp)
	}
 8000cc8:	003eed06 	br	8000880 <prvSendFrontAndBackTest+0x1c>

08000ccc <prvTakeTwoMutexesReturnInDifferentOrder>:

#endif /* INCLUDE_xTaskAbortDelay == 1 */
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8000ccc:	defffc04 	addi	sp,sp,-16
 8000cd0:	dfc00315 	stw	ra,12(sp)
 8000cd4:	df000215 	stw	fp,8(sp)
 8000cd8:	df000204 	addi	fp,sp,8
 8000cdc:	e13ffe15 	stw	r4,-8(fp)
 8000ce0:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8000ce4:	000b883a 	mov	r5,zero
 8000ce8:	e13ffe17 	ldw	r4,-8(fp)
 8000cec:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000cf0:	10800060 	cmpeqi	r2,r2,1
 8000cf4:	1000021e 	bne	r2,zero,8000d00 <prvTakeTwoMutexesReturnInDifferentOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 8000cf8:	00800044 	movi	r2,1
 8000cfc:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8000d00:	d0273315 	stw	zero,-25396(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8000d04:	0009883a 	mov	r4,zero
 8000d08:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000d0c:	10000226 	beq	r2,zero,8000d18 <prvTakeTwoMutexesReturnInDifferentOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8000d10:	00800044 	movi	r2,1
 8000d14:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8000d18:	d0a73417 	ldw	r2,-25392(gp)
 8000d1c:	1009883a 	mov	r4,r2
 8000d20:	80060bc0 	call	80060bc <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000d24:	0009883a 	mov	r4,zero
 8000d28:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000d2c:	108000e0 	cmpeqi	r2,r2,3
 8000d30:	1000021e 	bne	r2,zero,8000d3c <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 8000d34:	00800044 	movi	r2,1
 8000d38:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Attempt to set the priority of this task to the test priority -
	between the idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 8000d3c:	01400044 	movi	r5,1
 8000d40:	0009883a 	mov	r4,zero
 8000d44:	8005d940 	call	8005d94 <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000d48:	0009883a 	mov	r4,zero
 8000d4c:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000d50:	108000e0 	cmpeqi	r2,r2,3
 8000d54:	1000021e 	bne	r2,zero,8000d60 <prvTakeTwoMutexesReturnInDifferentOrder+0x94>
	{
		xErrorDetected = pdTRUE;
 8000d58:	00800044 	movi	r2,1
 8000d5c:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8000d60:	d0a73517 	ldw	r2,-25388(gp)
 8000d64:	1009883a 	mov	r4,r2
 8000d68:	80060bc0 	call	80060bc <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8000d6c:	d0a73317 	ldw	r2,-25396(gp)
 8000d70:	10000226 	beq	r2,zero,8000d7c <prvTakeTwoMutexesReturnInDifferentOrder+0xb0>
	{
		xErrorDetected = pdTRUE;
 8000d74:	00800044 	movi	r2,1
 8000d78:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 8000d7c:	000b883a 	mov	r5,zero
 8000d80:	e13fff17 	ldw	r4,-4(fp)
 8000d84:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000d88:	10800060 	cmpeqi	r2,r2,1
 8000d8c:	1000021e 	bne	r2,zero,8000d98 <prvTakeTwoMutexesReturnInDifferentOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 8000d90:	00800044 	movi	r2,1
 8000d94:	d0a73015 	stw	r2,-25408(gp)
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8000d98:	000f883a 	mov	r7,zero
 8000d9c:	000d883a 	mov	r6,zero
 8000da0:	000b883a 	mov	r5,zero
 8000da4:	e13ffe17 	ldw	r4,-8(fp)
 8000da8:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000dac:	10800060 	cmpeqi	r2,r2,1
 8000db0:	1000021e 	bne	r2,zero,8000dbc <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
 8000db4:	00800044 	movi	r2,1
 8000db8:	d0a73015 	stw	r2,-25408(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8000dbc:	d0a73317 	ldw	r2,-25396(gp)
 8000dc0:	10000226 	beq	r2,zero,8000dcc <prvTakeTwoMutexesReturnInDifferentOrder+0x100>
	{
		xErrorDetected = pdTRUE;
 8000dc4:	00800044 	movi	r2,1
 8000dc8:	d0a73015 	stw	r2,-25408(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000dcc:	0009883a 	mov	r4,zero
 8000dd0:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000dd4:	108000e0 	cmpeqi	r2,r2,3
 8000dd8:	1000021e 	bne	r2,zero,8000de4 <prvTakeTwoMutexesReturnInDifferentOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 8000ddc:	00800044 	movi	r2,1
 8000de0:	d0a73015 	stw	r2,-25408(gp)
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8000de4:	000f883a 	mov	r7,zero
 8000de8:	000d883a 	mov	r6,zero
 8000dec:	000b883a 	mov	r5,zero
 8000df0:	e13fff17 	ldw	r4,-4(fp)
 8000df4:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000df8:	10800060 	cmpeqi	r2,r2,1
 8000dfc:	1000021e 	bne	r2,zero,8000e08 <prvTakeTwoMutexesReturnInDifferentOrder+0x13c>
	{
		xErrorDetected = pdTRUE;
 8000e00:	00800044 	movi	r2,1
 8000e04:	d0a73015 	stw	r2,-25408(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8000e08:	d0a73317 	ldw	r2,-25396(gp)
 8000e0c:	10800060 	cmpeqi	r2,r2,1
 8000e10:	1000021e 	bne	r2,zero,8000e1c <prvTakeTwoMutexesReturnInDifferentOrder+0x150>
	{
		xErrorDetected = pdTRUE;
 8000e14:	00800044 	movi	r2,1
 8000e18:	d0a73015 	stw	r2,-25408(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 8000e1c:	0009883a 	mov	r4,zero
 8000e20:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000e24:	10800060 	cmpeqi	r2,r2,1
 8000e28:	1000021e 	bne	r2,zero,8000e34 <prvTakeTwoMutexesReturnInDifferentOrder+0x168>
	{
		xErrorDetected = pdTRUE;
 8000e2c:	00800044 	movi	r2,1
 8000e30:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 8000e34:	000b883a 	mov	r5,zero
 8000e38:	0009883a 	mov	r4,zero
 8000e3c:	8005d940 	call	8005d94 <vTaskPrioritySet>
}
 8000e40:	0001883a 	nop
 8000e44:	e037883a 	mov	sp,fp
 8000e48:	dfc00117 	ldw	ra,4(sp)
 8000e4c:	df000017 	ldw	fp,0(sp)
 8000e50:	dec00204 	addi	sp,sp,8
 8000e54:	f800283a 	ret

08000e58 <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8000e58:	defffc04 	addi	sp,sp,-16
 8000e5c:	dfc00315 	stw	ra,12(sp)
 8000e60:	df000215 	stw	fp,8(sp)
 8000e64:	df000204 	addi	fp,sp,8
 8000e68:	e13ffe15 	stw	r4,-8(fp)
 8000e6c:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8000e70:	000b883a 	mov	r5,zero
 8000e74:	e13ffe17 	ldw	r4,-8(fp)
 8000e78:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000e7c:	10800060 	cmpeqi	r2,r2,1
 8000e80:	1000021e 	bne	r2,zero,8000e8c <prvTakeTwoMutexesReturnInSameOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 8000e84:	00800044 	movi	r2,1
 8000e88:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8000e8c:	d0273315 	stw	zero,-25396(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8000e90:	0009883a 	mov	r4,zero
 8000e94:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000e98:	10000226 	beq	r2,zero,8000ea4 <prvTakeTwoMutexesReturnInSameOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8000e9c:	00800044 	movi	r2,1
 8000ea0:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8000ea4:	d0a73417 	ldw	r2,-25392(gp)
 8000ea8:	1009883a 	mov	r4,r2
 8000eac:	80060bc0 	call	80060bc <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000eb0:	0009883a 	mov	r4,zero
 8000eb4:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000eb8:	108000e0 	cmpeqi	r2,r2,3
 8000ebc:	1000021e 	bne	r2,zero,8000ec8 <prvTakeTwoMutexesReturnInSameOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 8000ec0:	00800044 	movi	r2,1
 8000ec4:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8000ec8:	d0a73517 	ldw	r2,-25388(gp)
 8000ecc:	1009883a 	mov	r4,r2
 8000ed0:	80060bc0 	call	80060bc <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8000ed4:	d0a73317 	ldw	r2,-25396(gp)
 8000ed8:	10000226 	beq	r2,zero,8000ee4 <prvTakeTwoMutexesReturnInSameOrder+0x8c>
	{
		xErrorDetected = pdTRUE;
 8000edc:	00800044 	movi	r2,1
 8000ee0:	d0a73015 	stw	r2,-25408(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 8000ee4:	000b883a 	mov	r5,zero
 8000ee8:	e13fff17 	ldw	r4,-4(fp)
 8000eec:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8000ef0:	10800060 	cmpeqi	r2,r2,1
 8000ef4:	1000021e 	bne	r2,zero,8000f00 <prvTakeTwoMutexesReturnInSameOrder+0xa8>
	{
		xErrorDetected = pdTRUE;
 8000ef8:	00800044 	movi	r2,1
 8000efc:	d0a73015 	stw	r2,-25408(gp)
	not yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8000f00:	000f883a 	mov	r7,zero
 8000f04:	000d883a 	mov	r6,zero
 8000f08:	000b883a 	mov	r5,zero
 8000f0c:	e13fff17 	ldw	r4,-4(fp)
 8000f10:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000f14:	10800060 	cmpeqi	r2,r2,1
 8000f18:	1000021e 	bne	r2,zero,8000f24 <prvTakeTwoMutexesReturnInSameOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 8000f1c:	00800044 	movi	r2,1
 8000f20:	d0a73015 	stw	r2,-25408(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8000f24:	d0a73317 	ldw	r2,-25396(gp)
 8000f28:	10000226 	beq	r2,zero,8000f34 <prvTakeTwoMutexesReturnInSameOrder+0xdc>
	{
		xErrorDetected = pdTRUE;
 8000f2c:	00800044 	movi	r2,1
 8000f30:	d0a73015 	stw	r2,-25408(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8000f34:	0009883a 	mov	r4,zero
 8000f38:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000f3c:	108000e0 	cmpeqi	r2,r2,3
 8000f40:	1000021e 	bne	r2,zero,8000f4c <prvTakeTwoMutexesReturnInSameOrder+0xf4>
	{
		xErrorDetected = pdTRUE;
 8000f44:	00800044 	movi	r2,1
 8000f48:	d0a73015 	stw	r2,-25408(gp)
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8000f4c:	000f883a 	mov	r7,zero
 8000f50:	000d883a 	mov	r6,zero
 8000f54:	000b883a 	mov	r5,zero
 8000f58:	e13ffe17 	ldw	r4,-8(fp)
 8000f5c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8000f60:	10800060 	cmpeqi	r2,r2,1
 8000f64:	1000021e 	bne	r2,zero,8000f70 <prvTakeTwoMutexesReturnInSameOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 8000f68:	00800044 	movi	r2,1
 8000f6c:	d0a73015 	stw	r2,-25408(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8000f70:	d0a73317 	ldw	r2,-25396(gp)
 8000f74:	10800060 	cmpeqi	r2,r2,1
 8000f78:	1000021e 	bne	r2,zero,8000f84 <prvTakeTwoMutexesReturnInSameOrder+0x12c>
	{
		xErrorDetected = pdTRUE;
 8000f7c:	00800044 	movi	r2,1
 8000f80:	d0a73015 	stw	r2,-25408(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8000f84:	0009883a 	mov	r4,zero
 8000f88:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8000f8c:	10000226 	beq	r2,zero,8000f98 <prvTakeTwoMutexesReturnInSameOrder+0x140>
	{
		xErrorDetected = pdTRUE;
 8000f90:	00800044 	movi	r2,1
 8000f94:	d0a73015 	stw	r2,-25408(gp)
	}
}
 8000f98:	0001883a 	nop
 8000f9c:	e037883a 	mov	sp,fp
 8000fa0:	dfc00117 	ldw	ra,4(sp)
 8000fa4:	df000017 	ldw	fp,0(sp)
 8000fa8:	dec00204 	addi	sp,sp,8
 8000fac:	f800283a 	ret

08000fb0 <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 8000fb0:	defffb04 	addi	sp,sp,-20
 8000fb4:	dfc00415 	stw	ra,16(sp)
 8000fb8:	df000315 	stw	fp,12(sp)
 8000fbc:	df000304 	addi	fp,sp,12
 8000fc0:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 8000fc4:	e0bfff17 	ldw	r2,-4(fp)
 8000fc8:	e0bffd15 	stw	r2,-12(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 8000fcc:	01000044 	movi	r4,1
 8000fd0:	80045140 	call	8004514 <xQueueCreateMutex>
 8000fd4:	e0bffe15 	stw	r2,-8(fp)
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 8000fd8:	e17ffe17 	ldw	r5,-8(fp)
 8000fdc:	e13ffd17 	ldw	r4,-12(fp)
 8000fe0:	8000ccc0 	call	8000ccc <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8000fe4:	d0a73217 	ldw	r2,-25400(gp)
 8000fe8:	10800044 	addi	r2,r2,1
 8000fec:	d0a73215 	stw	r2,-25400(gp)
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 8000ff0:	e17ffe17 	ldw	r5,-8(fp)
 8000ff4:	e13ffd17 	ldw	r4,-12(fp)
 8000ff8:	8000e580 	call	8000e58 <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8000ffc:	d0a73217 	ldw	r2,-25400(gp)
 8001000:	10800044 	addi	r2,r2,1
 8001004:	d0a73215 	stw	r2,-25400(gp)
			priority of a high priority task only for the high priority task to
			timeout before obtaining the mutex. */
			prvHighPriorityTimeout( xMutex );
		}
		#endif
	}
 8001008:	003ff306 	br	8000fd8 <prvLowPriorityMutexTask+0x28>

0800100c <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 800100c:	defffd04 	addi	sp,sp,-12
 8001010:	dfc00215 	stw	ra,8(sp)
 8001014:	df000115 	stw	fp,4(sp)
 8001018:	df000104 	addi	fp,sp,4
 800101c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001020:	0009883a 	mov	r4,zero
 8001024:	8005f540 	call	8005f54 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 8001028:	d0a73317 	ldw	r2,-25396(gp)
 800102c:	10800044 	addi	r2,r2,1
 8001030:	d0a73315 	stw	r2,-25396(gp)
	}
 8001034:	003ffa06 	br	8001020 <prvMediumPriorityMutexTask+0x14>

08001038 <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 8001038:	defffc04 	addi	sp,sp,-16
 800103c:	dfc00315 	stw	ra,12(sp)
 8001040:	df000215 	stw	fp,8(sp)
 8001044:	df000204 	addi	fp,sp,8
 8001048:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 800104c:	e0bfff17 	ldw	r2,-4(fp)
 8001050:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001054:	0009883a 	mov	r4,zero
 8001058:	8005f540 	call	8005f54 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain the
		mutex.  It should find the mutex is not available so a block time is
		specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 800105c:	017fffc4 	movi	r5,-1
 8001060:	e13ffe17 	ldw	r4,-8(fp)
 8001064:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8001068:	10800060 	cmpeqi	r2,r2,1
 800106c:	1000071e 	bne	r2,zero,800108c <prvHighPriorityMutexTask+0x54>
		{
			/* This task would expect to obtain the mutex unless its wait for
			the mutex was aborted. */
			if( xBlockWasAborted == pdFALSE )
 8001070:	d0a73617 	ldw	r2,-25384(gp)
 8001074:	1000031e 	bne	r2,zero,8001084 <prvHighPriorityMutexTask+0x4c>
			{
				xErrorDetected = pdTRUE;
 8001078:	00800044 	movi	r2,1
 800107c:	d0a73015 	stw	r2,-25408(gp)
 8001080:	003ff406 	br	8001054 <prvHighPriorityMutexTask+0x1c>
			}
			else
			{
				xBlockWasAborted = pdFALSE;
 8001084:	d0273615 	stw	zero,-25384(gp)
 8001088:	003ff206 	br	8001054 <prvHighPriorityMutexTask+0x1c>
		}
		else
		{
			/* When the mutex is eventually obtained it is just given back before
			returning to suspend ready for the next cycle. */
			if( xSemaphoreGive( xMutex ) != pdPASS )
 800108c:	000f883a 	mov	r7,zero
 8001090:	000d883a 	mov	r6,zero
 8001094:	000b883a 	mov	r5,zero
 8001098:	e13ffe17 	ldw	r4,-8(fp)
 800109c:	80046f40 	call	80046f4 <xQueueGenericSend>
 80010a0:	10800060 	cmpeqi	r2,r2,1
 80010a4:	103feb1e 	bne	r2,zero,8001054 <prvHighPriorityMutexTask+0x1c>
			{
				xErrorDetected = pdTRUE;
 80010a8:	00800044 	movi	r2,1
 80010ac:	d0a73015 	stw	r2,-25408(gp)
			}
		}
	}
 80010b0:	003fe806 	br	8001054 <prvHighPriorityMutexTask+0x1c>

080010b4 <xAreGenericQueueTasksStillRunning>:
/*-----------------------------------------------------------*/


/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 80010b4:	deffff04 	addi	sp,sp,-4
 80010b8:	df000015 	stw	fp,0(sp)
 80010bc:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 80010c0:	d0e73717 	ldw	r3,-25380(gp)
 80010c4:	d0a73117 	ldw	r2,-25404(gp)
 80010c8:	1880021e 	bne	r3,r2,80010d4 <xAreGenericQueueTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 80010cc:	00800044 	movi	r2,1
 80010d0:	d0a73015 	stw	r2,-25408(gp)
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 80010d4:	d0e73817 	ldw	r3,-25376(gp)
 80010d8:	d0a73217 	ldw	r2,-25400(gp)
 80010dc:	1880021e 	bne	r3,r2,80010e8 <xAreGenericQueueTasksStillRunning+0x34>
	{
		xErrorDetected = pdTRUE;
 80010e0:	00800044 	movi	r2,1
 80010e4:	d0a73015 	stw	r2,-25408(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 80010e8:	d0a73117 	ldw	r2,-25404(gp)
 80010ec:	d0a73715 	stw	r2,-25380(gp)
	ulLastLoopCounter2 = ulLoopCounter2;
 80010f0:	d0a73217 	ldw	r2,-25400(gp)
 80010f4:	d0a73815 	stw	r2,-25376(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 80010f8:	d0a73017 	ldw	r2,-25408(gp)
 80010fc:	1005003a 	cmpeq	r2,r2,zero
 8001100:	10803fcc 	andi	r2,r2,255
}
 8001104:	e037883a 	mov	sp,fp
 8001108:	df000017 	ldw	fp,0(sp)
 800110c:	dec00104 	addi	sp,sp,4
 8001110:	f800283a 	ret

08001114 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
 8001114:	defffb04 	addi	sp,sp,-20
 8001118:	dfc00415 	stw	ra,16(sp)
 800111c:	df000315 	stw	fp,12(sp)
 8001120:	df000304 	addi	fp,sp,12
 8001124:	e13fff15 	stw	r4,-4(fp)
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
 8001128:	000d883a 	mov	r6,zero
 800112c:	01400084 	movi	r5,2
 8001130:	01000284 	movi	r4,10
 8001134:	80043880 	call	8004388 <xQueueGenericCreate>
 8001138:	d0a73b15 	stw	r2,-25364(gp)

	if( xPolledQueue != NULL )
 800113c:	d0a73b17 	ldw	r2,-25364(gp)
 8001140:	10001426 	beq	r2,zero,8001194 <vStartPolledQueueTasks+0x80>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 8001144:	d8000115 	stw	zero,4(sp)
 8001148:	e0bfff17 	ldw	r2,-4(fp)
 800114c:	d8800015 	stw	r2,0(sp)
 8001150:	d1e73b04 	addi	r7,gp,-25364
 8001154:	01810004 	movi	r6,1024
 8001158:	01420074 	movhi	r5,2049
 800115c:	297b2c04 	addi	r5,r5,-4944
 8001160:	01020034 	movhi	r4,2048
 8001164:	21049404 	addi	r4,r4,4688
 8001168:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 800116c:	d8000115 	stw	zero,4(sp)
 8001170:	e0bfff17 	ldw	r2,-4(fp)
 8001174:	d8800015 	stw	r2,0(sp)
 8001178:	d1e73b04 	addi	r7,gp,-25364
 800117c:	01810004 	movi	r6,1024
 8001180:	01420074 	movhi	r5,2049
 8001184:	297b2e04 	addi	r5,r5,-4936
 8001188:	01020034 	movhi	r4,2048
 800118c:	21046b04 	addi	r4,r4,4524
 8001190:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8001194:	0001883a 	nop
 8001198:	e037883a 	mov	sp,fp
 800119c:	dfc00117 	ldw	ra,4(sp)
 80011a0:	df000017 	ldw	fp,0(sp)
 80011a4:	dec00204 	addi	sp,sp,8
 80011a8:	f800283a 	ret

080011ac <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
 80011ac:	defffa04 	addi	sp,sp,-24
 80011b0:	dfc00515 	stw	ra,20(sp)
 80011b4:	df000415 	stw	fp,16(sp)
 80011b8:	df000404 	addi	fp,sp,16
 80011bc:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = ( uint16_t ) 0;
 80011c0:	e03ffe0d 	sth	zero,-8(fp)
BaseType_t xError = pdFALSE, xLoop;
 80011c4:	e03ffc15 	stw	zero,-16(fp)

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 80011c8:	e03ffd15 	stw	zero,-12(fp)
 80011cc:	00001a06 	br	8001238 <vPolledQueueProducer+0x8c>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
 80011d0:	e0bfff17 	ldw	r2,-4(fp)
 80011d4:	10800017 	ldw	r2,0(r2)
 80011d8:	e0fffe04 	addi	r3,fp,-8
 80011dc:	000f883a 	mov	r7,zero
 80011e0:	000d883a 	mov	r6,zero
 80011e4:	180b883a 	mov	r5,r3
 80011e8:	1009883a 	mov	r4,r2
 80011ec:	80046f40 	call	80046f4 <xQueueGenericSend>
 80011f0:	10800060 	cmpeqi	r2,r2,1
 80011f4:	1000031e 	bne	r2,zero,8001204 <vPolledQueueProducer+0x58>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
 80011f8:	00800044 	movi	r2,1
 80011fc:	e0bffc15 	stw	r2,-16(fp)
 8001200:	00000a06 	br	800122c <vPolledQueueProducer+0x80>
			}
			else
			{
				if( xError == pdFALSE )
 8001204:	e0bffc17 	ldw	r2,-16(fp)
 8001208:	1000051e 	bne	r2,zero,8001220 <vPolledQueueProducer+0x74>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
 800120c:	800731c0 	call	800731c <vTaskEnterCritical>
						xPollingProducerCount++;
 8001210:	d0a73a17 	ldw	r2,-25368(gp)
 8001214:	10800044 	addi	r2,r2,1
 8001218:	d0a73a15 	stw	r2,-25368(gp)
					portEXIT_CRITICAL();
 800121c:	80073700 	call	8007370 <vTaskExitCritical>
				}

				/* Update the value we are going to post next time around. */
				usValue++;
 8001220:	e0bffe0b 	ldhu	r2,-8(fp)
 8001224:	10800044 	addi	r2,r2,1
 8001228:	e0bffe0d 	sth	r2,-8(fp)
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 800122c:	e0bffd17 	ldw	r2,-12(fp)
 8001230:	10800044 	addi	r2,r2,1
 8001234:	e0bffd15 	stw	r2,-12(fp)
 8001238:	e0bffd17 	ldw	r2,-12(fp)
 800123c:	108000d0 	cmplti	r2,r2,3
 8001240:	103fe31e 	bne	r2,zero,80011d0 <vPolledQueueProducer+0x24>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
 8001244:	01003204 	movi	r4,200
 8001248:	8005c940 	call	8005c94 <vTaskDelay>
	}
 800124c:	003fde06 	br	80011c8 <vPolledQueueProducer+0x1c>

08001250 <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
 8001250:	defffa04 	addi	sp,sp,-24
 8001254:	dfc00515 	stw	ra,20(sp)
 8001258:	df000415 	stw	fp,16(sp)
 800125c:	df000404 	addi	fp,sp,16
 8001260:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 8001264:	e03ffc0d 	sth	zero,-16(fp)
BaseType_t xError = pdFALSE;
 8001268:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 800126c:	00001c06 	br	80012e0 <vPolledQueueConsumer+0x90>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 8001270:	e0bfff17 	ldw	r2,-4(fp)
 8001274:	10800017 	ldw	r2,0(r2)
 8001278:	e0fffe04 	addi	r3,fp,-8
 800127c:	000d883a 	mov	r6,zero
 8001280:	180b883a 	mov	r5,r3
 8001284:	1009883a 	mov	r4,r2
 8001288:	8004a6c0 	call	8004a6c <xQueueReceive>
 800128c:	10800058 	cmpnei	r2,r2,1
 8001290:	1000131e 	bne	r2,zero,80012e0 <vPolledQueueConsumer+0x90>
			{
				if( usData != usExpectedValue )
 8001294:	e0bffe0b 	ldhu	r2,-8(fp)
 8001298:	10ffffcc 	andi	r3,r2,65535
 800129c:	e0bffc0b 	ldhu	r2,-16(fp)
 80012a0:	18800526 	beq	r3,r2,80012b8 <vPolledQueueConsumer+0x68>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
 80012a4:	00800044 	movi	r2,1
 80012a8:	e0bffd15 	stw	r2,-12(fp)

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
 80012ac:	e0bffe0b 	ldhu	r2,-8(fp)
 80012b0:	e0bffc0d 	sth	r2,-16(fp)
 80012b4:	00000706 	br	80012d4 <vPolledQueueConsumer+0x84>
				}
				else
				{
					if( xError == pdFALSE )
 80012b8:	e0bffd17 	ldw	r2,-12(fp)
 80012bc:	1000051e 	bne	r2,zero,80012d4 <vPolledQueueConsumer+0x84>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
 80012c0:	800731c0 	call	800731c <vTaskEnterCritical>
							xPollingConsumerCount++;
 80012c4:	d0a73917 	ldw	r2,-25372(gp)
 80012c8:	10800044 	addi	r2,r2,1
 80012cc:	d0a73915 	stw	r2,-25372(gp)
						portEXIT_CRITICAL();
 80012d0:	80073700 	call	8007370 <vTaskExitCritical>
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
 80012d4:	e0bffc0b 	ldhu	r2,-16(fp)
 80012d8:	10800044 	addi	r2,r2,1
 80012dc:	e0bffc0d 	sth	r2,-16(fp)
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 80012e0:	e0bfff17 	ldw	r2,-4(fp)
 80012e4:	10800017 	ldw	r2,0(r2)
 80012e8:	1009883a 	mov	r4,r2
 80012ec:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80012f0:	103fdf1e 	bne	r2,zero,8001270 <vPolledQueueConsumer+0x20>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
 80012f4:	01002d04 	movi	r4,180
 80012f8:	8005c940 	call	8005c94 <vTaskDelay>
	}
 80012fc:	003fdb06 	br	800126c <vPolledQueueConsumer+0x1c>

08001300 <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
 8001300:	defffe04 	addi	sp,sp,-8
 8001304:	df000115 	stw	fp,4(sp)
 8001308:	df000104 	addi	fp,sp,4

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 800130c:	d0a73917 	ldw	r2,-25372(gp)
 8001310:	10000226 	beq	r2,zero,800131c <xArePollingQueuesStillRunning+0x1c>
		( xPollingProducerCount == pollqINITIAL_VALUE )
 8001314:	d0a73a17 	ldw	r2,-25368(gp)

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 8001318:	1000021e 	bne	r2,zero,8001324 <xArePollingQueuesStillRunning+0x24>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
 800131c:	e03fff15 	stw	zero,-4(fp)
 8001320:	00000206 	br	800132c <xArePollingQueuesStillRunning+0x2c>
	}
	else
	{
		xReturn = pdTRUE;
 8001324:	00800044 	movi	r2,1
 8001328:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
 800132c:	d0273915 	stw	zero,-25372(gp)
	xPollingProducerCount = pollqINITIAL_VALUE;
 8001330:	d0273a15 	stw	zero,-25368(gp)

	return xReturn;
 8001334:	e0bfff17 	ldw	r2,-4(fp)
}
 8001338:	e037883a 	mov	sp,fp
 800133c:	df000017 	ldw	fp,0(sp)
 8001340:	dec00104 	addi	sp,sp,4
 8001344:	f800283a 	ret

08001348 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
 8001348:	defffb04 	addi	sp,sp,-20
 800134c:	dfc00415 	stw	ra,16(sp)
 8001350:	df000315 	stw	fp,12(sp)
 8001354:	df000304 	addi	fp,sp,12
QueueHandle_t xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( uint32_t ) );
 8001358:	000d883a 	mov	r6,zero
 800135c:	01400104 	movi	r5,4
 8001360:	01000144 	movi	r4,5
 8001364:	80043880 	call	8004388 <xQueueGenericCreate>
 8001368:	e0bfff15 	stw	r2,-4(fp)

	if( xQueue != NULL )
 800136c:	e0bfff17 	ldw	r2,-4(fp)
 8001370:	10002a26 	beq	r2,zero,800141c <vStartQueuePeekTasks+0xd4>
		vQueueAddToRegistry( xQueue, "QPeek_Test_Queue" );

		/* Create the demo tasks and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is declared
		on the stack here. */
		xTaskCreate( prvLowPriorityPeekTask, "PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
 8001374:	d8000115 	stw	zero,4(sp)
 8001378:	d8000015 	stw	zero,0(sp)
 800137c:	e1ffff17 	ldw	r7,-4(fp)
 8001380:	01810004 	movi	r6,1024
 8001384:	01420074 	movhi	r5,2049
 8001388:	297b3004 	addi	r5,r5,-4928
 800138c:	01020034 	movhi	r4,2048
 8001390:	2105b404 	addi	r4,r4,5840
 8001394:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvMediumPriorityPeekTask, "PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
 8001398:	d0a74004 	addi	r2,gp,-25344
 800139c:	d8800115 	stw	r2,4(sp)
 80013a0:	00800044 	movi	r2,1
 80013a4:	d8800015 	stw	r2,0(sp)
 80013a8:	e1ffff17 	ldw	r7,-4(fp)
 80013ac:	01810004 	movi	r6,1024
 80013b0:	01420074 	movhi	r5,2049
 80013b4:	297b3204 	addi	r5,r5,-4920
 80013b8:	01020034 	movhi	r4,2048
 80013bc:	21059204 	addi	r4,r4,5704
 80013c0:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvHighPriorityPeekTask, "PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
 80013c4:	d0a73f04 	addi	r2,gp,-25348
 80013c8:	d8800115 	stw	r2,4(sp)
 80013cc:	00800084 	movi	r2,2
 80013d0:	d8800015 	stw	r2,0(sp)
 80013d4:	e1ffff17 	ldw	r7,-4(fp)
 80013d8:	01810004 	movi	r6,1024
 80013dc:	01420074 	movhi	r5,2049
 80013e0:	297b3404 	addi	r5,r5,-4912
 80013e4:	01020034 	movhi	r4,2048
 80013e8:	21056204 	addi	r4,r4,5512
 80013ec:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvHighestPriorityPeekTask, "PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
 80013f0:	d0a74104 	addi	r2,gp,-25340
 80013f4:	d8800115 	stw	r2,4(sp)
 80013f8:	008000c4 	movi	r2,3
 80013fc:	d8800015 	stw	r2,0(sp)
 8001400:	e1ffff17 	ldw	r7,-4(fp)
 8001404:	01810004 	movi	r6,1024
 8001408:	01420074 	movhi	r5,2049
 800140c:	297b3604 	addi	r5,r5,-4904
 8001410:	01020034 	movhi	r4,2048
 8001414:	21050d04 	addi	r4,r4,5172
 8001418:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 800141c:	0001883a 	nop
 8001420:	e037883a 	mov	sp,fp
 8001424:	dfc00117 	ldw	ra,4(sp)
 8001428:	df000017 	ldw	fp,0(sp)
 800142c:	dec00204 	addi	sp,sp,8
 8001430:	f800283a 	ret

08001434 <prvHighestPriorityPeekTask>:
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
 8001434:	defffb04 	addi	sp,sp,-20
 8001438:	dfc00415 	stw	ra,16(sp)
 800143c:	df000315 	stw	fp,12(sp)
 8001440:	df000304 	addi	fp,sp,12
 8001444:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 8001448:	e0bfff17 	ldw	r2,-4(fp)
 800144c:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001450:	e0bffe04 	addi	r2,fp,-8
 8001454:	01bfffc4 	movi	r6,-1
 8001458:	100b883a 	mov	r5,r2
 800145c:	e13ffd17 	ldw	r4,-12(fp)
 8001460:	8004e240 	call	8004e24 <xQueuePeek>
 8001464:	10800060 	cmpeqi	r2,r2,1
 8001468:	1000021e 	bne	r2,zero,8001474 <prvHighestPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 800146c:	00800044 	movi	r2,1
 8001470:	d0a73c15 	stw	r2,-25360(gp)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
 8001474:	e0fffe17 	ldw	r3,-8(fp)
 8001478:	008448b4 	movhi	r2,4386
 800147c:	108cd104 	addi	r2,r2,13124
 8001480:	18800226 	beq	r3,r2,800148c <prvHighestPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001484:	00800044 	movi	r2,1
 8001488:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 800148c:	e13ffd17 	ldw	r4,-12(fp)
 8001490:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8001494:	10800060 	cmpeqi	r2,r2,1
 8001498:	1000021e 	bne	r2,zero,80014a4 <prvHighestPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 800149c:	00800044 	movi	r2,1
 80014a0:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
 80014a4:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80014a8:	e0bffe04 	addi	r2,fp,-8
 80014ac:	000d883a 	mov	r6,zero
 80014b0:	100b883a 	mov	r5,r2
 80014b4:	e13ffd17 	ldw	r4,-12(fp)
 80014b8:	8004a6c0 	call	8004a6c <xQueueReceive>
 80014bc:	10800060 	cmpeqi	r2,r2,1
 80014c0:	1000021e 	bne	r2,zero,80014cc <prvHighestPriorityPeekTask+0x98>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
 80014c4:	00800044 	movi	r2,1
 80014c8:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( ulValue != 0x11223344 )
 80014cc:	e0fffe17 	ldw	r3,-8(fp)
 80014d0:	008448b4 	movhi	r2,4386
 80014d4:	108cd104 	addi	r2,r2,13124
 80014d8:	18800226 	beq	r3,r2,80014e4 <prvHighestPriorityPeekTask+0xb0>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
 80014dc:	00800044 	movi	r2,1
 80014e0:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* Now we will block again as the queue is once more empty.  The low
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 80014e4:	e0bffe04 	addi	r2,fp,-8
 80014e8:	01bfffc4 	movi	r6,-1
 80014ec:	100b883a 	mov	r5,r2
 80014f0:	e13ffd17 	ldw	r4,-12(fp)
 80014f4:	8004e240 	call	8004e24 <xQueuePeek>
 80014f8:	10800060 	cmpeqi	r2,r2,1
 80014fc:	1000021e 	bne	r2,zero,8001508 <prvHighestPriorityPeekTask+0xd4>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 8001500:	00800044 	movi	r2,1
 8001504:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
 8001508:	e0fffe17 	ldw	r3,-8(fp)
 800150c:	008048f4 	movhi	r2,291
 8001510:	109159c4 	addi	r2,r2,17767
 8001514:	18800226 	beq	r3,r2,8001520 <prvHighestPriorityPeekTask+0xec>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001518:	00800044 	movi	r2,1
 800151c:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8001520:	e13ffd17 	ldw	r4,-12(fp)
 8001524:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8001528:	10800060 	cmpeqi	r2,r2,1
 800152c:	1000021e 	bne	r2,zero,8001538 <prvHighestPriorityPeekTask+0x104>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 8001530:	00800044 	movi	r2,1
 8001534:	d0a73c15 	stw	r2,-25360(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 8001538:	0009883a 	mov	r4,zero
 800153c:	8005f540 	call	8005f54 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001540:	e0bffe04 	addi	r2,fp,-8
 8001544:	01bfffc4 	movi	r6,-1
 8001548:	100b883a 	mov	r5,r2
 800154c:	e13ffd17 	ldw	r4,-12(fp)
 8001550:	8004e240 	call	8004e24 <xQueuePeek>
 8001554:	10800060 	cmpeqi	r2,r2,1
 8001558:	1000021e 	bne	r2,zero,8001564 <prvHighestPriorityPeekTask+0x130>
		{
			xErrorDetected = pdTRUE;
 800155c:	00800044 	movi	r2,1
 8001560:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( ulValue != 0xaabbaabb )
 8001564:	e0fffe17 	ldw	r3,-8(fp)
 8001568:	00aaaf34 	movhi	r2,43708
 800156c:	10aaaec4 	addi	r2,r2,-21829
 8001570:	18800226 	beq	r3,r2,800157c <prvHighestPriorityPeekTask+0x148>
		{
			xErrorDetected = pdTRUE;
 8001574:	00800044 	movi	r2,1
 8001578:	d0a73c15 	stw	r2,-25360(gp)
		}

		vTaskSuspend( NULL );
 800157c:	0009883a 	mov	r4,zero
 8001580:	8005f540 	call	8005f54 <vTaskSuspend>
	}
 8001584:	003fb206 	br	8001450 <prvHighestPriorityPeekTask+0x1c>

08001588 <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
 8001588:	defffb04 	addi	sp,sp,-20
 800158c:	dfc00415 	stw	ra,16(sp)
 8001590:	df000315 	stw	fp,12(sp)
 8001594:	df000304 	addi	fp,sp,12
 8001598:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 800159c:	e0bfff17 	ldw	r2,-4(fp)
 80015a0:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 80015a4:	e0bffe04 	addi	r2,fp,-8
 80015a8:	01bfffc4 	movi	r6,-1
 80015ac:	100b883a 	mov	r5,r2
 80015b0:	e13ffd17 	ldw	r4,-12(fp)
 80015b4:	8004e240 	call	8004e24 <xQueuePeek>
 80015b8:	10800060 	cmpeqi	r2,r2,1
 80015bc:	1000021e 	bne	r2,zero,80015c8 <prvHighPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 80015c0:	00800044 	movi	r2,1
 80015c4:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 80015c8:	e0fffe17 	ldw	r3,-8(fp)
 80015cc:	008048f4 	movhi	r2,291
 80015d0:	109159c4 	addi	r2,r2,17767
 80015d4:	18800226 	beq	r3,r2,80015e0 <prvHighPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 80015d8:	00800044 	movi	r2,1
 80015dc:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80015e0:	e13ffd17 	ldw	r4,-12(fp)
 80015e4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80015e8:	10800060 	cmpeqi	r2,r2,1
 80015ec:	1000021e 	bne	r2,zero,80015f8 <prvHighPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 80015f0:	00800044 	movi	r2,1
 80015f4:	d0a73c15 	stw	r2,-25360(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 80015f8:	0009883a 	mov	r4,zero
 80015fc:	8005f540 	call	8005f54 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001600:	e0bffe04 	addi	r2,fp,-8
 8001604:	01bfffc4 	movi	r6,-1
 8001608:	100b883a 	mov	r5,r2
 800160c:	e13ffd17 	ldw	r4,-12(fp)
 8001610:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001614:	10800060 	cmpeqi	r2,r2,1
 8001618:	1000021e 	bne	r2,zero,8001624 <prvHighPriorityPeekTask+0x9c>
		{
			xErrorDetected = pdTRUE;
 800161c:	00800044 	movi	r2,1
 8001620:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( ulValue != 0xaabbaabb )
 8001624:	e0fffe17 	ldw	r3,-8(fp)
 8001628:	00aaaf34 	movhi	r2,43708
 800162c:	10aaaec4 	addi	r2,r2,-21829
 8001630:	18800226 	beq	r3,r2,800163c <prvHighPriorityPeekTask+0xb4>
		{
			xErrorDetected = pdTRUE;
 8001634:	00800044 	movi	r2,1
 8001638:	d0a73c15 	stw	r2,-25360(gp)
		}

		vTaskSuspend( NULL );
 800163c:	0009883a 	mov	r4,zero
 8001640:	8005f540 	call	8005f54 <vTaskSuspend>
	}
 8001644:	003fd706 	br	80015a4 <prvHighPriorityPeekTask+0x1c>

08001648 <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
 8001648:	defffb04 	addi	sp,sp,-20
 800164c:	dfc00415 	stw	ra,16(sp)
 8001650:	df000315 	stw	fp,12(sp)
 8001654:	df000304 	addi	fp,sp,12
 8001658:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 800165c:	e0bfff17 	ldw	r2,-4(fp)
 8001660:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001664:	e0bffe04 	addi	r2,fp,-8
 8001668:	01bfffc4 	movi	r6,-1
 800166c:	100b883a 	mov	r5,r2
 8001670:	e13ffd17 	ldw	r4,-12(fp)
 8001674:	8004e240 	call	8004e24 <xQueuePeek>
 8001678:	10800060 	cmpeqi	r2,r2,1
 800167c:	1000021e 	bne	r2,zero,8001688 <prvMediumPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 8001680:	00800044 	movi	r2,1
 8001684:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 8001688:	e0fffe17 	ldw	r3,-8(fp)
 800168c:	008048f4 	movhi	r2,291
 8001690:	109159c4 	addi	r2,r2,17767
 8001694:	18800226 	beq	r3,r2,80016a0 <prvMediumPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001698:	00800044 	movi	r2,1
 800169c:	d0a73c15 	stw	r2,-25360(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80016a0:	e13ffd17 	ldw	r4,-12(fp)
 80016a4:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 80016a8:	10800060 	cmpeqi	r2,r2,1
 80016ac:	1000021e 	bne	r2,zero,80016b8 <prvMediumPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 80016b0:	00800044 	movi	r2,1
 80016b4:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
 80016b8:	d0a73d17 	ldw	r2,-25356(gp)
 80016bc:	10800044 	addi	r2,r2,1
 80016c0:	d0a73d15 	stw	r2,-25356(gp)

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	8005f540 	call	8005f54 <vTaskSuspend>
	}
 80016cc:	003fe506 	br	8001664 <prvMediumPriorityPeekTask+0x1c>

080016d0 <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
 80016d0:	defffb04 	addi	sp,sp,-20
 80016d4:	dfc00415 	stw	ra,16(sp)
 80016d8:	df000315 	stw	fp,12(sp)
 80016dc:	df000304 	addi	fp,sp,12
 80016e0:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 80016e4:	e0bfff17 	ldw	r2,-4(fp)
 80016e8:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
 80016ec:	008448b4 	movhi	r2,4386
 80016f0:	108cd104 	addi	r2,r2,13124
 80016f4:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80016f8:	e0bffe04 	addi	r2,fp,-8
 80016fc:	000f883a 	mov	r7,zero
 8001700:	000d883a 	mov	r6,zero
 8001704:	100b883a 	mov	r5,r2
 8001708:	e13ffd17 	ldw	r4,-12(fp)
 800170c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001710:	10800060 	cmpeqi	r2,r2,1
 8001714:	1000021e 	bne	r2,zero,8001720 <prvLowPriorityPeekTask+0x50>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001718:	00800044 	movi	r2,1
 800171c:	d0a73c15 	stw	r2,-25360(gp)
			taskYIELD();
		#endif

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8001720:	e13ffd17 	ldw	r4,-12(fp)
 8001724:	80051340 	call	8005134 <uxQueueMessagesWaiting>
 8001728:	10000226 	beq	r2,zero,8001734 <prvLowPriorityPeekTask+0x64>
		{
			xErrorDetected = pdTRUE;
 800172c:	00800044 	movi	r2,1
 8001730:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
 8001734:	008048f4 	movhi	r2,291
 8001738:	109159c4 	addi	r2,r2,17767
 800173c:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 8001740:	e0bffe04 	addi	r2,fp,-8
 8001744:	000f883a 	mov	r7,zero
 8001748:	000d883a 	mov	r6,zero
 800174c:	100b883a 	mov	r5,r2
 8001750:	e13ffd17 	ldw	r4,-12(fp)
 8001754:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001758:	10800060 	cmpeqi	r2,r2,1
 800175c:	1000021e 	bne	r2,zero,8001768 <prvLowPriorityPeekTask+0x98>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001760:	00800044 	movi	r2,1
 8001764:	d0a73c15 	stw	r2,-25360(gp)
			taskYIELD();
		#endif

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
 8001768:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 800176c:	e0bffe04 	addi	r2,fp,-8
 8001770:	000d883a 	mov	r6,zero
 8001774:	100b883a 	mov	r5,r2
 8001778:	e13ffd17 	ldw	r4,-12(fp)
 800177c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001780:	10800060 	cmpeqi	r2,r2,1
 8001784:	1000021e 	bne	r2,zero,8001790 <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 8001788:	00800044 	movi	r2,1
 800178c:	d0a73c15 	stw	r2,-25360(gp)
			/* We did not receive the expected value. */
		}

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 8001790:	01000284 	movi	r4,10
 8001794:	8005c940 	call	8005c94 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
 8001798:	d0a74017 	ldw	r2,-25344(gp)
 800179c:	1009883a 	mov	r4,r2
 80017a0:	80060bc0 	call	80060bc <vTaskResume>
		vTaskResume( xHighPriorityTask );
 80017a4:	d0a73f17 	ldw	r2,-25348(gp)
 80017a8:	1009883a 	mov	r4,r2
 80017ac:	80060bc0 	call	80060bc <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 80017b0:	d0a74117 	ldw	r2,-25340(gp)
 80017b4:	1009883a 	mov	r4,r2
 80017b8:	80060bc0 	call	80060bc <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		ulValue = 0xaabbaabb;
 80017bc:	00aaaf34 	movhi	r2,43708
 80017c0:	10aaaec4 	addi	r2,r2,-21829
 80017c4:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80017c8:	e0bffe04 	addi	r2,fp,-8
 80017cc:	01c00044 	movi	r7,1
 80017d0:	000d883a 	mov	r6,zero
 80017d4:	100b883a 	mov	r5,r2
 80017d8:	e13ffd17 	ldw	r4,-12(fp)
 80017dc:	80046f40 	call	80046f4 <xQueueGenericSend>
 80017e0:	10800060 	cmpeqi	r2,r2,1
 80017e4:	1000021e 	bne	r2,zero,80017f0 <prvLowPriorityPeekTask+0x120>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 80017e8:	00800044 	movi	r2,1
 80017ec:	d0a73c15 	stw	r2,-25360(gp)
			taskYIELD();
		#endif

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 80017f0:	e0bffe04 	addi	r2,fp,-8
 80017f4:	000d883a 	mov	r6,zero
 80017f8:	100b883a 	mov	r5,r2
 80017fc:	e13ffd17 	ldw	r4,-12(fp)
 8001800:	8004e240 	call	8004e24 <xQueuePeek>
 8001804:	10000226 	beq	r2,zero,8001810 <prvLowPriorityPeekTask+0x140>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 8001808:	00800044 	movi	r2,1
 800180c:	d0a73c15 	stw	r2,-25360(gp)
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
 8001810:	d0a73f17 	ldw	r2,-25348(gp)
 8001814:	1009883a 	mov	r4,r2
 8001818:	80060bc0 	call	80060bc <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 800181c:	d0a74117 	ldw	r2,-25340(gp)
 8001820:	1009883a 	mov	r4,r2
 8001824:	80060bc0 	call	80060bc <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 8001828:	01000284 	movi	r4,10
 800182c:	8005c940 	call	8005c94 <vTaskDelay>
	}
 8001830:	003fae06 	br	80016ec <prvLowPriorityPeekTask+0x1c>

08001834 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreQueuePeekTasksStillRunning( void )
{
 8001834:	deffff04 	addi	sp,sp,-4
 8001838:	df000015 	stw	fp,0(sp)
 800183c:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 8001840:	d0e73e17 	ldw	r3,-25352(gp)
 8001844:	d0a73d17 	ldw	r2,-25356(gp)
 8001848:	1880021e 	bne	r3,r2,8001854 <xAreQueuePeekTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 800184c:	00800044 	movi	r2,1
 8001850:	d0a73c15 	stw	r2,-25360(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 8001854:	d0a73d17 	ldw	r2,-25356(gp)
 8001858:	d0a73e15 	stw	r2,-25352(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 800185c:	d0a73c17 	ldw	r2,-25360(gp)
 8001860:	1005003a 	cmpeq	r2,r2,zero
 8001864:	10803fcc 	andi	r2,r2,255
}
 8001868:	e037883a 	mov	sp,fp
 800186c:	df000017 	ldw	fp,0(sp)
 8001870:	dec00104 	addi	sp,sp,4
 8001874:	f800283a 	ret

08001878 <vCreateBlockTimeTasks>:
static volatile UBaseType_t xRunIndicator;

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 8001878:	defffc04 	addi	sp,sp,-16
 800187c:	dfc00315 	stw	ra,12(sp)
 8001880:	df000215 	stw	fp,8(sp)
 8001884:	df000204 	addi	fp,sp,8
	/* Create the queue on which the two tasks block. */
	xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 8001888:	000d883a 	mov	r6,zero
 800188c:	01400104 	movi	r5,4
 8001890:	01000144 	movi	r4,5
 8001894:	80043880 	call	8004388 <xQueueGenericCreate>
 8001898:	d0a74215 	stw	r2,-25336(gp)

	if( xTestQueue != NULL )
 800189c:	d0a74217 	ldw	r2,-25336(gp)
 80018a0:	10001526 	beq	r2,zero,80018f8 <vCreateBlockTimeTasks+0x80>
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );

		/* Create the two test tasks. */
		xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 80018a4:	d8000115 	stw	zero,4(sp)
 80018a8:	00800084 	movi	r2,2
 80018ac:	d8800015 	stw	r2,0(sp)
 80018b0:	000f883a 	mov	r7,zero
 80018b4:	01810004 	movi	r6,1024
 80018b8:	01420074 	movhi	r5,2049
 80018bc:	297b3804 	addi	r5,r5,-4896
 80018c0:	01020034 	movhi	r4,2048
 80018c4:	21064404 	addi	r4,r4,6416
 80018c8:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 80018cc:	d0a74304 	addi	r2,gp,-25332
 80018d0:	d8800115 	stw	r2,4(sp)
 80018d4:	00800044 	movi	r2,1
 80018d8:	d8800015 	stw	r2,0(sp)
 80018dc:	000f883a 	mov	r7,zero
 80018e0:	01810004 	movi	r6,1024
 80018e4:	01420074 	movhi	r5,2049
 80018e8:	297b3a04 	addi	r5,r5,-4888
 80018ec:	01020034 	movhi	r4,2048
 80018f0:	21074a04 	addi	r4,r4,7464
 80018f4:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 80018f8:	0001883a 	nop
 80018fc:	e037883a 	mov	sp,fp
 8001900:	dfc00117 	ldw	ra,4(sp)
 8001904:	df000017 	ldw	fp,0(sp)
 8001908:	dec00204 	addi	sp,sp,8
 800190c:	f800283a 	ret

08001910 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 8001910:	defff804 	addi	sp,sp,-32
 8001914:	dfc00715 	stw	ra,28(sp)
 8001918:	df000615 	stw	fp,24(sp)
 800191c:	df000604 	addi	fp,sp,24
 8001920:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0

		Basic vTaskDelay() and vTaskDelayUntil() tests. */
		prvBasicDelayTests();
 8001924:	8001e540 	call	8001e54 <prvBasicDelayTests>

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001928:	e03ffd15 	stw	zero,-12(fp)
 800192c:	00002206 	br	80019b8 <vPrimaryBlockTimeTestTask+0xa8>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001930:	e0bffd17 	ldw	r2,-12(fp)
 8001934:	00c00284 	movi	r3,10
 8001938:	1884983a 	sll	r2,r3,r2
 800193c:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 8001940:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001944:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 8001948:	d0a74217 	ldw	r2,-25336(gp)
 800194c:	e0fffe04 	addi	r3,fp,-8
 8001950:	e1bffa17 	ldw	r6,-24(fp)
 8001954:	180b883a 	mov	r5,r3
 8001958:	1009883a 	mov	r4,r2
 800195c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001960:	10000226 	beq	r2,zero,800196c <vPrimaryBlockTimeTestTask+0x5c>
			{
				xErrorOccurred = pdTRUE;
 8001964:	00800044 	movi	r2,1
 8001968:	d0a74615 	stw	r2,-25320(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 800196c:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001970:	1007883a 	mov	r3,r2
 8001974:	e0bffb17 	ldw	r2,-20(fp)
 8001978:	1885c83a 	sub	r2,r3,r2
 800197c:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 8001980:	e0fffc17 	ldw	r3,-16(fp)
 8001984:	e0bffa17 	ldw	r2,-24(fp)
 8001988:	1880022e 	bgeu	r3,r2,8001994 <vPrimaryBlockTimeTestTask+0x84>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 800198c:	00800044 	movi	r2,1
 8001990:	d0a74615 	stw	r2,-25320(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001994:	e0bffa17 	ldw	r2,-24(fp)
 8001998:	10c003c4 	addi	r3,r2,15
 800199c:	e0bffc17 	ldw	r2,-16(fp)
 80019a0:	1880022e 	bgeu	r3,r2,80019ac <vPrimaryBlockTimeTestTask+0x9c>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 80019a4:	00800044 	movi	r2,1
 80019a8:	d0a74615 	stw	r2,-25320(gp)

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019ac:	e0bffd17 	ldw	r2,-12(fp)
 80019b0:	10800044 	addi	r2,r2,1
 80019b4:	e0bffd15 	stw	r2,-12(fp)
 80019b8:	e0bffd17 	ldw	r2,-12(fp)
 80019bc:	10800150 	cmplti	r2,r2,5
 80019c0:	103fdb1e 	bne	r2,zero,8001930 <vPrimaryBlockTimeTestTask+0x20>
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019c4:	e03ffd15 	stw	zero,-12(fp)
 80019c8:	00000e06 	br	8001a04 <vPrimaryBlockTimeTestTask+0xf4>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 80019cc:	d0a74217 	ldw	r2,-25336(gp)
 80019d0:	e0fffd04 	addi	r3,fp,-12
 80019d4:	000f883a 	mov	r7,zero
 80019d8:	000d883a 	mov	r6,zero
 80019dc:	180b883a 	mov	r5,r3
 80019e0:	1009883a 	mov	r4,r2
 80019e4:	80046f40 	call	80046f4 <xQueueGenericSend>
 80019e8:	10800060 	cmpeqi	r2,r2,1
 80019ec:	1000021e 	bne	r2,zero,80019f8 <vPrimaryBlockTimeTestTask+0xe8>
			{
				xErrorOccurred = pdTRUE;
 80019f0:	00800044 	movi	r2,1
 80019f4:	d0a74615 	stw	r2,-25320(gp)
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019f8:	e0bffd17 	ldw	r2,-12(fp)
 80019fc:	10800044 	addi	r2,r2,1
 8001a00:	e0bffd15 	stw	r2,-12(fp)
 8001a04:	e0bffd17 	ldw	r2,-12(fp)
 8001a08:	10800150 	cmplti	r2,r2,5
 8001a0c:	103fef1e 	bne	r2,zero,80019cc <vPrimaryBlockTimeTestTask+0xbc>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001a10:	e03ffd15 	stw	zero,-12(fp)
 8001a14:	00002306 	br	8001aa4 <vPrimaryBlockTimeTestTask+0x194>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001a18:	e0bffd17 	ldw	r2,-12(fp)
 8001a1c:	00c00284 	movi	r3,10
 8001a20:	1884983a 	sll	r2,r3,r2
 8001a24:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 8001a28:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001a2c:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 8001a30:	d0a74217 	ldw	r2,-25336(gp)
 8001a34:	e0fffd04 	addi	r3,fp,-12
 8001a38:	000f883a 	mov	r7,zero
 8001a3c:	e1bffa17 	ldw	r6,-24(fp)
 8001a40:	180b883a 	mov	r5,r3
 8001a44:	1009883a 	mov	r4,r2
 8001a48:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001a4c:	10000226 	beq	r2,zero,8001a58 <vPrimaryBlockTimeTestTask+0x148>
			{
				xErrorOccurred = pdTRUE;
 8001a50:	00800044 	movi	r2,1
 8001a54:	d0a74615 	stw	r2,-25320(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001a58:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001a5c:	1007883a 	mov	r3,r2
 8001a60:	e0bffb17 	ldw	r2,-20(fp)
 8001a64:	1885c83a 	sub	r2,r3,r2
 8001a68:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 8001a6c:	e0fffc17 	ldw	r3,-16(fp)
 8001a70:	e0bffa17 	ldw	r2,-24(fp)
 8001a74:	1880022e 	bgeu	r3,r2,8001a80 <vPrimaryBlockTimeTestTask+0x170>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8001a78:	00800044 	movi	r2,1
 8001a7c:	d0a74615 	stw	r2,-25320(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001a80:	e0bffa17 	ldw	r2,-24(fp)
 8001a84:	10c003c4 	addi	r3,r2,15
 8001a88:	e0bffc17 	ldw	r2,-16(fp)
 8001a8c:	1880022e 	bgeu	r3,r2,8001a98 <vPrimaryBlockTimeTestTask+0x188>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 8001a90:	00800044 	movi	r2,1
 8001a94:	d0a74615 	stw	r2,-25320(gp)
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001a98:	e0bffd17 	ldw	r2,-12(fp)
 8001a9c:	10800044 	addi	r2,r2,1
 8001aa0:	e0bffd15 	stw	r2,-12(fp)
 8001aa4:	e0bffd17 	ldw	r2,-12(fp)
 8001aa8:	10800150 	cmplti	r2,r2,5
 8001aac:	103fda1e 	bne	r2,zero,8001a18 <vPrimaryBlockTimeTestTask+0x108>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 8001ab0:	d0274715 	stw	zero,-25316(gp)
		vTaskResume( xSecondary );
 8001ab4:	d0a74317 	ldw	r2,-25332(gp)
 8001ab8:	1009883a 	mov	r4,r2
 8001abc:	80060bc0 	call	80060bc <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001ac0:	00000206 	br	8001acc <vPrimaryBlockTimeTestTask+0x1bc>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 8001ac4:	01000504 	movi	r4,20
 8001ac8:	8005c940 	call	8005c94 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001acc:	d0a74717 	ldw	r2,-25316(gp)
 8001ad0:	10801558 	cmpnei	r2,r2,85
 8001ad4:	103ffb1e 	bne	r2,zero,8001ac4 <vPrimaryBlockTimeTestTask+0x1b4>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 8001ad8:	01000504 	movi	r4,20
 8001adc:	8005c940 	call	8005c94 <vTaskDelay>
		xRunIndicator = 0;
 8001ae0:	d0274715 	stw	zero,-25316(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001ae4:	e03ffd15 	stw	zero,-12(fp)
 8001ae8:	00002a06 	br	8001b94 <vPrimaryBlockTimeTestTask+0x284>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001aec:	d0a74217 	ldw	r2,-25336(gp)
 8001af0:	e0fffe04 	addi	r3,fp,-8
 8001af4:	000d883a 	mov	r6,zero
 8001af8:	180b883a 	mov	r5,r3
 8001afc:	1009883a 	mov	r4,r2
 8001b00:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001b04:	10800060 	cmpeqi	r2,r2,1
 8001b08:	1000021e 	bne	r2,zero,8001b14 <vPrimaryBlockTimeTestTask+0x204>
			{
				xErrorOccurred = pdTRUE;
 8001b0c:	00800044 	movi	r2,1
 8001b10:	d0a74615 	stw	r2,-25320(gp)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8001b14:	d0a74217 	ldw	r2,-25336(gp)
 8001b18:	e0fffd04 	addi	r3,fp,-12
 8001b1c:	000f883a 	mov	r7,zero
 8001b20:	000d883a 	mov	r6,zero
 8001b24:	180b883a 	mov	r5,r3
 8001b28:	1009883a 	mov	r4,r2
 8001b2c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001b30:	10800060 	cmpeqi	r2,r2,1
 8001b34:	1000021e 	bne	r2,zero,8001b40 <vPrimaryBlockTimeTestTask+0x230>
			{
				xErrorOccurred = pdTRUE;
 8001b38:	00800044 	movi	r2,1
 8001b3c:	d0a74615 	stw	r2,-25320(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8001b40:	d0a74717 	ldw	r2,-25316(gp)
 8001b44:	10801558 	cmpnei	r2,r2,85
 8001b48:	1000021e 	bne	r2,zero,8001b54 <vPrimaryBlockTimeTestTask+0x244>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8001b4c:	00800044 	movi	r2,1
 8001b50:	d0a74615 	stw	r2,-25320(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8001b54:	d0a74317 	ldw	r2,-25332(gp)
 8001b58:	01400104 	movi	r5,4
 8001b5c:	1009883a 	mov	r4,r2
 8001b60:	8005d940 	call	8005d94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8001b64:	d0a74717 	ldw	r2,-25316(gp)
 8001b68:	10801558 	cmpnei	r2,r2,85
 8001b6c:	1000021e 	bne	r2,zero,8001b78 <vPrimaryBlockTimeTestTask+0x268>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 8001b70:	00800044 	movi	r2,1
 8001b74:	d0a74615 	stw	r2,-25320(gp)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 8001b78:	d0a74317 	ldw	r2,-25332(gp)
 8001b7c:	01400044 	movi	r5,1
 8001b80:	1009883a 	mov	r4,r2
 8001b84:	8005d940 	call	8005d94 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001b88:	e0bffd17 	ldw	r2,-12(fp)
 8001b8c:	10800044 	addi	r2,r2,1
 8001b90:	e0bffd15 	stw	r2,-12(fp)
 8001b94:	e0bffd17 	ldw	r2,-12(fp)
 8001b98:	10800150 	cmplti	r2,r2,5
 8001b9c:	103fd31e 	bne	r2,zero,8001aec <vPrimaryBlockTimeTestTask+0x1dc>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001ba0:	00000206 	br	8001bac <vPrimaryBlockTimeTestTask+0x29c>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001ba4:	01000504 	movi	r4,20
 8001ba8:	8005c940 	call	8005c94 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001bac:	d0a74717 	ldw	r2,-25316(gp)
 8001bb0:	10801558 	cmpnei	r2,r2,85
 8001bb4:	103ffb1e 	bne	r2,zero,8001ba4 <vPrimaryBlockTimeTestTask+0x294>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001bb8:	01000504 	movi	r4,20
 8001bbc:	8005c940 	call	8005c94 <vTaskDelay>
		xRunIndicator = 0;
 8001bc0:	d0274715 	stw	zero,-25316(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001bc4:	e03ffd15 	stw	zero,-12(fp)
 8001bc8:	00000d06 	br	8001c00 <vPrimaryBlockTimeTestTask+0x2f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001bcc:	d0a74217 	ldw	r2,-25336(gp)
 8001bd0:	e0fffe04 	addi	r3,fp,-8
 8001bd4:	000d883a 	mov	r6,zero
 8001bd8:	180b883a 	mov	r5,r3
 8001bdc:	1009883a 	mov	r4,r2
 8001be0:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001be4:	10800060 	cmpeqi	r2,r2,1
 8001be8:	1000021e 	bne	r2,zero,8001bf4 <vPrimaryBlockTimeTestTask+0x2e4>
			{
				xErrorOccurred = pdTRUE;
 8001bec:	00800044 	movi	r2,1
 8001bf0:	d0a74615 	stw	r2,-25320(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001bf4:	e0bffd17 	ldw	r2,-12(fp)
 8001bf8:	10800044 	addi	r2,r2,1
 8001bfc:	e0bffd15 	stw	r2,-12(fp)
 8001c00:	e0bffd17 	ldw	r2,-12(fp)
 8001c04:	10800150 	cmplti	r2,r2,5
 8001c08:	103ff01e 	bne	r2,zero,8001bcc <vPrimaryBlockTimeTestTask+0x2bc>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 8001c0c:	d0a74317 	ldw	r2,-25332(gp)
 8001c10:	1009883a 	mov	r4,r2
 8001c14:	80060bc0 	call	80060bc <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001c18:	00000206 	br	8001c24 <vPrimaryBlockTimeTestTask+0x314>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001c1c:	01000504 	movi	r4,20
 8001c20:	8005c940 	call	8005c94 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001c24:	d0a74717 	ldw	r2,-25316(gp)
 8001c28:	10801558 	cmpnei	r2,r2,85
 8001c2c:	103ffb1e 	bne	r2,zero,8001c1c <vPrimaryBlockTimeTestTask+0x30c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001c30:	01000504 	movi	r4,20
 8001c34:	8005c940 	call	8005c94 <vTaskDelay>
		xRunIndicator = 0;
 8001c38:	d0274715 	stw	zero,-25316(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001c3c:	e03ffd15 	stw	zero,-12(fp)
 8001c40:	00002a06 	br	8001cec <vPrimaryBlockTimeTestTask+0x3dc>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8001c44:	d0a74217 	ldw	r2,-25336(gp)
 8001c48:	e0fffd04 	addi	r3,fp,-12
 8001c4c:	000f883a 	mov	r7,zero
 8001c50:	000d883a 	mov	r6,zero
 8001c54:	180b883a 	mov	r5,r3
 8001c58:	1009883a 	mov	r4,r2
 8001c5c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001c60:	10800060 	cmpeqi	r2,r2,1
 8001c64:	1000021e 	bne	r2,zero,8001c70 <vPrimaryBlockTimeTestTask+0x360>
			{
				xErrorOccurred = pdTRUE;
 8001c68:	00800044 	movi	r2,1
 8001c6c:	d0a74615 	stw	r2,-25320(gp)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001c70:	d0a74217 	ldw	r2,-25336(gp)
 8001c74:	e0fffe04 	addi	r3,fp,-8
 8001c78:	000d883a 	mov	r6,zero
 8001c7c:	180b883a 	mov	r5,r3
 8001c80:	1009883a 	mov	r4,r2
 8001c84:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001c88:	10800060 	cmpeqi	r2,r2,1
 8001c8c:	1000021e 	bne	r2,zero,8001c98 <vPrimaryBlockTimeTestTask+0x388>
			{
				xErrorOccurred = pdTRUE;
 8001c90:	00800044 	movi	r2,1
 8001c94:	d0a74615 	stw	r2,-25320(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8001c98:	d0a74717 	ldw	r2,-25316(gp)
 8001c9c:	10801558 	cmpnei	r2,r2,85
 8001ca0:	1000021e 	bne	r2,zero,8001cac <vPrimaryBlockTimeTestTask+0x39c>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8001ca4:	00800044 	movi	r2,1
 8001ca8:	d0a74615 	stw	r2,-25320(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8001cac:	d0a74317 	ldw	r2,-25332(gp)
 8001cb0:	01400104 	movi	r5,4
 8001cb4:	1009883a 	mov	r4,r2
 8001cb8:	8005d940 	call	8005d94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8001cbc:	d0a74717 	ldw	r2,-25316(gp)
 8001cc0:	10801558 	cmpnei	r2,r2,85
 8001cc4:	1000021e 	bne	r2,zero,8001cd0 <vPrimaryBlockTimeTestTask+0x3c0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 8001cc8:	00800044 	movi	r2,1
 8001ccc:	d0a74615 	stw	r2,-25320(gp)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 8001cd0:	d0a74317 	ldw	r2,-25332(gp)
 8001cd4:	01400044 	movi	r5,1
 8001cd8:	1009883a 	mov	r4,r2
 8001cdc:	8005d940 	call	8005d94 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001ce0:	e0bffd17 	ldw	r2,-12(fp)
 8001ce4:	10800044 	addi	r2,r2,1
 8001ce8:	e0bffd15 	stw	r2,-12(fp)
 8001cec:	e0bffd17 	ldw	r2,-12(fp)
 8001cf0:	10800150 	cmplti	r2,r2,5
 8001cf4:	103fd31e 	bne	r2,zero,8001c44 <vPrimaryBlockTimeTestTask+0x334>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001cf8:	00000206 	br	8001d04 <vPrimaryBlockTimeTestTask+0x3f4>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001cfc:	01000504 	movi	r4,20
 8001d00:	8005c940 	call	8005c94 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001d04:	d0a74717 	ldw	r2,-25316(gp)
 8001d08:	10801558 	cmpnei	r2,r2,85
 8001d0c:	103ffb1e 	bne	r2,zero,8001cfc <vPrimaryBlockTimeTestTask+0x3ec>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001d10:	01000504 	movi	r4,20
 8001d14:	8005c940 	call	8005c94 <vTaskDelay>

		xPrimaryCycles++;
 8001d18:	d0a74417 	ldw	r2,-25328(gp)
 8001d1c:	10800044 	addi	r2,r2,1
 8001d20:	d0a74415 	stw	r2,-25328(gp)
	}
 8001d24:	003eff06 	br	8001924 <vPrimaryBlockTimeTestTask+0x14>

08001d28 <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 8001d28:	defffa04 	addi	sp,sp,-24
 8001d2c:	dfc00515 	stw	ra,20(sp)
 8001d30:	df000415 	stw	fp,16(sp)
 8001d34:	df000404 	addi	fp,sp,16
 8001d38:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0, 1 and 2

		This task does not participate in these tests. */
		vTaskSuspend( NULL );
 8001d3c:	0009883a 	mov	r4,zero
 8001d40:	8005f540 	call	8005f54 <vTaskSuspend>
		Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8001d44:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001d48:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not sent anything to
		the queue. */
		xData = 0;
 8001d4c:	e03ffe15 	stw	zero,-8(fp)
		xRunIndicator = bktRUN_INDICATOR;
 8001d50:	00801544 	movi	r2,85
 8001d54:	d0a74715 	stw	r2,-25316(gp)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 8001d58:	d0a74217 	ldw	r2,-25336(gp)
 8001d5c:	e0fffe04 	addi	r3,fp,-8
 8001d60:	000f883a 	mov	r7,zero
 8001d64:	01802bc4 	movi	r6,175
 8001d68:	180b883a 	mov	r5,r3
 8001d6c:	1009883a 	mov	r4,r2
 8001d70:	80046f40 	call	80046f4 <xQueueGenericSend>
 8001d74:	10000226 	beq	r2,zero,8001d80 <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
 8001d78:	00800044 	movi	r2,1
 8001d7c:	d0a74615 	stw	r2,-25320(gp)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001d80:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001d84:	1007883a 	mov	r3,r2
 8001d88:	e0bffc17 	ldw	r2,-16(fp)
 8001d8c:	1885c83a 	sub	r2,r3,r2
 8001d90:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8001d94:	e0bffd17 	ldw	r2,-12(fp)
 8001d98:	10802be8 	cmpgeui	r2,r2,175
 8001d9c:	1000021e 	bne	r2,zero,8001da8 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
 8001da0:	00800044 	movi	r2,1
 8001da4:	d0a74615 	stw	r2,-25320(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 8001da8:	e0bffd17 	ldw	r2,-12(fp)
 8001dac:	10802ff0 	cmpltui	r2,r2,191
 8001db0:	1000021e 	bne	r2,zero,8001dbc <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
 8001db4:	00800044 	movi	r2,1
 8001db8:	d0a74615 	stw	r2,-25320(gp)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 8001dbc:	00801544 	movi	r2,85
 8001dc0:	d0a74715 	stw	r2,-25316(gp)
		vTaskSuspend( NULL );
 8001dc4:	0009883a 	mov	r4,zero
 8001dc8:	8005f540 	call	8005f54 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8001dcc:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001dd0:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 8001dd4:	00801544 	movi	r2,85
 8001dd8:	d0a74715 	stw	r2,-25316(gp)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 8001ddc:	d0a74217 	ldw	r2,-25336(gp)
 8001de0:	e0fffe04 	addi	r3,fp,-8
 8001de4:	01802bc4 	movi	r6,175
 8001de8:	180b883a 	mov	r5,r3
 8001dec:	1009883a 	mov	r4,r2
 8001df0:	8004a6c0 	call	8004a6c <xQueueReceive>
 8001df4:	10000226 	beq	r2,zero,8001e00 <vSecondaryBlockTimeTestTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 8001df8:	00800044 	movi	r2,1
 8001dfc:	d0a74615 	stw	r2,-25320(gp)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001e00:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001e04:	1007883a 	mov	r3,r2
 8001e08:	e0bffc17 	ldw	r2,-16(fp)
 8001e0c:	1885c83a 	sub	r2,r3,r2
 8001e10:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8001e14:	e0bffd17 	ldw	r2,-12(fp)
 8001e18:	10802be8 	cmpgeui	r2,r2,175
 8001e1c:	1000021e 	bne	r2,zero,8001e28 <vSecondaryBlockTimeTestTask+0x100>
		{
			xErrorOccurred = pdTRUE;
 8001e20:	00800044 	movi	r2,1
 8001e24:	d0a74615 	stw	r2,-25320(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 8001e28:	e0bffd17 	ldw	r2,-12(fp)
 8001e2c:	10802ff0 	cmpltui	r2,r2,191
 8001e30:	1000021e 	bne	r2,zero,8001e3c <vSecondaryBlockTimeTestTask+0x114>
		{
			xErrorOccurred = pdTRUE;
 8001e34:	00800044 	movi	r2,1
 8001e38:	d0a74615 	stw	r2,-25320(gp)
		}

		xRunIndicator = bktRUN_INDICATOR;
 8001e3c:	00801544 	movi	r2,85
 8001e40:	d0a74715 	stw	r2,-25316(gp)

		xSecondaryCycles++;
 8001e44:	d0a74517 	ldw	r2,-25324(gp)
 8001e48:	10800044 	addi	r2,r2,1
 8001e4c:	d0a74515 	stw	r2,-25324(gp)
	}
 8001e50:	003fba06 	br	8001d3c <vSecondaryBlockTimeTestTask+0x14>

08001e54 <prvBasicDelayTests>:
}
/*-----------------------------------------------------------*/

static void prvBasicDelayTests( void )
{
 8001e54:	defff604 	addi	sp,sp,-40
 8001e58:	dfc00915 	stw	ra,36(sp)
 8001e5c:	df000815 	stw	fp,32(sp)
 8001e60:	df000804 	addi	fp,sp,32
TickType_t xPreTime, xPostTime, x, xLastUnblockTime, xExpectedUnblockTime;
const TickType_t xPeriod = 75, xCycles = 5, xAllowableMargin = ( bktALLOWABLE_MARGIN >> 1 );
 8001e64:	008012c4 	movi	r2,75
 8001e68:	e0bff915 	stw	r2,-28(fp)
 8001e6c:	00800144 	movi	r2,5
 8001e70:	e0bffa15 	stw	r2,-24(fp)
 8001e74:	008001c4 	movi	r2,7
 8001e78:	e0bffb15 	stw	r2,-20(fp)

	/* Temporarily increase priority so the timing is more accurate, but not so
	high as to disrupt the timer tests. */
	vTaskPrioritySet( NULL, configTIMER_TASK_PRIORITY - 1 );
 8001e7c:	014000c4 	movi	r5,3
 8001e80:	0009883a 	mov	r4,zero
 8001e84:	8005d940 	call	8005d94 <vTaskPrioritySet>

	/* Crude check to too that vTaskDelay() blocks for the expected period. */
	xPreTime = xTaskGetTickCount();
 8001e88:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001e8c:	e0bffc15 	stw	r2,-16(fp)
	vTaskDelay( bktTIME_TO_BLOCK );
 8001e90:	01002bc4 	movi	r4,175
 8001e94:	8005c940 	call	8005c94 <vTaskDelay>
	xPostTime = xTaskGetTickCount();
 8001e98:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001e9c:	e0bffd15 	stw	r2,-12(fp)

	/* The priority is higher, so the allowable margin is halved when compared
	to the other tests in this file. */
	if( ( xPostTime - xPreTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8001ea0:	e0fffd17 	ldw	r3,-12(fp)
 8001ea4:	e0bffc17 	ldw	r2,-16(fp)
 8001ea8:	1885c83a 	sub	r2,r3,r2
 8001eac:	e0fffb17 	ldw	r3,-20(fp)
 8001eb0:	18c02bc4 	addi	r3,r3,175
 8001eb4:	1880022e 	bgeu	r3,r2,8001ec0 <prvBasicDelayTests+0x6c>
	{
		xErrorOccurred = pdTRUE;
 8001eb8:	00800044 	movi	r2,1
 8001ebc:	d0a74615 	stw	r2,-25320(gp)
	}

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
 8001ec0:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001ec4:	e0bffd15 	stw	r2,-12(fp)
	xLastUnblockTime = xPostTime;
 8001ec8:	e0bffd17 	ldw	r2,-12(fp)
 8001ecc:	e0bfff15 	stw	r2,-4(fp)

	for( x = 0; x < xCycles; x++ )
 8001ed0:	e03ff815 	stw	zero,-32(fp)
 8001ed4:	00001a06 	br	8001f40 <prvBasicDelayTests+0xec>
	{
		/* Calculate the next expected unblock time from the time taken before
		this loop was entered. */
		xExpectedUnblockTime = xPostTime + ( x * xPeriod );
 8001ed8:	e17ff917 	ldw	r5,-28(fp)
 8001edc:	e13ff817 	ldw	r4,-32(fp)
 8001ee0:	80082e00 	call	80082e0 <__mulsi3>
 8001ee4:	1007883a 	mov	r3,r2
 8001ee8:	e0bffd17 	ldw	r2,-12(fp)
 8001eec:	1885883a 	add	r2,r3,r2
 8001ef0:	e0bffe15 	stw	r2,-8(fp)

		vTaskDelayUntil( &xLastUnblockTime, xPeriod );
 8001ef4:	e0bfff04 	addi	r2,fp,-4
 8001ef8:	e17ff917 	ldw	r5,-28(fp)
 8001efc:	1009883a 	mov	r4,r2
 8001f00:	8005ba40 	call	8005ba4 <vTaskDelayUntil>

		if( ( xTaskGetTickCount() - xExpectedUnblockTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8001f04:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8001f08:	1007883a 	mov	r3,r2
 8001f0c:	e0bffe17 	ldw	r2,-8(fp)
 8001f10:	1885c83a 	sub	r2,r3,r2
 8001f14:	e0fffb17 	ldw	r3,-20(fp)
 8001f18:	18c02bc4 	addi	r3,r3,175
 8001f1c:	1880022e 	bgeu	r3,r2,8001f28 <prvBasicDelayTests+0xd4>
		{
			xErrorOccurred = pdTRUE;
 8001f20:	00800044 	movi	r2,1
 8001f24:	d0a74615 	stw	r2,-25320(gp)
		}

		xPrimaryCycles++;
 8001f28:	d0a74417 	ldw	r2,-25328(gp)
 8001f2c:	10800044 	addi	r2,r2,1
 8001f30:	d0a74415 	stw	r2,-25328(gp)

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
	xLastUnblockTime = xPostTime;

	for( x = 0; x < xCycles; x++ )
 8001f34:	e0bff817 	ldw	r2,-32(fp)
 8001f38:	10800044 	addi	r2,r2,1
 8001f3c:	e0bff815 	stw	r2,-32(fp)
 8001f40:	e0fff817 	ldw	r3,-32(fp)
 8001f44:	e0bffa17 	ldw	r2,-24(fp)
 8001f48:	18bfe336 	bltu	r3,r2,8001ed8 <prvBasicDelayTests+0x84>

		xPrimaryCycles++;
	}

	/* Reset to the original task priority ready for the other tests. */
	vTaskPrioritySet( NULL, bktPRIMARY_PRIORITY );
 8001f4c:	01400084 	movi	r5,2
 8001f50:	0009883a 	mov	r4,zero
 8001f54:	8005d940 	call	8005d94 <vTaskPrioritySet>
}
 8001f58:	0001883a 	nop
 8001f5c:	e037883a 	mov	sp,fp
 8001f60:	dfc00117 	ldw	ra,4(sp)
 8001f64:	df000017 	ldw	fp,0(sp)
 8001f68:	dec00204 	addi	sp,sp,8
 8001f6c:	f800283a 	ret

08001f70 <xAreBlockTimeTestTasksStillRunning>:
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 8001f70:	defffe04 	addi	sp,sp,-8
 8001f74:	df000115 	stw	fp,4(sp)
 8001f78:	df000104 	addi	fp,sp,4
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 8001f7c:	00800044 	movi	r2,1
 8001f80:	e0bfff15 	stw	r2,-4(fp)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 8001f84:	d0e74417 	ldw	r3,-25328(gp)
 8001f88:	d0a74817 	ldw	r2,-25312(gp)
 8001f8c:	1880011e 	bne	r3,r2,8001f94 <xAreBlockTimeTestTasksStillRunning+0x24>
	{
		xReturn = pdFAIL;
 8001f90:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 8001f94:	d0e74517 	ldw	r3,-25324(gp)
 8001f98:	d0a74917 	ldw	r2,-25308(gp)
 8001f9c:	1880011e 	bne	r3,r2,8001fa4 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
 8001fa0:	e03fff15 	stw	zero,-4(fp)
	}

	if( xErrorOccurred == pdTRUE )
 8001fa4:	d0a74617 	ldw	r2,-25320(gp)
 8001fa8:	10800058 	cmpnei	r2,r2,1
 8001fac:	1000011e 	bne	r2,zero,8001fb4 <xAreBlockTimeTestTasksStillRunning+0x44>
	{
		xReturn = pdFAIL;
 8001fb0:	e03fff15 	stw	zero,-4(fp)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 8001fb4:	d0a74517 	ldw	r2,-25324(gp)
 8001fb8:	d0a74915 	stw	r2,-25308(gp)
	xLastPrimaryCycleCount = xPrimaryCycles;
 8001fbc:	d0a74417 	ldw	r2,-25328(gp)
 8001fc0:	d0a74815 	stw	r2,-25312(gp)

	return xReturn;
 8001fc4:	e0bfff17 	ldw	r2,-4(fp)
}
 8001fc8:	e037883a 	mov	sp,fp
 8001fcc:	df000017 	ldw	fp,0(sp)
 8001fd0:	dec00104 	addi	sp,sp,4
 8001fd4:	f800283a 	ret

08001fd8 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
 8001fd8:	defff904 	addi	sp,sp,-28
 8001fdc:	dfc00615 	stw	ra,24(sp)
 8001fe0:	df000515 	stw	fp,20(sp)
 8001fe4:	df000504 	addi	fp,sp,20
 8001fe8:	e13ffd15 	stw	r4,-12(fp)
 8001fec:	e17ffe15 	stw	r5,-8(fp)
 8001ff0:	e1bfff15 	stw	r6,-4(fp)
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
 8001ff4:	e0bfff17 	ldw	r2,-4(fp)
 8001ff8:	d0a74b15 	stw	r2,-25300(gp)
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 8001ffc:	01400604 	movi	r5,24
 8002000:	e13ffe17 	ldw	r4,-8(fp)
 8002004:	8007c240 	call	8007c24 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 8002008:	e0bffd17 	ldw	r2,-12(fp)
 800200c:	10bfffc4 	addi	r2,r2,-1
 8002010:	d8000115 	stw	zero,4(sp)
 8002014:	d8800015 	stw	r2,0(sp)
 8002018:	000f883a 	mov	r7,zero
 800201c:	01810004 	movi	r6,1024
 8002020:	01420074 	movhi	r5,2049
 8002024:	297b3c04 	addi	r5,r5,-4880
 8002028:	01020034 	movhi	r4,2048
 800202c:	21081d04 	addi	r4,r4,8308
 8002030:	80056e80 	call	80056e8 <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8002034:	d8000115 	stw	zero,4(sp)
 8002038:	e0bffd17 	ldw	r2,-12(fp)
 800203c:	d8800015 	stw	r2,0(sp)
 8002040:	000f883a 	mov	r7,zero
 8002044:	01810004 	movi	r6,1024
 8002048:	01420074 	movhi	r5,2049
 800204c:	297b3e04 	addi	r5,r5,-4872
 8002050:	01020034 	movhi	r4,2048
 8002054:	21084a04 	addi	r4,r4,8488
 8002058:	80056e80 	call	80056e8 <xTaskCreate>
}
 800205c:	0001883a 	nop
 8002060:	e037883a 	mov	sp,fp
 8002064:	dfc00117 	ldw	ra,4(sp)
 8002068:	df000017 	ldw	fp,0(sp)
 800206c:	dec00204 	addi	sp,sp,8
 8002070:	f800283a 	ret

08002074 <vComTxTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
 8002074:	defffb04 	addi	sp,sp,-20
 8002078:	dfc00415 	stw	ra,16(sp)
 800207c:	df000315 	stw	fp,12(sp)
 8002080:	df000304 	addi	fp,sp,12
 8002084:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 8002088:	00801044 	movi	r2,65
 800208c:	e0bffd05 	stb	r2,-12(fp)
 8002090:	00000e06 	br	80020cc <vComTxTask+0x58>
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 8002094:	d0a74a17 	ldw	r2,-25304(gp)
 8002098:	e0fffd07 	ldb	r3,-12(fp)
 800209c:	000d883a 	mov	r6,zero
 80020a0:	180b883a 	mov	r5,r3
 80020a4:	1009883a 	mov	r4,r2
 80020a8:	8007d740 	call	8007d74 <xSerialPutChar>
 80020ac:	10800058 	cmpnei	r2,r2,1
 80020b0:	1000031e 	bne	r2,zero,80020c0 <vComTxTask+0x4c>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 80020b4:	d0a74b17 	ldw	r2,-25300(gp)
 80020b8:	1009883a 	mov	r4,r2
 80020bc:	80037740 	call	8003774 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 80020c0:	e0bffd03 	ldbu	r2,-12(fp)
 80020c4:	10800044 	addi	r2,r2,1
 80020c8:	e0bffd05 	stb	r2,-12(fp)
 80020cc:	e0bffd07 	ldb	r2,-12(fp)
 80020d0:	10801650 	cmplti	r2,r2,89
 80020d4:	103fef1e 	bne	r2,zero,8002094 <vComTxTask+0x20>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 80020d8:	d0a74b17 	ldw	r2,-25300(gp)
 80020dc:	000b883a 	mov	r5,zero
 80020e0:	1009883a 	mov	r4,r2
 80020e4:	80036d40 	call	80036d4 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 80020e8:	80064e80 	call	80064e8 <xTaskGetTickCount>
 80020ec:	108000c4 	addi	r2,r2,3
 80020f0:	e0bffe15 	stw	r2,-8(fp)

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 80020f4:	e0bffe17 	ldw	r2,-8(fp)
 80020f8:	01402584 	movi	r5,150
 80020fc:	1009883a 	mov	r4,r2
 8002100:	80082880 	call	8008288 <__umodsi3>
 8002104:	e0bffe15 	stw	r2,-8(fp)

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 8002108:	e0bffe17 	ldw	r2,-8(fp)
 800210c:	10800ca8 	cmpgeui	r2,r2,50
 8002110:	1000021e 	bne	r2,zero,800211c <vComTxTask+0xa8>
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
 8002114:	00800c84 	movi	r2,50
 8002118:	e0bffe15 	stw	r2,-8(fp)
		}

		vTaskDelay( xTimeToWait );
 800211c:	e13ffe17 	ldw	r4,-8(fp)
 8002120:	8005c940 	call	8005c94 <vTaskDelay>
	}
 8002124:	003fd806 	br	8002088 <vComTxTask+0x14>

08002128 <vComRxTask>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
 8002128:	defff904 	addi	sp,sp,-28
 800212c:	dfc00615 	stw	ra,24(sp)
 8002130:	df000515 	stw	fp,20(sp)
 8002134:	df000504 	addi	fp,sp,20
 8002138:	e13fff15 	stw	r4,-4(fp)
signed char cExpectedByte, cByteRxed;
BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
 800213c:	e03ffc15 	stw	zero,-16(fp)
 8002140:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 8002144:	00801044 	movi	r2,65
 8002148:	e0bffb05 	stb	r2,-20(fp)
 800214c:	00001806 	br	80021b0 <vComRxTask+0x88>
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
 8002150:	d0a74a17 	ldw	r2,-25304(gp)
 8002154:	e0fffe04 	addi	r3,fp,-8
 8002158:	01bfffd4 	movui	r6,65535
 800215c:	180b883a 	mov	r5,r3
 8002160:	1009883a 	mov	r4,r2
 8002164:	8007d000 	call	8007d00 <xSerialGetChar>
 8002168:	10000e26 	beq	r2,zero,80021a4 <vComRxTask+0x7c>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
 800216c:	e0bffe03 	ldbu	r2,-8(fp)
 8002170:	10c03fcc 	andi	r3,r2,255
 8002174:	18c0201c 	xori	r3,r3,128
 8002178:	18ffe004 	addi	r3,r3,-128
 800217c:	e0bffb07 	ldb	r2,-20(fp)
 8002180:	1880051e 	bne	r3,r2,8002198 <vComRxTask+0x70>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
 8002184:	d0a74b17 	ldw	r2,-25300(gp)
 8002188:	10800044 	addi	r2,r2,1
 800218c:	1009883a 	mov	r4,r2
 8002190:	80037740 	call	8003774 <vParTestToggleLED>
 8002194:	00000306 	br	80021a4 <vComRxTask+0x7c>
				}
				else
				{
					xResyncRequired = pdTRUE;
 8002198:	00800044 	movi	r2,1
 800219c:	e0bffc15 	stw	r2,-16(fp)
					break; /*lint !e960 Non-switch break allowed. */
 80021a0:	00000606 	br	80021bc <vComRxTask+0x94>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 80021a4:	e0bffb03 	ldbu	r2,-20(fp)
 80021a8:	10800044 	addi	r2,r2,1
 80021ac:	e0bffb05 	stb	r2,-20(fp)
 80021b0:	e0bffb07 	ldb	r2,-20(fp)
 80021b4:	10801650 	cmplti	r2,r2,89
 80021b8:	103fe51e 	bne	r2,zero,8002150 <vComRxTask+0x28>
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
 80021bc:	d0a74b17 	ldw	r2,-25300(gp)
 80021c0:	10800044 	addi	r2,r2,1
 80021c4:	000b883a 	mov	r5,zero
 80021c8:	1009883a 	mov	r4,r2
 80021cc:	80036d40 	call	80036d4 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
 80021d0:	e0bffc17 	ldw	r2,-16(fp)
 80021d4:	10800058 	cmpnei	r2,r2,1
 80021d8:	1000121e 	bne	r2,zero,8002224 <vComRxTask+0xfc>
		{
			while( cByteRxed != comLAST_BYTE )
 80021dc:	00000606 	br	80021f8 <vComRxTask+0xd0>
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
 80021e0:	d0a74a17 	ldw	r2,-25304(gp)
 80021e4:	e0fffe04 	addi	r3,fp,-8
 80021e8:	01bfffd4 	movui	r6,65535
 80021ec:	180b883a 	mov	r5,r3
 80021f0:	1009883a 	mov	r4,r2
 80021f4:	8007d000 	call	8007d00 <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
 80021f8:	e0bffe03 	ldbu	r2,-8(fp)
 80021fc:	10803fcc 	andi	r2,r2,255
 8002200:	1080201c 	xori	r2,r2,128
 8002204:	10bfe004 	addi	r2,r2,-128
 8002208:	10801618 	cmpnei	r2,r2,88
 800220c:	103ff41e 	bne	r2,zero,80021e0 <vComRxTask+0xb8>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
 8002210:	e0bffd17 	ldw	r2,-12(fp)
 8002214:	10800044 	addi	r2,r2,1
 8002218:	e0bffd15 	stw	r2,-12(fp)

			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
 800221c:	e03ffc15 	stw	zero,-16(fp)
 8002220:	003fc806 	br	8002144 <vComRxTask+0x1c>
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 8002224:	e0bffd17 	ldw	r2,-12(fp)
 8002228:	10800088 	cmpgei	r2,r2,2
 800222c:	103fc51e 	bne	r2,zero,8002144 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
 8002230:	d0a74c17 	ldw	r2,-25296(gp)
 8002234:	10800044 	addi	r2,r2,1
 8002238:	d0a74c15 	stw	r2,-25296(gp)
			}
		}
	}
 800223c:	003fc106 	br	8002144 <vComRxTask+0x1c>

08002240 <xAreComTestTasksStillRunning>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

BaseType_t xAreComTestTasksStillRunning( void )
{
 8002240:	defffe04 	addi	sp,sp,-8
 8002244:	df000115 	stw	fp,4(sp)
 8002248:	df000104 	addi	fp,sp,4
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 800224c:	d0a74c17 	ldw	r2,-25296(gp)
 8002250:	1000021e 	bne	r2,zero,800225c <xAreComTestTasksStillRunning+0x1c>
	{
		xReturn = pdFALSE;
 8002254:	e03fff15 	stw	zero,-4(fp)
 8002258:	00000206 	br	8002264 <xAreComTestTasksStillRunning+0x24>
	}
	else
	{
		xReturn = pdTRUE;
 800225c:	00800044 	movi	r2,1
 8002260:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 8002264:	d0274c15 	stw	zero,-25296(gp)

	return xReturn;
 8002268:	e0bfff17 	ldw	r2,-4(fp)
}
 800226c:	e037883a 	mov	sp,fp
 8002270:	df000017 	ldw	fp,0(sp)
 8002274:	dec00104 	addi	sp,sp,4
 8002278:	f800283a 	ret

0800227c <vStartCountingSemaphoreTasks>:
static xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 800227c:	defffc04 	addi	sp,sp,-16
 8002280:	dfc00315 	stw	ra,12(sp)
 8002284:	df000215 	stw	fp,8(sp)
 8002288:	df000204 	addi	fp,sp,8
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 800228c:	01403204 	movi	r5,200
 8002290:	01003204 	movi	r4,200
 8002294:	800469c0 	call	800469c <xQueueCreateCountingSemaphore>
 8002298:	1007883a 	mov	r3,r2
 800229c:	00820074 	movhi	r2,2049
 80022a0:	108a3404 	addi	r2,r2,10448
 80022a4:	10c00015 	stw	r3,0(r2)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 80022a8:	00820074 	movhi	r2,2049
 80022ac:	108a3404 	addi	r2,r2,10448
 80022b0:	00c02a84 	movi	r3,170
 80022b4:	10c00115 	stw	r3,4(r2)
	xParameters[ 0 ].uxLoopCounter = 0;
 80022b8:	00820074 	movhi	r2,2049
 80022bc:	108a3404 	addi	r2,r2,10448
 80022c0:	10000215 	stw	zero,8(r2)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 80022c4:	000b883a 	mov	r5,zero
 80022c8:	01003204 	movi	r4,200
 80022cc:	800469c0 	call	800469c <xQueueCreateCountingSemaphore>
 80022d0:	1007883a 	mov	r3,r2
 80022d4:	00820074 	movhi	r2,2049
 80022d8:	108a3404 	addi	r2,r2,10448
 80022dc:	10c00315 	stw	r3,12(r2)
	xParameters[ 1 ].uxExpectedStartCount = 0;
 80022e0:	00820074 	movhi	r2,2049
 80022e4:	108a3404 	addi	r2,r2,10448
 80022e8:	10000415 	stw	zero,16(r2)
	xParameters[ 1 ].uxLoopCounter = 0;
 80022ec:	00820074 	movhi	r2,2049
 80022f0:	108a3404 	addi	r2,r2,10448
 80022f4:	10000515 	stw	zero,20(r2)

	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 80022f8:	00820074 	movhi	r2,2049
 80022fc:	108a3404 	addi	r2,r2,10448
 8002300:	10800017 	ldw	r2,0(r2)
 8002304:	1000041e 	bne	r2,zero,8002318 <vStartCountingSemaphoreTasks+0x9c>
 8002308:	00820074 	movhi	r2,2049
 800230c:	108a3404 	addi	r2,r2,10448
 8002310:	10800317 	ldw	r2,12(r2)
 8002314:	10001426 	beq	r2,zero,8002368 <vStartCountingSemaphoreTasks+0xec>
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );

		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 8002318:	d8000115 	stw	zero,4(sp)
 800231c:	d8000015 	stw	zero,0(sp)
 8002320:	01c20074 	movhi	r7,2049
 8002324:	39ca3404 	addi	r7,r7,10448
 8002328:	01810004 	movi	r6,1024
 800232c:	01420074 	movhi	r5,2049
 8002330:	297b4004 	addi	r5,r5,-4864
 8002334:	01020034 	movhi	r4,2048
 8002338:	21094204 	addi	r4,r4,9480
 800233c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );
 8002340:	d8000115 	stw	zero,4(sp)
 8002344:	d8000015 	stw	zero,0(sp)
 8002348:	01c20074 	movhi	r7,2049
 800234c:	39ca3704 	addi	r7,r7,10460
 8002350:	01810004 	movi	r6,1024
 8002354:	01420074 	movhi	r5,2049
 8002358:	297b4204 	addi	r5,r5,-4856
 800235c:	01020034 	movhi	r4,2048
 8002360:	21094204 	addi	r4,r4,9480
 8002364:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8002368:	0001883a 	nop
 800236c:	e037883a 	mov	sp,fp
 8002370:	dfc00117 	ldw	ra,4(sp)
 8002374:	df000017 	ldw	fp,0(sp)
 8002378:	dec00204 	addi	sp,sp,8
 800237c:	f800283a 	ret

08002380 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 8002380:	defffb04 	addi	sp,sp,-20
 8002384:	dfc00415 	stw	ra,16(sp)
 8002388:	df000315 	stw	fp,12(sp)
 800238c:	df000304 	addi	fp,sp,12
 8002390:	e13ffe15 	stw	r4,-8(fp)
 8002394:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8002398:	000f883a 	mov	r7,zero
 800239c:	000d883a 	mov	r6,zero
 80023a0:	000b883a 	mov	r5,zero
 80023a4:	e13ffe17 	ldw	r4,-8(fp)
 80023a8:	80046f40 	call	80046f4 <xQueueGenericSend>
 80023ac:	10800058 	cmpnei	r2,r2,1
 80023b0:	1000021e 	bne	r2,zero,80023bc <prvDecrementSemaphoreCount+0x3c>
	{
		xErrorDetected = pdTRUE;
 80023b4:	00800044 	movi	r2,1
 80023b8:	d0a74d15 	stw	r2,-25292(gp)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80023bc:	e03ffd15 	stw	zero,-12(fp)
 80023c0:	00000f06 	br	8002400 <prvDecrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );

		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 80023c4:	000b883a 	mov	r5,zero
 80023c8:	e13ffe17 	ldw	r4,-8(fp)
 80023cc:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 80023d0:	10800060 	cmpeqi	r2,r2,1
 80023d4:	1000021e 	bne	r2,zero,80023e0 <prvDecrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 80023d8:	00800044 	movi	r2,1
 80023dc:	d0a74d15 	stw	r2,-25292(gp)
		}

		( *puxLoopCounter )++;
 80023e0:	e0bfff17 	ldw	r2,-4(fp)
 80023e4:	10800017 	ldw	r2,0(r2)
 80023e8:	10c00044 	addi	r3,r2,1
 80023ec:	e0bfff17 	ldw	r2,-4(fp)
 80023f0:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80023f4:	e0bffd17 	ldw	r2,-12(fp)
 80023f8:	10800044 	addi	r2,r2,1
 80023fc:	e0bffd15 	stw	r2,-12(fp)
 8002400:	e0bffd17 	ldw	r2,-12(fp)
 8002404:	10803230 	cmpltui	r2,r2,200
 8002408:	103fee1e 	bne	r2,zero,80023c4 <prvDecrementSemaphoreCount+0x44>
	#endif

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 800240c:	000b883a 	mov	r5,zero
 8002410:	e13ffe17 	ldw	r4,-8(fp)
 8002414:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8002418:	10800058 	cmpnei	r2,r2,1
 800241c:	1000021e 	bne	r2,zero,8002428 <prvDecrementSemaphoreCount+0xa8>
	{
		xErrorDetected = pdTRUE;
 8002420:	00800044 	movi	r2,1
 8002424:	d0a74d15 	stw	r2,-25292(gp)
	}
}
 8002428:	0001883a 	nop
 800242c:	e037883a 	mov	sp,fp
 8002430:	dfc00117 	ldw	ra,4(sp)
 8002434:	df000017 	ldw	fp,0(sp)
 8002438:	dec00204 	addi	sp,sp,8
 800243c:	f800283a 	ret

08002440 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 8002440:	defffb04 	addi	sp,sp,-20
 8002444:	dfc00415 	stw	ra,16(sp)
 8002448:	df000315 	stw	fp,12(sp)
 800244c:	df000304 	addi	fp,sp,12
 8002450:	e13ffe15 	stw	r4,-8(fp)
 8002454:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8002458:	000b883a 	mov	r5,zero
 800245c:	e13ffe17 	ldw	r4,-8(fp)
 8002460:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8002464:	10800058 	cmpnei	r2,r2,1
 8002468:	1000021e 	bne	r2,zero,8002474 <prvIncrementSemaphoreCount+0x34>
	{
		xErrorDetected = pdTRUE;
 800246c:	00800044 	movi	r2,1
 8002470:	d0a74d15 	stw	r2,-25292(gp)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8002474:	e03ffd15 	stw	zero,-12(fp)
 8002478:	00001106 	br	80024c0 <prvIncrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );

		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 800247c:	000f883a 	mov	r7,zero
 8002480:	000d883a 	mov	r6,zero
 8002484:	000b883a 	mov	r5,zero
 8002488:	e13ffe17 	ldw	r4,-8(fp)
 800248c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8002490:	10800060 	cmpeqi	r2,r2,1
 8002494:	1000021e 	bne	r2,zero,80024a0 <prvIncrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 8002498:	00800044 	movi	r2,1
 800249c:	d0a74d15 	stw	r2,-25292(gp)
		}

		( *puxLoopCounter )++;
 80024a0:	e0bfff17 	ldw	r2,-4(fp)
 80024a4:	10800017 	ldw	r2,0(r2)
 80024a8:	10c00044 	addi	r3,r2,1
 80024ac:	e0bfff17 	ldw	r2,-4(fp)
 80024b0:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80024b4:	e0bffd17 	ldw	r2,-12(fp)
 80024b8:	10800044 	addi	r2,r2,1
 80024bc:	e0bffd15 	stw	r2,-12(fp)
 80024c0:	e0bffd17 	ldw	r2,-12(fp)
 80024c4:	10803230 	cmpltui	r2,r2,200
 80024c8:	103fec1e 	bne	r2,zero,800247c <prvIncrementSemaphoreCount+0x3c>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 80024cc:	000f883a 	mov	r7,zero
 80024d0:	000d883a 	mov	r6,zero
 80024d4:	000b883a 	mov	r5,zero
 80024d8:	e13ffe17 	ldw	r4,-8(fp)
 80024dc:	80046f40 	call	80046f4 <xQueueGenericSend>
 80024e0:	10800058 	cmpnei	r2,r2,1
 80024e4:	1000021e 	bne	r2,zero,80024f0 <prvIncrementSemaphoreCount+0xb0>
	{
		xErrorDetected = pdTRUE;
 80024e8:	00800044 	movi	r2,1
 80024ec:	d0a74d15 	stw	r2,-25292(gp)
	}
}
 80024f0:	0001883a 	nop
 80024f4:	e037883a 	mov	sp,fp
 80024f8:	dfc00117 	ldw	ra,4(sp)
 80024fc:	df000017 	ldw	fp,0(sp)
 8002500:	dec00204 	addi	sp,sp,8
 8002504:	f800283a 	ret

08002508 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 8002508:	defffc04 	addi	sp,sp,-16
 800250c:	dfc00315 	stw	ra,12(sp)
 8002510:	df000215 	stw	fp,8(sp)
 8002514:	df000204 	addi	fp,sp,8
 8002518:	e13fff15 	stw	r4,-4(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 800251c:	e0bfff17 	ldw	r2,-4(fp)
 8002520:	e0bffe15 	stw	r2,-8(fp)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 8002524:	e0bffe17 	ldw	r2,-8(fp)
 8002528:	10800117 	ldw	r2,4(r2)
 800252c:	10802a98 	cmpnei	r2,r2,170
 8002530:	1000071e 	bne	r2,zero,8002550 <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002534:	e0bffe17 	ldw	r2,-8(fp)
 8002538:	10c00017 	ldw	r3,0(r2)
 800253c:	e0bffe17 	ldw	r2,-8(fp)
 8002540:	10800204 	addi	r2,r2,8
 8002544:	100b883a 	mov	r5,r2
 8002548:	1809883a 	mov	r4,r3
 800254c:	80023800 	call	8002380 <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 8002550:	e0bffe17 	ldw	r2,-8(fp)
 8002554:	10800017 	ldw	r2,0(r2)
 8002558:	000b883a 	mov	r5,zero
 800255c:	1009883a 	mov	r4,r2
 8002560:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8002564:	10800058 	cmpnei	r2,r2,1
 8002568:	1000021e 	bne	r2,zero,8002574 <prvCountingSemaphoreTask+0x6c>
	{
		xErrorDetected = pdTRUE;
 800256c:	00800044 	movi	r2,1
 8002570:	d0a74d15 	stw	r2,-25292(gp)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002574:	e0bffe17 	ldw	r2,-8(fp)
 8002578:	10c00017 	ldw	r3,0(r2)
 800257c:	e0bffe17 	ldw	r2,-8(fp)
 8002580:	10800204 	addi	r2,r2,8
 8002584:	100b883a 	mov	r5,r2
 8002588:	1809883a 	mov	r4,r3
 800258c:	80024400 	call	8002440 <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002590:	e0bffe17 	ldw	r2,-8(fp)
 8002594:	10c00017 	ldw	r3,0(r2)
 8002598:	e0bffe17 	ldw	r2,-8(fp)
 800259c:	10800204 	addi	r2,r2,8
 80025a0:	100b883a 	mov	r5,r2
 80025a4:	1809883a 	mov	r4,r3
 80025a8:	80023800 	call	8002380 <prvDecrementSemaphoreCount>
	}
 80025ac:	003ff106 	br	8002574 <prvCountingSemaphoreTask+0x6c>

080025b0 <xAreCountingSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
 80025b0:	defffe04 	addi	sp,sp,-8
 80025b4:	df000115 	stw	fp,4(sp)
 80025b8:	df000104 	addi	fp,sp,4
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
 80025bc:	00800044 	movi	r2,1
 80025c0:	e0bfff15 	stw	r2,-4(fp)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
 80025c4:	d0a74d17 	ldw	r2,-25292(gp)
 80025c8:	10000126 	beq	r2,zero,80025d0 <xAreCountingSemaphoreTasksStillRunning+0x20>
	{
		xReturn = pdFAIL;
 80025cc:	e03fff15 	stw	zero,-4(fp)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
 80025d0:	00820074 	movhi	r2,2049
 80025d4:	108a3404 	addi	r2,r2,10448
 80025d8:	10c00217 	ldw	r3,8(r2)
 80025dc:	d0a74e17 	ldw	r2,-25288(gp)
 80025e0:	1880021e 	bne	r3,r2,80025ec <xAreCountingSemaphoreTasksStillRunning+0x3c>
	{
		xReturn = pdFAIL;
 80025e4:	e03fff15 	stw	zero,-4(fp)
 80025e8:	00000406 	br	80025fc <xAreCountingSemaphoreTasksStillRunning+0x4c>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
 80025ec:	00820074 	movhi	r2,2049
 80025f0:	108a3404 	addi	r2,r2,10448
 80025f4:	10800217 	ldw	r2,8(r2)
 80025f8:	d0a74e15 	stw	r2,-25288(gp)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
 80025fc:	00820074 	movhi	r2,2049
 8002600:	108a3404 	addi	r2,r2,10448
 8002604:	10c00517 	ldw	r3,20(r2)
 8002608:	d0a74f17 	ldw	r2,-25284(gp)
 800260c:	1880021e 	bne	r3,r2,8002618 <xAreCountingSemaphoreTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
 8002610:	e03fff15 	stw	zero,-4(fp)
 8002614:	00000406 	br	8002628 <xAreCountingSemaphoreTasksStillRunning+0x78>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
 8002618:	00820074 	movhi	r2,2049
 800261c:	108a3404 	addi	r2,r2,10448
 8002620:	10800517 	ldw	r2,20(r2)
 8002624:	d0a74f15 	stw	r2,-25284(gp)
	}

	return xReturn;
 8002628:	e0bfff17 	ldw	r2,-4(fp)
}
 800262c:	e037883a 	mov	sp,fp
 8002630:	df000017 	ldw	fp,0(sp)
 8002634:	dec00104 	addi	sp,sp,4
 8002638:	f800283a 	ret

0800263c <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
 800263c:	defffb04 	addi	sp,sp,-20
 8002640:	dfc00415 	stw	ra,16(sp)
 8002644:	df000315 	stw	fp,12(sp)
 8002648:	df000304 	addi	fp,sp,12
 800264c:	e13fff15 	stw	r4,-4(fp)
	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) NULL, uxPriority, NULL );
 8002650:	d8000115 	stw	zero,4(sp)
 8002654:	e0bfff17 	ldw	r2,-4(fp)
 8002658:	d8800015 	stw	r2,0(sp)
 800265c:	000f883a 	mov	r7,zero
 8002660:	01810f04 	movi	r6,1084
 8002664:	01420074 	movhi	r5,2049
 8002668:	297b4404 	addi	r5,r5,-4848
 800266c:	01020034 	movhi	r4,2048
 8002670:	2109c704 	addi	r4,r4,10012
 8002674:	80056e80 	call	80056e8 <xTaskCreate>
}
 8002678:	0001883a 	nop
 800267c:	e037883a 	mov	sp,fp
 8002680:	dfc00117 	ldw	ra,4(sp)
 8002684:	df000017 	ldw	fp,0(sp)
 8002688:	dec00204 	addi	sp,sp,8
 800268c:	f800283a 	ret

08002690 <vSuicidalTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
 8002690:	defff904 	addi	sp,sp,-28
 8002694:	dfc00615 	stw	ra,24(sp)
 8002698:	df000515 	stw	fp,20(sp)
 800269c:	df000504 	addi	fp,sp,20
 80026a0:	e13fff15 	stw	r4,-4(fp)
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 200 );
 80026a4:	00803204 	movi	r2,200
 80026a8:	e0bffc15 	stw	r2,-16(fp)

	/* Test deletion of a task's secure context, if any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	if( pvParameters != NULL )
 80026ac:	e0bfff17 	ldw	r2,-4(fp)
 80026b0:	10000426 	beq	r2,zero,80026c4 <vSuicidalTask+0x34>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 80026b4:	e0bfff17 	ldw	r2,-4(fp)
 80026b8:	10800017 	ldw	r2,0(r2)
 80026bc:	e0bffb15 	stw	r2,-20(fp)
 80026c0:	00000106 	br	80026c8 <vSuicidalTask+0x38>
	}
	else
	{
		xTaskToKill = NULL;
 80026c4:	e03ffb15 	stw	zero,-20(fp)
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
 80026c8:	00800084 	movi	r2,2
 80026cc:	e0bffd15 	stw	r2,-12(fp)
		l2 = 89;
 80026d0:	00801644 	movi	r2,89
 80026d4:	e0bffe15 	stw	r2,-8(fp)
		l2 *= l1;
 80026d8:	e0bffd17 	ldw	r2,-12(fp)
 80026dc:	e0fffe17 	ldw	r3,-8(fp)
 80026e0:	180b883a 	mov	r5,r3
 80026e4:	1009883a 	mov	r4,r2
 80026e8:	80082e00 	call	80082e0 <__mulsi3>
 80026ec:	e0bffe15 	stw	r2,-8(fp)
		vTaskDelay( xDelay );
 80026f0:	e13ffc17 	ldw	r4,-16(fp)
 80026f4:	8005c940 	call	8005c94 <vTaskDelay>

		if( xTaskToKill != NULL )
 80026f8:	e0bffb17 	ldw	r2,-20(fp)
 80026fc:	103ff226 	beq	r2,zero,80026c8 <vSuicidalTask+0x38>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 8002700:	0009883a 	mov	r4,zero
 8002704:	8005c940 	call	8005c94 <vTaskDelay>

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 8002708:	e13ffb17 	ldw	r4,-20(fp)
 800270c:	8005abc0 	call	8005abc <vTaskDelete>

			/* Kill ourselves. */
			vTaskDelete( NULL );
 8002710:	0009883a 	mov	r4,zero
 8002714:	8005abc0 	call	8005abc <vTaskDelete>
		}
	}
 8002718:	003feb06 	br	80026c8 <vSuicidalTask+0x38>

0800271c <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
 800271c:	defff904 	addi	sp,sp,-28
 8002720:	dfc00615 	stw	ra,24(sp)
 8002724:	df000515 	stw	fp,20(sp)
 8002728:	df000504 	addi	fp,sp,20
 800272c:	e13fff15 	stw	r4,-4(fp)
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 8002730:	0080fa04 	movi	r2,1000
 8002734:	e0bffd15 	stw	r2,-12(fp)
	/* Remove compiler warning about unused parameter. */
	( void ) pvParameters;

	/* Delay at the start to ensure tasks created by other demos have been
	created before storing the current number of tasks. */
	vTaskDelay( xDelay );
 8002738:	e13ffd17 	ldw	r4,-12(fp)
 800273c:	8005c940 	call	8005c94 <vTaskDelay>
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8002740:	800653c0 	call	800653c <uxTaskGetNumberOfTasks>
 8002744:	d0a75115 	stw	r2,-25276(gp)

	uxPriority = uxTaskPriorityGet( NULL );
 8002748:	0009883a 	mov	r4,zero
 800274c:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 8002750:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 8002754:	e13ffd17 	ldw	r4,-12(fp)
 8002758:	8005c940 	call	8005c94 <vTaskDelay>

		xCreatedTask = NULL;
 800275c:	d0275315 	stw	zero,-25268(gp)

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
 8002760:	d0a75304 	addi	r2,gp,-25268
 8002764:	d8800115 	stw	r2,4(sp)
 8002768:	e0bffe17 	ldw	r2,-8(fp)
 800276c:	d8800015 	stw	r2,0(sp)
 8002770:	000f883a 	mov	r7,zero
 8002774:	01810004 	movi	r6,1024
 8002778:	01420074 	movhi	r5,2049
 800277c:	297b4604 	addi	r5,r5,-4840
 8002780:	01020034 	movhi	r4,2048
 8002784:	2109a404 	addi	r4,r4,9872
 8002788:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
 800278c:	d8000115 	stw	zero,4(sp)
 8002790:	e0bffe17 	ldw	r2,-8(fp)
 8002794:	d8800015 	stw	r2,0(sp)
 8002798:	d1e75304 	addi	r7,gp,-25268
 800279c:	01810004 	movi	r6,1024
 80027a0:	01420074 	movhi	r5,2049
 80027a4:	297b4804 	addi	r5,r5,-4832
 80027a8:	01020034 	movhi	r4,2048
 80027ac:	2109a404 	addi	r4,r4,9872
 80027b0:	80056e80 	call	80056e8 <xTaskCreate>

		++usCreationCount;
 80027b4:	d0a7500b 	ldhu	r2,-25280(gp)
 80027b8:	10800044 	addi	r2,r2,1
 80027bc:	d0a7500d 	sth	r2,-25280(gp)
	}
 80027c0:	003fe406 	br	8002754 <vCreateTasks+0x38>

080027c4 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
 80027c4:	defffd04 	addi	sp,sp,-12
 80027c8:	dfc00215 	stw	ra,8(sp)
 80027cc:	df000115 	stw	fp,4(sp)
 80027d0:	df000104 	addi	fp,sp,4
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
 80027d4:	00800044 	movi	r2,1
 80027d8:	e0bfff15 	stw	r2,-4(fp)
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
 80027dc:	d0e0010b 	ldhu	r3,-32764(gp)
 80027e0:	d0a7500b 	ldhu	r2,-25280(gp)
 80027e4:	18ffffcc 	andi	r3,r3,65535
 80027e8:	10bfffcc 	andi	r2,r2,65535
 80027ec:	1880021e 	bne	r3,r2,80027f8 <xIsCreateTaskStillRunning+0x34>
	{
		xReturn = pdFALSE;
 80027f0:	e03fff15 	stw	zero,-4(fp)
 80027f4:	00000206 	br	8002800 <xIsCreateTaskStillRunning+0x3c>
	}
	else
	{
		usLastCreationCount = usCreationCount;
 80027f8:	d0a7500b 	ldhu	r2,-25280(gp)
 80027fc:	d0a0010d 	sth	r2,-32764(gp)
	}

	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8002800:	800653c0 	call	800653c <uxTaskGetNumberOfTasks>
 8002804:	d0a75215 	stw	r2,-25272(gp)

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 8002808:	d0e75217 	ldw	r3,-25272(gp)
 800280c:	d0a75117 	ldw	r2,-25276(gp)
 8002810:	1880022e 	bgeu	r3,r2,800281c <xIsCreateTaskStillRunning+0x58>
	{
		xReturn = pdFALSE;
 8002814:	e03fff15 	stw	zero,-4(fp)
 8002818:	00000606 	br	8002834 <xIsCreateTaskStillRunning+0x70>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 800281c:	d0e75217 	ldw	r3,-25272(gp)
 8002820:	d0a75117 	ldw	r2,-25276(gp)
 8002824:	1885c83a 	sub	r2,r3,r2
 8002828:	00c000c4 	movi	r3,3
 800282c:	1880012e 	bgeu	r3,r2,8002834 <xIsCreateTaskStillRunning+0x70>
	{
		xReturn = pdFALSE;
 8002830:	e03fff15 	stw	zero,-4(fp)
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
 8002834:	e0bfff17 	ldw	r2,-4(fp)
}
 8002838:	e037883a 	mov	sp,fp
 800283c:	dfc00117 	ldw	ra,4(sp)
 8002840:	df000017 	ldw	fp,0(sp)
 8002844:	dec00204 	addi	sp,sp,8
 8002848:	f800283a 	ret

0800284c <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 800284c:	defffc04 	addi	sp,sp,-16
 8002850:	dfc00315 	stw	ra,12(sp)
 8002854:	df000215 	stw	fp,8(sp)
 8002858:	df000204 	addi	fp,sp,8
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 800285c:	000d883a 	mov	r6,zero
 8002860:	01400104 	movi	r5,4
 8002864:	01000044 	movi	r4,1
 8002868:	80043880 	call	8004388 <xQueueGenericCreate>
 800286c:	d0a75e15 	stw	r2,-25224(gp)

	if( xSuspendedTestQueue != NULL )
 8002870:	d0a75e17 	ldw	r2,-25224(gp)
 8002874:	10003026 	beq	r2,zero,8002938 <vStartDynamicPriorityTasks+0xec>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );

		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 8002878:	d0a75404 	addi	r2,gp,-25264
 800287c:	d8800115 	stw	r2,4(sp)
 8002880:	d8000015 	stw	zero,0(sp)
 8002884:	d1e75604 	addi	r7,gp,-25256
 8002888:	01810004 	movi	r6,1024
 800288c:	01420074 	movhi	r5,2049
 8002890:	297b4a04 	addi	r5,r5,-4824
 8002894:	01020034 	movhi	r4,2048
 8002898:	210a6904 	addi	r4,r4,10660
 800289c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 80028a0:	d0a75504 	addi	r2,gp,-25260
 80028a4:	d8800115 	stw	r2,4(sp)
 80028a8:	00800044 	movi	r2,1
 80028ac:	d8800015 	stw	r2,0(sp)
 80028b0:	d1e75604 	addi	r7,gp,-25256
 80028b4:	01810004 	movi	r6,1024
 80028b8:	01420074 	movhi	r5,2049
 80028bc:	297b4c04 	addi	r5,r5,-4816
 80028c0:	01020034 	movhi	r4,2048
 80028c4:	210a5404 	addi	r4,r4,10576
 80028c8:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vCounterControlTask, "C_CTRL", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 80028cc:	d8000115 	stw	zero,4(sp)
 80028d0:	d8000015 	stw	zero,0(sp)
 80028d4:	000f883a 	mov	r7,zero
 80028d8:	01810004 	movi	r6,1024
 80028dc:	01420074 	movhi	r5,2049
 80028e0:	297b4e04 	addi	r5,r5,-4808
 80028e4:	01020034 	movhi	r4,2048
 80028e8:	210a8104 	addi	r4,r4,10756
 80028ec:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 80028f0:	d8000115 	stw	zero,4(sp)
 80028f4:	d8000015 	stw	zero,0(sp)
 80028f8:	000f883a 	mov	r7,zero
 80028fc:	01810004 	movi	r6,1024
 8002900:	01420074 	movhi	r5,2049
 8002904:	297b5004 	addi	r5,r5,-4800
 8002908:	01020034 	movhi	r4,2048
 800290c:	210ab804 	addi	r4,r4,10976
 8002910:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8002914:	d8000115 	stw	zero,4(sp)
 8002918:	d8000015 	stw	zero,0(sp)
 800291c:	000f883a 	mov	r7,zero
 8002920:	01810004 	movi	r6,1024
 8002924:	01420074 	movhi	r5,2049
 8002928:	297b5204 	addi	r5,r5,-4792
 800292c:	01020034 	movhi	r4,2048
 8002930:	210acf04 	addi	r4,r4,11068
 8002934:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8002938:	0001883a 	nop
 800293c:	e037883a 	mov	sp,fp
 8002940:	dfc00117 	ldw	ra,4(sp)
 8002944:	df000017 	ldw	fp,0(sp)
 8002948:	dec00204 	addi	sp,sp,8
 800294c:	f800283a 	ret

08002950 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
 8002950:	defffc04 	addi	sp,sp,-16
 8002954:	dfc00315 	stw	ra,12(sp)
 8002958:	df000215 	stw	fp,8(sp)
 800295c:	df000204 	addi	fp,sp,8
 8002960:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 8002964:	e0bfff17 	ldw	r2,-4(fp)
 8002968:	e0bffe15 	stw	r2,-8(fp)

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 800296c:	0009883a 	mov	r4,zero
 8002970:	8005f540 	call	8005f54 <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
 8002974:	e0bffe17 	ldw	r2,-8(fp)
 8002978:	10800017 	ldw	r2,0(r2)
 800297c:	10c00044 	addi	r3,r2,1
 8002980:	e0bffe17 	ldw	r2,-8(fp)
 8002984:	10c00015 	stw	r3,0(r2)

		if( *pulCounter >= priMAX_COUNT )
 8002988:	e0bffe17 	ldw	r2,-8(fp)
 800298c:	10800017 	ldw	r2,0(r2)
 8002990:	10803ff0 	cmpltui	r2,r2,255
 8002994:	103ff71e 	bne	r2,zero,8002974 <vLimitedIncrementTask+0x24>
		{
			vTaskSuspend( NULL );
 8002998:	0009883a 	mov	r4,zero
 800299c:	8005f540 	call	8005f54 <vTaskSuspend>
		}
	}
 80029a0:	003ff406 	br	8002974 <vLimitedIncrementTask+0x24>

080029a4 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
 80029a4:	defffb04 	addi	sp,sp,-20
 80029a8:	dfc00415 	stw	ra,16(sp)
 80029ac:	df000315 	stw	fp,12(sp)
 80029b0:	df000304 	addi	fp,sp,12
 80029b4:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 80029b8:	e0bfff17 	ldw	r2,-4(fp)
 80029bc:	e0bffd15 	stw	r2,-12(fp)

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 80029c0:	0009883a 	mov	r4,zero
 80029c4:	8005cf00 	call	8005cf0 <uxTaskPriorityGet>
 80029c8:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 80029cc:	e0bffe17 	ldw	r2,-8(fp)
 80029d0:	10800044 	addi	r2,r2,1
 80029d4:	100b883a 	mov	r5,r2
 80029d8:	0009883a 	mov	r4,zero
 80029dc:	8005d940 	call	8005d94 <vTaskPrioritySet>
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
			( *pulCounter )++;
 80029e0:	e0bffd17 	ldw	r2,-12(fp)
 80029e4:	10800017 	ldw	r2,0(r2)
 80029e8:	10c00044 	addi	r3,r2,1
 80029ec:	e0bffd17 	ldw	r2,-12(fp)
 80029f0:	10c00015 	stw	r3,0(r2)
		}
		vTaskPrioritySet( NULL, uxOurPriority );
 80029f4:	e17ffe17 	ldw	r5,-8(fp)
 80029f8:	0009883a 	mov	r4,zero
 80029fc:	8005d940 	call	8005d94 <vTaskPrioritySet>
		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
	}
 8002a00:	003ff206 	br	80029cc <vContinuousIncrementTask+0x28>

08002a04 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
 8002a04:	defffb04 	addi	sp,sp,-20
 8002a08:	dfc00415 	stw	ra,16(sp)
 8002a0c:	df000315 	stw	fp,12(sp)
 8002a10:	df000304 	addi	fp,sp,12
 8002a14:	e13fff15 	stw	r4,-4(fp)
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
 8002a18:	e03ffd8d 	sth	zero,-10(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
 8002a1c:	d0275615 	stw	zero,-25256(gp)

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8002a20:	e03ffd0d 	sth	zero,-12(fp)
 8002a24:	00001406 	br	8002a78 <vCounterControlTask+0x74>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
 8002a28:	d0a75417 	ldw	r2,-25264(gp)
 8002a2c:	1009883a 	mov	r4,r2
 8002a30:	8005f540 	call	8005f54 <vTaskSuspend>
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
 8002a34:	d0a75617 	ldw	r2,-25256(gp)
 8002a38:	e0bffe15 	stw	r2,-8(fp)
			}
			vTaskResume( xContinuousIncrementHandle );
 8002a3c:	d0a75417 	ldw	r2,-25264(gp)
 8002a40:	1009883a 	mov	r4,r2
 8002a44:	80060bc0 	call	80060bc <vTaskResume>
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 8002a48:	01002004 	movi	r4,128
 8002a4c:	8005c940 	call	8005c94 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 8002a50:	80063580 	call	8006358 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 8002a54:	d0a75617 	ldw	r2,-25256(gp)
 8002a58:	e0fffe17 	ldw	r3,-8(fp)
 8002a5c:	1880021e 	bne	r3,r2,8002a68 <vCounterControlTask+0x64>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 8002a60:	00800044 	movi	r2,1
 8002a64:	e0bffd8d 	sth	r2,-10(fp)
				}
			}
			xTaskResumeAll();
 8002a68:	80063840 	call	8006384 <xTaskResumeAll>
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8002a6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8002a70:	10800044 	addi	r2,r2,1
 8002a74:	e0bffd0d 	sth	r2,-12(fp)
 8002a78:	e0bffd0f 	ldh	r2,-12(fp)
 8002a7c:	10800150 	cmplti	r2,r2,5
 8002a80:	103fe91e 	bne	r2,zero,8002a28 <vCounterControlTask+0x24>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 8002a84:	d0a75417 	ldw	r2,-25264(gp)
 8002a88:	1009883a 	mov	r4,r2
 8002a8c:	8005f540 	call	8005f54 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
 8002a90:	d0275615 	stw	zero,-25256(gp)
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
 8002a94:	d0a75517 	ldw	r2,-25260(gp)
 8002a98:	1009883a 	mov	r4,r2
 8002a9c:	80060bc0 	call	80060bc <vTaskResume>
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 8002aa0:	d0a75617 	ldw	r2,-25256(gp)
 8002aa4:	10803fe0 	cmpeqi	r2,r2,255
 8002aa8:	1000021e 	bne	r2,zero,8002ab4 <vCounterControlTask+0xb0>
		{
			sError = pdTRUE;
 8002aac:	00800044 	movi	r2,1
 8002ab0:	e0bffd8d 	sth	r2,-10(fp)
		}

		if( sError == pdFALSE )
 8002ab4:	e0bffd8f 	ldh	r2,-10(fp)
 8002ab8:	1000051e 	bne	r2,zero,8002ad0 <vCounterControlTask+0xcc>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 8002abc:	800731c0 	call	800731c <vTaskEnterCritical>
				usCheckVariable++;
 8002ac0:	d0a7570b 	ldhu	r2,-25252(gp)
 8002ac4:	10800044 	addi	r2,r2,1
 8002ac8:	d0a7570d 	sth	r2,-25252(gp)
			portEXIT_CRITICAL();
 8002acc:	80073700 	call	8007370 <vTaskExitCritical>
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 8002ad0:	d0a75417 	ldw	r2,-25264(gp)
 8002ad4:	1009883a 	mov	r4,r2
 8002ad8:	80060bc0 	call	80060bc <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
 8002adc:	003fcf06 	br	8002a1c <vCounterControlTask+0x18>

08002ae0 <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
 8002ae0:	defffd04 	addi	sp,sp,-12
 8002ae4:	dfc00215 	stw	ra,8(sp)
 8002ae8:	df000115 	stw	fp,4(sp)
 8002aec:	df000104 	addi	fp,sp,4
 8002af0:	e13fff15 	stw	r4,-4(fp)
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
 8002af4:	80063580 	call	8006358 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 8002af8:	d0a75e17 	ldw	r2,-25224(gp)
 8002afc:	000f883a 	mov	r7,zero
 8002b00:	000d883a 	mov	r6,zero
 8002b04:	d1675b04 	addi	r5,gp,-25236
 8002b08:	1009883a 	mov	r4,r2
 8002b0c:	80046f40 	call	80046f4 <xQueueGenericSend>
 8002b10:	10800060 	cmpeqi	r2,r2,1
 8002b14:	1000021e 	bne	r2,zero,8002b20 <vQueueSendWhenSuspendedTask+0x40>
			{
				xSuspendedQueueSendError = pdTRUE;
 8002b18:	00800044 	movi	r2,1
 8002b1c:	d0a75815 	stw	r2,-25248(gp)
			}
		}
		xTaskResumeAll();
 8002b20:	80063840 	call	8006384 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 8002b24:	01002004 	movi	r4,128
 8002b28:	8005c940 	call	8005c94 <vTaskDelay>

		++ulValueToSend;
 8002b2c:	d0a75b17 	ldw	r2,-25236(gp)
 8002b30:	10800044 	addi	r2,r2,1
 8002b34:	d0a75b15 	stw	r2,-25236(gp)
	}
 8002b38:	003fee06 	br	8002af4 <vQueueSendWhenSuspendedTask+0x14>

08002b3c <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
 8002b3c:	defffb04 	addi	sp,sp,-20
 8002b40:	dfc00415 	stw	ra,16(sp)
 8002b44:	df000315 	stw	fp,12(sp)
 8002b48:	df000304 	addi	fp,sp,12
 8002b4c:	e13fff15 	stw	r4,-4(fp)
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 8002b50:	80063580 	call	8006358 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 8002b54:	80063580 	call	8006358 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 8002b58:	d0a75e17 	ldw	r2,-25224(gp)
 8002b5c:	e0fffe04 	addi	r3,fp,-8
 8002b60:	000d883a 	mov	r6,zero
 8002b64:	180b883a 	mov	r5,r3
 8002b68:	1009883a 	mov	r4,r2
 8002b6c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8002b70:	e0bffd15 	stw	r2,-12(fp)
				}
				if( xTaskResumeAll() != pdFALSE )
 8002b74:	80063840 	call	8006384 <xTaskResumeAll>
 8002b78:	10000226 	beq	r2,zero,8002b84 <vQueueReceiveWhenSuspendedTask+0x48>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 8002b7c:	00800044 	movi	r2,1
 8002b80:	d0a75915 	stw	r2,-25244(gp)
				}
			}
			xTaskResumeAll();
 8002b84:	80063840 	call	8006384 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
 8002b88:	e0bffd17 	ldw	r2,-12(fp)
 8002b8c:	103ff026 	beq	r2,zero,8002b50 <vQueueReceiveWhenSuspendedTask+0x14>

		if( ulReceivedValue != ulExpectedValue )
 8002b90:	e0fffe17 	ldw	r3,-8(fp)
 8002b94:	d0a75a17 	ldw	r2,-25240(gp)
 8002b98:	18800226 	beq	r3,r2,8002ba4 <vQueueReceiveWhenSuspendedTask+0x68>
		{
			xSuspendedQueueReceiveError = pdTRUE;
 8002b9c:	00800044 	movi	r2,1
 8002ba0:	d0a75915 	stw	r2,-25244(gp)
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
 8002ba4:	d0a75917 	ldw	r2,-25244(gp)
 8002ba8:	10800060 	cmpeqi	r2,r2,1
 8002bac:	103fe81e 	bne	r2,zero,8002b50 <vQueueReceiveWhenSuspendedTask+0x14>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
 8002bb0:	d0a75a17 	ldw	r2,-25240(gp)
 8002bb4:	10800044 	addi	r2,r2,1
 8002bb8:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
 8002bbc:	003fe406 	br	8002b50 <vQueueReceiveWhenSuspendedTask+0x14>

08002bc0 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
 8002bc0:	defffe04 	addi	sp,sp,-8
 8002bc4:	df000115 	stw	fp,4(sp)
 8002bc8:	df000104 	addi	fp,sp,4
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
 8002bcc:	00800044 	movi	r2,1
 8002bd0:	e0bfff15 	stw	r2,-4(fp)

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 8002bd4:	d0e7570b 	ldhu	r3,-25252(gp)
 8002bd8:	d0a75c0b 	ldhu	r2,-25232(gp)
 8002bdc:	18ffffcc 	andi	r3,r3,65535
 8002be0:	10bfffcc 	andi	r2,r2,65535
 8002be4:	1880011e 	bne	r3,r2,8002bec <xAreDynamicPriorityTasksStillRunning+0x2c>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 8002be8:	e03fff15 	stw	zero,-4(fp)
	}

	if( ulExpectedValue == ulLastExpectedValue )
 8002bec:	d0e75a17 	ldw	r3,-25240(gp)
 8002bf0:	d0a75d17 	ldw	r2,-25228(gp)
 8002bf4:	1880011e 	bne	r3,r2,8002bfc <xAreDynamicPriorityTasksStillRunning+0x3c>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
 8002bf8:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueSendError == pdTRUE )
 8002bfc:	d0a75817 	ldw	r2,-25248(gp)
 8002c00:	10800058 	cmpnei	r2,r2,1
 8002c04:	1000011e 	bne	r2,zero,8002c0c <xAreDynamicPriorityTasksStillRunning+0x4c>
	{
		xReturn = pdFALSE;
 8002c08:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 8002c0c:	d0a75917 	ldw	r2,-25244(gp)
 8002c10:	10800058 	cmpnei	r2,r2,1
 8002c14:	1000011e 	bne	r2,zero,8002c1c <xAreDynamicPriorityTasksStillRunning+0x5c>
	{
		xReturn = pdFALSE;
 8002c18:	e03fff15 	stw	zero,-4(fp)
	}

	usLastTaskCheck = usCheckVariable;
 8002c1c:	d0a7570b 	ldhu	r2,-25252(gp)
 8002c20:	d0a75c0d 	sth	r2,-25232(gp)
	ulLastExpectedValue = ulExpectedValue;
 8002c24:	d0a75a17 	ldw	r2,-25240(gp)
 8002c28:	d0a75d15 	stw	r2,-25228(gp)

	return xReturn;
 8002c2c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002c30:	e037883a 	mov	sp,fp
 8002c34:	df000017 	ldw	fp,0(sp)
 8002c38:	dec00104 	addi	sp,sp,4
 8002c3c:	f800283a 	ret

08002c40 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 8002c40:	defffa04 	addi	sp,sp,-24
 8002c44:	dfc00515 	stw	ra,20(sp)
 8002c48:	df000415 	stw	fp,16(sp)
 8002c4c:	df000404 	addi	fp,sp,16
 8002c50:	e13fff15 	stw	r4,-4(fp)
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 8002c54:	e03ffe15 	stw	zero,-8(fp)
 8002c58:	00000d06 	br	8002c90 <vStartLEDFlashTasks+0x50>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8002c5c:	d8000115 	stw	zero,4(sp)
 8002c60:	e0bfff17 	ldw	r2,-4(fp)
 8002c64:	d8800015 	stw	r2,0(sp)
 8002c68:	000f883a 	mov	r7,zero
 8002c6c:	01810004 	movi	r6,1024
 8002c70:	01420074 	movhi	r5,2049
 8002c74:	297b5404 	addi	r5,r5,-4784
 8002c78:	01020034 	movhi	r4,2048
 8002c7c:	210b2d04 	addi	r4,r4,11444
 8002c80:	80056e80 	call	80056e8 <xTaskCreate>
void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 8002c84:	e0bffe17 	ldw	r2,-8(fp)
 8002c88:	10800044 	addi	r2,r2,1
 8002c8c:	e0bffe15 	stw	r2,-8(fp)
 8002c90:	e0bffe17 	ldw	r2,-8(fp)
 8002c94:	108000d0 	cmplti	r2,r2,3
 8002c98:	103ff01e 	bne	r2,zero,8002c5c <vStartLEDFlashTasks+0x1c>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 8002c9c:	0001883a 	nop
 8002ca0:	e037883a 	mov	sp,fp
 8002ca4:	dfc00117 	ldw	ra,4(sp)
 8002ca8:	df000017 	ldw	fp,0(sp)
 8002cac:	dec00204 	addi	sp,sp,8
 8002cb0:	f800283a 	ret

08002cb4 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8002cb4:	defffa04 	addi	sp,sp,-24
 8002cb8:	dfc00515 	stw	ra,20(sp)
 8002cbc:	df000415 	stw	fp,16(sp)
 8002cc0:	df000404 	addi	fp,sp,16
 8002cc4:	e13fff15 	stw	r4,-4(fp)

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 8002cc8:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 8002ccc:	d0a75f17 	ldw	r2,-25220(gp)
 8002cd0:	e0bffc15 	stw	r2,-16(fp)

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8002cd4:	d0a75f17 	ldw	r2,-25220(gp)
 8002cd8:	10800044 	addi	r2,r2,1
 8002cdc:	d0a75f15 	stw	r2,-25220(gp)
	}
	portEXIT_CRITICAL();
 8002ce0:	80073700 	call	8007370 <vTaskExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
 8002ce4:	e0bffc17 	ldw	r2,-16(fp)
 8002ce8:	10800044 	addi	r2,r2,1
 8002cec:	01405344 	movi	r5,333
 8002cf0:	1009883a 	mov	r4,r2
 8002cf4:	80082e00 	call	80082e0 <__mulsi3>
 8002cf8:	e0bffd15 	stw	r2,-12(fp)
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 8002cfc:	e0bffd17 	ldw	r2,-12(fp)
 8002d00:	1004d07a 	srli	r2,r2,1
 8002d04:	e0bffd15 	stw	r2,-12(fp)

	/* We need to initialise xLastFlashTime prior to the first call to
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8002d08:	80064e80 	call	80064e8 <xTaskGetTickCount>
 8002d0c:	e0bffe15 	stw	r2,-8(fp)

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002d10:	e0bffe04 	addi	r2,fp,-8
 8002d14:	e17ffd17 	ldw	r5,-12(fp)
 8002d18:	1009883a 	mov	r4,r2
 8002d1c:	8005ba40 	call	8005ba4 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002d20:	e13ffc17 	ldw	r4,-16(fp)
 8002d24:	80037740 	call	8003774 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002d28:	e0bffe04 	addi	r2,fp,-8
 8002d2c:	e17ffd17 	ldw	r5,-12(fp)
 8002d30:	1009883a 	mov	r4,r2
 8002d34:	8005ba40 	call	8005ba4 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002d38:	e13ffc17 	ldw	r4,-16(fp)
 8002d3c:	80037740 	call	8003774 <vParTestToggleLED>
	}
 8002d40:	003ff306 	br	8002d10 <vLEDFlashTask+0x5c>

08002d44 <vStartIntegerMathTasks>:
static BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
 8002d44:	defffa04 	addi	sp,sp,-24
 8002d48:	dfc00515 	stw	ra,20(sp)
 8002d4c:	df000415 	stw	fp,16(sp)
 8002d50:	df000404 	addi	fp,sp,16
 8002d54:	e13fff15 	stw	r4,-4(fp)
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002d58:	e03ffe0d 	sth	zero,-8(fp)
 8002d5c:	00001206 	br	8002da8 <vStartIntegerMathTasks+0x64>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
 8002d60:	e0bffe0f 	ldh	r2,-8(fp)
 8002d64:	1085883a 	add	r2,r2,r2
 8002d68:	1087883a 	add	r3,r2,r2
 8002d6c:	d0a76004 	addi	r2,gp,-25216
 8002d70:	1887883a 	add	r3,r3,r2
 8002d74:	d8000115 	stw	zero,4(sp)
 8002d78:	e0bfff17 	ldw	r2,-4(fp)
 8002d7c:	d8800015 	stw	r2,0(sp)
 8002d80:	180f883a 	mov	r7,r3
 8002d84:	01810004 	movi	r6,1024
 8002d88:	01420074 	movhi	r5,2049
 8002d8c:	297b5604 	addi	r5,r5,-4776
 8002d90:	01020034 	movhi	r4,2048
 8002d94:	210b7204 	addi	r4,r4,11720
 8002d98:	80056e80 	call	80056e8 <xTaskCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002d9c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002da0:	10800044 	addi	r2,r2,1
 8002da4:	e0bffe0d 	sth	r2,-8(fp)
 8002da8:	e0bffe0f 	ldh	r2,-8(fp)
 8002dac:	00bfec0e 	bge	zero,r2,8002d60 <vStartIntegerMathTasks+0x1c>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 8002db0:	0001883a 	nop
 8002db4:	e037883a 	mov	sp,fp
 8002db8:	dfc00117 	ldw	ra,4(sp)
 8002dbc:	df000017 	ldw	fp,0(sp)
 8002dc0:	dec00204 	addi	sp,sp,8
 8002dc4:	f800283a 	ret

08002dc8 <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
 8002dc8:	defffa04 	addi	sp,sp,-24
 8002dcc:	dfc00515 	stw	ra,20(sp)
 8002dd0:	df000415 	stw	fp,16(sp)
 8002dd4:	df000404 	addi	fp,sp,16
 8002dd8:	e13fff15 	stw	r4,-4(fp)
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
 8002ddc:	e03ffc0d 	sth	zero,-16(fp)
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 8002de0:	e0bfff17 	ldw	r2,-4(fp)
 8002de4:	e0bffd15 	stw	r2,-12(fp)
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
 8002de8:	00801ec4 	movi	r2,123
 8002dec:	e0bffe15 	stw	r2,-8(fp)
		lValue += intgCONST2;
 8002df0:	e0fffe17 	ldw	r3,-8(fp)
 8002df4:	00800134 	movhi	r2,4
 8002df8:	10a511c4 	addi	r2,r2,-27577
 8002dfc:	1885883a 	add	r2,r3,r2
 8002e00:	e0bffe15 	stw	r2,-8(fp)
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
 8002e04:	e0bffe17 	ldw	r2,-8(fp)
 8002e08:	017fff44 	movi	r5,-3
 8002e0c:	1009883a 	mov	r4,r2
 8002e10:	80082e00 	call	80082e0 <__mulsi3>
 8002e14:	e0bffe15 	stw	r2,-8(fp)
		lValue /= intgCONST4;
 8002e18:	e0bffe17 	ldw	r2,-8(fp)
 8002e1c:	014001c4 	movi	r5,7
 8002e20:	1009883a 	mov	r4,r2
 8002e24:	800812c0 	call	800812c <__divsi3>
 8002e28:	e0bffe15 	stw	r2,-8(fp)

		/* If the calculation is found to be incorrect we stop setting the
		TaskHasExecuted variable so the check task can see an error has
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
 8002e2c:	e0fffe17 	ldw	r3,-8(fp)
 8002e30:	00bfffb4 	movhi	r2,65534
 8002e34:	109dc6c4 	addi	r2,r2,30491
 8002e38:	18800226 	beq	r3,r2,8002e44 <vCompeteingIntMathTask+0x7c>
		{
			sError = pdTRUE;
 8002e3c:	00800044 	movi	r2,1
 8002e40:	e0bffc0d 	sth	r2,-16(fp)
		}

		if( sError == pdFALSE )
 8002e44:	e0bffc0f 	ldh	r2,-16(fp)
 8002e48:	103fe71e 	bne	r2,zero,8002de8 <vCompeteingIntMathTask+0x20>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
 8002e4c:	800731c0 	call	800731c <vTaskEnterCritical>
				*pxTaskHasExecuted = pdTRUE;
 8002e50:	e0bffd17 	ldw	r2,-12(fp)
 8002e54:	00c00044 	movi	r3,1
 8002e58:	10c00015 	stw	r3,0(r2)
			portEXIT_CRITICAL();
 8002e5c:	80073700 	call	8007370 <vTaskExitCritical>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 8002e60:	003fe106 	br	8002de8 <vCompeteingIntMathTask+0x20>

08002e64 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
 8002e64:	defffd04 	addi	sp,sp,-12
 8002e68:	df000215 	stw	fp,8(sp)
 8002e6c:	df000204 	addi	fp,sp,8
BaseType_t xReturn = pdTRUE;
 8002e70:	00800044 	movi	r2,1
 8002e74:	e0bffe15 	stw	r2,-8(fp)
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002e78:	e03fff0d 	sth	zero,-4(fp)
 8002e7c:	00001106 	br	8002ec4 <xAreIntegerMathsTaskStillRunning+0x60>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
 8002e80:	e0bfff0f 	ldh	r2,-4(fp)
 8002e84:	1085883a 	add	r2,r2,r2
 8002e88:	1087883a 	add	r3,r2,r2
 8002e8c:	d0a76004 	addi	r2,gp,-25216
 8002e90:	1885883a 	add	r2,r3,r2
 8002e94:	10800017 	ldw	r2,0(r2)
 8002e98:	1000011e 	bne	r2,zero,8002ea0 <xAreIntegerMathsTaskStillRunning+0x3c>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 8002e9c:	e03ffe15 	stw	zero,-8(fp)
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
 8002ea0:	e0bfff0f 	ldh	r2,-4(fp)
 8002ea4:	1085883a 	add	r2,r2,r2
 8002ea8:	1087883a 	add	r3,r2,r2
 8002eac:	d0a76004 	addi	r2,gp,-25216
 8002eb0:	1885883a 	add	r2,r3,r2
 8002eb4:	10000015 	stw	zero,0(r2)
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8002eb8:	e0bfff0b 	ldhu	r2,-4(fp)
 8002ebc:	10800044 	addi	r2,r2,1
 8002ec0:	e0bfff0d 	sth	r2,-4(fp)
 8002ec4:	e0bfff0f 	ldh	r2,-4(fp)
 8002ec8:	00bfed0e 	bge	zero,r2,8002e80 <xAreIntegerMathsTaskStillRunning+0x1c>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
 8002ecc:	e0bffe17 	ldw	r2,-8(fp)
}
 8002ed0:	e037883a 	mov	sp,fp
 8002ed4:	df000017 	ldw	fp,0(sp)
 8002ed8:	dec00104 	addi	sp,sp,4
 8002edc:	f800283a 	ret

08002ee0 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 8002ee0:	defffc04 	addi	sp,sp,-16
 8002ee4:	dfc00315 	stw	ra,12(sp)
 8002ee8:	df000215 	stw	fp,8(sp)
 8002eec:	df000204 	addi	fp,sp,8
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 8002ef0:	01000104 	movi	r4,4
 8002ef4:	80045140 	call	8004514 <xQueueCreateMutex>
 8002ef8:	d0a76115 	stw	r2,-25212(gp)

	if( xMutex != NULL )
 8002efc:	d0a76117 	ldw	r2,-25212(gp)
 8002f00:	10001f26 	beq	r2,zero,8002f80 <vStartRecursiveMutexTasks+0xa0>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );

		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 8002f04:	d0a76804 	addi	r2,gp,-25184
 8002f08:	d8800115 	stw	r2,4(sp)
 8002f0c:	00800084 	movi	r2,2
 8002f10:	d8800015 	stw	r2,0(sp)
 8002f14:	000f883a 	mov	r7,zero
 8002f18:	01810004 	movi	r6,1024
 8002f1c:	01420074 	movhi	r5,2049
 8002f20:	297b5804 	addi	r5,r5,-4768
 8002f24:	01020034 	movhi	r4,2048
 8002f28:	210be604 	addi	r4,r4,12184
 8002f2c:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 8002f30:	d0a76904 	addi	r2,gp,-25180
 8002f34:	d8800115 	stw	r2,4(sp)
 8002f38:	00800044 	movi	r2,1
 8002f3c:	d8800015 	stw	r2,0(sp)
 8002f40:	000f883a 	mov	r7,zero
 8002f44:	01810004 	movi	r6,1024
 8002f48:	01420074 	movhi	r5,2049
 8002f4c:	297b5a04 	addi	r5,r5,-4760
 8002f50:	01020034 	movhi	r4,2048
 8002f54:	210c2504 	addi	r4,r4,12436
 8002f58:	80056e80 	call	80056e8 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 8002f5c:	d8000115 	stw	zero,4(sp)
 8002f60:	d8000015 	stw	zero,0(sp)
 8002f64:	000f883a 	mov	r7,zero
 8002f68:	01810004 	movi	r6,1024
 8002f6c:	01420074 	movhi	r5,2049
 8002f70:	297b5c04 	addi	r5,r5,-4752
 8002f74:	01020034 	movhi	r4,2048
 8002f78:	210c4f04 	addi	r4,r4,12604
 8002f7c:	80056e80 	call	80056e8 <xTaskCreate>
	}
}
 8002f80:	0001883a 	nop
 8002f84:	e037883a 	mov	sp,fp
 8002f88:	dfc00117 	ldw	ra,4(sp)
 8002f8c:	df000017 	ldw	fp,0(sp)
 8002f90:	dec00204 	addi	sp,sp,8
 8002f94:	f800283a 	ret

08002f98 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 8002f98:	defffc04 	addi	sp,sp,-16
 8002f9c:	dfc00315 	stw	ra,12(sp)
 8002fa0:	df000215 	stw	fp,8(sp)
 8002fa4:	df000204 	addi	fp,sp,8
 8002fa8:	e13fff15 	stw	r4,-4(fp)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8002fac:	d0a76117 	ldw	r2,-25212(gp)
 8002fb0:	1009883a 	mov	r4,r2
 8002fb4:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 8002fb8:	10800058 	cmpnei	r2,r2,1
 8002fbc:	1000021e 	bne	r2,zero,8002fc8 <prvRecursiveMutexControllingTask+0x30>
		{
			xErrorOccurred = pdTRUE;
 8002fc0:	00800044 	movi	r2,1
 8002fc4:	d0a76215 	stw	r2,-25208(gp)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8002fc8:	e03ffe15 	stw	zero,-8(fp)
 8002fcc:	00000d06 	br	8003004 <prvRecursiveMutexControllingTask+0x6c>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmu15ms_DELAY ) != pdPASS )
 8002fd0:	d0a76117 	ldw	r2,-25212(gp)
 8002fd4:	014003c4 	movi	r5,15
 8002fd8:	1009883a 	mov	r4,r2
 8002fdc:	80046000 	call	8004600 <xQueueTakeMutexRecursive>
 8002fe0:	10800060 	cmpeqi	r2,r2,1
 8002fe4:	1000021e 	bne	r2,zero,8002ff0 <prvRecursiveMutexControllingTask+0x58>
			{
				xErrorOccurred = pdTRUE;
 8002fe8:	00800044 	movi	r2,1
 8002fec:	d0a76215 	stw	r2,-25208(gp)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 8002ff0:	01000504 	movi	r4,20
 8002ff4:	8005c940 	call	8005c94 <vTaskDelay>
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8002ff8:	e0bffe17 	ldw	r2,-8(fp)
 8002ffc:	10800044 	addi	r2,r2,1
 8003000:	e0bffe15 	stw	r2,-8(fp)
 8003004:	e0bffe17 	ldw	r2,-8(fp)
 8003008:	108002b0 	cmpltui	r2,r2,10
 800300c:	103ff01e 	bne	r2,zero,8002fd0 <prvRecursiveMutexControllingTask+0x38>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8003010:	e03ffe15 	stw	zero,-8(fp)
 8003014:	00000c06 	br	8003048 <prvRecursiveMutexControllingTask+0xb0>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 8003018:	01000504 	movi	r4,20
 800301c:	8005c940 	call	8005c94 <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 8003020:	d0a76117 	ldw	r2,-25212(gp)
 8003024:	1009883a 	mov	r4,r2
 8003028:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 800302c:	10800060 	cmpeqi	r2,r2,1
 8003030:	1000021e 	bne	r2,zero,800303c <prvRecursiveMutexControllingTask+0xa4>
			{
				xErrorOccurred = pdTRUE;
 8003034:	00800044 	movi	r2,1
 8003038:	d0a76215 	stw	r2,-25208(gp)
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 800303c:	e0bffe17 	ldw	r2,-8(fp)
 8003040:	10800044 	addi	r2,r2,1
 8003044:	e0bffe15 	stw	r2,-8(fp)
 8003048:	e0bffe17 	ldw	r2,-8(fp)
 800304c:	108002b0 	cmpltui	r2,r2,10
 8003050:	103ff11e 	bne	r2,zero,8003018 <prvRecursiveMutexControllingTask+0x80>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8003054:	d0a76117 	ldw	r2,-25212(gp)
 8003058:	1009883a 	mov	r4,r2
 800305c:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 8003060:	10800058 	cmpnei	r2,r2,1
 8003064:	1000021e 	bne	r2,zero,8003070 <prvRecursiveMutexControllingTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 8003068:	00800044 	movi	r2,1
 800306c:	d0a76215 	stw	r2,-25208(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 8003070:	d0a76517 	ldw	r2,-25196(gp)
 8003074:	10800044 	addi	r2,r2,1
 8003078:	d0a76515 	stw	r2,-25196(gp)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 800307c:	00800044 	movi	r2,1
 8003080:	d0a76315 	stw	r2,-25204(gp)
		vTaskSuspend( NULL );
 8003084:	0009883a 	mov	r4,zero
 8003088:	8005f540 	call	8005f54 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 800308c:	d0276315 	stw	zero,-25204(gp)
	}
 8003090:	003fc606 	br	8002fac <prvRecursiveMutexControllingTask+0x14>

08003094 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 8003094:	defffd04 	addi	sp,sp,-12
 8003098:	dfc00215 	stw	ra,8(sp)
 800309c:	df000115 	stw	fp,4(sp)
 80030a0:	df000104 	addi	fp,sp,4
 80030a4:	e13fff15 	stw	r4,-4(fp)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 80030a8:	d0a76117 	ldw	r2,-25212(gp)
 80030ac:	017fff84 	movi	r5,-2
 80030b0:	1009883a 	mov	r4,r2
 80030b4:	80046000 	call	8004600 <xQueueTakeMutexRecursive>
 80030b8:	10800058 	cmpnei	r2,r2,1
 80030bc:	1000131e 	bne	r2,zero,800310c <prvRecursiveMutexBlockingTask+0x78>
		{
			if( xControllingIsSuspended != pdTRUE )
 80030c0:	d0a76317 	ldw	r2,-25204(gp)
 80030c4:	10800060 	cmpeqi	r2,r2,1
 80030c8:	1000031e 	bne	r2,zero,80030d8 <prvRecursiveMutexBlockingTask+0x44>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 80030cc:	00800044 	movi	r2,1
 80030d0:	d0a76215 	stw	r2,-25208(gp)
 80030d4:	00000f06 	br	8003114 <prvRecursiveMutexBlockingTask+0x80>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 80030d8:	d0a76117 	ldw	r2,-25212(gp)
 80030dc:	1009883a 	mov	r4,r2
 80030e0:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 80030e4:	10800060 	cmpeqi	r2,r2,1
 80030e8:	1000021e 	bne	r2,zero,80030f4 <prvRecursiveMutexBlockingTask+0x60>
				{
					xErrorOccurred = pdTRUE;
 80030ec:	00800044 	movi	r2,1
 80030f0:	d0a76215 	stw	r2,-25208(gp)
				}

				xBlockingIsSuspended = pdTRUE;
 80030f4:	00800044 	movi	r2,1
 80030f8:	d0a76415 	stw	r2,-25200(gp)
				vTaskSuspend( NULL );
 80030fc:	0009883a 	mov	r4,zero
 8003100:	8005f540 	call	8005f54 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 8003104:	d0276415 	stw	zero,-25200(gp)
 8003108:	00000206 	br	8003114 <prvRecursiveMutexBlockingTask+0x80>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 800310c:	00800044 	movi	r2,1
 8003110:	d0a76215 	stw	r2,-25208(gp)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 8003114:	d0a76617 	ldw	r2,-25192(gp)
 8003118:	10c00044 	addi	r3,r2,1
 800311c:	d0a76517 	ldw	r2,-25196(gp)
 8003120:	18800226 	beq	r3,r2,800312c <prvRecursiveMutexBlockingTask+0x98>
		{
			xErrorOccurred = pdTRUE;
 8003124:	00800044 	movi	r2,1
 8003128:	d0a76215 	stw	r2,-25208(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 800312c:	d0a76617 	ldw	r2,-25192(gp)
 8003130:	10800044 	addi	r2,r2,1
 8003134:	d0a76615 	stw	r2,-25192(gp)
	}
 8003138:	003fdb06 	br	80030a8 <prvRecursiveMutexBlockingTask+0x14>

0800313c <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 800313c:	defffd04 	addi	sp,sp,-12
 8003140:	dfc00215 	stw	ra,8(sp)
 8003144:	df000115 	stw	fp,4(sp)
 8003148:	df000104 	addi	fp,sp,4
 800314c:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  It should only be obtained when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 8003150:	d0a76117 	ldw	r2,-25212(gp)
 8003154:	000b883a 	mov	r5,zero
 8003158:	1009883a 	mov	r4,r2
 800315c:	80046000 	call	8004600 <xQueueTakeMutexRecursive>
 8003160:	10800058 	cmpnei	r2,r2,1
 8003164:	103ffa1e 	bne	r2,zero,8003150 <prvRecursiveMutexPollingTask+0x14>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 8003168:	d0a76417 	ldw	r2,-25200(gp)
 800316c:	10800058 	cmpnei	r2,r2,1
 8003170:	1000031e 	bne	r2,zero,8003180 <prvRecursiveMutexPollingTask+0x44>
 8003174:	d0a76317 	ldw	r2,-25204(gp)
 8003178:	10800060 	cmpeqi	r2,r2,1
 800317c:	1000031e 	bne	r2,zero,800318c <prvRecursiveMutexPollingTask+0x50>
			{
				xErrorOccurred = pdTRUE;
 8003180:	00800044 	movi	r2,1
 8003184:	d0a76215 	stw	r2,-25208(gp)
 8003188:	00001806 	br	80031ec <prvRecursiveMutexPollingTask+0xb0>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 800318c:	d0a76717 	ldw	r2,-25188(gp)
 8003190:	10800044 	addi	r2,r2,1
 8003194:	d0a76715 	stw	r2,-25188(gp)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 8003198:	d0a76917 	ldw	r2,-25180(gp)
 800319c:	1009883a 	mov	r4,r2
 80031a0:	80060bc0 	call	80060bc <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
 80031a4:	d0a76817 	ldw	r2,-25184(gp)
 80031a8:	1009883a 	mov	r4,r2
 80031ac:	80060bc0 	call	80060bc <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 80031b0:	d0a76417 	ldw	r2,-25200(gp)
 80031b4:	10800060 	cmpeqi	r2,r2,1
 80031b8:	1000031e 	bne	r2,zero,80031c8 <prvRecursiveMutexPollingTask+0x8c>
 80031bc:	d0a76317 	ldw	r2,-25204(gp)
 80031c0:	10800058 	cmpnei	r2,r2,1
 80031c4:	1000021e 	bne	r2,zero,80031d0 <prvRecursiveMutexPollingTask+0x94>
				{
					xErrorOccurred = pdTRUE;
 80031c8:	00800044 	movi	r2,1
 80031cc:	d0a76215 	stw	r2,-25208(gp)
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 80031d0:	d0a76117 	ldw	r2,-25212(gp)
 80031d4:	1009883a 	mov	r4,r2
 80031d8:	80045700 	call	8004570 <xQueueGiveMutexRecursive>
 80031dc:	10800060 	cmpeqi	r2,r2,1
 80031e0:	103fdb1e 	bne	r2,zero,8003150 <prvRecursiveMutexPollingTask+0x14>
				{
					xErrorOccurred = pdTRUE;
 80031e4:	00800044 	movi	r2,1
 80031e8:	d0a76215 	stw	r2,-25208(gp)
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 80031ec:	003fd806 	br	8003150 <prvRecursiveMutexPollingTask+0x14>

080031f0 <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 80031f0:	defffe04 	addi	sp,sp,-8
 80031f4:	df000115 	stw	fp,4(sp)
 80031f8:	df000104 	addi	fp,sp,4
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 80031fc:	d0e76a17 	ldw	r3,-25176(gp)
 8003200:	d0a76517 	ldw	r2,-25196(gp)
 8003204:	1880031e 	bne	r3,r2,8003214 <xAreRecursiveMutexTasksStillRunning+0x24>
	{
		xErrorOccurred = pdTRUE;
 8003208:	00800044 	movi	r2,1
 800320c:	d0a76215 	stw	r2,-25208(gp)
 8003210:	00000206 	br	800321c <xAreRecursiveMutexTasksStillRunning+0x2c>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 8003214:	d0a76517 	ldw	r2,-25196(gp)
 8003218:	d0a76a15 	stw	r2,-25176(gp)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 800321c:	d0e76b17 	ldw	r3,-25172(gp)
 8003220:	d0a76617 	ldw	r2,-25192(gp)
 8003224:	1880031e 	bne	r3,r2,8003234 <xAreRecursiveMutexTasksStillRunning+0x44>
	{
		xErrorOccurred = pdTRUE;
 8003228:	00800044 	movi	r2,1
 800322c:	d0a76215 	stw	r2,-25208(gp)
 8003230:	00000206 	br	800323c <xAreRecursiveMutexTasksStillRunning+0x4c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 8003234:	d0a76617 	ldw	r2,-25192(gp)
 8003238:	d0a76b15 	stw	r2,-25172(gp)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 800323c:	d0e76c17 	ldw	r3,-25168(gp)
 8003240:	d0a76717 	ldw	r2,-25188(gp)
 8003244:	1880031e 	bne	r3,r2,8003254 <xAreRecursiveMutexTasksStillRunning+0x64>
	{
		xErrorOccurred = pdTRUE;
 8003248:	00800044 	movi	r2,1
 800324c:	d0a76215 	stw	r2,-25208(gp)
 8003250:	00000206 	br	800325c <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 8003254:	d0a76717 	ldw	r2,-25188(gp)
 8003258:	d0a76c15 	stw	r2,-25168(gp)
	}

	if( xErrorOccurred == pdTRUE )
 800325c:	d0a76217 	ldw	r2,-25208(gp)
 8003260:	10800058 	cmpnei	r2,r2,1
 8003264:	1000021e 	bne	r2,zero,8003270 <xAreRecursiveMutexTasksStillRunning+0x80>
	{
		xReturn = pdFAIL;
 8003268:	e03fff15 	stw	zero,-4(fp)
 800326c:	00000206 	br	8003278 <xAreRecursiveMutexTasksStillRunning+0x88>
	}
	else
	{
		xReturn = pdPASS;
 8003270:	00800044 	movi	r2,1
 8003274:	e0bfff15 	stw	r2,-4(fp)
	}

	return xReturn;
 8003278:	e0bfff17 	ldw	r2,-4(fp)
}
 800327c:	e037883a 	mov	sp,fp
 8003280:	df000017 	ldw	fp,0(sp)
 8003284:	dec00104 	addi	sp,sp,4
 8003288:	f800283a 	ret

0800328c <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
 800328c:	defff804 	addi	sp,sp,-32
 8003290:	dfc00715 	stw	ra,28(sp)
 8003294:	df000615 	stw	fp,24(sp)
 8003298:	df000604 	addi	fp,sp,24
 800329c:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 80032a0:	00801904 	movi	r2,100
 80032a4:	e0bffc15 	stw	r2,-16(fp)

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 80032a8:	01000304 	movi	r4,12
 80032ac:	8003f080 	call	8003f08 <pvPortMalloc>
 80032b0:	e0bffd15 	stw	r2,-12(fp)

	if( pxFirstSemaphoreParameters != NULL )
 80032b4:	e0bffd17 	ldw	r2,-12(fp)
 80032b8:	10002e26 	beq	r2,zero,8003374 <vStartSemaphoreTasks+0xe8>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 80032bc:	018000c4 	movi	r6,3
 80032c0:	000b883a 	mov	r5,zero
 80032c4:	01000044 	movi	r4,1
 80032c8:	80043880 	call	8004388 <xQueueGenericCreate>
 80032cc:	1007883a 	mov	r3,r2
 80032d0:	e0bffd17 	ldw	r2,-12(fp)
 80032d4:	10c00015 	stw	r3,0(r2)

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 80032d8:	e0bffd17 	ldw	r2,-12(fp)
 80032dc:	10800017 	ldw	r2,0(r2)
 80032e0:	10002426 	beq	r2,zero,8003374 <vStartSemaphoreTasks+0xe8>
		{
			xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
 80032e4:	e0bffd17 	ldw	r2,-12(fp)
 80032e8:	10800017 	ldw	r2,0(r2)
 80032ec:	000f883a 	mov	r7,zero
 80032f0:	000d883a 	mov	r6,zero
 80032f4:	000b883a 	mov	r5,zero
 80032f8:	1009883a 	mov	r4,r2
 80032fc:	80046f40 	call	80046f4 <xQueueGenericSend>

			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 8003300:	01000104 	movi	r4,4
 8003304:	8003f080 	call	8003f08 <pvPortMalloc>
 8003308:	1007883a 	mov	r3,r2
 800330c:	e0bffd17 	ldw	r2,-12(fp)
 8003310:	10c00115 	stw	r3,4(r2)

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 8003314:	e0bffd17 	ldw	r2,-12(fp)
 8003318:	10800117 	ldw	r2,4(r2)
 800331c:	00c03fc4 	movi	r3,255
 8003320:	10c00015 	stw	r3,0(r2)

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 8003324:	e0bffd17 	ldw	r2,-12(fp)
 8003328:	10000215 	stw	zero,8(r2)

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 800332c:	d8000115 	stw	zero,4(sp)
 8003330:	d8000015 	stw	zero,0(sp)
 8003334:	e1fffd17 	ldw	r7,-12(fp)
 8003338:	01810004 	movi	r6,1024
 800333c:	01420074 	movhi	r5,2049
 8003340:	297b5e04 	addi	r5,r5,-4744
 8003344:	01020034 	movhi	r4,2048
 8003348:	210d1904 	addi	r4,r4,13412
 800334c:	80056e80 	call	80056e8 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8003350:	d8000115 	stw	zero,4(sp)
 8003354:	d8000015 	stw	zero,0(sp)
 8003358:	e1fffd17 	ldw	r7,-12(fp)
 800335c:	01810004 	movi	r6,1024
 8003360:	01420074 	movhi	r5,2049
 8003364:	297b6004 	addi	r5,r5,-4736
 8003368:	01020034 	movhi	r4,2048
 800336c:	210d1904 	addi	r4,r4,13412
 8003370:	80056e80 	call	80056e8 <xTaskCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 8003374:	01000304 	movi	r4,12
 8003378:	8003f080 	call	8003f08 <pvPortMalloc>
 800337c:	e0bffe15 	stw	r2,-8(fp)
	if( pxSecondSemaphoreParameters != NULL )
 8003380:	e0bffe17 	ldw	r2,-8(fp)
 8003384:	10003126 	beq	r2,zero,800344c <vStartSemaphoreTasks+0x1c0>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 8003388:	018000c4 	movi	r6,3
 800338c:	000b883a 	mov	r5,zero
 8003390:	01000044 	movi	r4,1
 8003394:	80043880 	call	8004388 <xQueueGenericCreate>
 8003398:	1007883a 	mov	r3,r2
 800339c:	e0bffe17 	ldw	r2,-8(fp)
 80033a0:	10c00015 	stw	r3,0(r2)

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 80033a4:	e0bffe17 	ldw	r2,-8(fp)
 80033a8:	10800017 	ldw	r2,0(r2)
 80033ac:	10002726 	beq	r2,zero,800344c <vStartSemaphoreTasks+0x1c0>
		{
			xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
 80033b0:	e0bffe17 	ldw	r2,-8(fp)
 80033b4:	10800017 	ldw	r2,0(r2)
 80033b8:	000f883a 	mov	r7,zero
 80033bc:	000d883a 	mov	r6,zero
 80033c0:	000b883a 	mov	r5,zero
 80033c4:	1009883a 	mov	r4,r2
 80033c8:	80046f40 	call	80046f4 <xQueueGenericSend>

			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 80033cc:	01000104 	movi	r4,4
 80033d0:	8003f080 	call	8003f08 <pvPortMalloc>
 80033d4:	1007883a 	mov	r3,r2
 80033d8:	e0bffe17 	ldw	r2,-8(fp)
 80033dc:	10c00115 	stw	r3,4(r2)
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 80033e0:	e0bffe17 	ldw	r2,-8(fp)
 80033e4:	10800117 	ldw	r2,4(r2)
 80033e8:	00c3ffc4 	movi	r3,4095
 80033ec:	10c00015 	stw	r3,0(r2)
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 80033f0:	e0bffe17 	ldw	r2,-8(fp)
 80033f4:	e0fffc17 	ldw	r3,-16(fp)
 80033f8:	10c00215 	stw	r3,8(r2)

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 80033fc:	d8000115 	stw	zero,4(sp)
 8003400:	e0bfff17 	ldw	r2,-4(fp)
 8003404:	d8800015 	stw	r2,0(sp)
 8003408:	e1fffe17 	ldw	r7,-8(fp)
 800340c:	01810004 	movi	r6,1024
 8003410:	01420074 	movhi	r5,2049
 8003414:	297b6204 	addi	r5,r5,-4728
 8003418:	01020034 	movhi	r4,2048
 800341c:	210d1904 	addi	r4,r4,13412
 8003420:	80056e80 	call	80056e8 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8003424:	d8000115 	stw	zero,4(sp)
 8003428:	e0bfff17 	ldw	r2,-4(fp)
 800342c:	d8800015 	stw	r2,0(sp)
 8003430:	e1fffe17 	ldw	r7,-8(fp)
 8003434:	01810004 	movi	r6,1024
 8003438:	01420074 	movhi	r5,2049
 800343c:	297b6404 	addi	r5,r5,-4720
 8003440:	01020034 	movhi	r4,2048
 8003444:	210d1904 	addi	r4,r4,13412
 8003448:	80056e80 	call	80056e8 <xTaskCreate>
			be removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
			defined or is defined to be less than 1. */
			vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
		}
	}
}
 800344c:	0001883a 	nop
 8003450:	e037883a 	mov	sp,fp
 8003454:	dfc00117 	ldw	ra,4(sp)
 8003458:	df000017 	ldw	fp,0(sp)
 800345c:	dec00204 	addi	sp,sp,8
 8003460:	f800283a 	ret

08003464 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
 8003464:	defff804 	addi	sp,sp,-32
 8003468:	dfc00715 	stw	ra,28(sp)
 800346c:	df000615 	stw	fp,24(sp)
 8003470:	df000604 	addi	fp,sp,24
 8003474:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 8003478:	e03ffb0d 	sth	zero,-20(fp)

	/* See which check variable to use.  sNextCheckVariable is not semaphore
	protected! */
	portENTER_CRITICAL();
 800347c:	800731c0 	call	800731c <vTaskEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 8003480:	d0a76f0b 	ldhu	r2,-25156(gp)
 8003484:	e0bffb8d 	sth	r2,-18(fp)
		sNextCheckVariable++;
 8003488:	d0a76f0b 	ldhu	r2,-25156(gp)
 800348c:	10800044 	addi	r2,r2,1
 8003490:	d0a76f0d 	sth	r2,-25156(gp)
	portEXIT_CRITICAL();
 8003494:	80073700 	call	8007370 <vTaskExitCritical>

	/* A structure is passed in as the parameter.  This contains the shared
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 8003498:	e0bfff17 	ldw	r2,-4(fp)
 800349c:	e0bffc15 	stw	r2,-16(fp)
	pulSharedVariable = pxParameters->pulSharedVariable;
 80034a0:	e0bffc17 	ldw	r2,-16(fp)
 80034a4:	10800117 	ldw	r2,4(r2)
 80034a8:	e0bffd15 	stw	r2,-12(fp)

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 80034ac:	e0bffc17 	ldw	r2,-16(fp)
 80034b0:	10800217 	ldw	r2,8(r2)
 80034b4:	10000326 	beq	r2,zero,80034c4 <prvSemaphoreTest+0x60>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 80034b8:	0083ffc4 	movi	r2,4095
 80034bc:	e0bffe15 	stw	r2,-8(fp)
 80034c0:	00000206 	br	80034cc <prvSemaphoreTest+0x68>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 80034c4:	00803fc4 	movi	r2,255
 80034c8:	e0bffe15 	stw	r2,-8(fp)
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 80034cc:	e0bffc17 	ldw	r2,-16(fp)
 80034d0:	10c00017 	ldw	r3,0(r2)
 80034d4:	e0bffc17 	ldw	r2,-16(fp)
 80034d8:	10800217 	ldw	r2,8(r2)
 80034dc:	100b883a 	mov	r5,r2
 80034e0:	1809883a 	mov	r4,r3
 80034e4:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 80034e8:	10800058 	cmpnei	r2,r2,1
 80034ec:	1000391e 	bne	r2,zero,80035d4 <prvSemaphoreTest+0x170>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 80034f0:	e0bffd17 	ldw	r2,-12(fp)
 80034f4:	10c00017 	ldw	r3,0(r2)
 80034f8:	e0bffe17 	ldw	r2,-8(fp)
 80034fc:	18800226 	beq	r3,r2,8003508 <prvSemaphoreTest+0xa4>
			{
				sError = pdTRUE;
 8003500:	00800044 	movi	r2,1
 8003504:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8003508:	e03ffa15 	stw	zero,-24(fp)
 800350c:	00000c06 	br	8003540 <prvSemaphoreTest+0xdc>
			{
				*pulSharedVariable = ulCounter;
 8003510:	e0bffd17 	ldw	r2,-12(fp)
 8003514:	e0fffa17 	ldw	r3,-24(fp)
 8003518:	10c00015 	stw	r3,0(r2)
				if( *pulSharedVariable != ulCounter )
 800351c:	e0bffd17 	ldw	r2,-12(fp)
 8003520:	10c00017 	ldw	r3,0(r2)
 8003524:	e0bffa17 	ldw	r2,-24(fp)
 8003528:	18800226 	beq	r3,r2,8003534 <prvSemaphoreTest+0xd0>
				{
					sError = pdTRUE;
 800352c:	00800044 	movi	r2,1
 8003530:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8003534:	e0bffa17 	ldw	r2,-24(fp)
 8003538:	10800044 	addi	r2,r2,1
 800353c:	e0bffa15 	stw	r2,-24(fp)
 8003540:	e0fffe17 	ldw	r3,-8(fp)
 8003544:	e0bffa17 	ldw	r2,-24(fp)
 8003548:	18bff12e 	bgeu	r3,r2,8003510 <prvSemaphoreTest+0xac>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 800354c:	e0bffc17 	ldw	r2,-16(fp)
 8003550:	10800017 	ldw	r2,0(r2)
 8003554:	000f883a 	mov	r7,zero
 8003558:	000d883a 	mov	r6,zero
 800355c:	000b883a 	mov	r5,zero
 8003560:	1009883a 	mov	r4,r2
 8003564:	80046f40 	call	80046f4 <xQueueGenericSend>
 8003568:	1000021e 	bne	r2,zero,8003574 <prvSemaphoreTest+0x110>
			{
				sError = pdTRUE;
 800356c:	00800044 	movi	r2,1
 8003570:	e0bffb0d 	sth	r2,-20(fp)
			}

			if( sError == pdFALSE )
 8003574:	e0bffb0f 	ldh	r2,-20(fp)
 8003578:	10000e1e 	bne	r2,zero,80035b4 <prvSemaphoreTest+0x150>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 800357c:	e0bffb8f 	ldh	r2,-18(fp)
 8003580:	10800108 	cmpgei	r2,r2,4
 8003584:	10000b1e 	bne	r2,zero,80035b4 <prvSemaphoreTest+0x150>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 8003588:	e0bffb8f 	ldh	r2,-18(fp)
 800358c:	1089883a 	add	r4,r2,r2
 8003590:	d0e76d04 	addi	r3,gp,-25164
 8003594:	20c7883a 	add	r3,r4,r3
 8003598:	18c0000b 	ldhu	r3,0(r3)
 800359c:	18c00044 	addi	r3,r3,1
 80035a0:	1809883a 	mov	r4,r3
 80035a4:	1087883a 	add	r3,r2,r2
 80035a8:	d0a76d04 	addi	r2,gp,-25164
 80035ac:	1885883a 	add	r2,r3,r2
 80035b0:	1100000d 	sth	r4,0(r2)
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 80035b4:	e0bffc17 	ldw	r2,-16(fp)
 80035b8:	10800217 	ldw	r2,8(r2)
 80035bc:	01400284 	movi	r5,10
 80035c0:	1009883a 	mov	r4,r2
 80035c4:	80082e00 	call	80082e0 <__mulsi3>
 80035c8:	1009883a 	mov	r4,r2
 80035cc:	8005c940 	call	8005c94 <vTaskDelay>
 80035d0:	003fbe06 	br	80034cc <prvSemaphoreTest+0x68>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 80035d4:	e0bffc17 	ldw	r2,-16(fp)
 80035d8:	10800217 	ldw	r2,8(r2)
 80035dc:	103fbb1e 	bne	r2,zero,80034cc <prvSemaphoreTest+0x68>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 80035e0:	003b683a 	trap	0
			}
		}
	}
 80035e4:	003fb906 	br	80034cc <prvSemaphoreTest+0x68>

080035e8 <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
 80035e8:	defffd04 	addi	sp,sp,-12
 80035ec:	df000215 	stw	fp,8(sp)
 80035f0:	df000204 	addi	fp,sp,8
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
 80035f4:	00800044 	movi	r2,1
 80035f8:	e0bfff15 	stw	r2,-4(fp)

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 80035fc:	e03ffe15 	stw	zero,-8(fp)
 8003600:	00001f06 	br	8003680 <xAreSemaphoreTasksStillRunning+0x98>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 8003604:	e0bffe17 	ldw	r2,-8(fp)
 8003608:	1087883a 	add	r3,r2,r2
 800360c:	d0a76f84 	addi	r2,gp,-25154
 8003610:	1885883a 	add	r2,r3,r2
 8003614:	1100000b 	ldhu	r4,0(r2)
 8003618:	e0bffe17 	ldw	r2,-8(fp)
 800361c:	1087883a 	add	r3,r2,r2
 8003620:	d0a76d04 	addi	r2,gp,-25164
 8003624:	1885883a 	add	r2,r3,r2
 8003628:	1080000b 	ldhu	r2,0(r2)
 800362c:	20ffffcc 	andi	r3,r4,65535
 8003630:	18e0001c 	xori	r3,r3,32768
 8003634:	18e00004 	addi	r3,r3,-32768
 8003638:	10bfffcc 	andi	r2,r2,65535
 800363c:	10a0001c 	xori	r2,r2,32768
 8003640:	10a00004 	addi	r2,r2,-32768
 8003644:	1880011e 	bne	r3,r2,800364c <xAreSemaphoreTasksStillRunning+0x64>
		{
			xReturn = pdFALSE;
 8003648:	e03fff15 	stw	zero,-4(fp)
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 800364c:	e0bffe17 	ldw	r2,-8(fp)
 8003650:	1087883a 	add	r3,r2,r2
 8003654:	d0a76d04 	addi	r2,gp,-25164
 8003658:	1885883a 	add	r2,r3,r2
 800365c:	10c0000b 	ldhu	r3,0(r2)
 8003660:	e0bffe17 	ldw	r2,-8(fp)
 8003664:	1089883a 	add	r4,r2,r2
 8003668:	d0a76f84 	addi	r2,gp,-25154
 800366c:	2085883a 	add	r2,r4,r2
 8003670:	10c0000d 	sth	r3,0(r2)
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 8003674:	e0bffe17 	ldw	r2,-8(fp)
 8003678:	10800044 	addi	r2,r2,1
 800367c:	e0bffe15 	stw	r2,-8(fp)
 8003680:	e0bffe17 	ldw	r2,-8(fp)
 8003684:	10800110 	cmplti	r2,r2,4
 8003688:	103fde1e 	bne	r2,zero,8003604 <xAreSemaphoreTasksStillRunning+0x1c>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
 800368c:	e0bfff17 	ldw	r2,-4(fp)
}
 8003690:	e037883a 	mov	sp,fp
 8003694:	df000017 	ldw	fp,0(sp)
 8003698:	dec00104 	addi	sp,sp,4
 800369c:	f800283a 	ret

080036a0 <vParTestInitialise>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestInitialise(void) {
 80036a0:	deffff04 	addi	sp,sp,-4
 80036a4:	df000015 	stw	fp,0(sp)
 80036a8:	d839883a 	mov	fp,sp
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(LED_PIO_BASE, 0xFFFFFFFF);
 80036ac:	00ffffc4 	movi	r3,-1
 80036b0:	00840034 	movhi	r2,4096
 80036b4:	10914104 	addi	r2,r2,17668
 80036b8:	10c00035 	stwio	r3,0(r2)
	ulLedStates = 0;
 80036bc:	d0277215 	stw	zero,-25144(gp)
}
 80036c0:	0001883a 	nop
 80036c4:	e037883a 	mov	sp,fp
 80036c8:	df000017 	ldw	fp,0(sp)
 80036cc:	dec00104 	addi	sp,sp,4
 80036d0:	f800283a 	ret

080036d4 <vParTestSetLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestSetLED(unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue) {
 80036d4:	defffc04 	addi	sp,sp,-16
 80036d8:	dfc00315 	stw	ra,12(sp)
 80036dc:	df000215 	stw	fp,8(sp)
 80036e0:	df000204 	addi	fp,sp,8
 80036e4:	e13ffe15 	stw	r4,-8(fp)
 80036e8:	e17fff15 	stw	r5,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 80036ec:	e0bffe17 	ldw	r2,-8(fp)
 80036f0:	10800228 	cmpgeui	r2,r2,8
 80036f4:	1000191e 	bne	r2,zero,800375c <vParTestSetLED+0x88>
		taskENTER_CRITICAL();
 80036f8:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			if (xValue > 0) {
 80036fc:	e0bfff17 	ldw	r2,-4(fp)
 8003700:	0080080e 	bge	zero,r2,8003724 <vParTestSetLED+0x50>
				ulLedStates |= 1 << uxLED;
 8003704:	00c00044 	movi	r3,1
 8003708:	e0bffe17 	ldw	r2,-8(fp)
 800370c:	1884983a 	sll	r2,r3,r2
 8003710:	1007883a 	mov	r3,r2
 8003714:	d0a77217 	ldw	r2,-25144(gp)
 8003718:	1884b03a 	or	r2,r3,r2
 800371c:	d0a77215 	stw	r2,-25144(gp)
 8003720:	00000806 	br	8003744 <vParTestSetLED+0x70>
			} else {
				ulLedStates &= ~(1 << uxLED);
 8003724:	00c00044 	movi	r3,1
 8003728:	e0bffe17 	ldw	r2,-8(fp)
 800372c:	1884983a 	sll	r2,r3,r2
 8003730:	0084303a 	nor	r2,zero,r2
 8003734:	1007883a 	mov	r3,r2
 8003738:	d0a77217 	ldw	r2,-25144(gp)
 800373c:	1884703a 	and	r2,r3,r2
 8003740:	d0a77215 	stw	r2,-25144(gp)
			}
			IOWR_ALT_UP_PARALLEL_PORT_DATA(LED_PIO_BASE, ulLedStates);
 8003744:	d0a77217 	ldw	r2,-25144(gp)
 8003748:	1007883a 	mov	r3,r2
 800374c:	00840034 	movhi	r2,4096
 8003750:	10914004 	addi	r2,r2,17664
 8003754:	10c00035 	stwio	r3,0(r2)
		}
		taskEXIT_CRITICAL();
 8003758:	80073700 	call	8007370 <vTaskExitCritical>
	}
}
 800375c:	0001883a 	nop
 8003760:	e037883a 	mov	sp,fp
 8003764:	dfc00117 	ldw	ra,4(sp)
 8003768:	df000017 	ldw	fp,0(sp)
 800376c:	dec00204 	addi	sp,sp,8
 8003770:	f800283a 	ret

08003774 <vParTestToggleLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestToggleLED(unsigned portBASE_TYPE uxLED) {
 8003774:	defffd04 	addi	sp,sp,-12
 8003778:	dfc00215 	stw	ra,8(sp)
 800377c:	df000115 	stw	fp,4(sp)
 8003780:	df000104 	addi	fp,sp,4
 8003784:	e13fff15 	stw	r4,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 8003788:	e0bfff17 	ldw	r2,-4(fp)
 800378c:	10800228 	cmpgeui	r2,r2,8
 8003790:	10000d1e 	bne	r2,zero,80037c8 <vParTestToggleLED+0x54>
		taskENTER_CRITICAL();
 8003794:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			vParTestSetLED(uxLED, !(ulLedStates & (1 << uxLED)));
 8003798:	00c00044 	movi	r3,1
 800379c:	e0bfff17 	ldw	r2,-4(fp)
 80037a0:	1884983a 	sll	r2,r3,r2
 80037a4:	1007883a 	mov	r3,r2
 80037a8:	d0a77217 	ldw	r2,-25144(gp)
 80037ac:	1884703a 	and	r2,r3,r2
 80037b0:	1005003a 	cmpeq	r2,r2,zero
 80037b4:	10803fcc 	andi	r2,r2,255
 80037b8:	100b883a 	mov	r5,r2
 80037bc:	e13fff17 	ldw	r4,-4(fp)
 80037c0:	80036d40 	call	80036d4 <vParTestSetLED>
		}
		taskEXIT_CRITICAL();
 80037c4:	80073700 	call	8007370 <vTaskExitCritical>
	}
}
 80037c8:	0001883a 	nop
 80037cc:	e037883a 	mov	sp,fp
 80037d0:	dfc00117 	ldw	ra,4(sp)
 80037d4:	df000017 	ldw	fp,0(sp)
 80037d8:	dec00204 	addi	sp,sp,8
 80037dc:	f800283a 	ret

080037e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037e0:	defffe04 	addi	sp,sp,-8
 80037e4:	df000115 	stw	fp,4(sp)
 80037e8:	df000104 	addi	fp,sp,4
 80037ec:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f0:	e0bfff17 	ldw	r2,-4(fp)
 80037f4:	10c00204 	addi	r3,r2,8
 80037f8:	e0bfff17 	ldw	r2,-4(fp)
 80037fc:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003800:	e0bfff17 	ldw	r2,-4(fp)
 8003804:	00ffffc4 	movi	r3,-1
 8003808:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380c:	e0bfff17 	ldw	r2,-4(fp)
 8003810:	10c00204 	addi	r3,r2,8
 8003814:	e0bfff17 	ldw	r2,-4(fp)
 8003818:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381c:	e0bfff17 	ldw	r2,-4(fp)
 8003820:	10c00204 	addi	r3,r2,8
 8003824:	e0bfff17 	ldw	r2,-4(fp)
 8003828:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800382c:	e0bfff17 	ldw	r2,-4(fp)
 8003830:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003834:	0001883a 	nop
 8003838:	e037883a 	mov	sp,fp
 800383c:	df000017 	ldw	fp,0(sp)
 8003840:	dec00104 	addi	sp,sp,4
 8003844:	f800283a 	ret

08003848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003848:	defffe04 	addi	sp,sp,-8
 800384c:	df000115 	stw	fp,4(sp)
 8003850:	df000104 	addi	fp,sp,4
 8003854:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003858:	e0bfff17 	ldw	r2,-4(fp)
 800385c:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003860:	0001883a 	nop
 8003864:	e037883a 	mov	sp,fp
 8003868:	df000017 	ldw	fp,0(sp)
 800386c:	dec00104 	addi	sp,sp,4
 8003870:	f800283a 	ret

08003874 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003874:	defffc04 	addi	sp,sp,-16
 8003878:	df000315 	stw	fp,12(sp)
 800387c:	df000304 	addi	fp,sp,12
 8003880:	e13ffe15 	stw	r4,-8(fp)
 8003884:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 8003888:	e0bffe17 	ldw	r2,-8(fp)
 800388c:	10800117 	ldw	r2,4(r2)
 8003890:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003894:	e0bfff17 	ldw	r2,-4(fp)
 8003898:	e0fffd17 	ldw	r3,-12(fp)
 800389c:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038a0:	e0bffd17 	ldw	r2,-12(fp)
 80038a4:	10c00217 	ldw	r3,8(r2)
 80038a8:	e0bfff17 	ldw	r2,-4(fp)
 80038ac:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038b0:	e0bffd17 	ldw	r2,-12(fp)
 80038b4:	10800217 	ldw	r2,8(r2)
 80038b8:	e0ffff17 	ldw	r3,-4(fp)
 80038bc:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 80038c0:	e0bffd17 	ldw	r2,-12(fp)
 80038c4:	e0ffff17 	ldw	r3,-4(fp)
 80038c8:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038cc:	e0bfff17 	ldw	r2,-4(fp)
 80038d0:	e0fffe17 	ldw	r3,-8(fp)
 80038d4:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 80038d8:	e0bffe17 	ldw	r2,-8(fp)
 80038dc:	10800017 	ldw	r2,0(r2)
 80038e0:	10c00044 	addi	r3,r2,1
 80038e4:	e0bffe17 	ldw	r2,-8(fp)
 80038e8:	10c00015 	stw	r3,0(r2)
}
 80038ec:	0001883a 	nop
 80038f0:	e037883a 	mov	sp,fp
 80038f4:	df000017 	ldw	fp,0(sp)
 80038f8:	dec00104 	addi	sp,sp,4
 80038fc:	f800283a 	ret

08003900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003900:	defffb04 	addi	sp,sp,-20
 8003904:	df000415 	stw	fp,16(sp)
 8003908:	df000404 	addi	fp,sp,16
 800390c:	e13ffe15 	stw	r4,-8(fp)
 8003910:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003914:	e0bfff17 	ldw	r2,-4(fp)
 8003918:	10800017 	ldw	r2,0(r2)
 800391c:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003920:	e0bffd17 	ldw	r2,-12(fp)
 8003924:	10bfffd8 	cmpnei	r2,r2,-1
 8003928:	1000041e 	bne	r2,zero,800393c <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800392c:	e0bffe17 	ldw	r2,-8(fp)
 8003930:	10800417 	ldw	r2,16(r2)
 8003934:	e0bffc15 	stw	r2,-16(fp)
 8003938:	00000c06 	br	800396c <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800393c:	e0bffe17 	ldw	r2,-8(fp)
 8003940:	10800204 	addi	r2,r2,8
 8003944:	e0bffc15 	stw	r2,-16(fp)
 8003948:	00000306 	br	8003958 <vListInsert+0x58>
 800394c:	e0bffc17 	ldw	r2,-16(fp)
 8003950:	10800117 	ldw	r2,4(r2)
 8003954:	e0bffc15 	stw	r2,-16(fp)
 8003958:	e0bffc17 	ldw	r2,-16(fp)
 800395c:	10800117 	ldw	r2,4(r2)
 8003960:	10800017 	ldw	r2,0(r2)
 8003964:	e0fffd17 	ldw	r3,-12(fp)
 8003968:	18bff82e 	bgeu	r3,r2,800394c <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800396c:	e0bffc17 	ldw	r2,-16(fp)
 8003970:	10c00117 	ldw	r3,4(r2)
 8003974:	e0bfff17 	ldw	r2,-4(fp)
 8003978:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800397c:	e0bfff17 	ldw	r2,-4(fp)
 8003980:	10800117 	ldw	r2,4(r2)
 8003984:	e0ffff17 	ldw	r3,-4(fp)
 8003988:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 800398c:	e0bfff17 	ldw	r2,-4(fp)
 8003990:	e0fffc17 	ldw	r3,-16(fp)
 8003994:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 8003998:	e0bffc17 	ldw	r2,-16(fp)
 800399c:	e0ffff17 	ldw	r3,-4(fp)
 80039a0:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039a4:	e0bfff17 	ldw	r2,-4(fp)
 80039a8:	e0fffe17 	ldw	r3,-8(fp)
 80039ac:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 80039b0:	e0bffe17 	ldw	r2,-8(fp)
 80039b4:	10800017 	ldw	r2,0(r2)
 80039b8:	10c00044 	addi	r3,r2,1
 80039bc:	e0bffe17 	ldw	r2,-8(fp)
 80039c0:	10c00015 	stw	r3,0(r2)
}
 80039c4:	0001883a 	nop
 80039c8:	e037883a 	mov	sp,fp
 80039cc:	df000017 	ldw	fp,0(sp)
 80039d0:	dec00104 	addi	sp,sp,4
 80039d4:	f800283a 	ret

080039d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039d8:	defffd04 	addi	sp,sp,-12
 80039dc:	df000215 	stw	fp,8(sp)
 80039e0:	df000204 	addi	fp,sp,8
 80039e4:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039e8:	e0bfff17 	ldw	r2,-4(fp)
 80039ec:	10800417 	ldw	r2,16(r2)
 80039f0:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039f4:	e0bfff17 	ldw	r2,-4(fp)
 80039f8:	10800117 	ldw	r2,4(r2)
 80039fc:	e0ffff17 	ldw	r3,-4(fp)
 8003a00:	18c00217 	ldw	r3,8(r3)
 8003a04:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a08:	e0bfff17 	ldw	r2,-4(fp)
 8003a0c:	10800217 	ldw	r2,8(r2)
 8003a10:	e0ffff17 	ldw	r3,-4(fp)
 8003a14:	18c00117 	ldw	r3,4(r3)
 8003a18:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a1c:	e0bffe17 	ldw	r2,-8(fp)
 8003a20:	10c00117 	ldw	r3,4(r2)
 8003a24:	e0bfff17 	ldw	r2,-4(fp)
 8003a28:	1880041e 	bne	r3,r2,8003a3c <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a2c:	e0bfff17 	ldw	r2,-4(fp)
 8003a30:	10c00217 	ldw	r3,8(r2)
 8003a34:	e0bffe17 	ldw	r2,-8(fp)
 8003a38:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a3c:	e0bfff17 	ldw	r2,-4(fp)
 8003a40:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 8003a44:	e0bffe17 	ldw	r2,-8(fp)
 8003a48:	10800017 	ldw	r2,0(r2)
 8003a4c:	10ffffc4 	addi	r3,r2,-1
 8003a50:	e0bffe17 	ldw	r2,-8(fp)
 8003a54:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 8003a58:	e0bffe17 	ldw	r2,-8(fp)
 8003a5c:	10800017 	ldw	r2,0(r2)
}
 8003a60:	e037883a 	mov	sp,fp
 8003a64:	df000017 	ldw	fp,0(sp)
 8003a68:	dec00104 	addi	sp,sp,4
 8003a6c:	f800283a 	ret

08003a70 <prvReadGp>:
#else
void vPortSysTickHandler( void * context, alt_u32 id );
#endif
/*-----------------------------------------------------------*/

void prvReadGp(unsigned long *ulValue) {
 8003a70:	defffe04 	addi	sp,sp,-8
 8003a74:	df000115 	stw	fp,4(sp)
 8003a78:	df000104 	addi	fp,sp,4
 8003a7c:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (r4) " );
 8003a80:	26800015 	stw	gp,0(r4)
}
 8003a84:	0001883a 	nop
 8003a88:	e037883a 	mov	sp,fp
 8003a8c:	df000017 	ldw	fp,0(sp)
 8003a90:	dec00104 	addi	sp,sp,4
 8003a94:	f800283a 	ret

08003a98 <pxPortInitialiseStack>:
 **     @param
 **
 */
/* ===================================================================*/
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
pdTASK_CODE pxCode, void *pvParameters) {
 8003a98:	defff904 	addi	sp,sp,-28
 8003a9c:	dfc00615 	stw	ra,24(sp)
 8003aa0:	df000515 	stw	fp,20(sp)
 8003aa4:	df000504 	addi	fp,sp,20
 8003aa8:	e13ffd15 	stw	r4,-12(fp)
 8003aac:	e17ffe15 	stw	r5,-8(fp)
 8003ab0:	e1bfff15 	stw	r6,-4(fp)
	portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
 8003ab4:	e0bffd17 	ldw	r2,-12(fp)
 8003ab8:	10bfff04 	addi	r2,r2,-4
 8003abc:	e0bffb15 	stw	r2,-20(fp)
	portSTACK_TYPE xGlobalPointer;

	prvReadGp(&xGlobalPointer);
 8003ac0:	e0bffc04 	addi	r2,fp,-16
 8003ac4:	1009883a 	mov	r4,r2
 8003ac8:	8003a700 	call	8003a70 <prvReadGp>

	/* End of stack marker. */
	*pxTopOfStack = 0xdeadbeef;
 8003acc:	e0fffd17 	ldw	r3,-12(fp)
 8003ad0:	00b7abb4 	movhi	r2,57006
 8003ad4:	10afbbc4 	addi	r2,r2,-16657
 8003ad8:	18800015 	stw	r2,0(r3)
	pxTopOfStack--;
 8003adc:	e0bffd17 	ldw	r2,-12(fp)
 8003ae0:	10bfff04 	addi	r2,r2,-4
 8003ae4:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
 8003ae8:	e0fffb17 	ldw	r3,-20(fp)
 8003aec:	e0bffd17 	ldw	r2,-12(fp)
 8003af0:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 8003af4:	e0bffd17 	ldw	r2,-12(fp)
 8003af8:	10bfff04 	addi	r2,r2,-4
 8003afc:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = xGlobalPointer;
 8003b00:	e0fffc17 	ldw	r3,-16(fp)
 8003b04:	e0bffd17 	ldw	r2,-12(fp)
 8003b08:	10c00015 	stw	r3,0(r2)

	/* Space for R23 to R16. */
	pxTopOfStack -= 9;
 8003b0c:	e0bffd17 	ldw	r2,-12(fp)
 8003b10:	10bff704 	addi	r2,r2,-36
 8003b14:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;
 8003b18:	e0fffe17 	ldw	r3,-8(fp)
 8003b1c:	e0bffd17 	ldw	r2,-12(fp)
 8003b20:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 8003b24:	e0bffd17 	ldw	r2,-12(fp)
 8003b28:	10bfff04 	addi	r2,r2,-4
 8003b2c:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = portINITIAL_ESTATUS;
 8003b30:	e0bffd17 	ldw	r2,-12(fp)
 8003b34:	00c00044 	movi	r3,1
 8003b38:	10c00015 	stw	r3,0(r2)

	/* Space for R15 to R5. */
	pxTopOfStack -= 12;
 8003b3c:	e0bffd17 	ldw	r2,-12(fp)
 8003b40:	10bff404 	addi	r2,r2,-48
 8003b44:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
 8003b48:	e0ffff17 	ldw	r3,-4(fp)
 8003b4c:	e0bffd17 	ldw	r2,-12(fp)
 8003b50:	10c00015 	stw	r3,0(r2)

	/* Space for R3 to R1, muldiv and RA. */
	pxTopOfStack -= 5;
 8003b54:	e0bffd17 	ldw	r2,-12(fp)
 8003b58:	10bffb04 	addi	r2,r2,-20
 8003b5c:	e0bffd15 	stw	r2,-12(fp)

	return pxTopOfStack;
 8003b60:	e0bffd17 	ldw	r2,-12(fp)
}
 8003b64:	e037883a 	mov	sp,fp
 8003b68:	dfc00117 	ldw	ra,4(sp)
 8003b6c:	df000017 	ldw	fp,0(sp)
 8003b70:	dec00204 	addi	sp,sp,8
 8003b74:	f800283a 	ret

08003b78 <xPortStartScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
portBASE_TYPE xPortStartScheduler(void) {
 8003b78:	defffe04 	addi	sp,sp,-8
 8003b7c:	dfc00115 	stw	ra,4(sp)
 8003b80:	df000015 	stw	fp,0(sp)
 8003b84:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	prvSetupTimerInterrupt();
 8003b88:	8003bd00 	call	8003bd0 <prvSetupTimerInterrupt>
 8003b8c:	00820034 	movhi	r2,2048

	/* Start the first task. */
	asm volatile ( " movia r2, restore_sp_from_pxCurrentTCB        \n"
 8003b90:	10803104 	addi	r2,r2,196
 8003b94:	1000683a 	jmp	r2
			" jmp r2                                          " );

	/* Should not get here! */
	return 0;
 8003b98:	0005883a 	mov	r2,zero
}
 8003b9c:	e037883a 	mov	sp,fp
 8003ba0:	dfc00117 	ldw	ra,4(sp)
 8003ba4:	df000017 	ldw	fp,0(sp)
 8003ba8:	dec00204 	addi	sp,sp,8
 8003bac:	f800283a 	ret

08003bb0 <vPortEndScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vPortEndScheduler(void) {
 8003bb0:	deffff04 	addi	sp,sp,-4
 8003bb4:	df000015 	stw	fp,0(sp)
 8003bb8:	d839883a 	mov	fp,sp

}
 8003bbc:	0001883a 	nop
 8003bc0:	e037883a 	mov	sp,fp
 8003bc4:	df000017 	ldw	fp,0(sp)
 8003bc8:	dec00104 	addi	sp,sp,4
 8003bcc:	f800283a 	ret

08003bd0 <prvSetupTimerInterrupt>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
 8003bd0:	defffd04 	addi	sp,sp,-12
 8003bd4:	dfc00215 	stw	ra,8(sp)
 8003bd8:	df000115 	stw	fp,4(sp)
 8003bdc:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
			== alt_ic_isr_register(SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID,
 8003be0:	d8000015 	stw	zero,0(sp)
 8003be4:	000f883a 	mov	r7,zero
 8003be8:	01820034 	movhi	r6,2048
 8003bec:	318f1d04 	addi	r6,r6,15476
 8003bf0:	01400044 	movi	r5,1
 8003bf4:	0009883a 	mov	r4,zero
 8003bf8:	800b16c0 	call	800b16c <alt_ic_isr_register>
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
 8003bfc:	10bffa98 	cmpnei	r2,r2,-22
 8003c00:	1000021e 	bne	r2,zero,8003c0c <prvSetupTimerInterrupt+0x3c>
#else
					if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
#endif
					{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 8003c04:	003da03a 	break	0
 8003c08:	00001006 	br	8003c4c <prvSetupTimerInterrupt+0x7c>
	} else {
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 8003c0c:	00c00204 	movi	r3,8
 8003c10:	00840034 	movhi	r2,4096
 8003c14:	10912904 	addi	r2,r2,17572
 8003c18:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
		IOWR_ALTERA_AVALON_TIMER_PERIODL(SYS_CLK_BASE,
 8003c1c:	00e1a814 	movui	r3,34464
 8003c20:	00840034 	movhi	r2,4096
 8003c24:	10912a04 	addi	r2,r2,17576
 8003c28:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(SYS_CLK_BASE,
 8003c2c:	00c00044 	movi	r3,1
 8003c30:	00840034 	movhi	r2,4096
 8003c34:	10912b04 	addi	r2,r2,17580
 8003c38:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 8003c3c:	00c001c4 	movi	r3,7
 8003c40:	00840034 	movhi	r2,4096
 8003c44:	10912904 	addi	r2,r2,17572
 8003c48:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 8003c4c:	00ffff84 	movi	r3,-2
 8003c50:	00840034 	movhi	r2,4096
 8003c54:	10912804 	addi	r2,r2,17568
 8003c58:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 8003c5c:	0001883a 	nop
 8003c60:	e037883a 	mov	sp,fp
 8003c64:	dfc00117 	ldw	ra,4(sp)
 8003c68:	df000017 	ldw	fp,0(sp)
 8003c6c:	dec00204 	addi	sp,sp,8
 8003c70:	f800283a 	ret

08003c74 <vPortSysTickHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void vPortSysTickHandler(void * context)
#else
void vPortSysTickHandler( void * context, alt_u32 id )
#endif
{
 8003c74:	defffd04 	addi	sp,sp,-12
 8003c78:	dfc00215 	stw	ra,8(sp)
 8003c7c:	df000115 	stw	fp,4(sp)
 8003c80:	df000104 	addi	fp,sp,4
 8003c84:	e13fff15 	stw	r4,-4(fp)
	/* Increment the Kernel Tick. */
	//vTaskIncrementTick();
	(void) xTaskIncrementTick();
 8003c88:	800659c0 	call	800659c <xTaskIncrementTick>

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
 8003c8c:	80067680 	call	8006768 <vTaskSwitchContext>
#endif

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 8003c90:	00ffff84 	movi	r3,-2
 8003c94:	00840034 	movhi	r2,4096
 8003c98:	10912804 	addi	r2,r2,17568
 8003c9c:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 8003ca0:	0001883a 	nop
 8003ca4:	e037883a 	mov	sp,fp
 8003ca8:	dfc00117 	ldw	ra,4(sp)
 8003cac:	df000017 	ldw	fp,0(sp)
 8003cb0:	dec00204 	addi	sp,sp,8
 8003cb4:	f800283a 	ret

08003cb8 <alt_irq_register>:
#ifndef ALT_ENHANCED_INTERRUPT_API_PRESENT
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
#else
int alt_irq_register(alt_u32 id, void* context, alt_isr_func handler)
#endif
{
 8003cb8:	defff104 	addi	sp,sp,-60
 8003cbc:	df000e15 	stw	fp,56(sp)
 8003cc0:	df000e04 	addi	fp,sp,56
 8003cc4:	e13ffd15 	stw	r4,-12(fp)
 8003cc8:	e17ffe15 	stw	r5,-8(fp)
 8003ccc:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;
 8003cd0:	00bffa84 	movi	r2,-22
 8003cd4:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 8003cd8:	e0bffd17 	ldw	r2,-12(fp)
 8003cdc:	10800828 	cmpgeui	r2,r2,32
 8003ce0:	10004c1e 	bne	r2,zero,8003e14 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003ce4:	0005303a 	rdctl	r2,status
 8003ce8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003cec:	e0fff617 	ldw	r3,-40(fp)
 8003cf0:	00bfff84 	movi	r2,-2
 8003cf4:	1884703a 	and	r2,r3,r2
 8003cf8:	1001703a 	wrctl	status,r2
  
  return context;
 8003cfc:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */

		status = alt_irq_disable_all();
 8003d00:	e0bff415 	stw	r2,-48(fp)

		alt_irq[id].handler = handler;
 8003d04:	00822074 	movhi	r2,2177
 8003d08:	108a7604 	addi	r2,r2,10712
 8003d0c:	e0fffd17 	ldw	r3,-12(fp)
 8003d10:	180690fa 	slli	r3,r3,3
 8003d14:	10c5883a 	add	r2,r2,r3
 8003d18:	e0ffff17 	ldw	r3,-4(fp)
 8003d1c:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 8003d20:	00822074 	movhi	r2,2177
 8003d24:	108a7604 	addi	r2,r2,10712
 8003d28:	e0fffd17 	ldw	r3,-12(fp)
 8003d2c:	180690fa 	slli	r3,r3,3
 8003d30:	10c5883a 	add	r2,r2,r3
 8003d34:	10800104 	addi	r2,r2,4
 8003d38:	e0fffe17 	ldw	r3,-8(fp)
 8003d3c:	10c00015 	stw	r3,0(r2)

		rc = (handler) ? alt_irq_enable(id) : alt_irq_disable(id);
 8003d40:	e0bfff17 	ldw	r2,-4(fp)
 8003d44:	10001926 	beq	r2,zero,8003dac <alt_irq_register+0xf4>
 8003d48:	e0bffd17 	ldw	r2,-12(fp)
 8003d4c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003d50:	0005303a 	rdctl	r2,status
 8003d54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003d58:	e0fff717 	ldw	r3,-36(fp)
 8003d5c:	00bfff84 	movi	r2,-2
 8003d60:	1884703a 	and	r2,r3,r2
 8003d64:	1001703a 	wrctl	status,r2
  
  return context;
 8003d68:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8003d6c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 8003d70:	00c00044 	movi	r3,1
 8003d74:	e0bff317 	ldw	r2,-52(fp)
 8003d78:	1884983a 	sll	r2,r3,r2
 8003d7c:	1007883a 	mov	r3,r2
 8003d80:	d0a78e17 	ldw	r2,-25032(gp)
 8003d84:	1884b03a 	or	r2,r3,r2
 8003d88:	d0a78e15 	stw	r2,-25032(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8003d8c:	d0a78e17 	ldw	r2,-25032(gp)
 8003d90:	100170fa 	wrctl	ienable,r2
 8003d94:	e0bff817 	ldw	r2,-32(fp)
 8003d98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003d9c:	e0bff917 	ldw	r2,-28(fp)
 8003da0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8003da4:	0005883a 	mov	r2,zero
 8003da8:	00001906 	br	8003e10 <alt_irq_register+0x158>
 8003dac:	e0bffd17 	ldw	r2,-12(fp)
 8003db0:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003db4:	0005303a 	rdctl	r2,status
 8003db8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003dbc:	e0fffa17 	ldw	r3,-24(fp)
 8003dc0:	00bfff84 	movi	r2,-2
 8003dc4:	1884703a 	and	r2,r3,r2
 8003dc8:	1001703a 	wrctl	status,r2
  
  return context;
 8003dcc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8003dd0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8003dd4:	00c00044 	movi	r3,1
 8003dd8:	e0bff517 	ldw	r2,-44(fp)
 8003ddc:	1884983a 	sll	r2,r3,r2
 8003de0:	0084303a 	nor	r2,zero,r2
 8003de4:	1007883a 	mov	r3,r2
 8003de8:	d0a78e17 	ldw	r2,-25032(gp)
 8003dec:	1884703a 	and	r2,r3,r2
 8003df0:	d0a78e15 	stw	r2,-25032(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8003df4:	d0a78e17 	ldw	r2,-25032(gp)
 8003df8:	100170fa 	wrctl	ienable,r2
 8003dfc:	e0bffb17 	ldw	r2,-20(fp)
 8003e00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003e04:	e0bffc17 	ldw	r2,-16(fp)
 8003e08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8003e0c:	0005883a 	mov	r2,zero
 8003e10:	e0bff215 	stw	r2,-56(fp)

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
 8003e14:	e0bff217 	ldw	r2,-56(fp)
}
 8003e18:	e037883a 	mov	sp,fp
 8003e1c:	df000017 	ldw	fp,0(sp)
 8003e20:	dec00104 	addi	sp,sp,4
 8003e24:	f800283a 	ret

08003e28 <alt_iic_isr_register>:
 * @param isr_context      Opaque pointer passed to ISR
 * @param flags
 * @return                 0 if successful, else error (-1)
 */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
		void *isr_context, void *flags) {
 8003e28:	defff604 	addi	sp,sp,-40
 8003e2c:	dfc00915 	stw	ra,36(sp)
 8003e30:	df000815 	stw	fp,32(sp)
 8003e34:	df000804 	addi	fp,sp,32
 8003e38:	e13ffc15 	stw	r4,-16(fp)
 8003e3c:	e17ffd15 	stw	r5,-12(fp)
 8003e40:	e1bffe15 	stw	r6,-8(fp)
 8003e44:	e1ffff15 	stw	r7,-4(fp)
	int rc = -EINVAL;
 8003e48:	00bffa84 	movi	r2,-22
 8003e4c:	e0bff815 	stw	r2,-32(fp)
	int id = irq; /* IRQ interpreted as the interrupt ID. */
 8003e50:	e0bffd17 	ldw	r2,-12(fp)
 8003e54:	e0bff915 	stw	r2,-28(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 8003e58:	e0bff917 	ldw	r2,-28(fp)
 8003e5c:	10800808 	cmpgei	r2,r2,32
 8003e60:	1000231e 	bne	r2,zero,8003ef0 <alt_iic_isr_register+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003e64:	0005303a 	rdctl	r2,status
 8003e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003e6c:	e0fffb17 	ldw	r3,-20(fp)
 8003e70:	00bfff84 	movi	r2,-2
 8003e74:	1884703a 	and	r2,r3,r2
 8003e78:	1001703a 	wrctl	status,r2
  
  return context;
 8003e7c:	e0bffb17 	ldw	r2,-20(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistant
		 * state.
		 */

		status = alt_irq_disable_all();
 8003e80:	e0bffa15 	stw	r2,-24(fp)

		alt_irq[id].handler = isr;
 8003e84:	00822074 	movhi	r2,2177
 8003e88:	108a7604 	addi	r2,r2,10712
 8003e8c:	e0fff917 	ldw	r3,-28(fp)
 8003e90:	180690fa 	slli	r3,r3,3
 8003e94:	10c5883a 	add	r2,r2,r3
 8003e98:	e0fffe17 	ldw	r3,-8(fp)
 8003e9c:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = isr_context;
 8003ea0:	00822074 	movhi	r2,2177
 8003ea4:	108a7604 	addi	r2,r2,10712
 8003ea8:	e0fff917 	ldw	r3,-28(fp)
 8003eac:	180690fa 	slli	r3,r3,3
 8003eb0:	10c5883a 	add	r2,r2,r3
 8003eb4:	10800104 	addi	r2,r2,4
 8003eb8:	e0ffff17 	ldw	r3,-4(fp)
 8003ebc:	10c00015 	stw	r3,0(r2)

		rc = (isr) ?
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8003ec0:	e0bffe17 	ldw	r2,-8(fp)
 8003ec4:	10000526 	beq	r2,zero,8003edc <alt_iic_isr_register+0xb4>
 8003ec8:	e0bff917 	ldw	r2,-28(fp)
 8003ecc:	100b883a 	mov	r5,r2
 8003ed0:	e13ffc17 	ldw	r4,-16(fp)
 8003ed4:	800b1bc0 	call	800b1bc <alt_ic_irq_enable>
 8003ed8:	00000406 	br	8003eec <alt_iic_isr_register+0xc4>
 8003edc:	e0bff917 	ldw	r2,-28(fp)
 8003ee0:	100b883a 	mov	r5,r2
 8003ee4:	e13ffc17 	ldw	r4,-16(fp)
 8003ee8:	800b2440 	call	800b244 <alt_ic_irq_disable>
		status = alt_irq_disable_all();

		alt_irq[id].handler = isr;
		alt_irq[id].context = isr_context;

		rc = (isr) ?
 8003eec:	e0bff815 	stw	r2,-32(fp)
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);

		//  alt_irq_enable_all(status);
	}

	return rc;
 8003ef0:	e0bff817 	ldw	r2,-32(fp)
}
 8003ef4:	e037883a 	mov	sp,fp
 8003ef8:	dfc00117 	ldw	ra,4(sp)
 8003efc:	df000017 	ldw	fp,0(sp)
 8003f00:	dec00204 	addi	sp,sp,8
 8003f04:	f800283a 	ret

08003f08 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f08:	defff704 	addi	sp,sp,-36
 8003f0c:	dfc00815 	stw	ra,32(sp)
 8003f10:	df000715 	stw	fp,28(sp)
 8003f14:	df000704 	addi	fp,sp,28
 8003f18:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003f1c:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 8003f20:	80063580 	call	8006358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003f24:	d0a77717 	ldw	r2,-25124(gp)
 8003f28:	1000031e 	bne	r2,zero,8003f38 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 8003f2c:	80041e80 	call	80041e8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003f30:	00800044 	movi	r2,1
 8003f34:	d0a77715 	stw	r2,-25124(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8003f38:	e0bfff17 	ldw	r2,-4(fp)
 8003f3c:	10000d26 	beq	r2,zero,8003f74 <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8003f40:	00800204 	movi	r2,8
 8003f44:	10bfffcc 	andi	r2,r2,65535
 8003f48:	e0ffff17 	ldw	r3,-4(fp)
 8003f4c:	1885883a 	add	r2,r3,r2
 8003f50:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f54:	e0bfff17 	ldw	r2,-4(fp)
 8003f58:	108000cc 	andi	r2,r2,3
 8003f5c:	10000526 	beq	r2,zero,8003f74 <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f60:	e0ffff17 	ldw	r3,-4(fp)
 8003f64:	00bfff04 	movi	r2,-4
 8003f68:	1884703a 	and	r2,r3,r2
 8003f6c:	10800104 	addi	r2,r2,4
 8003f70:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8003f74:	e0bfff17 	ldw	r2,-4(fp)
 8003f78:	10005126 	beq	r2,zero,80040c0 <pvPortMalloc+0x1b8>
 8003f7c:	e0ffff17 	ldw	r3,-4(fp)
 8003f80:	00802034 	movhi	r2,128
 8003f84:	10bffec4 	addi	r2,r2,-5
 8003f88:	10c04d36 	bltu	r2,r3,80040c0 <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8003f8c:	d0a77304 	addi	r2,gp,-25140
 8003f90:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 8003f94:	d0a77317 	ldw	r2,-25140(gp)
 8003f98:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f9c:	00000506 	br	8003fb4 <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 8003fa0:	e0bff917 	ldw	r2,-28(fp)
 8003fa4:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 8003fa8:	e0bff917 	ldw	r2,-28(fp)
 8003fac:	10800017 	ldw	r2,0(r2)
 8003fb0:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb4:	e0bff917 	ldw	r2,-28(fp)
 8003fb8:	10c00117 	ldw	r3,4(r2)
 8003fbc:	e0bfff17 	ldw	r2,-4(fp)
 8003fc0:	1880032e 	bgeu	r3,r2,8003fd0 <pvPortMalloc+0xc8>
 8003fc4:	e0bff917 	ldw	r2,-28(fp)
 8003fc8:	10800017 	ldw	r2,0(r2)
 8003fcc:	103ff41e 	bne	r2,zero,8003fa0 <pvPortMalloc+0x98>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8003fd0:	e0fff917 	ldw	r3,-28(fp)
 8003fd4:	d0a77504 	addi	r2,gp,-25132
 8003fd8:	18803926 	beq	r3,r2,80040c0 <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003fdc:	e0bffa17 	ldw	r2,-24(fp)
 8003fe0:	10c00017 	ldw	r3,0(r2)
 8003fe4:	00800204 	movi	r2,8
 8003fe8:	10bfffcc 	andi	r2,r2,65535
 8003fec:	1885883a 	add	r2,r3,r2
 8003ff0:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ff4:	e0bff917 	ldw	r2,-28(fp)
 8003ff8:	10c00017 	ldw	r3,0(r2)
 8003ffc:	e0bffa17 	ldw	r2,-24(fp)
 8004000:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004004:	e0bff917 	ldw	r2,-28(fp)
 8004008:	10c00117 	ldw	r3,4(r2)
 800400c:	e0bfff17 	ldw	r2,-4(fp)
 8004010:	1887c83a 	sub	r3,r3,r2
 8004014:	00800204 	movi	r2,8
 8004018:	10bfffcc 	andi	r2,r2,65535
 800401c:	1085883a 	add	r2,r2,r2
 8004020:	10c0222e 	bgeu	r2,r3,80040ac <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004024:	e0fff917 	ldw	r3,-28(fp)
 8004028:	e0bfff17 	ldw	r2,-4(fp)
 800402c:	1885883a 	add	r2,r3,r2
 8004030:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004034:	e0bff917 	ldw	r2,-28(fp)
 8004038:	10c00117 	ldw	r3,4(r2)
 800403c:	e0bfff17 	ldw	r2,-4(fp)
 8004040:	1887c83a 	sub	r3,r3,r2
 8004044:	e0bffd17 	ldw	r2,-12(fp)
 8004048:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 800404c:	e0bff917 	ldw	r2,-28(fp)
 8004050:	e0ffff17 	ldw	r3,-4(fp)
 8004054:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8004058:	e0bffd17 	ldw	r2,-12(fp)
 800405c:	10800117 	ldw	r2,4(r2)
 8004060:	e0bffe15 	stw	r2,-8(fp)
 8004064:	d0a77304 	addi	r2,gp,-25140
 8004068:	e0bffc15 	stw	r2,-16(fp)
 800406c:	00000306 	br	800407c <pvPortMalloc+0x174>
 8004070:	e0bffc17 	ldw	r2,-16(fp)
 8004074:	10800017 	ldw	r2,0(r2)
 8004078:	e0bffc15 	stw	r2,-16(fp)
 800407c:	e0bffc17 	ldw	r2,-16(fp)
 8004080:	10800017 	ldw	r2,0(r2)
 8004084:	10c00117 	ldw	r3,4(r2)
 8004088:	e0bffe17 	ldw	r2,-8(fp)
 800408c:	18bff836 	bltu	r3,r2,8004070 <pvPortMalloc+0x168>
 8004090:	e0bffc17 	ldw	r2,-16(fp)
 8004094:	10c00017 	ldw	r3,0(r2)
 8004098:	e0bffd17 	ldw	r2,-12(fp)
 800409c:	10c00015 	stw	r3,0(r2)
 80040a0:	e0bffc17 	ldw	r2,-16(fp)
 80040a4:	e0fffd17 	ldw	r3,-12(fp)
 80040a8:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040ac:	d0e00317 	ldw	r3,-32756(gp)
 80040b0:	e0bff917 	ldw	r2,-28(fp)
 80040b4:	10800117 	ldw	r2,4(r2)
 80040b8:	1885c83a 	sub	r2,r3,r2
 80040bc:	d0a00315 	stw	r2,-32756(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040c0:	80063840 	call	8006384 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80040c4:	e0bffb17 	ldw	r2,-20(fp)
}
 80040c8:	e037883a 	mov	sp,fp
 80040cc:	dfc00117 	ldw	ra,4(sp)
 80040d0:	df000017 	ldw	fp,0(sp)
 80040d4:	dec00204 	addi	sp,sp,8
 80040d8:	f800283a 	ret

080040dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040dc:	defff904 	addi	sp,sp,-28
 80040e0:	dfc00615 	stw	ra,24(sp)
 80040e4:	df000515 	stw	fp,20(sp)
 80040e8:	df000504 	addi	fp,sp,20
 80040ec:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 80040f0:	e0bfff17 	ldw	r2,-4(fp)
 80040f4:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 80040f8:	e0bfff17 	ldw	r2,-4(fp)
 80040fc:	10002426 	beq	r2,zero,8004190 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8004100:	00800204 	movi	r2,8
 8004104:	10bfffcc 	andi	r2,r2,65535
 8004108:	0085c83a 	sub	r2,zero,r2
 800410c:	e0fffc17 	ldw	r3,-16(fp)
 8004110:	1885883a 	add	r2,r3,r2
 8004114:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8004118:	e0bffc17 	ldw	r2,-16(fp)
 800411c:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 8004120:	80063580 	call	8006358 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004124:	e0bffd17 	ldw	r2,-12(fp)
 8004128:	10800117 	ldw	r2,4(r2)
 800412c:	e0bffe15 	stw	r2,-8(fp)
 8004130:	d0a77304 	addi	r2,gp,-25140
 8004134:	e0bffb15 	stw	r2,-20(fp)
 8004138:	00000306 	br	8004148 <vPortFree+0x6c>
 800413c:	e0bffb17 	ldw	r2,-20(fp)
 8004140:	10800017 	ldw	r2,0(r2)
 8004144:	e0bffb15 	stw	r2,-20(fp)
 8004148:	e0bffb17 	ldw	r2,-20(fp)
 800414c:	10800017 	ldw	r2,0(r2)
 8004150:	10c00117 	ldw	r3,4(r2)
 8004154:	e0bffe17 	ldw	r2,-8(fp)
 8004158:	18bff836 	bltu	r3,r2,800413c <vPortFree+0x60>
 800415c:	e0bffb17 	ldw	r2,-20(fp)
 8004160:	10c00017 	ldw	r3,0(r2)
 8004164:	e0bffd17 	ldw	r2,-12(fp)
 8004168:	10c00015 	stw	r3,0(r2)
 800416c:	e0bffb17 	ldw	r2,-20(fp)
 8004170:	e0fffd17 	ldw	r3,-12(fp)
 8004174:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 8004178:	e0bffd17 	ldw	r2,-12(fp)
 800417c:	10c00117 	ldw	r3,4(r2)
 8004180:	d0a00317 	ldw	r2,-32756(gp)
 8004184:	1885883a 	add	r2,r3,r2
 8004188:	d0a00315 	stw	r2,-32756(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800418c:	80063840 	call	8006384 <xTaskResumeAll>
	}
}
 8004190:	0001883a 	nop
 8004194:	e037883a 	mov	sp,fp
 8004198:	dfc00117 	ldw	ra,4(sp)
 800419c:	df000017 	ldw	fp,0(sp)
 80041a0:	dec00204 	addi	sp,sp,8
 80041a4:	f800283a 	ret

080041a8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80041a8:	deffff04 	addi	sp,sp,-4
 80041ac:	df000015 	stw	fp,0(sp)
 80041b0:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 80041b4:	d0a00317 	ldw	r2,-32756(gp)
}
 80041b8:	e037883a 	mov	sp,fp
 80041bc:	df000017 	ldw	fp,0(sp)
 80041c0:	dec00104 	addi	sp,sp,4
 80041c4:	f800283a 	ret

080041c8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 80041c8:	deffff04 	addi	sp,sp,-4
 80041cc:	df000015 	stw	fp,0(sp)
 80041d0:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 80041d4:	0001883a 	nop
 80041d8:	e037883a 	mov	sp,fp
 80041dc:	df000017 	ldw	fp,0(sp)
 80041e0:	dec00104 	addi	sp,sp,4
 80041e4:	f800283a 	ret

080041e8 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041e8:	defffd04 	addi	sp,sp,-12
 80041ec:	df000215 	stw	fp,8(sp)
 80041f0:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80041f4:	00820074 	movhi	r2,2049
 80041f8:	108a3b04 	addi	r2,r2,10476
 80041fc:	00ffff04 	movi	r3,-4
 8004200:	10c4703a 	and	r2,r2,r3
 8004204:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004208:	e0bffe17 	ldw	r2,-8(fp)
 800420c:	d0a77315 	stw	r2,-25140(gp)
	xStart.xBlockSize = ( size_t ) 0;
 8004210:	d0277415 	stw	zero,-25136(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8004214:	00802034 	movhi	r2,128
 8004218:	10bfff04 	addi	r2,r2,-4
 800421c:	d0a77615 	stw	r2,-25128(gp)
	xEnd.pxNextFreeBlock = NULL;
 8004220:	d0277515 	stw	zero,-25132(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004224:	e0bffe17 	ldw	r2,-8(fp)
 8004228:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800422c:	e0ffff17 	ldw	r3,-4(fp)
 8004230:	00802034 	movhi	r2,128
 8004234:	10bfff04 	addi	r2,r2,-4
 8004238:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800423c:	e0bfff17 	ldw	r2,-4(fp)
 8004240:	d0e77504 	addi	r3,gp,-25132
 8004244:	10c00015 	stw	r3,0(r2)
}
 8004248:	0001883a 	nop
 800424c:	e037883a 	mov	sp,fp
 8004250:	df000017 	ldw	fp,0(sp)
 8004254:	dec00104 	addi	sp,sp,4
 8004258:	f800283a 	ret

0800425c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800425c:	defffa04 	addi	sp,sp,-24
 8004260:	dfc00515 	stw	ra,20(sp)
 8004264:	df000415 	stw	fp,16(sp)
 8004268:	dc000315 	stw	r16,12(sp)
 800426c:	df000404 	addi	fp,sp,16
 8004270:	e13ffd15 	stw	r4,-12(fp)
 8004274:	e17ffe15 	stw	r5,-8(fp)
Queue_t * const pxQueue = xQueue;
 8004278:	e0bffd17 	ldw	r2,-12(fp)
 800427c:	e0bffc15 	stw	r2,-16(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8004280:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004284:	e0bffc17 	ldw	r2,-16(fp)
 8004288:	14000017 	ldw	r16,0(r2)
 800428c:	e0bffc17 	ldw	r2,-16(fp)
 8004290:	10c00f17 	ldw	r3,60(r2)
 8004294:	e0bffc17 	ldw	r2,-16(fp)
 8004298:	10801017 	ldw	r2,64(r2)
 800429c:	100b883a 	mov	r5,r2
 80042a0:	1809883a 	mov	r4,r3
 80042a4:	80082e00 	call	80082e0 <__mulsi3>
 80042a8:	8087883a 	add	r3,r16,r2
 80042ac:	e0bffc17 	ldw	r2,-16(fp)
 80042b0:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b4:	e0bffc17 	ldw	r2,-16(fp)
 80042b8:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042bc:	e0bffc17 	ldw	r2,-16(fp)
 80042c0:	10c00017 	ldw	r3,0(r2)
 80042c4:	e0bffc17 	ldw	r2,-16(fp)
 80042c8:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042cc:	e0bffc17 	ldw	r2,-16(fp)
 80042d0:	14000017 	ldw	r16,0(r2)
 80042d4:	e0bffc17 	ldw	r2,-16(fp)
 80042d8:	10800f17 	ldw	r2,60(r2)
 80042dc:	10ffffc4 	addi	r3,r2,-1
 80042e0:	e0bffc17 	ldw	r2,-16(fp)
 80042e4:	10801017 	ldw	r2,64(r2)
 80042e8:	100b883a 	mov	r5,r2
 80042ec:	1809883a 	mov	r4,r3
 80042f0:	80082e00 	call	80082e0 <__mulsi3>
 80042f4:	8087883a 	add	r3,r16,r2
 80042f8:	e0bffc17 	ldw	r2,-16(fp)
 80042fc:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 8004300:	e0bffc17 	ldw	r2,-16(fp)
 8004304:	00ffffc4 	movi	r3,-1
 8004308:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 800430c:	e0bffc17 	ldw	r2,-16(fp)
 8004310:	00ffffc4 	movi	r3,-1
 8004314:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 8004318:	e0bffe17 	ldw	r2,-8(fp)
 800431c:	10000a1e 	bne	r2,zero,8004348 <xQueueGenericReset+0xec>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004320:	e0bffc17 	ldw	r2,-16(fp)
 8004324:	10800417 	ldw	r2,16(r2)
 8004328:	10000f26 	beq	r2,zero,8004368 <xQueueGenericReset+0x10c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800432c:	e0bffc17 	ldw	r2,-16(fp)
 8004330:	10800404 	addi	r2,r2,16
 8004334:	1009883a 	mov	r4,r2
 8004338:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 800433c:	10000a26 	beq	r2,zero,8004368 <xQueueGenericReset+0x10c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004340:	003b683a 	trap	0
 8004344:	00000806 	br	8004368 <xQueueGenericReset+0x10c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004348:	e0bffc17 	ldw	r2,-16(fp)
 800434c:	10800404 	addi	r2,r2,16
 8004350:	1009883a 	mov	r4,r2
 8004354:	80037e00 	call	80037e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004358:	e0bffc17 	ldw	r2,-16(fp)
 800435c:	10800904 	addi	r2,r2,36
 8004360:	1009883a 	mov	r4,r2
 8004364:	80037e00 	call	80037e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004368:	80073700 	call	8007370 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800436c:	00800044 	movi	r2,1
}
 8004370:	e6ffff04 	addi	sp,fp,-4
 8004374:	dfc00217 	ldw	ra,8(sp)
 8004378:	df000117 	ldw	fp,4(sp)
 800437c:	dc000017 	ldw	r16,0(sp)
 8004380:	dec00304 	addi	sp,sp,12
 8004384:	f800283a 	ret

08004388 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004388:	defff704 	addi	sp,sp,-36
 800438c:	dfc00815 	stw	ra,32(sp)
 8004390:	df000715 	stw	fp,28(sp)
 8004394:	df000704 	addi	fp,sp,28
 8004398:	e13ffd15 	stw	r4,-12(fp)
 800439c:	e17ffe15 	stw	r5,-8(fp)
 80043a0:	3005883a 	mov	r2,r6
 80043a4:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80043a8:	e0bffe17 	ldw	r2,-8(fp)
 80043ac:	1000021e 	bne	r2,zero,80043b8 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80043b0:	e03ffa15 	stw	zero,-24(fp)
 80043b4:	00000406 	br	80043c8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b8:	e17ffe17 	ldw	r5,-8(fp)
 80043bc:	e13ffd17 	ldw	r4,-12(fp)
 80043c0:	80082e00 	call	80082e0 <__mulsi3>
 80043c4:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043c8:	e0bffa17 	ldw	r2,-24(fp)
 80043cc:	10801204 	addi	r2,r2,72
 80043d0:	1009883a 	mov	r4,r2
 80043d4:	8003f080 	call	8003f08 <pvPortMalloc>
 80043d8:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 80043dc:	e0bffb17 	ldw	r2,-20(fp)
 80043e0:	10000d26 	beq	r2,zero,8004418 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043e4:	e0bffb17 	ldw	r2,-20(fp)
 80043e8:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ec:	e0bffc17 	ldw	r2,-16(fp)
 80043f0:	10801204 	addi	r2,r2,72
 80043f4:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f8:	e0ffff03 	ldbu	r3,-4(fp)
 80043fc:	e0bffb17 	ldw	r2,-20(fp)
 8004400:	d8800015 	stw	r2,0(sp)
 8004404:	180f883a 	mov	r7,r3
 8004408:	e1bffc17 	ldw	r6,-16(fp)
 800440c:	e17ffe17 	ldw	r5,-8(fp)
 8004410:	e13ffd17 	ldw	r4,-12(fp)
 8004414:	80044300 	call	8004430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004418:	e0bffb17 	ldw	r2,-20(fp)
	}
 800441c:	e037883a 	mov	sp,fp
 8004420:	dfc00117 	ldw	ra,4(sp)
 8004424:	df000017 	ldw	fp,0(sp)
 8004428:	dec00204 	addi	sp,sp,8
 800442c:	f800283a 	ret

08004430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004430:	defffa04 	addi	sp,sp,-24
 8004434:	dfc00515 	stw	ra,20(sp)
 8004438:	df000415 	stw	fp,16(sp)
 800443c:	df000404 	addi	fp,sp,16
 8004440:	e13ffc15 	stw	r4,-16(fp)
 8004444:	e17ffd15 	stw	r5,-12(fp)
 8004448:	e1bffe15 	stw	r6,-8(fp)
 800444c:	3805883a 	mov	r2,r7
 8004450:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004454:	e0bffd17 	ldw	r2,-12(fp)
 8004458:	1000041e 	bne	r2,zero,800446c <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800445c:	e0800217 	ldw	r2,8(fp)
 8004460:	e0c00217 	ldw	r3,8(fp)
 8004464:	10c00015 	stw	r3,0(r2)
 8004468:	00000306 	br	8004478 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800446c:	e0800217 	ldw	r2,8(fp)
 8004470:	e0fffe17 	ldw	r3,-8(fp)
 8004474:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004478:	e0800217 	ldw	r2,8(fp)
 800447c:	e0fffc17 	ldw	r3,-16(fp)
 8004480:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 8004484:	e0800217 	ldw	r2,8(fp)
 8004488:	e0fffd17 	ldw	r3,-12(fp)
 800448c:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004490:	01400044 	movi	r5,1
 8004494:	e1000217 	ldw	r4,8(fp)
 8004498:	800425c0 	call	800425c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800449c:	0001883a 	nop
 80044a0:	e037883a 	mov	sp,fp
 80044a4:	dfc00117 	ldw	ra,4(sp)
 80044a8:	df000017 	ldw	fp,0(sp)
 80044ac:	dec00204 	addi	sp,sp,8
 80044b0:	f800283a 	ret

080044b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044b4:	defffd04 	addi	sp,sp,-12
 80044b8:	dfc00215 	stw	ra,8(sp)
 80044bc:	df000115 	stw	fp,4(sp)
 80044c0:	df000104 	addi	fp,sp,4
 80044c4:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 80044c8:	e0bfff17 	ldw	r2,-4(fp)
 80044cc:	10000b26 	beq	r2,zero,80044fc <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044d0:	e0bfff17 	ldw	r2,-4(fp)
 80044d4:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044d8:	e0bfff17 	ldw	r2,-4(fp)
 80044dc:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80044e0:	e0bfff17 	ldw	r2,-4(fp)
 80044e4:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044e8:	000f883a 	mov	r7,zero
 80044ec:	000d883a 	mov	r6,zero
 80044f0:	000b883a 	mov	r5,zero
 80044f4:	e13fff17 	ldw	r4,-4(fp)
 80044f8:	80046f40 	call	80046f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044fc:	0001883a 	nop
 8004500:	e037883a 	mov	sp,fp
 8004504:	dfc00117 	ldw	ra,4(sp)
 8004508:	df000017 	ldw	fp,0(sp)
 800450c:	dec00204 	addi	sp,sp,8
 8004510:	f800283a 	ret

08004514 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004514:	defffa04 	addi	sp,sp,-24
 8004518:	dfc00515 	stw	ra,20(sp)
 800451c:	df000415 	stw	fp,16(sp)
 8004520:	df000404 	addi	fp,sp,16
 8004524:	2005883a 	mov	r2,r4
 8004528:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800452c:	00800044 	movi	r2,1
 8004530:	e0bffc15 	stw	r2,-16(fp)
 8004534:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004538:	e0bfff03 	ldbu	r2,-4(fp)
 800453c:	100d883a 	mov	r6,r2
 8004540:	e17ffd17 	ldw	r5,-12(fp)
 8004544:	e13ffc17 	ldw	r4,-16(fp)
 8004548:	80043880 	call	8004388 <xQueueGenericCreate>
 800454c:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004550:	e13ffe17 	ldw	r4,-8(fp)
 8004554:	80044b40 	call	80044b4 <prvInitialiseMutex>

		return xNewQueue;
 8004558:	e0bffe17 	ldw	r2,-8(fp)
	}
 800455c:	e037883a 	mov	sp,fp
 8004560:	dfc00117 	ldw	ra,4(sp)
 8004564:	df000017 	ldw	fp,0(sp)
 8004568:	dec00204 	addi	sp,sp,8
 800456c:	f800283a 	ret

08004570 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004570:	defffa04 	addi	sp,sp,-24
 8004574:	dfc00515 	stw	ra,20(sp)
 8004578:	df000415 	stw	fp,16(sp)
 800457c:	dc000315 	stw	r16,12(sp)
 8004580:	df000404 	addi	fp,sp,16
 8004584:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004588:	e0bffe17 	ldw	r2,-8(fp)
 800458c:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004590:	e0bffd17 	ldw	r2,-12(fp)
 8004594:	14000217 	ldw	r16,8(r2)
 8004598:	8006f300 	call	8006f30 <xTaskGetCurrentTaskHandle>
 800459c:	8080101e 	bne	r16,r2,80045e0 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80045a0:	e0bffd17 	ldw	r2,-12(fp)
 80045a4:	10800317 	ldw	r2,12(r2)
 80045a8:	10ffffc4 	addi	r3,r2,-1
 80045ac:	e0bffd17 	ldw	r2,-12(fp)
 80045b0:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80045b4:	e0bffd17 	ldw	r2,-12(fp)
 80045b8:	10800317 	ldw	r2,12(r2)
 80045bc:	1000051e 	bne	r2,zero,80045d4 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80045c0:	000f883a 	mov	r7,zero
 80045c4:	000d883a 	mov	r6,zero
 80045c8:	000b883a 	mov	r5,zero
 80045cc:	e13ffd17 	ldw	r4,-12(fp)
 80045d0:	80046f40 	call	80046f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80045d4:	00800044 	movi	r2,1
 80045d8:	e0bffc15 	stw	r2,-16(fp)
 80045dc:	00000106 	br	80045e4 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80045e0:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80045e4:	e0bffc17 	ldw	r2,-16(fp)
	}
 80045e8:	e6ffff04 	addi	sp,fp,-4
 80045ec:	dfc00217 	ldw	ra,8(sp)
 80045f0:	df000117 	ldw	fp,4(sp)
 80045f4:	dc000017 	ldw	r16,0(sp)
 80045f8:	dec00304 	addi	sp,sp,12
 80045fc:	f800283a 	ret

08004600 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004600:	defff904 	addi	sp,sp,-28
 8004604:	dfc00615 	stw	ra,24(sp)
 8004608:	df000515 	stw	fp,20(sp)
 800460c:	dc000415 	stw	r16,16(sp)
 8004610:	df000504 	addi	fp,sp,20
 8004614:	e13ffd15 	stw	r4,-12(fp)
 8004618:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800461c:	e0bffd17 	ldw	r2,-12(fp)
 8004620:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004624:	e0bffc17 	ldw	r2,-16(fp)
 8004628:	14000217 	ldw	r16,8(r2)
 800462c:	8006f300 	call	8006f30 <xTaskGetCurrentTaskHandle>
 8004630:	8080081e 	bne	r16,r2,8004654 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004634:	e0bffc17 	ldw	r2,-16(fp)
 8004638:	10800317 	ldw	r2,12(r2)
 800463c:	10c00044 	addi	r3,r2,1
 8004640:	e0bffc17 	ldw	r2,-16(fp)
 8004644:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 8004648:	00800044 	movi	r2,1
 800464c:	e0bffb15 	stw	r2,-20(fp)
 8004650:	00000b06 	br	8004680 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004654:	e17ffe17 	ldw	r5,-8(fp)
 8004658:	e13ffc17 	ldw	r4,-16(fp)
 800465c:	8004c140 	call	8004c14 <xQueueSemaphoreTake>
 8004660:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004664:	e0bffb17 	ldw	r2,-20(fp)
 8004668:	10000526 	beq	r2,zero,8004680 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800466c:	e0bffc17 	ldw	r2,-16(fp)
 8004670:	10800317 	ldw	r2,12(r2)
 8004674:	10c00044 	addi	r3,r2,1
 8004678:	e0bffc17 	ldw	r2,-16(fp)
 800467c:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004680:	e0bffb17 	ldw	r2,-20(fp)
	}
 8004684:	e6ffff04 	addi	sp,fp,-4
 8004688:	dfc00217 	ldw	ra,8(sp)
 800468c:	df000117 	ldw	fp,4(sp)
 8004690:	dc000017 	ldw	r16,0(sp)
 8004694:	dec00304 	addi	sp,sp,12
 8004698:	f800283a 	ret

0800469c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800469c:	defffb04 	addi	sp,sp,-20
 80046a0:	dfc00415 	stw	ra,16(sp)
 80046a4:	df000315 	stw	fp,12(sp)
 80046a8:	df000304 	addi	fp,sp,12
 80046ac:	e13ffe15 	stw	r4,-8(fp)
 80046b0:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80046b4:	01800084 	movi	r6,2
 80046b8:	000b883a 	mov	r5,zero
 80046bc:	e13ffe17 	ldw	r4,-8(fp)
 80046c0:	80043880 	call	8004388 <xQueueGenericCreate>
 80046c4:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 80046c8:	e0bffd17 	ldw	r2,-12(fp)
 80046cc:	10000326 	beq	r2,zero,80046dc <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80046d0:	e0bffd17 	ldw	r2,-12(fp)
 80046d4:	e0ffff17 	ldw	r3,-4(fp)
 80046d8:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80046dc:	e0bffd17 	ldw	r2,-12(fp)
	}
 80046e0:	e037883a 	mov	sp,fp
 80046e4:	dfc00117 	ldw	ra,4(sp)
 80046e8:	df000017 	ldw	fp,0(sp)
 80046ec:	dec00204 	addi	sp,sp,8
 80046f0:	f800283a 	ret

080046f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046f4:	defff504 	addi	sp,sp,-44
 80046f8:	dfc00a15 	stw	ra,40(sp)
 80046fc:	df000915 	stw	fp,36(sp)
 8004700:	df000904 	addi	fp,sp,36
 8004704:	e13ffc15 	stw	r4,-16(fp)
 8004708:	e17ffd15 	stw	r5,-12(fp)
 800470c:	e1bffe15 	stw	r6,-8(fp)
 8004710:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004714:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004718:	e0bffc17 	ldw	r2,-16(fp)
 800471c:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004720:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004724:	e0bff817 	ldw	r2,-32(fp)
 8004728:	10c00e17 	ldw	r3,56(r2)
 800472c:	e0bff817 	ldw	r2,-32(fp)
 8004730:	10800f17 	ldw	r2,60(r2)
 8004734:	18800336 	bltu	r3,r2,8004744 <xQueueGenericSend+0x50>
 8004738:	e0bfff17 	ldw	r2,-4(fp)
 800473c:	10800098 	cmpnei	r2,r2,2
 8004740:	1000151e 	bne	r2,zero,8004798 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004744:	e1bfff17 	ldw	r6,-4(fp)
 8004748:	e17ffd17 	ldw	r5,-12(fp)
 800474c:	e13ff817 	ldw	r4,-32(fp)
 8004750:	800528c0 	call	800528c <prvCopyDataToQueue>
 8004754:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004758:	e0bff817 	ldw	r2,-32(fp)
 800475c:	10800917 	ldw	r2,36(r2)
 8004760:	10000726 	beq	r2,zero,8004780 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004764:	e0bff817 	ldw	r2,-32(fp)
 8004768:	10800904 	addi	r2,r2,36
 800476c:	1009883a 	mov	r4,r2
 8004770:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004774:	10000526 	beq	r2,zero,800478c <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004778:	003b683a 	trap	0
 800477c:	00000306 	br	800478c <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004780:	e0bff917 	ldw	r2,-28(fp)
 8004784:	10000126 	beq	r2,zero,800478c <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004788:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800478c:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004790:	00800044 	movi	r2,1
 8004794:	00003f06 	br	8004894 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004798:	e0bffe17 	ldw	r2,-8(fp)
 800479c:	1000031e 	bne	r2,zero,80047ac <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047a0:	80073700 	call	8007370 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047a4:	0005883a 	mov	r2,zero
 80047a8:	00003a06 	br	8004894 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ac:	e0bff717 	ldw	r2,-36(fp)
 80047b0:	1000051e 	bne	r2,zero,80047c8 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047b4:	e0bffa04 	addi	r2,fp,-24
 80047b8:	1009883a 	mov	r4,r2
 80047bc:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c0:	00800044 	movi	r2,1
 80047c4:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047c8:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047cc:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047d0:	800731c0 	call	800731c <vTaskEnterCritical>
 80047d4:	e0bff817 	ldw	r2,-32(fp)
 80047d8:	10801103 	ldbu	r2,68(r2)
 80047dc:	10803fcc 	andi	r2,r2,255
 80047e0:	1080201c 	xori	r2,r2,128
 80047e4:	10bfe004 	addi	r2,r2,-128
 80047e8:	10bfffd8 	cmpnei	r2,r2,-1
 80047ec:	1000021e 	bne	r2,zero,80047f8 <xQueueGenericSend+0x104>
 80047f0:	e0bff817 	ldw	r2,-32(fp)
 80047f4:	10001105 	stb	zero,68(r2)
 80047f8:	e0bff817 	ldw	r2,-32(fp)
 80047fc:	10801143 	ldbu	r2,69(r2)
 8004800:	10803fcc 	andi	r2,r2,255
 8004804:	1080201c 	xori	r2,r2,128
 8004808:	10bfe004 	addi	r2,r2,-128
 800480c:	10bfffd8 	cmpnei	r2,r2,-1
 8004810:	1000021e 	bne	r2,zero,800481c <xQueueGenericSend+0x128>
 8004814:	e0bff817 	ldw	r2,-32(fp)
 8004818:	10001145 	stb	zero,69(r2)
 800481c:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004820:	e0fffe04 	addi	r3,fp,-8
 8004824:	e0bffa04 	addi	r2,fp,-24
 8004828:	180b883a 	mov	r5,r3
 800482c:	1009883a 	mov	r4,r2
 8004830:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004834:	1000131e 	bne	r2,zero,8004884 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004838:	e13ff817 	ldw	r4,-32(fp)
 800483c:	80056400 	call	8005640 <prvIsQueueFull>
 8004840:	10000c26 	beq	r2,zero,8004874 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004844:	e0bff817 	ldw	r2,-32(fp)
 8004848:	10800404 	addi	r2,r2,16
 800484c:	e0fffe17 	ldw	r3,-8(fp)
 8004850:	180b883a 	mov	r5,r3
 8004854:	1009883a 	mov	r4,r2
 8004858:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800485c:	e13ff817 	ldw	r4,-32(fp)
 8004860:	80054b40 	call	80054b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004864:	80063840 	call	8006384 <xTaskResumeAll>
 8004868:	103fad1e 	bne	r2,zero,8004720 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
 800486c:	003b683a 	trap	0
 8004870:	003fab06 	br	8004720 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004874:	e13ff817 	ldw	r4,-32(fp)
 8004878:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800487c:	80063840 	call	8006384 <xTaskResumeAll>
 8004880:	003fa706 	br	8004720 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004884:	e13ff817 	ldw	r4,-32(fp)
 8004888:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800488c:	80063840 	call	8006384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004890:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 8004894:	e037883a 	mov	sp,fp
 8004898:	dfc00117 	ldw	ra,4(sp)
 800489c:	df000017 	ldw	fp,0(sp)
 80048a0:	dec00204 	addi	sp,sp,8
 80048a4:	f800283a 	ret

080048a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048a8:	defff604 	addi	sp,sp,-40
 80048ac:	dfc00915 	stw	ra,36(sp)
 80048b0:	df000815 	stw	fp,32(sp)
 80048b4:	df000804 	addi	fp,sp,32
 80048b8:	e13ffc15 	stw	r4,-16(fp)
 80048bc:	e17ffd15 	stw	r5,-12(fp)
 80048c0:	e1bffe15 	stw	r6,-8(fp)
 80048c4:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048c8:	e0bffc17 	ldw	r2,-16(fp)
 80048cc:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048d0:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048d4:	e0bff917 	ldw	r2,-28(fp)
 80048d8:	10c00e17 	ldw	r3,56(r2)
 80048dc:	e0bff917 	ldw	r2,-28(fp)
 80048e0:	10800f17 	ldw	r2,60(r2)
 80048e4:	18800336 	bltu	r3,r2,80048f4 <xQueueGenericSendFromISR+0x4c>
 80048e8:	e0bfff17 	ldw	r2,-4(fp)
 80048ec:	10800098 	cmpnei	r2,r2,2
 80048f0:	1000201e 	bne	r2,zero,8004974 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048f4:	e0bff917 	ldw	r2,-28(fp)
 80048f8:	10801143 	ldbu	r2,69(r2)
 80048fc:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004900:	e1bfff17 	ldw	r6,-4(fp)
 8004904:	e17ffd17 	ldw	r5,-12(fp)
 8004908:	e13ff917 	ldw	r4,-28(fp)
 800490c:	800528c0 	call	800528c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004910:	e0bffb07 	ldb	r2,-20(fp)
 8004914:	10bfffd8 	cmpnei	r2,r2,-1
 8004918:	10000e1e 	bne	r2,zero,8004954 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800491c:	e0bff917 	ldw	r2,-28(fp)
 8004920:	10800917 	ldw	r2,36(r2)
 8004924:	10001026 	beq	r2,zero,8004968 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004928:	e0bff917 	ldw	r2,-28(fp)
 800492c:	10800904 	addi	r2,r2,36
 8004930:	1009883a 	mov	r4,r2
 8004934:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004938:	10000b26 	beq	r2,zero,8004968 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800493c:	e0bffe17 	ldw	r2,-8(fp)
 8004940:	10000926 	beq	r2,zero,8004968 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004944:	e0bffe17 	ldw	r2,-8(fp)
 8004948:	00c00044 	movi	r3,1
 800494c:	10c00015 	stw	r3,0(r2)
 8004950:	00000506 	br	8004968 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004954:	e0bffb03 	ldbu	r2,-20(fp)
 8004958:	10800044 	addi	r2,r2,1
 800495c:	1007883a 	mov	r3,r2
 8004960:	e0bff917 	ldw	r2,-28(fp)
 8004964:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 8004968:	00800044 	movi	r2,1
 800496c:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8004970:	00000106 	br	8004978 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004974:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004978:	e0bff817 	ldw	r2,-32(fp)
}
 800497c:	e037883a 	mov	sp,fp
 8004980:	dfc00117 	ldw	ra,4(sp)
 8004984:	df000017 	ldw	fp,0(sp)
 8004988:	dec00204 	addi	sp,sp,8
 800498c:	f800283a 	ret

08004990 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004990:	defff704 	addi	sp,sp,-36
 8004994:	dfc00815 	stw	ra,32(sp)
 8004998:	df000715 	stw	fp,28(sp)
 800499c:	df000704 	addi	fp,sp,28
 80049a0:	e13ffe15 	stw	r4,-8(fp)
 80049a4:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049a8:	e0bffe17 	ldw	r2,-8(fp)
 80049ac:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049b0:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b4:	e0bffa17 	ldw	r2,-24(fp)
 80049b8:	10800e17 	ldw	r2,56(r2)
 80049bc:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049c0:	e0bffa17 	ldw	r2,-24(fp)
 80049c4:	10800f17 	ldw	r2,60(r2)
 80049c8:	e0fffc17 	ldw	r3,-16(fp)
 80049cc:	1880202e 	bgeu	r3,r2,8004a50 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049d0:	e0bffa17 	ldw	r2,-24(fp)
 80049d4:	10801143 	ldbu	r2,69(r2)
 80049d8:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049dc:	e0bffc17 	ldw	r2,-16(fp)
 80049e0:	10c00044 	addi	r3,r2,1
 80049e4:	e0bffa17 	ldw	r2,-24(fp)
 80049e8:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049ec:	e0bffd07 	ldb	r2,-12(fp)
 80049f0:	10bfffd8 	cmpnei	r2,r2,-1
 80049f4:	10000e1e 	bne	r2,zero,8004a30 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049f8:	e0bffa17 	ldw	r2,-24(fp)
 80049fc:	10800917 	ldw	r2,36(r2)
 8004a00:	10001026 	beq	r2,zero,8004a44 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a04:	e0bffa17 	ldw	r2,-24(fp)
 8004a08:	10800904 	addi	r2,r2,36
 8004a0c:	1009883a 	mov	r4,r2
 8004a10:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004a14:	10000b26 	beq	r2,zero,8004a44 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a18:	e0bfff17 	ldw	r2,-4(fp)
 8004a1c:	10000926 	beq	r2,zero,8004a44 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a20:	e0bfff17 	ldw	r2,-4(fp)
 8004a24:	00c00044 	movi	r3,1
 8004a28:	10c00015 	stw	r3,0(r2)
 8004a2c:	00000506 	br	8004a44 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a30:	e0bffd03 	ldbu	r2,-12(fp)
 8004a34:	10800044 	addi	r2,r2,1
 8004a38:	1007883a 	mov	r3,r2
 8004a3c:	e0bffa17 	ldw	r2,-24(fp)
 8004a40:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 8004a44:	00800044 	movi	r2,1
 8004a48:	e0bff915 	stw	r2,-28(fp)
 8004a4c:	00000106 	br	8004a54 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a50:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a54:	e0bff917 	ldw	r2,-28(fp)
}
 8004a58:	e037883a 	mov	sp,fp
 8004a5c:	dfc00117 	ldw	ra,4(sp)
 8004a60:	df000017 	ldw	fp,0(sp)
 8004a64:	dec00204 	addi	sp,sp,8
 8004a68:	f800283a 	ret

08004a6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a6c:	defff604 	addi	sp,sp,-40
 8004a70:	dfc00915 	stw	ra,36(sp)
 8004a74:	df000815 	stw	fp,32(sp)
 8004a78:	df000804 	addi	fp,sp,32
 8004a7c:	e13ffd15 	stw	r4,-12(fp)
 8004a80:	e17ffe15 	stw	r5,-8(fp)
 8004a84:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8004a88:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a8c:	e0bffd17 	ldw	r2,-12(fp)
 8004a90:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a94:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a98:	e0bff917 	ldw	r2,-28(fp)
 8004a9c:	10800e17 	ldw	r2,56(r2)
 8004aa0:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aa4:	e0bffa17 	ldw	r2,-24(fp)
 8004aa8:	10001326 	beq	r2,zero,8004af8 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aac:	e17ffe17 	ldw	r5,-8(fp)
 8004ab0:	e13ff917 	ldw	r4,-28(fp)
 8004ab4:	80054180 	call	8005418 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ab8:	e0bffa17 	ldw	r2,-24(fp)
 8004abc:	10ffffc4 	addi	r3,r2,-1
 8004ac0:	e0bff917 	ldw	r2,-28(fp)
 8004ac4:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac8:	e0bff917 	ldw	r2,-28(fp)
 8004acc:	10800417 	ldw	r2,16(r2)
 8004ad0:	10000626 	beq	r2,zero,8004aec <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	e0bff917 	ldw	r2,-28(fp)
 8004ad8:	10800404 	addi	r2,r2,16
 8004adc:	1009883a 	mov	r4,r2
 8004ae0:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004ae4:	10000126 	beq	r2,zero,8004aec <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ae8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aec:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004af0:	00800044 	movi	r2,1
 8004af4:	00004206 	br	8004c00 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004af8:	e0bfff17 	ldw	r2,-4(fp)
 8004afc:	1000031e 	bne	r2,zero,8004b0c <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b00:	80073700 	call	8007370 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b04:	0005883a 	mov	r2,zero
 8004b08:	00003d06 	br	8004c00 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0c:	e0bff817 	ldw	r2,-32(fp)
 8004b10:	1000051e 	bne	r2,zero,8004b28 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b14:	e0bffb04 	addi	r2,fp,-20
 8004b18:	1009883a 	mov	r4,r2
 8004b1c:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b20:	00800044 	movi	r2,1
 8004b24:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b28:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b2c:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b30:	800731c0 	call	800731c <vTaskEnterCritical>
 8004b34:	e0bff917 	ldw	r2,-28(fp)
 8004b38:	10801103 	ldbu	r2,68(r2)
 8004b3c:	10803fcc 	andi	r2,r2,255
 8004b40:	1080201c 	xori	r2,r2,128
 8004b44:	10bfe004 	addi	r2,r2,-128
 8004b48:	10bfffd8 	cmpnei	r2,r2,-1
 8004b4c:	1000021e 	bne	r2,zero,8004b58 <xQueueReceive+0xec>
 8004b50:	e0bff917 	ldw	r2,-28(fp)
 8004b54:	10001105 	stb	zero,68(r2)
 8004b58:	e0bff917 	ldw	r2,-28(fp)
 8004b5c:	10801143 	ldbu	r2,69(r2)
 8004b60:	10803fcc 	andi	r2,r2,255
 8004b64:	1080201c 	xori	r2,r2,128
 8004b68:	10bfe004 	addi	r2,r2,-128
 8004b6c:	10bfffd8 	cmpnei	r2,r2,-1
 8004b70:	1000021e 	bne	r2,zero,8004b7c <xQueueReceive+0x110>
 8004b74:	e0bff917 	ldw	r2,-28(fp)
 8004b78:	10001145 	stb	zero,69(r2)
 8004b7c:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b80:	e0ffff04 	addi	r3,fp,-4
 8004b84:	e0bffb04 	addi	r2,fp,-20
 8004b88:	180b883a 	mov	r5,r3
 8004b8c:	1009883a 	mov	r4,r2
 8004b90:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004b94:	1000131e 	bne	r2,zero,8004be4 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b98:	e13ff917 	ldw	r4,-28(fp)
 8004b9c:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004ba0:	10000c26 	beq	r2,zero,8004bd4 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ba4:	e0bff917 	ldw	r2,-28(fp)
 8004ba8:	10800904 	addi	r2,r2,36
 8004bac:	e0ffff17 	ldw	r3,-4(fp)
 8004bb0:	180b883a 	mov	r5,r3
 8004bb4:	1009883a 	mov	r4,r2
 8004bb8:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bbc:	e13ff917 	ldw	r4,-28(fp)
 8004bc0:	80054b40 	call	80054b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc4:	80063840 	call	8006384 <xTaskResumeAll>
 8004bc8:	103fb21e 	bne	r2,zero,8004a94 <xQueueReceive+0x28>
				{
					portYIELD_WITHIN_API();
 8004bcc:	003b683a 	trap	0
 8004bd0:	003fb006 	br	8004a94 <xQueueReceive+0x28>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bd4:	e13ff917 	ldw	r4,-28(fp)
 8004bd8:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bdc:	80063840 	call	8006384 <xTaskResumeAll>
 8004be0:	003fac06 	br	8004a94 <xQueueReceive+0x28>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004be4:	e13ff917 	ldw	r4,-28(fp)
 8004be8:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bec:	80063840 	call	8006384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf0:	e13ff917 	ldw	r4,-28(fp)
 8004bf4:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004bf8:	103fa626 	beq	r2,zero,8004a94 <xQueueReceive+0x28>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bfc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c00:	e037883a 	mov	sp,fp
 8004c04:	dfc00117 	ldw	ra,4(sp)
 8004c08:	df000017 	ldw	fp,0(sp)
 8004c0c:	dec00204 	addi	sp,sp,8
 8004c10:	f800283a 	ret

08004c14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c14:	defff504 	addi	sp,sp,-44
 8004c18:	dfc00a15 	stw	ra,40(sp)
 8004c1c:	df000915 	stw	fp,36(sp)
 8004c20:	df000904 	addi	fp,sp,36
 8004c24:	e13ffe15 	stw	r4,-8(fp)
 8004c28:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8004c2c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c30:	e0bffe17 	ldw	r2,-8(fp)
 8004c34:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c38:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c40:	e0bff917 	ldw	r2,-28(fp)
 8004c44:	10800e17 	ldw	r2,56(r2)
 8004c48:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c4c:	e0bffa17 	ldw	r2,-24(fp)
 8004c50:	10001726 	beq	r2,zero,8004cb0 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c54:	e0bffa17 	ldw	r2,-24(fp)
 8004c58:	10ffffc4 	addi	r3,r2,-1
 8004c5c:	e0bff917 	ldw	r2,-28(fp)
 8004c60:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c64:	e0bff917 	ldw	r2,-28(fp)
 8004c68:	10800017 	ldw	r2,0(r2)
 8004c6c:	1000041e 	bne	r2,zero,8004c80 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004c70:	80074140 	call	8007414 <pvTaskIncrementMutexHeldCount>
 8004c74:	1007883a 	mov	r3,r2
 8004c78:	e0bff917 	ldw	r2,-28(fp)
 8004c7c:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c80:	e0bff917 	ldw	r2,-28(fp)
 8004c84:	10800417 	ldw	r2,16(r2)
 8004c88:	10000626 	beq	r2,zero,8004ca4 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8c:	e0bff917 	ldw	r2,-28(fp)
 8004c90:	10800404 	addi	r2,r2,16
 8004c94:	1009883a 	mov	r4,r2
 8004c98:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004c9c:	10000126 	beq	r2,zero,8004ca4 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ca0:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ca4:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004ca8:	00800044 	movi	r2,1
 8004cac:	00005806 	br	8004e10 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb0:	e0bfff17 	ldw	r2,-4(fp)
 8004cb4:	1000031e 	bne	r2,zero,8004cc4 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004cb8:	80073700 	call	8007370 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cbc:	0005883a 	mov	r2,zero
 8004cc0:	00005306 	br	8004e10 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc4:	e0bff717 	ldw	r2,-36(fp)
 8004cc8:	1000051e 	bne	r2,zero,8004ce0 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ccc:	e0bffc04 	addi	r2,fp,-16
 8004cd0:	1009883a 	mov	r4,r2
 8004cd4:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd8:	00800044 	movi	r2,1
 8004cdc:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce0:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce4:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ce8:	800731c0 	call	800731c <vTaskEnterCritical>
 8004cec:	e0bff917 	ldw	r2,-28(fp)
 8004cf0:	10801103 	ldbu	r2,68(r2)
 8004cf4:	10803fcc 	andi	r2,r2,255
 8004cf8:	1080201c 	xori	r2,r2,128
 8004cfc:	10bfe004 	addi	r2,r2,-128
 8004d00:	10bfffd8 	cmpnei	r2,r2,-1
 8004d04:	1000021e 	bne	r2,zero,8004d10 <xQueueSemaphoreTake+0xfc>
 8004d08:	e0bff917 	ldw	r2,-28(fp)
 8004d0c:	10001105 	stb	zero,68(r2)
 8004d10:	e0bff917 	ldw	r2,-28(fp)
 8004d14:	10801143 	ldbu	r2,69(r2)
 8004d18:	10803fcc 	andi	r2,r2,255
 8004d1c:	1080201c 	xori	r2,r2,128
 8004d20:	10bfe004 	addi	r2,r2,-128
 8004d24:	10bfffd8 	cmpnei	r2,r2,-1
 8004d28:	1000021e 	bne	r2,zero,8004d34 <xQueueSemaphoreTake+0x120>
 8004d2c:	e0bff917 	ldw	r2,-28(fp)
 8004d30:	10001145 	stb	zero,69(r2)
 8004d34:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d38:	e0ffff04 	addi	r3,fp,-4
 8004d3c:	e0bffc04 	addi	r2,fp,-16
 8004d40:	180b883a 	mov	r5,r3
 8004d44:	1009883a 	mov	r4,r2
 8004d48:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004d4c:	10001d1e 	bne	r2,zero,8004dc4 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d50:	e13ff917 	ldw	r4,-28(fp)
 8004d54:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004d58:	10001626 	beq	r2,zero,8004db4 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d5c:	e0bff917 	ldw	r2,-28(fp)
 8004d60:	10800017 	ldw	r2,0(r2)
 8004d64:	1000071e 	bne	r2,zero,8004d84 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 8004d68:	800731c0 	call	800731c <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d6c:	e0bff917 	ldw	r2,-28(fp)
 8004d70:	10800217 	ldw	r2,8(r2)
 8004d74:	1009883a 	mov	r4,r2
 8004d78:	8006f580 	call	8006f58 <xTaskPriorityInherit>
 8004d7c:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 8004d80:	80073700 	call	8007370 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d84:	e0bff917 	ldw	r2,-28(fp)
 8004d88:	10800904 	addi	r2,r2,36
 8004d8c:	e0ffff17 	ldw	r3,-4(fp)
 8004d90:	180b883a 	mov	r5,r3
 8004d94:	1009883a 	mov	r4,r2
 8004d98:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d9c:	e13ff917 	ldw	r4,-28(fp)
 8004da0:	80054b40 	call	80054b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004da4:	80063840 	call	8006384 <xTaskResumeAll>
 8004da8:	103fa41e 	bne	r2,zero,8004c3c <xQueueSemaphoreTake+0x28>
				{
					portYIELD_WITHIN_API();
 8004dac:	003b683a 	trap	0
 8004db0:	003fa206 	br	8004c3c <xQueueSemaphoreTake+0x28>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004db4:	e13ff917 	ldw	r4,-28(fp)
 8004db8:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dbc:	80063840 	call	8006384 <xTaskResumeAll>
 8004dc0:	003f9e06 	br	8004c3c <xQueueSemaphoreTake+0x28>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004dc4:	e13ff917 	ldw	r4,-28(fp)
 8004dc8:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dcc:	80063840 	call	8006384 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd0:	e13ff917 	ldw	r4,-28(fp)
 8004dd4:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004dd8:	103f9826 	beq	r2,zero,8004c3c <xQueueSemaphoreTake+0x28>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ddc:	e0bff817 	ldw	r2,-32(fp)
 8004de0:	10000a26 	beq	r2,zero,8004e0c <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 8004de4:	800731c0 	call	800731c <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004de8:	e13ff917 	ldw	r4,-28(fp)
 8004dec:	800523c0 	call	800523c <prvGetDisinheritPriorityAfterTimeout>
 8004df0:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004df4:	e0bff917 	ldw	r2,-28(fp)
 8004df8:	10800217 	ldw	r2,8(r2)
 8004dfc:	e17ffb17 	ldw	r5,-20(fp)
 8004e00:	1009883a 	mov	r4,r2
 8004e04:	80071c00 	call	80071c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e08:	80073700 	call	8007370 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e0c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e10:	e037883a 	mov	sp,fp
 8004e14:	dfc00117 	ldw	ra,4(sp)
 8004e18:	df000017 	ldw	fp,0(sp)
 8004e1c:	dec00204 	addi	sp,sp,8
 8004e20:	f800283a 	ret

08004e24 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e24:	defff504 	addi	sp,sp,-44
 8004e28:	dfc00a15 	stw	ra,40(sp)
 8004e2c:	df000915 	stw	fp,36(sp)
 8004e30:	df000904 	addi	fp,sp,36
 8004e34:	e13ffd15 	stw	r4,-12(fp)
 8004e38:	e17ffe15 	stw	r5,-8(fp)
 8004e3c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8004e40:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8004e44:	e0bffd17 	ldw	r2,-12(fp)
 8004e48:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e4c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e50:	e0bff817 	ldw	r2,-32(fp)
 8004e54:	10800e17 	ldw	r2,56(r2)
 8004e58:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e5c:	e0bff917 	ldw	r2,-28(fp)
 8004e60:	10001526 	beq	r2,zero,8004eb8 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8004e64:	e0bff817 	ldw	r2,-32(fp)
 8004e68:	10800317 	ldw	r2,12(r2)
 8004e6c:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e70:	e17ffe17 	ldw	r5,-8(fp)
 8004e74:	e13ff817 	ldw	r4,-32(fp)
 8004e78:	80054180 	call	8005418 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8004e7c:	e0bff817 	ldw	r2,-32(fp)
 8004e80:	e0fffa17 	ldw	r3,-24(fp)
 8004e84:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e88:	e0bff817 	ldw	r2,-32(fp)
 8004e8c:	10800917 	ldw	r2,36(r2)
 8004e90:	10000626 	beq	r2,zero,8004eac <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e94:	e0bff817 	ldw	r2,-32(fp)
 8004e98:	10800904 	addi	r2,r2,36
 8004e9c:	1009883a 	mov	r4,r2
 8004ea0:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8004ea4:	10000126 	beq	r2,zero,8004eac <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eac:	80073700 	call	8007370 <vTaskExitCritical>
				return pdPASS;
 8004eb0:	00800044 	movi	r2,1
 8004eb4:	00004206 	br	8004fc0 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eb8:	e0bfff17 	ldw	r2,-4(fp)
 8004ebc:	1000031e 	bne	r2,zero,8004ecc <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec0:	80073700 	call	8007370 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ec4:	0005883a 	mov	r2,zero
 8004ec8:	00003d06 	br	8004fc0 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ecc:	e0bff717 	ldw	r2,-36(fp)
 8004ed0:	1000051e 	bne	r2,zero,8004ee8 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed4:	e0bffb04 	addi	r2,fp,-20
 8004ed8:	1009883a 	mov	r4,r2
 8004edc:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee0:	00800044 	movi	r2,1
 8004ee4:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ee8:	80073700 	call	8007370 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eec:	80063580 	call	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef0:	800731c0 	call	800731c <vTaskEnterCritical>
 8004ef4:	e0bff817 	ldw	r2,-32(fp)
 8004ef8:	10801103 	ldbu	r2,68(r2)
 8004efc:	10803fcc 	andi	r2,r2,255
 8004f00:	1080201c 	xori	r2,r2,128
 8004f04:	10bfe004 	addi	r2,r2,-128
 8004f08:	10bfffd8 	cmpnei	r2,r2,-1
 8004f0c:	1000021e 	bne	r2,zero,8004f18 <xQueuePeek+0xf4>
 8004f10:	e0bff817 	ldw	r2,-32(fp)
 8004f14:	10001105 	stb	zero,68(r2)
 8004f18:	e0bff817 	ldw	r2,-32(fp)
 8004f1c:	10801143 	ldbu	r2,69(r2)
 8004f20:	10803fcc 	andi	r2,r2,255
 8004f24:	1080201c 	xori	r2,r2,128
 8004f28:	10bfe004 	addi	r2,r2,-128
 8004f2c:	10bfffd8 	cmpnei	r2,r2,-1
 8004f30:	1000021e 	bne	r2,zero,8004f3c <xQueuePeek+0x118>
 8004f34:	e0bff817 	ldw	r2,-32(fp)
 8004f38:	10001145 	stb	zero,69(r2)
 8004f3c:	80073700 	call	8007370 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f40:	e0ffff04 	addi	r3,fp,-4
 8004f44:	e0bffb04 	addi	r2,fp,-20
 8004f48:	180b883a 	mov	r5,r3
 8004f4c:	1009883a 	mov	r4,r2
 8004f50:	8006b700 	call	8006b70 <xTaskCheckForTimeOut>
 8004f54:	1000131e 	bne	r2,zero,8004fa4 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f58:	e13ff817 	ldw	r4,-32(fp)
 8004f5c:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004f60:	10000c26 	beq	r2,zero,8004f94 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f64:	e0bff817 	ldw	r2,-32(fp)
 8004f68:	10800904 	addi	r2,r2,36
 8004f6c:	e0ffff17 	ldw	r3,-4(fp)
 8004f70:	180b883a 	mov	r5,r3
 8004f74:	1009883a 	mov	r4,r2
 8004f78:	80068600 	call	8006860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f7c:	e13ff817 	ldw	r4,-32(fp)
 8004f80:	80054b40 	call	80054b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f84:	80063840 	call	8006384 <xTaskResumeAll>
 8004f88:	103fb01e 	bne	r2,zero,8004e4c <xQueuePeek+0x28>
				{
					portYIELD_WITHIN_API();
 8004f8c:	003b683a 	trap	0
 8004f90:	003fae06 	br	8004e4c <xQueuePeek+0x28>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8004f94:	e13ff817 	ldw	r4,-32(fp)
 8004f98:	80054b40 	call	80054b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f9c:	80063840 	call	8006384 <xTaskResumeAll>
 8004fa0:	003faa06 	br	8004e4c <xQueuePeek+0x28>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8004fa4:	e13ff817 	ldw	r4,-32(fp)
 8004fa8:	80054b40 	call	80054b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fac:	80063840 	call	8006384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fb0:	e13ff817 	ldw	r4,-32(fp)
 8004fb4:	80055a80 	call	80055a8 <prvIsQueueEmpty>
 8004fb8:	103fa426 	beq	r2,zero,8004e4c <xQueuePeek+0x28>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fbc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fc0:	e037883a 	mov	sp,fp
 8004fc4:	dfc00117 	ldw	ra,4(sp)
 8004fc8:	df000017 	ldw	fp,0(sp)
 8004fcc:	dec00204 	addi	sp,sp,8
 8004fd0:	f800283a 	ret

08004fd4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fd4:	defff604 	addi	sp,sp,-40
 8004fd8:	dfc00915 	stw	ra,36(sp)
 8004fdc:	df000815 	stw	fp,32(sp)
 8004fe0:	df000804 	addi	fp,sp,32
 8004fe4:	e13ffd15 	stw	r4,-12(fp)
 8004fe8:	e17ffe15 	stw	r5,-8(fp)
 8004fec:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ff0:	e0bffd17 	ldw	r2,-12(fp)
 8004ff4:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ff8:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffc:	e0bff917 	ldw	r2,-28(fp)
 8005000:	10800e17 	ldw	r2,56(r2)
 8005004:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005008:	e0bffb17 	ldw	r2,-20(fp)
 800500c:	10002326 	beq	r2,zero,800509c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005010:	e0bff917 	ldw	r2,-28(fp)
 8005014:	10801103 	ldbu	r2,68(r2)
 8005018:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800501c:	e17ffe17 	ldw	r5,-8(fp)
 8005020:	e13ff917 	ldw	r4,-28(fp)
 8005024:	80054180 	call	8005418 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005028:	e0bffb17 	ldw	r2,-20(fp)
 800502c:	10ffffc4 	addi	r3,r2,-1
 8005030:	e0bff917 	ldw	r2,-28(fp)
 8005034:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005038:	e0bffc07 	ldb	r2,-16(fp)
 800503c:	10bfffd8 	cmpnei	r2,r2,-1
 8005040:	10000e1e 	bne	r2,zero,800507c <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005044:	e0bff917 	ldw	r2,-28(fp)
 8005048:	10800417 	ldw	r2,16(r2)
 800504c:	10001026 	beq	r2,zero,8005090 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005050:	e0bff917 	ldw	r2,-28(fp)
 8005054:	10800404 	addi	r2,r2,16
 8005058:	1009883a 	mov	r4,r2
 800505c:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 8005060:	10000b26 	beq	r2,zero,8005090 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005064:	e0bfff17 	ldw	r2,-4(fp)
 8005068:	10000926 	beq	r2,zero,8005090 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800506c:	e0bfff17 	ldw	r2,-4(fp)
 8005070:	00c00044 	movi	r3,1
 8005074:	10c00015 	stw	r3,0(r2)
 8005078:	00000506 	br	8005090 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800507c:	e0bffc03 	ldbu	r2,-16(fp)
 8005080:	10800044 	addi	r2,r2,1
 8005084:	1007883a 	mov	r3,r2
 8005088:	e0bff917 	ldw	r2,-28(fp)
 800508c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 8005090:	00800044 	movi	r2,1
 8005094:	e0bff815 	stw	r2,-32(fp)
 8005098:	00000106 	br	80050a0 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 800509c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050a0:	e0bff817 	ldw	r2,-32(fp)
}
 80050a4:	e037883a 	mov	sp,fp
 80050a8:	dfc00117 	ldw	ra,4(sp)
 80050ac:	df000017 	ldw	fp,0(sp)
 80050b0:	dec00204 	addi	sp,sp,8
 80050b4:	f800283a 	ret

080050b8 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80050b8:	defff804 	addi	sp,sp,-32
 80050bc:	dfc00715 	stw	ra,28(sp)
 80050c0:	df000615 	stw	fp,24(sp)
 80050c4:	df000604 	addi	fp,sp,24
 80050c8:	e13ffe15 	stw	r4,-8(fp)
 80050cc:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80050d0:	e0bffe17 	ldw	r2,-8(fp)
 80050d4:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050d8:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050dc:	e0bffb17 	ldw	r2,-20(fp)
 80050e0:	10800e17 	ldw	r2,56(r2)
 80050e4:	10000c26 	beq	r2,zero,8005118 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80050e8:	e0bffb17 	ldw	r2,-20(fp)
 80050ec:	10800317 	ldw	r2,12(r2)
 80050f0:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050f4:	e17fff17 	ldw	r5,-4(fp)
 80050f8:	e13ffb17 	ldw	r4,-20(fp)
 80050fc:	80054180 	call	8005418 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8005100:	e0bffb17 	ldw	r2,-20(fp)
 8005104:	e0fffd17 	ldw	r3,-12(fp)
 8005108:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 800510c:	00800044 	movi	r2,1
 8005110:	e0bffa15 	stw	r2,-24(fp)
 8005114:	00000106 	br	800511c <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 8005118:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800511c:	e0bffa17 	ldw	r2,-24(fp)
}
 8005120:	e037883a 	mov	sp,fp
 8005124:	dfc00117 	ldw	ra,4(sp)
 8005128:	df000017 	ldw	fp,0(sp)
 800512c:	dec00204 	addi	sp,sp,8
 8005130:	f800283a 	ret

08005134 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005134:	defffc04 	addi	sp,sp,-16
 8005138:	dfc00315 	stw	ra,12(sp)
 800513c:	df000215 	stw	fp,8(sp)
 8005140:	df000204 	addi	fp,sp,8
 8005144:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8005148:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800514c:	e0bfff17 	ldw	r2,-4(fp)
 8005150:	10800e17 	ldw	r2,56(r2)
 8005154:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 8005158:	80073700 	call	8007370 <vTaskExitCritical>

	return uxReturn;
 800515c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005160:	e037883a 	mov	sp,fp
 8005164:	dfc00117 	ldw	ra,4(sp)
 8005168:	df000017 	ldw	fp,0(sp)
 800516c:	dec00204 	addi	sp,sp,8
 8005170:	f800283a 	ret

08005174 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005174:	defffb04 	addi	sp,sp,-20
 8005178:	dfc00415 	stw	ra,16(sp)
 800517c:	df000315 	stw	fp,12(sp)
 8005180:	df000304 	addi	fp,sp,12
 8005184:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005188:	e0bfff17 	ldw	r2,-4(fp)
 800518c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8005190:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8005194:	e0bffd17 	ldw	r2,-12(fp)
 8005198:	10c00f17 	ldw	r3,60(r2)
 800519c:	e0bffd17 	ldw	r2,-12(fp)
 80051a0:	10800e17 	ldw	r2,56(r2)
 80051a4:	1885c83a 	sub	r2,r3,r2
 80051a8:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 80051ac:	80073700 	call	8007370 <vTaskExitCritical>

	return uxReturn;
 80051b0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051b4:	e037883a 	mov	sp,fp
 80051b8:	dfc00117 	ldw	ra,4(sp)
 80051bc:	df000017 	ldw	fp,0(sp)
 80051c0:	dec00204 	addi	sp,sp,8
 80051c4:	f800283a 	ret

080051c8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80051c8:	defffc04 	addi	sp,sp,-16
 80051cc:	df000315 	stw	fp,12(sp)
 80051d0:	df000304 	addi	fp,sp,12
 80051d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80051d8:	e0bfff17 	ldw	r2,-4(fp)
 80051dc:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 80051e0:	e0bffd17 	ldw	r2,-12(fp)
 80051e4:	10800e17 	ldw	r2,56(r2)
 80051e8:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 80051ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051f0:	e037883a 	mov	sp,fp
 80051f4:	df000017 	ldw	fp,0(sp)
 80051f8:	dec00104 	addi	sp,sp,4
 80051fc:	f800283a 	ret

08005200 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005200:	defffc04 	addi	sp,sp,-16
 8005204:	dfc00315 	stw	ra,12(sp)
 8005208:	df000215 	stw	fp,8(sp)
 800520c:	df000204 	addi	fp,sp,8
 8005210:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 8005214:	e0bfff17 	ldw	r2,-4(fp)
 8005218:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800521c:	e13ffe17 	ldw	r4,-8(fp)
 8005220:	80040dc0 	call	80040dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005224:	0001883a 	nop
 8005228:	e037883a 	mov	sp,fp
 800522c:	dfc00117 	ldw	ra,4(sp)
 8005230:	df000017 	ldw	fp,0(sp)
 8005234:	dec00204 	addi	sp,sp,8
 8005238:	f800283a 	ret

0800523c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800523c:	defffd04 	addi	sp,sp,-12
 8005240:	df000215 	stw	fp,8(sp)
 8005244:	df000204 	addi	fp,sp,8
 8005248:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800524c:	e0bfff17 	ldw	r2,-4(fp)
 8005250:	10800917 	ldw	r2,36(r2)
 8005254:	10000726 	beq	r2,zero,8005274 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005258:	e0bfff17 	ldw	r2,-4(fp)
 800525c:	10800c17 	ldw	r2,48(r2)
 8005260:	10800017 	ldw	r2,0(r2)
 8005264:	00c00144 	movi	r3,5
 8005268:	1885c83a 	sub	r2,r3,r2
 800526c:	e0bffe15 	stw	r2,-8(fp)
 8005270:	00000106 	br	8005278 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005274:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 8005278:	e0bffe17 	ldw	r2,-8(fp)
	}
 800527c:	e037883a 	mov	sp,fp
 8005280:	df000017 	ldw	fp,0(sp)
 8005284:	dec00104 	addi	sp,sp,4
 8005288:	f800283a 	ret

0800528c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800528c:	defff904 	addi	sp,sp,-28
 8005290:	dfc00615 	stw	ra,24(sp)
 8005294:	df000515 	stw	fp,20(sp)
 8005298:	df000504 	addi	fp,sp,20
 800529c:	e13ffd15 	stw	r4,-12(fp)
 80052a0:	e17ffe15 	stw	r5,-8(fp)
 80052a4:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 80052a8:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ac:	e0bffd17 	ldw	r2,-12(fp)
 80052b0:	10800e17 	ldw	r2,56(r2)
 80052b4:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052b8:	e0bffd17 	ldw	r2,-12(fp)
 80052bc:	10801017 	ldw	r2,64(r2)
 80052c0:	10000b1e 	bne	r2,zero,80052f0 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052c4:	e0bffd17 	ldw	r2,-12(fp)
 80052c8:	10800017 	ldw	r2,0(r2)
 80052cc:	1000481e 	bne	r2,zero,80053f0 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052d0:	e0bffd17 	ldw	r2,-12(fp)
 80052d4:	10800217 	ldw	r2,8(r2)
 80052d8:	1009883a 	mov	r4,r2
 80052dc:	80070b80 	call	80070b8 <xTaskPriorityDisinherit>
 80052e0:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052e4:	e0bffd17 	ldw	r2,-12(fp)
 80052e8:	10000215 	stw	zero,8(r2)
 80052ec:	00004006 	br	80053f0 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052f0:	e0bfff17 	ldw	r2,-4(fp)
 80052f4:	1000191e 	bne	r2,zero,800535c <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052f8:	e0bffd17 	ldw	r2,-12(fp)
 80052fc:	10c00117 	ldw	r3,4(r2)
 8005300:	e0bffd17 	ldw	r2,-12(fp)
 8005304:	10801017 	ldw	r2,64(r2)
 8005308:	100d883a 	mov	r6,r2
 800530c:	e17ffe17 	ldw	r5,-8(fp)
 8005310:	1809883a 	mov	r4,r3
 8005314:	80083080 	call	8008308 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005318:	e0bffd17 	ldw	r2,-12(fp)
 800531c:	10c00117 	ldw	r3,4(r2)
 8005320:	e0bffd17 	ldw	r2,-12(fp)
 8005324:	10801017 	ldw	r2,64(r2)
 8005328:	1887883a 	add	r3,r3,r2
 800532c:	e0bffd17 	ldw	r2,-12(fp)
 8005330:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005334:	e0bffd17 	ldw	r2,-12(fp)
 8005338:	10c00117 	ldw	r3,4(r2)
 800533c:	e0bffd17 	ldw	r2,-12(fp)
 8005340:	10800217 	ldw	r2,8(r2)
 8005344:	18802a36 	bltu	r3,r2,80053f0 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005348:	e0bffd17 	ldw	r2,-12(fp)
 800534c:	10c00017 	ldw	r3,0(r2)
 8005350:	e0bffd17 	ldw	r2,-12(fp)
 8005354:	10c00115 	stw	r3,4(r2)
 8005358:	00002506 	br	80053f0 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800535c:	e0bffd17 	ldw	r2,-12(fp)
 8005360:	10c00317 	ldw	r3,12(r2)
 8005364:	e0bffd17 	ldw	r2,-12(fp)
 8005368:	10801017 	ldw	r2,64(r2)
 800536c:	100d883a 	mov	r6,r2
 8005370:	e17ffe17 	ldw	r5,-8(fp)
 8005374:	1809883a 	mov	r4,r3
 8005378:	80083080 	call	8008308 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800537c:	e0bffd17 	ldw	r2,-12(fp)
 8005380:	10c00317 	ldw	r3,12(r2)
 8005384:	e0bffd17 	ldw	r2,-12(fp)
 8005388:	10801017 	ldw	r2,64(r2)
 800538c:	0085c83a 	sub	r2,zero,r2
 8005390:	1887883a 	add	r3,r3,r2
 8005394:	e0bffd17 	ldw	r2,-12(fp)
 8005398:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800539c:	e0bffd17 	ldw	r2,-12(fp)
 80053a0:	10c00317 	ldw	r3,12(r2)
 80053a4:	e0bffd17 	ldw	r2,-12(fp)
 80053a8:	10800017 	ldw	r2,0(r2)
 80053ac:	1880082e 	bgeu	r3,r2,80053d0 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053b0:	e0bffd17 	ldw	r2,-12(fp)
 80053b4:	10c00217 	ldw	r3,8(r2)
 80053b8:	e0bffd17 	ldw	r2,-12(fp)
 80053bc:	10801017 	ldw	r2,64(r2)
 80053c0:	0085c83a 	sub	r2,zero,r2
 80053c4:	1887883a 	add	r3,r3,r2
 80053c8:	e0bffd17 	ldw	r2,-12(fp)
 80053cc:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053d0:	e0bfff17 	ldw	r2,-4(fp)
 80053d4:	10800098 	cmpnei	r2,r2,2
 80053d8:	1000051e 	bne	r2,zero,80053f0 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053dc:	e0bffc17 	ldw	r2,-16(fp)
 80053e0:	10000326 	beq	r2,zero,80053f0 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053e4:	e0bffc17 	ldw	r2,-16(fp)
 80053e8:	10bfffc4 	addi	r2,r2,-1
 80053ec:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053f0:	e0bffc17 	ldw	r2,-16(fp)
 80053f4:	10c00044 	addi	r3,r2,1
 80053f8:	e0bffd17 	ldw	r2,-12(fp)
 80053fc:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 8005400:	e0bffb17 	ldw	r2,-20(fp)
}
 8005404:	e037883a 	mov	sp,fp
 8005408:	dfc00117 	ldw	ra,4(sp)
 800540c:	df000017 	ldw	fp,0(sp)
 8005410:	dec00204 	addi	sp,sp,8
 8005414:	f800283a 	ret

08005418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005418:	defffc04 	addi	sp,sp,-16
 800541c:	dfc00315 	stw	ra,12(sp)
 8005420:	df000215 	stw	fp,8(sp)
 8005424:	df000204 	addi	fp,sp,8
 8005428:	e13ffe15 	stw	r4,-8(fp)
 800542c:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005430:	e0bffe17 	ldw	r2,-8(fp)
 8005434:	10801017 	ldw	r2,64(r2)
 8005438:	10001826 	beq	r2,zero,800549c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800543c:	e0bffe17 	ldw	r2,-8(fp)
 8005440:	10c00317 	ldw	r3,12(r2)
 8005444:	e0bffe17 	ldw	r2,-8(fp)
 8005448:	10801017 	ldw	r2,64(r2)
 800544c:	1887883a 	add	r3,r3,r2
 8005450:	e0bffe17 	ldw	r2,-8(fp)
 8005454:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005458:	e0bffe17 	ldw	r2,-8(fp)
 800545c:	10c00317 	ldw	r3,12(r2)
 8005460:	e0bffe17 	ldw	r2,-8(fp)
 8005464:	10800217 	ldw	r2,8(r2)
 8005468:	18800436 	bltu	r3,r2,800547c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800546c:	e0bffe17 	ldw	r2,-8(fp)
 8005470:	10c00017 	ldw	r3,0(r2)
 8005474:	e0bffe17 	ldw	r2,-8(fp)
 8005478:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800547c:	e0bffe17 	ldw	r2,-8(fp)
 8005480:	10c00317 	ldw	r3,12(r2)
 8005484:	e0bffe17 	ldw	r2,-8(fp)
 8005488:	10801017 	ldw	r2,64(r2)
 800548c:	100d883a 	mov	r6,r2
 8005490:	180b883a 	mov	r5,r3
 8005494:	e13fff17 	ldw	r4,-4(fp)
 8005498:	80083080 	call	8008308 <memcpy>
	}
}
 800549c:	0001883a 	nop
 80054a0:	e037883a 	mov	sp,fp
 80054a4:	dfc00117 	ldw	ra,4(sp)
 80054a8:	df000017 	ldw	fp,0(sp)
 80054ac:	dec00204 	addi	sp,sp,8
 80054b0:	f800283a 	ret

080054b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054b4:	defffc04 	addi	sp,sp,-16
 80054b8:	dfc00315 	stw	ra,12(sp)
 80054bc:	df000215 	stw	fp,8(sp)
 80054c0:	df000204 	addi	fp,sp,8
 80054c4:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c8:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054cc:	e0bfff17 	ldw	r2,-4(fp)
 80054d0:	10801143 	ldbu	r2,69(r2)
 80054d4:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d8:	00000c06 	br	800550c <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054dc:	e0bfff17 	ldw	r2,-4(fp)
 80054e0:	10800917 	ldw	r2,36(r2)
 80054e4:	10000c26 	beq	r2,zero,8005518 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e8:	e0bfff17 	ldw	r2,-4(fp)
 80054ec:	10800904 	addi	r2,r2,36
 80054f0:	1009883a 	mov	r4,r2
 80054f4:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 80054f8:	10000126 	beq	r2,zero,8005500 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054fc:	8006c500 	call	8006c50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005500:	e0bffe03 	ldbu	r2,-8(fp)
 8005504:	10bfffc4 	addi	r2,r2,-1
 8005508:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800550c:	e0bffe07 	ldb	r2,-8(fp)
 8005510:	00bff216 	blt	zero,r2,80054dc <prvUnlockQueue+0x28>
 8005514:	00000106 	br	800551c <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8005518:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800551c:	e0bfff17 	ldw	r2,-4(fp)
 8005520:	00ffffc4 	movi	r3,-1
 8005524:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 8005528:	80073700 	call	8007370 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800552c:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005530:	e0bfff17 	ldw	r2,-4(fp)
 8005534:	10801103 	ldbu	r2,68(r2)
 8005538:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800553c:	00000c06 	br	8005570 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005540:	e0bfff17 	ldw	r2,-4(fp)
 8005544:	10800417 	ldw	r2,16(r2)
 8005548:	10000c26 	beq	r2,zero,800557c <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554c:	e0bfff17 	ldw	r2,-4(fp)
 8005550:	10800404 	addi	r2,r2,16
 8005554:	1009883a 	mov	r4,r2
 8005558:	80069140 	call	8006914 <xTaskRemoveFromEventList>
 800555c:	10000126 	beq	r2,zero,8005564 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 8005560:	8006c500 	call	8006c50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005564:	e0bffe43 	ldbu	r2,-7(fp)
 8005568:	10bfffc4 	addi	r2,r2,-1
 800556c:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005570:	e0bffe47 	ldb	r2,-7(fp)
 8005574:	00bff216 	blt	zero,r2,8005540 <prvUnlockQueue+0x8c>
 8005578:	00000106 	br	8005580 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 800557c:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005580:	e0bfff17 	ldw	r2,-4(fp)
 8005584:	00ffffc4 	movi	r3,-1
 8005588:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 800558c:	80073700 	call	8007370 <vTaskExitCritical>
}
 8005590:	0001883a 	nop
 8005594:	e037883a 	mov	sp,fp
 8005598:	dfc00117 	ldw	ra,4(sp)
 800559c:	df000017 	ldw	fp,0(sp)
 80055a0:	dec00204 	addi	sp,sp,8
 80055a4:	f800283a 	ret

080055a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055a8:	defffc04 	addi	sp,sp,-16
 80055ac:	dfc00315 	stw	ra,12(sp)
 80055b0:	df000215 	stw	fp,8(sp)
 80055b4:	df000204 	addi	fp,sp,8
 80055b8:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055bc:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055c0:	e0bfff17 	ldw	r2,-4(fp)
 80055c4:	10800e17 	ldw	r2,56(r2)
 80055c8:	1000031e 	bne	r2,zero,80055d8 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 80055cc:	00800044 	movi	r2,1
 80055d0:	e0bffe15 	stw	r2,-8(fp)
 80055d4:	00000106 	br	80055dc <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 80055d8:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 80055dc:	80073700 	call	8007370 <vTaskExitCritical>

	return xReturn;
 80055e0:	e0bffe17 	ldw	r2,-8(fp)
}
 80055e4:	e037883a 	mov	sp,fp
 80055e8:	dfc00117 	ldw	ra,4(sp)
 80055ec:	df000017 	ldw	fp,0(sp)
 80055f0:	dec00204 	addi	sp,sp,8
 80055f4:	f800283a 	ret

080055f8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80055f8:	defffc04 	addi	sp,sp,-16
 80055fc:	df000315 	stw	fp,12(sp)
 8005600:	df000304 	addi	fp,sp,12
 8005604:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8005608:	e0bfff17 	ldw	r2,-4(fp)
 800560c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005610:	e0bffe17 	ldw	r2,-8(fp)
 8005614:	10800e17 	ldw	r2,56(r2)
 8005618:	1000031e 	bne	r2,zero,8005628 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 800561c:	00800044 	movi	r2,1
 8005620:	e0bffd15 	stw	r2,-12(fp)
 8005624:	00000106 	br	800562c <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 8005628:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 800562c:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005630:	e037883a 	mov	sp,fp
 8005634:	df000017 	ldw	fp,0(sp)
 8005638:	dec00104 	addi	sp,sp,4
 800563c:	f800283a 	ret

08005640 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005640:	defffc04 	addi	sp,sp,-16
 8005644:	dfc00315 	stw	ra,12(sp)
 8005648:	df000215 	stw	fp,8(sp)
 800564c:	df000204 	addi	fp,sp,8
 8005650:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005654:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005658:	e0bfff17 	ldw	r2,-4(fp)
 800565c:	10c00e17 	ldw	r3,56(r2)
 8005660:	e0bfff17 	ldw	r2,-4(fp)
 8005664:	10800f17 	ldw	r2,60(r2)
 8005668:	1880031e 	bne	r3,r2,8005678 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 800566c:	00800044 	movi	r2,1
 8005670:	e0bffe15 	stw	r2,-8(fp)
 8005674:	00000106 	br	800567c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 8005678:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 800567c:	80073700 	call	8007370 <vTaskExitCritical>

	return xReturn;
 8005680:	e0bffe17 	ldw	r2,-8(fp)
}
 8005684:	e037883a 	mov	sp,fp
 8005688:	dfc00117 	ldw	ra,4(sp)
 800568c:	df000017 	ldw	fp,0(sp)
 8005690:	dec00204 	addi	sp,sp,8
 8005694:	f800283a 	ret

08005698 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005698:	defffc04 	addi	sp,sp,-16
 800569c:	df000315 	stw	fp,12(sp)
 80056a0:	df000304 	addi	fp,sp,12
 80056a4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 80056a8:	e0bfff17 	ldw	r2,-4(fp)
 80056ac:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b0:	e0bffe17 	ldw	r2,-8(fp)
 80056b4:	10c00e17 	ldw	r3,56(r2)
 80056b8:	e0bffe17 	ldw	r2,-8(fp)
 80056bc:	10800f17 	ldw	r2,60(r2)
 80056c0:	1880031e 	bne	r3,r2,80056d0 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 80056c4:	00800044 	movi	r2,1
 80056c8:	e0bffd15 	stw	r2,-12(fp)
 80056cc:	00000106 	br	80056d4 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 80056d0:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 80056d4:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80056d8:	e037883a 	mov	sp,fp
 80056dc:	df000017 	ldw	fp,0(sp)
 80056e0:	dec00104 	addi	sp,sp,4
 80056e4:	f800283a 	ret

080056e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056e8:	defff304 	addi	sp,sp,-52
 80056ec:	dfc00c15 	stw	ra,48(sp)
 80056f0:	df000b15 	stw	fp,44(sp)
 80056f4:	df000b04 	addi	fp,sp,44
 80056f8:	e13ffc15 	stw	r4,-16(fp)
 80056fc:	e17ffd15 	stw	r5,-12(fp)
 8005700:	3005883a 	mov	r2,r6
 8005704:	e1ffff15 	stw	r7,-4(fp)
 8005708:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800570c:	e0bffe0b 	ldhu	r2,-8(fp)
 8005710:	1085883a 	add	r2,r2,r2
 8005714:	1085883a 	add	r2,r2,r2
 8005718:	1009883a 	mov	r4,r2
 800571c:	8003f080 	call	8003f08 <pvPortMalloc>
 8005720:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 8005724:	e0bffb17 	ldw	r2,-20(fp)
 8005728:	10000c26 	beq	r2,zero,800575c <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800572c:	01001404 	movi	r4,80
 8005730:	8003f080 	call	8003f08 <pvPortMalloc>
 8005734:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 8005738:	e0bff917 	ldw	r2,-28(fp)
 800573c:	10000426 	beq	r2,zero,8005750 <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005740:	e0bff917 	ldw	r2,-28(fp)
 8005744:	e0fffb17 	ldw	r3,-20(fp)
 8005748:	10c00c15 	stw	r3,48(r2)
 800574c:	00000406 	br	8005760 <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005750:	e13ffb17 	ldw	r4,-20(fp)
 8005754:	80040dc0 	call	80040dc <vPortFree>
 8005758:	00000106 	br	8005760 <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800575c:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005760:	e0bff917 	ldw	r2,-28(fp)
 8005764:	10001226 	beq	r2,zero,80057b0 <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005768:	e0fffe0b 	ldhu	r3,-8(fp)
 800576c:	d8000315 	stw	zero,12(sp)
 8005770:	e0bff917 	ldw	r2,-28(fp)
 8005774:	d8800215 	stw	r2,8(sp)
 8005778:	e0800317 	ldw	r2,12(fp)
 800577c:	d8800115 	stw	r2,4(sp)
 8005780:	e0800217 	ldw	r2,8(fp)
 8005784:	d8800015 	stw	r2,0(sp)
 8005788:	e1ffff17 	ldw	r7,-4(fp)
 800578c:	180d883a 	mov	r6,r3
 8005790:	e17ffd17 	ldw	r5,-12(fp)
 8005794:	e13ffc17 	ldw	r4,-16(fp)
 8005798:	80057d00 	call	80057d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579c:	e13ff917 	ldw	r4,-28(fp)
 80057a0:	80059b40 	call	80059b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a4:	00800044 	movi	r2,1
 80057a8:	e0bffa15 	stw	r2,-24(fp)
 80057ac:	00000206 	br	80057b8 <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057b0:	00bfffc4 	movi	r2,-1
 80057b4:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 80057b8:	e0bffa17 	ldw	r2,-24(fp)
	}
 80057bc:	e037883a 	mov	sp,fp
 80057c0:	dfc00117 	ldw	ra,4(sp)
 80057c4:	df000017 	ldw	fp,0(sp)
 80057c8:	dec00204 	addi	sp,sp,8
 80057cc:	f800283a 	ret

080057d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057d0:	defff804 	addi	sp,sp,-32
 80057d4:	dfc00715 	stw	ra,28(sp)
 80057d8:	df000615 	stw	fp,24(sp)
 80057dc:	df000604 	addi	fp,sp,24
 80057e0:	e13ffc15 	stw	r4,-16(fp)
 80057e4:	e17ffd15 	stw	r5,-12(fp)
 80057e8:	e1bffe15 	stw	r6,-8(fp)
 80057ec:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f0:	e0800417 	ldw	r2,16(fp)
 80057f4:	10c00c17 	ldw	r3,48(r2)
 80057f8:	e0bffe17 	ldw	r2,-8(fp)
 80057fc:	1085883a 	add	r2,r2,r2
 8005800:	1085883a 	add	r2,r2,r2
 8005804:	100d883a 	mov	r6,r2
 8005808:	01402944 	movi	r5,165
 800580c:	1809883a 	mov	r4,r3
 8005810:	80084500 	call	8008450 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005814:	e0800417 	ldw	r2,16(fp)
 8005818:	10c00c17 	ldw	r3,48(r2)
 800581c:	e13ffe17 	ldw	r4,-8(fp)
 8005820:	00900034 	movhi	r2,16384
 8005824:	10bfffc4 	addi	r2,r2,-1
 8005828:	2085883a 	add	r2,r4,r2
 800582c:	1085883a 	add	r2,r2,r2
 8005830:	1085883a 	add	r2,r2,r2
 8005834:	1885883a 	add	r2,r3,r2
 8005838:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800583c:	e0fffb17 	ldw	r3,-20(fp)
 8005840:	00bfff04 	movi	r2,-4
 8005844:	1884703a 	and	r2,r3,r2
 8005848:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800584c:	e0bffd17 	ldw	r2,-12(fp)
 8005850:	10001e26 	beq	r2,zero,80058cc <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005854:	e03ffa15 	stw	zero,-24(fp)
 8005858:	00001406 	br	80058ac <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800585c:	e0fffd17 	ldw	r3,-12(fp)
 8005860:	e0bffa17 	ldw	r2,-24(fp)
 8005864:	1885883a 	add	r2,r3,r2
 8005868:	10c00003 	ldbu	r3,0(r2)
 800586c:	e1000417 	ldw	r4,16(fp)
 8005870:	e0bffa17 	ldw	r2,-24(fp)
 8005874:	2085883a 	add	r2,r4,r2
 8005878:	10800d04 	addi	r2,r2,52
 800587c:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005880:	e0fffd17 	ldw	r3,-12(fp)
 8005884:	e0bffa17 	ldw	r2,-24(fp)
 8005888:	1885883a 	add	r2,r3,r2
 800588c:	10800003 	ldbu	r2,0(r2)
 8005890:	10803fcc 	andi	r2,r2,255
 8005894:	1080201c 	xori	r2,r2,128
 8005898:	10bfe004 	addi	r2,r2,-128
 800589c:	10000726 	beq	r2,zero,80058bc <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058a0:	e0bffa17 	ldw	r2,-24(fp)
 80058a4:	10800044 	addi	r2,r2,1
 80058a8:	e0bffa15 	stw	r2,-24(fp)
 80058ac:	e0bffa17 	ldw	r2,-24(fp)
 80058b0:	10800230 	cmpltui	r2,r2,8
 80058b4:	103fe91e 	bne	r2,zero,800585c <prvInitialiseNewTask+0x8c>
 80058b8:	00000106 	br	80058c0 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 80058bc:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058c0:	e0800417 	ldw	r2,16(fp)
 80058c4:	10000ec5 	stb	zero,59(r2)
 80058c8:	00000206 	br	80058d4 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058cc:	e0800417 	ldw	r2,16(fp)
 80058d0:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058d4:	e0800217 	ldw	r2,8(fp)
 80058d8:	10800170 	cmpltui	r2,r2,5
 80058dc:	1000021e 	bne	r2,zero,80058e8 <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058e0:	00800104 	movi	r2,4
 80058e4:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058e8:	e0800417 	ldw	r2,16(fp)
 80058ec:	e0c00217 	ldw	r3,8(fp)
 80058f0:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f4:	e0800417 	ldw	r2,16(fp)
 80058f8:	e0c00217 	ldw	r3,8(fp)
 80058fc:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 8005900:	e0800417 	ldw	r2,16(fp)
 8005904:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005908:	e0800417 	ldw	r2,16(fp)
 800590c:	10800104 	addi	r2,r2,4
 8005910:	1009883a 	mov	r4,r2
 8005914:	80038480 	call	8003848 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005918:	e0800417 	ldw	r2,16(fp)
 800591c:	10800604 	addi	r2,r2,24
 8005920:	1009883a 	mov	r4,r2
 8005924:	80038480 	call	8003848 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005928:	e0800417 	ldw	r2,16(fp)
 800592c:	e0c00417 	ldw	r3,16(fp)
 8005930:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005934:	00c00144 	movi	r3,5
 8005938:	e0800217 	ldw	r2,8(fp)
 800593c:	1887c83a 	sub	r3,r3,r2
 8005940:	e0800417 	ldw	r2,16(fp)
 8005944:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005948:	e0800417 	ldw	r2,16(fp)
 800594c:	e0c00417 	ldw	r3,16(fp)
 8005950:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 8005954:	e0800417 	ldw	r2,16(fp)
 8005958:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800595c:	e0800417 	ldw	r2,16(fp)
 8005960:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005964:	e0800417 	ldw	r2,16(fp)
 8005968:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800596c:	e1bfff17 	ldw	r6,-4(fp)
 8005970:	e17ffc17 	ldw	r5,-16(fp)
 8005974:	e13ffb17 	ldw	r4,-20(fp)
 8005978:	8003a980 	call	8003a98 <pxPortInitialiseStack>
 800597c:	1007883a 	mov	r3,r2
 8005980:	e0800417 	ldw	r2,16(fp)
 8005984:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005988:	e0800317 	ldw	r2,12(fp)
 800598c:	10000326 	beq	r2,zero,800599c <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005990:	e0800317 	ldw	r2,12(fp)
 8005994:	e0c00417 	ldw	r3,16(fp)
 8005998:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599c:	0001883a 	nop
 80059a0:	e037883a 	mov	sp,fp
 80059a4:	dfc00117 	ldw	ra,4(sp)
 80059a8:	df000017 	ldw	fp,0(sp)
 80059ac:	dec00204 	addi	sp,sp,8
 80059b0:	f800283a 	ret

080059b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059b4:	defffd04 	addi	sp,sp,-12
 80059b8:	dfc00215 	stw	ra,8(sp)
 80059bc:	df000115 	stw	fp,4(sp)
 80059c0:	df000104 	addi	fp,sp,4
 80059c4:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059c8:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059cc:	d0a77c17 	ldw	r2,-25104(gp)
 80059d0:	10800044 	addi	r2,r2,1
 80059d4:	d0a77c15 	stw	r2,-25104(gp)
		if( pxCurrentTCB == NULL )
 80059d8:	d0a77817 	ldw	r2,-25120(gp)
 80059dc:	1000071e 	bne	r2,zero,80059fc <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059e0:	e0bfff17 	ldw	r2,-4(fp)
 80059e4:	d0a77815 	stw	r2,-25120(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059e8:	d0a77c17 	ldw	r2,-25104(gp)
 80059ec:	10800058 	cmpnei	r2,r2,1
 80059f0:	10000b1e 	bne	r2,zero,8005a20 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059f4:	8006c940 	call	8006c94 <prvInitialiseTaskLists>
 80059f8:	00000906 	br	8005a20 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059fc:	d0a77f17 	ldw	r2,-25092(gp)
 8005a00:	1000071e 	bne	r2,zero,8005a20 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a04:	d0a77817 	ldw	r2,-25120(gp)
 8005a08:	10800b17 	ldw	r2,44(r2)
 8005a0c:	e0ffff17 	ldw	r3,-4(fp)
 8005a10:	18c00b17 	ldw	r3,44(r3)
 8005a14:	18800236 	bltu	r3,r2,8005a20 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 8005a18:	e0bfff17 	ldw	r2,-4(fp)
 8005a1c:	d0a77815 	stw	r2,-25120(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a20:	d0a78317 	ldw	r2,-25076(gp)
 8005a24:	10800044 	addi	r2,r2,1
 8005a28:	d0a78315 	stw	r2,-25076(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a2c:	e0bfff17 	ldw	r2,-4(fp)
 8005a30:	10800b17 	ldw	r2,44(r2)
 8005a34:	d0e77e17 	ldw	r3,-25096(gp)
 8005a38:	1880032e 	bgeu	r3,r2,8005a48 <prvAddNewTaskToReadyList+0x94>
 8005a3c:	e0bfff17 	ldw	r2,-4(fp)
 8005a40:	10800b17 	ldw	r2,44(r2)
 8005a44:	d0a77e15 	stw	r2,-25096(gp)
 8005a48:	e0bfff17 	ldw	r2,-4(fp)
 8005a4c:	10800b17 	ldw	r2,44(r2)
 8005a50:	01400504 	movi	r5,20
 8005a54:	1009883a 	mov	r4,r2
 8005a58:	80082e00 	call	80082e0 <__mulsi3>
 8005a5c:	1007883a 	mov	r3,r2
 8005a60:	00822074 	movhi	r2,2177
 8005a64:	108a3a04 	addi	r2,r2,10472
 8005a68:	1887883a 	add	r3,r3,r2
 8005a6c:	e0bfff17 	ldw	r2,-4(fp)
 8005a70:	10800104 	addi	r2,r2,4
 8005a74:	100b883a 	mov	r5,r2
 8005a78:	1809883a 	mov	r4,r3
 8005a7c:	80038740 	call	8003874 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a80:	80073700 	call	8007370 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a84:	d0a77f17 	ldw	r2,-25092(gp)
 8005a88:	10000626 	beq	r2,zero,8005aa4 <prvAddNewTaskToReadyList+0xf0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a8c:	d0a77817 	ldw	r2,-25120(gp)
 8005a90:	10c00b17 	ldw	r3,44(r2)
 8005a94:	e0bfff17 	ldw	r2,-4(fp)
 8005a98:	10800b17 	ldw	r2,44(r2)
 8005a9c:	1880012e 	bgeu	r3,r2,8005aa4 <prvAddNewTaskToReadyList+0xf0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aa0:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa4:	0001883a 	nop
 8005aa8:	e037883a 	mov	sp,fp
 8005aac:	dfc00117 	ldw	ra,4(sp)
 8005ab0:	df000017 	ldw	fp,0(sp)
 8005ab4:	dec00204 	addi	sp,sp,8
 8005ab8:	f800283a 	ret

08005abc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005abc:	defffc04 	addi	sp,sp,-16
 8005ac0:	dfc00315 	stw	ra,12(sp)
 8005ac4:	df000215 	stw	fp,8(sp)
 8005ac8:	df000204 	addi	fp,sp,8
 8005acc:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005ad0:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005ad4:	e0bfff17 	ldw	r2,-4(fp)
 8005ad8:	1000021e 	bne	r2,zero,8005ae4 <vTaskDelete+0x28>
 8005adc:	d0a77817 	ldw	r2,-25120(gp)
 8005ae0:	00000106 	br	8005ae8 <vTaskDelete+0x2c>
 8005ae4:	e0bfff17 	ldw	r2,-4(fp)
 8005ae8:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aec:	e0bffe17 	ldw	r2,-8(fp)
 8005af0:	10800104 	addi	r2,r2,4
 8005af4:	1009883a 	mov	r4,r2
 8005af8:	80039d80 	call	80039d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005afc:	e0bffe17 	ldw	r2,-8(fp)
 8005b00:	10800a17 	ldw	r2,40(r2)
 8005b04:	10000426 	beq	r2,zero,8005b18 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b08:	e0bffe17 	ldw	r2,-8(fp)
 8005b0c:	10800604 	addi	r2,r2,24
 8005b10:	1009883a 	mov	r4,r2
 8005b14:	80039d80 	call	80039d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005b18:	d0a78317 	ldw	r2,-25076(gp)
 8005b1c:	10800044 	addi	r2,r2,1
 8005b20:	d0a78315 	stw	r2,-25076(gp)

			if( pxTCB == pxCurrentTCB )
 8005b24:	d0a77817 	ldw	r2,-25120(gp)
 8005b28:	e0fffe17 	ldw	r3,-8(fp)
 8005b2c:	18800a1e 	bne	r3,r2,8005b58 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005b30:	e0bffe17 	ldw	r2,-8(fp)
 8005b34:	10800104 	addi	r2,r2,4
 8005b38:	100b883a 	mov	r5,r2
 8005b3c:	01022074 	movhi	r4,2177
 8005b40:	210a6204 	addi	r4,r4,10632
 8005b44:	80038740 	call	8003874 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005b48:	d0a77b17 	ldw	r2,-25108(gp)
 8005b4c:	10800044 	addi	r2,r2,1
 8005b50:	d0a77b15 	stw	r2,-25108(gp)
 8005b54:	00000606 	br	8005b70 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005b58:	d0a77c17 	ldw	r2,-25104(gp)
 8005b5c:	10bfffc4 	addi	r2,r2,-1
 8005b60:	d0a77c15 	stw	r2,-25104(gp)
				prvDeleteTCB( pxTCB );
 8005b64:	e13ffe17 	ldw	r4,-8(fp)
 8005b68:	8006e980 	call	8006e98 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005b6c:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005b70:	80073700 	call	8007370 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005b74:	d0a77f17 	ldw	r2,-25092(gp)
 8005b78:	10000426 	beq	r2,zero,8005b8c <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 8005b7c:	d0a77817 	ldw	r2,-25120(gp)
 8005b80:	e0fffe17 	ldw	r3,-8(fp)
 8005b84:	1880011e 	bne	r3,r2,8005b8c <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8005b88:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b8c:	0001883a 	nop
 8005b90:	e037883a 	mov	sp,fp
 8005b94:	dfc00117 	ldw	ra,4(sp)
 8005b98:	df000017 	ldw	fp,0(sp)
 8005b9c:	dec00204 	addi	sp,sp,8
 8005ba0:	f800283a 	ret

08005ba4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005ba4:	defff804 	addi	sp,sp,-32
 8005ba8:	dfc00715 	stw	ra,28(sp)
 8005bac:	df000615 	stw	fp,24(sp)
 8005bb0:	df000604 	addi	fp,sp,24
 8005bb4:	e13ffe15 	stw	r4,-8(fp)
 8005bb8:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005bbc:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 8005bc0:	80063580 	call	8006358 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005bc4:	d0a77d17 	ldw	r2,-25100(gp)
 8005bc8:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005bcc:	e0bffe17 	ldw	r2,-8(fp)
 8005bd0:	10c00017 	ldw	r3,0(r2)
 8005bd4:	e0bfff17 	ldw	r2,-4(fp)
 8005bd8:	1885883a 	add	r2,r3,r2
 8005bdc:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 8005be0:	e0bffe17 	ldw	r2,-8(fp)
 8005be4:	10800017 	ldw	r2,0(r2)
 8005be8:	e0fffb17 	ldw	r3,-20(fp)
 8005bec:	18800a2e 	bgeu	r3,r2,8005c18 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005bf0:	e0bffe17 	ldw	r2,-8(fp)
 8005bf4:	10800017 	ldw	r2,0(r2)
 8005bf8:	e0fffc17 	ldw	r3,-16(fp)
 8005bfc:	18800f2e 	bgeu	r3,r2,8005c3c <vTaskDelayUntil+0x98>
 8005c00:	e0bffc17 	ldw	r2,-16(fp)
 8005c04:	e0fffb17 	ldw	r3,-20(fp)
 8005c08:	18800c2e 	bgeu	r3,r2,8005c3c <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 8005c0c:	00800044 	movi	r2,1
 8005c10:	e0bffa15 	stw	r2,-24(fp)
 8005c14:	00000906 	br	8005c3c <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c18:	e0bffe17 	ldw	r2,-8(fp)
 8005c1c:	10800017 	ldw	r2,0(r2)
 8005c20:	e0fffc17 	ldw	r3,-16(fp)
 8005c24:	18800336 	bltu	r3,r2,8005c34 <vTaskDelayUntil+0x90>
 8005c28:	e0bffc17 	ldw	r2,-16(fp)
 8005c2c:	e0fffb17 	ldw	r3,-20(fp)
 8005c30:	1880022e 	bgeu	r3,r2,8005c3c <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 8005c34:	00800044 	movi	r2,1
 8005c38:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c3c:	e0bffe17 	ldw	r2,-8(fp)
 8005c40:	e0fffc17 	ldw	r3,-16(fp)
 8005c44:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 8005c48:	e0bffa17 	ldw	r2,-24(fp)
 8005c4c:	10000626 	beq	r2,zero,8005c68 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005c50:	e0fffc17 	ldw	r3,-16(fp)
 8005c54:	e0bffb17 	ldw	r2,-20(fp)
 8005c58:	1885c83a 	sub	r2,r3,r2
 8005c5c:	000b883a 	mov	r5,zero
 8005c60:	1009883a 	mov	r4,r2
 8005c64:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005c68:	80063840 	call	8006384 <xTaskResumeAll>
 8005c6c:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c70:	e0bffd17 	ldw	r2,-12(fp)
 8005c74:	1000011e 	bne	r2,zero,8005c7c <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 8005c78:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c7c:	0001883a 	nop
 8005c80:	e037883a 	mov	sp,fp
 8005c84:	dfc00117 	ldw	ra,4(sp)
 8005c88:	df000017 	ldw	fp,0(sp)
 8005c8c:	dec00204 	addi	sp,sp,8
 8005c90:	f800283a 	ret

08005c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c94:	defffc04 	addi	sp,sp,-16
 8005c98:	dfc00315 	stw	ra,12(sp)
 8005c9c:	df000215 	stw	fp,8(sp)
 8005ca0:	df000204 	addi	fp,sp,8
 8005ca4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ca8:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cac:	e0bfff17 	ldw	r2,-4(fp)
 8005cb0:	10000626 	beq	r2,zero,8005ccc <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8005cb4:	80063580 	call	8006358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cb8:	000b883a 	mov	r5,zero
 8005cbc:	e13fff17 	ldw	r4,-4(fp)
 8005cc0:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cc4:	80063840 	call	8006384 <xTaskResumeAll>
 8005cc8:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ccc:	e0bffe17 	ldw	r2,-8(fp)
 8005cd0:	1000011e 	bne	r2,zero,8005cd8 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 8005cd4:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cd8:	0001883a 	nop
 8005cdc:	e037883a 	mov	sp,fp
 8005ce0:	dfc00117 	ldw	ra,4(sp)
 8005ce4:	df000017 	ldw	fp,0(sp)
 8005ce8:	dec00204 	addi	sp,sp,8
 8005cec:	f800283a 	ret

08005cf0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8005cf0:	defffb04 	addi	sp,sp,-20
 8005cf4:	dfc00415 	stw	ra,16(sp)
 8005cf8:	df000315 	stw	fp,12(sp)
 8005cfc:	df000304 	addi	fp,sp,12
 8005d00:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8005d04:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005d08:	e0bfff17 	ldw	r2,-4(fp)
 8005d0c:	1000021e 	bne	r2,zero,8005d18 <uxTaskPriorityGet+0x28>
 8005d10:	d0a77817 	ldw	r2,-25120(gp)
 8005d14:	00000106 	br	8005d1c <uxTaskPriorityGet+0x2c>
 8005d18:	e0bfff17 	ldw	r2,-4(fp)
 8005d1c:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 8005d20:	e0bffd17 	ldw	r2,-12(fp)
 8005d24:	10800b17 	ldw	r2,44(r2)
 8005d28:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 8005d2c:	80073700 	call	8007370 <vTaskExitCritical>

		return uxReturn;
 8005d30:	e0bffe17 	ldw	r2,-8(fp)
	}
 8005d34:	e037883a 	mov	sp,fp
 8005d38:	dfc00117 	ldw	ra,4(sp)
 8005d3c:	df000017 	ldw	fp,0(sp)
 8005d40:	dec00204 	addi	sp,sp,8
 8005d44:	f800283a 	ret

08005d48 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8005d48:	defffb04 	addi	sp,sp,-20
 8005d4c:	df000415 	stw	fp,16(sp)
 8005d50:	df000404 	addi	fp,sp,16
 8005d54:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d58:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005d5c:	e0bfff17 	ldw	r2,-4(fp)
 8005d60:	1000021e 	bne	r2,zero,8005d6c <uxTaskPriorityGetFromISR+0x24>
 8005d64:	d0a77817 	ldw	r2,-25120(gp)
 8005d68:	00000106 	br	8005d70 <uxTaskPriorityGetFromISR+0x28>
 8005d6c:	e0bfff17 	ldw	r2,-4(fp)
 8005d70:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 8005d74:	e0bffd17 	ldw	r2,-12(fp)
 8005d78:	10800b17 	ldw	r2,44(r2)
 8005d7c:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8005d80:	e0bffe17 	ldw	r2,-8(fp)
	}
 8005d84:	e037883a 	mov	sp,fp
 8005d88:	df000017 	ldw	fp,0(sp)
 8005d8c:	dec00104 	addi	sp,sp,4
 8005d90:	f800283a 	ret

08005d94 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005d94:	defff704 	addi	sp,sp,-36
 8005d98:	dfc00815 	stw	ra,32(sp)
 8005d9c:	df000715 	stw	fp,28(sp)
 8005da0:	dc000615 	stw	r16,24(sp)
 8005da4:	df000704 	addi	fp,sp,28
 8005da8:	e13ffd15 	stw	r4,-12(fp)
 8005dac:	e17ffe15 	stw	r5,-8(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005db0:	e03ff915 	stw	zero,-28(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005db4:	e0bffe17 	ldw	r2,-8(fp)
 8005db8:	10800170 	cmpltui	r2,r2,5
 8005dbc:	1000021e 	bne	r2,zero,8005dc8 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dc0:	00800104 	movi	r2,4
 8005dc4:	e0bffe15 	stw	r2,-8(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005dc8:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005dcc:	e0bffd17 	ldw	r2,-12(fp)
 8005dd0:	1000021e 	bne	r2,zero,8005ddc <vTaskPrioritySet+0x48>
 8005dd4:	d0a77817 	ldw	r2,-25120(gp)
 8005dd8:	00000106 	br	8005de0 <vTaskPrioritySet+0x4c>
 8005ddc:	e0bffd17 	ldw	r2,-12(fp)
 8005de0:	e0bffa15 	stw	r2,-24(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005de4:	e0bffa17 	ldw	r2,-24(fp)
 8005de8:	10801017 	ldw	r2,64(r2)
 8005dec:	e0bffb15 	stw	r2,-20(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005df0:	e0fffb17 	ldw	r3,-20(fp)
 8005df4:	e0bffe17 	ldw	r2,-8(fp)
 8005df8:	18804e26 	beq	r3,r2,8005f34 <vTaskPrioritySet+0x1a0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005dfc:	e0bffe17 	ldw	r2,-8(fp)
 8005e00:	e0fffb17 	ldw	r3,-20(fp)
 8005e04:	18800a2e 	bgeu	r3,r2,8005e30 <vTaskPrioritySet+0x9c>
				{
					if( pxTCB != pxCurrentTCB )
 8005e08:	d0a77817 	ldw	r2,-25120(gp)
 8005e0c:	e0fffa17 	ldw	r3,-24(fp)
 8005e10:	18800c26 	beq	r3,r2,8005e44 <vTaskPrioritySet+0xb0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005e14:	d0a77817 	ldw	r2,-25120(gp)
 8005e18:	10800b17 	ldw	r2,44(r2)
 8005e1c:	e0fffe17 	ldw	r3,-8(fp)
 8005e20:	18800836 	bltu	r3,r2,8005e44 <vTaskPrioritySet+0xb0>
						{
							xYieldRequired = pdTRUE;
 8005e24:	00800044 	movi	r2,1
 8005e28:	e0bff915 	stw	r2,-28(fp)
 8005e2c:	00000506 	br	8005e44 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005e30:	d0a77817 	ldw	r2,-25120(gp)
 8005e34:	e0fffa17 	ldw	r3,-24(fp)
 8005e38:	1880021e 	bne	r3,r2,8005e44 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005e3c:	00800044 	movi	r2,1
 8005e40:	e0bff915 	stw	r2,-28(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e44:	e0bffa17 	ldw	r2,-24(fp)
 8005e48:	10800b17 	ldw	r2,44(r2)
 8005e4c:	e0bffc15 	stw	r2,-16(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005e50:	e0bffa17 	ldw	r2,-24(fp)
 8005e54:	10c01017 	ldw	r3,64(r2)
 8005e58:	e0bffa17 	ldw	r2,-24(fp)
 8005e5c:	10800b17 	ldw	r2,44(r2)
 8005e60:	1880031e 	bne	r3,r2,8005e70 <vTaskPrioritySet+0xdc>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005e64:	e0bffa17 	ldw	r2,-24(fp)
 8005e68:	e0fffe17 	ldw	r3,-8(fp)
 8005e6c:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005e70:	e0bffa17 	ldw	r2,-24(fp)
 8005e74:	e0fffe17 	ldw	r3,-8(fp)
 8005e78:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e7c:	e0bffa17 	ldw	r2,-24(fp)
 8005e80:	10800617 	ldw	r2,24(r2)
 8005e84:	10000516 	blt	r2,zero,8005e9c <vTaskPrioritySet+0x108>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e88:	00c00144 	movi	r3,5
 8005e8c:	e0bffe17 	ldw	r2,-8(fp)
 8005e90:	1887c83a 	sub	r3,r3,r2
 8005e94:	e0bffa17 	ldw	r2,-24(fp)
 8005e98:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e9c:	e0bffa17 	ldw	r2,-24(fp)
 8005ea0:	14000517 	ldw	r16,20(r2)
 8005ea4:	01400504 	movi	r5,20
 8005ea8:	e13ffc17 	ldw	r4,-16(fp)
 8005eac:	80082e00 	call	80082e0 <__mulsi3>
 8005eb0:	1007883a 	mov	r3,r2
 8005eb4:	00822074 	movhi	r2,2177
 8005eb8:	108a3a04 	addi	r2,r2,10472
 8005ebc:	1885883a 	add	r2,r3,r2
 8005ec0:	8080191e 	bne	r16,r2,8005f28 <vTaskPrioritySet+0x194>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec4:	e0bffa17 	ldw	r2,-24(fp)
 8005ec8:	10800104 	addi	r2,r2,4
 8005ecc:	1009883a 	mov	r4,r2
 8005ed0:	80039d80 	call	80039d8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005ed4:	e0bffa17 	ldw	r2,-24(fp)
 8005ed8:	10800b17 	ldw	r2,44(r2)
 8005edc:	d0e77e17 	ldw	r3,-25096(gp)
 8005ee0:	1880032e 	bgeu	r3,r2,8005ef0 <vTaskPrioritySet+0x15c>
 8005ee4:	e0bffa17 	ldw	r2,-24(fp)
 8005ee8:	10800b17 	ldw	r2,44(r2)
 8005eec:	d0a77e15 	stw	r2,-25096(gp)
 8005ef0:	e0bffa17 	ldw	r2,-24(fp)
 8005ef4:	10800b17 	ldw	r2,44(r2)
 8005ef8:	01400504 	movi	r5,20
 8005efc:	1009883a 	mov	r4,r2
 8005f00:	80082e00 	call	80082e0 <__mulsi3>
 8005f04:	1007883a 	mov	r3,r2
 8005f08:	00822074 	movhi	r2,2177
 8005f0c:	108a3a04 	addi	r2,r2,10472
 8005f10:	1887883a 	add	r3,r3,r2
 8005f14:	e0bffa17 	ldw	r2,-24(fp)
 8005f18:	10800104 	addi	r2,r2,4
 8005f1c:	100b883a 	mov	r5,r2
 8005f20:	1809883a 	mov	r4,r3
 8005f24:	80038740 	call	8003874 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005f28:	e0bff917 	ldw	r2,-28(fp)
 8005f2c:	10000126 	beq	r2,zero,8005f34 <vTaskPrioritySet+0x1a0>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005f30:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005f34:	80073700 	call	8007370 <vTaskExitCritical>
	}
 8005f38:	0001883a 	nop
 8005f3c:	e6ffff04 	addi	sp,fp,-4
 8005f40:	dfc00217 	ldw	ra,8(sp)
 8005f44:	df000117 	ldw	fp,4(sp)
 8005f48:	dc000017 	ldw	r16,0(sp)
 8005f4c:	dec00304 	addi	sp,sp,12
 8005f50:	f800283a 	ret

08005f54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005f54:	defffc04 	addi	sp,sp,-16
 8005f58:	dfc00315 	stw	ra,12(sp)
 8005f5c:	df000215 	stw	fp,8(sp)
 8005f60:	df000204 	addi	fp,sp,8
 8005f64:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f68:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f6c:	e0bfff17 	ldw	r2,-4(fp)
 8005f70:	1000021e 	bne	r2,zero,8005f7c <vTaskSuspend+0x28>
 8005f74:	d0a77817 	ldw	r2,-25120(gp)
 8005f78:	00000106 	br	8005f80 <vTaskSuspend+0x2c>
 8005f7c:	e0bfff17 	ldw	r2,-4(fp)
 8005f80:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f84:	e0bffe17 	ldw	r2,-8(fp)
 8005f88:	10800104 	addi	r2,r2,4
 8005f8c:	1009883a 	mov	r4,r2
 8005f90:	80039d80 	call	80039d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f94:	e0bffe17 	ldw	r2,-8(fp)
 8005f98:	10800a17 	ldw	r2,40(r2)
 8005f9c:	10000426 	beq	r2,zero,8005fb0 <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fa0:	e0bffe17 	ldw	r2,-8(fp)
 8005fa4:	10800604 	addi	r2,r2,24
 8005fa8:	1009883a 	mov	r4,r2
 8005fac:	80039d80 	call	80039d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005fb0:	e0bffe17 	ldw	r2,-8(fp)
 8005fb4:	10800104 	addi	r2,r2,4
 8005fb8:	100b883a 	mov	r5,r2
 8005fbc:	01022074 	movhi	r4,2177
 8005fc0:	210a6704 	addi	r4,r4,10652
 8005fc4:	80038740 	call	8003874 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005fc8:	e0bffe17 	ldw	r2,-8(fp)
 8005fcc:	10801303 	ldbu	r2,76(r2)
 8005fd0:	10803fcc 	andi	r2,r2,255
 8005fd4:	10800058 	cmpnei	r2,r2,1
 8005fd8:	1000021e 	bne	r2,zero,8005fe4 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fdc:	e0bffe17 	ldw	r2,-8(fp)
 8005fe0:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005fe4:	80073700 	call	8007370 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005fe8:	d0a77f17 	ldw	r2,-25092(gp)
 8005fec:	10000326 	beq	r2,zero,8005ffc <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005ff0:	800731c0 	call	800731c <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005ff4:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005ff8:	80073700 	call	8007370 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005ffc:	d0a77817 	ldw	r2,-25120(gp)
 8006000:	e0fffe17 	ldw	r3,-8(fp)
 8006004:	18800c1e 	bne	r3,r2,8006038 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 8006008:	d0a77f17 	ldw	r2,-25092(gp)
 800600c:	10000226 	beq	r2,zero,8006018 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8006010:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006014:	00000806 	br	8006038 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006018:	00822074 	movhi	r2,2177
 800601c:	108a6704 	addi	r2,r2,10652
 8006020:	10c00017 	ldw	r3,0(r2)
 8006024:	d0a77c17 	ldw	r2,-25104(gp)
 8006028:	1880021e 	bne	r3,r2,8006034 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 800602c:	d0277815 	stw	zero,-25120(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006030:	00000106 	br	8006038 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 8006034:	80067680 	call	8006768 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006038:	0001883a 	nop
 800603c:	e037883a 	mov	sp,fp
 8006040:	dfc00117 	ldw	ra,4(sp)
 8006044:	df000017 	ldw	fp,0(sp)
 8006048:	dec00204 	addi	sp,sp,8
 800604c:	f800283a 	ret

08006050 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006050:	defffc04 	addi	sp,sp,-16
 8006054:	df000315 	stw	fp,12(sp)
 8006058:	df000304 	addi	fp,sp,12
 800605c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 8006060:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 8006064:	e0bfff17 	ldw	r2,-4(fp)
 8006068:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800606c:	e0bffe17 	ldw	r2,-8(fp)
 8006070:	10c00517 	ldw	r3,20(r2)
 8006074:	00822074 	movhi	r2,2177
 8006078:	108a6704 	addi	r2,r2,10652
 800607c:	18800a1e 	bne	r3,r2,80060a8 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006080:	e0bffe17 	ldw	r2,-8(fp)
 8006084:	10c00a17 	ldw	r3,40(r2)
 8006088:	00822074 	movhi	r2,2177
 800608c:	108a5d04 	addi	r2,r2,10612
 8006090:	18800526 	beq	r3,r2,80060a8 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006094:	e0bffe17 	ldw	r2,-8(fp)
 8006098:	10800a17 	ldw	r2,40(r2)
 800609c:	1000021e 	bne	r2,zero,80060a8 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 80060a0:	00800044 	movi	r2,1
 80060a4:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060a8:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80060ac:	e037883a 	mov	sp,fp
 80060b0:	df000017 	ldw	fp,0(sp)
 80060b4:	dec00104 	addi	sp,sp,4
 80060b8:	f800283a 	ret

080060bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80060bc:	defffc04 	addi	sp,sp,-16
 80060c0:	dfc00315 	stw	ra,12(sp)
 80060c4:	df000215 	stw	fp,8(sp)
 80060c8:	df000204 	addi	fp,sp,8
 80060cc:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 80060d0:	e0bfff17 	ldw	r2,-4(fp)
 80060d4:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80060d8:	d0a77817 	ldw	r2,-25120(gp)
 80060dc:	e0fffe17 	ldw	r3,-8(fp)
 80060e0:	18802626 	beq	r3,r2,800617c <vTaskResume+0xc0>
 80060e4:	e0bffe17 	ldw	r2,-8(fp)
 80060e8:	10002426 	beq	r2,zero,800617c <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 80060ec:	800731c0 	call	800731c <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80060f0:	e13ffe17 	ldw	r4,-8(fp)
 80060f4:	80060500 	call	8006050 <prvTaskIsTaskSuspended>
 80060f8:	10001f26 	beq	r2,zero,8006178 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80060fc:	e0bffe17 	ldw	r2,-8(fp)
 8006100:	10800104 	addi	r2,r2,4
 8006104:	1009883a 	mov	r4,r2
 8006108:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800610c:	e0bffe17 	ldw	r2,-8(fp)
 8006110:	10800b17 	ldw	r2,44(r2)
 8006114:	d0e77e17 	ldw	r3,-25096(gp)
 8006118:	1880032e 	bgeu	r3,r2,8006128 <vTaskResume+0x6c>
 800611c:	e0bffe17 	ldw	r2,-8(fp)
 8006120:	10800b17 	ldw	r2,44(r2)
 8006124:	d0a77e15 	stw	r2,-25096(gp)
 8006128:	e0bffe17 	ldw	r2,-8(fp)
 800612c:	10800b17 	ldw	r2,44(r2)
 8006130:	01400504 	movi	r5,20
 8006134:	1009883a 	mov	r4,r2
 8006138:	80082e00 	call	80082e0 <__mulsi3>
 800613c:	1007883a 	mov	r3,r2
 8006140:	00822074 	movhi	r2,2177
 8006144:	108a3a04 	addi	r2,r2,10472
 8006148:	1887883a 	add	r3,r3,r2
 800614c:	e0bffe17 	ldw	r2,-8(fp)
 8006150:	10800104 	addi	r2,r2,4
 8006154:	100b883a 	mov	r5,r2
 8006158:	1809883a 	mov	r4,r3
 800615c:	80038740 	call	8003874 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006160:	e0bffe17 	ldw	r2,-8(fp)
 8006164:	10c00b17 	ldw	r3,44(r2)
 8006168:	d0a77817 	ldw	r2,-25120(gp)
 800616c:	10800b17 	ldw	r2,44(r2)
 8006170:	18800136 	bltu	r3,r2,8006178 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006174:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006178:	80073700 	call	8007370 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800617c:	0001883a 	nop
 8006180:	e037883a 	mov	sp,fp
 8006184:	dfc00117 	ldw	ra,4(sp)
 8006188:	df000017 	ldw	fp,0(sp)
 800618c:	dec00204 	addi	sp,sp,8
 8006190:	f800283a 	ret

08006194 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006194:	defffa04 	addi	sp,sp,-24
 8006198:	dfc00515 	stw	ra,20(sp)
 800619c:	df000415 	stw	fp,16(sp)
 80061a0:	df000404 	addi	fp,sp,16
 80061a4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 80061a8:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 80061ac:	e0bfff17 	ldw	r2,-4(fp)
 80061b0:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061b4:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80061b8:	e13ffd17 	ldw	r4,-12(fp)
 80061bc:	80060500 	call	8006050 <prvTaskIsTaskSuspended>
 80061c0:	10002926 	beq	r2,zero,8006268 <xTaskResumeFromISR+0xd4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061c4:	d0a78617 	ldw	r2,-25064(gp)
 80061c8:	1000211e 	bne	r2,zero,8006250 <xTaskResumeFromISR+0xbc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061cc:	e0bffd17 	ldw	r2,-12(fp)
 80061d0:	10c00b17 	ldw	r3,44(r2)
 80061d4:	d0a77817 	ldw	r2,-25120(gp)
 80061d8:	10800b17 	ldw	r2,44(r2)
 80061dc:	18800236 	bltu	r3,r2,80061e8 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 80061e0:	00800044 	movi	r2,1
 80061e4:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e8:	e0bffd17 	ldw	r2,-12(fp)
 80061ec:	10800104 	addi	r2,r2,4
 80061f0:	1009883a 	mov	r4,r2
 80061f4:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061f8:	e0bffd17 	ldw	r2,-12(fp)
 80061fc:	10800b17 	ldw	r2,44(r2)
 8006200:	d0e77e17 	ldw	r3,-25096(gp)
 8006204:	1880032e 	bgeu	r3,r2,8006214 <xTaskResumeFromISR+0x80>
 8006208:	e0bffd17 	ldw	r2,-12(fp)
 800620c:	10800b17 	ldw	r2,44(r2)
 8006210:	d0a77e15 	stw	r2,-25096(gp)
 8006214:	e0bffd17 	ldw	r2,-12(fp)
 8006218:	10800b17 	ldw	r2,44(r2)
 800621c:	01400504 	movi	r5,20
 8006220:	1009883a 	mov	r4,r2
 8006224:	80082e00 	call	80082e0 <__mulsi3>
 8006228:	1007883a 	mov	r3,r2
 800622c:	00822074 	movhi	r2,2177
 8006230:	108a3a04 	addi	r2,r2,10472
 8006234:	1887883a 	add	r3,r3,r2
 8006238:	e0bffd17 	ldw	r2,-12(fp)
 800623c:	10800104 	addi	r2,r2,4
 8006240:	100b883a 	mov	r5,r2
 8006244:	1809883a 	mov	r4,r3
 8006248:	80038740 	call	8003874 <vListInsertEnd>
 800624c:	00000606 	br	8006268 <xTaskResumeFromISR+0xd4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006250:	e0bffd17 	ldw	r2,-12(fp)
 8006254:	10800604 	addi	r2,r2,24
 8006258:	100b883a 	mov	r5,r2
 800625c:	01022074 	movhi	r4,2177
 8006260:	210a5d04 	addi	r4,r4,10612
 8006264:	80038740 	call	8003874 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006268:	e0bffc17 	ldw	r2,-16(fp)
	}
 800626c:	e037883a 	mov	sp,fp
 8006270:	dfc00117 	ldw	ra,4(sp)
 8006274:	df000017 	ldw	fp,0(sp)
 8006278:	dec00204 	addi	sp,sp,8
 800627c:	f800283a 	ret

08006280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006280:	defffa04 	addi	sp,sp,-24
 8006284:	dfc00515 	stw	ra,20(sp)
 8006288:	df000415 	stw	fp,16(sp)
 800628c:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006290:	d0a78504 	addi	r2,gp,-25068
 8006294:	d8800115 	stw	r2,4(sp)
 8006298:	d8000015 	stw	zero,0(sp)
 800629c:	000f883a 	mov	r7,zero
 80062a0:	01810004 	movi	r6,1024
 80062a4:	01420074 	movhi	r5,2049
 80062a8:	297b6604 	addi	r5,r5,-4712
 80062ac:	01020034 	movhi	r4,2048
 80062b0:	211b1e04 	addi	r4,r4,27768
 80062b4:	80056e80 	call	80056e8 <xTaskCreate>
 80062b8:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062bc:	e0bffe17 	ldw	r2,-8(fp)
 80062c0:	10800058 	cmpnei	r2,r2,1
 80062c4:	10000c1e 	bne	r2,zero,80062f8 <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80062c8:	0005303a 	rdctl	r2,status
 80062cc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80062d0:	e0ffff17 	ldw	r3,-4(fp)
 80062d4:	00bfff84 	movi	r2,-2
 80062d8:	1884703a 	and	r2,r3,r2
 80062dc:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e0:	00bfffc4 	movi	r2,-1
 80062e4:	d0a78415 	stw	r2,-25072(gp)
		xSchedulerRunning = pdTRUE;
 80062e8:	00800044 	movi	r2,1
 80062ec:	d0a77f15 	stw	r2,-25092(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062f0:	d0277d15 	stw	zero,-25100(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062f4:	8003b780 	call	8003b78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062f8:	0001883a 	nop
 80062fc:	e037883a 	mov	sp,fp
 8006300:	dfc00117 	ldw	ra,4(sp)
 8006304:	df000017 	ldw	fp,0(sp)
 8006308:	dec00204 	addi	sp,sp,8
 800630c:	f800283a 	ret

08006310 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8006310:	defffd04 	addi	sp,sp,-12
 8006314:	dfc00215 	stw	ra,8(sp)
 8006318:	df000115 	stw	fp,4(sp)
 800631c:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006320:	0005303a 	rdctl	r2,status
 8006324:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006328:	e0ffff17 	ldw	r3,-4(fp)
 800632c:	00bfff84 	movi	r2,-2
 8006330:	1884703a 	and	r2,r3,r2
 8006334:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8006338:	d0277f15 	stw	zero,-25092(gp)
	vPortEndScheduler();
 800633c:	8003bb00 	call	8003bb0 <vPortEndScheduler>
}
 8006340:	0001883a 	nop
 8006344:	e037883a 	mov	sp,fp
 8006348:	dfc00117 	ldw	ra,4(sp)
 800634c:	df000017 	ldw	fp,0(sp)
 8006350:	dec00204 	addi	sp,sp,8
 8006354:	f800283a 	ret

08006358 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006358:	deffff04 	addi	sp,sp,-4
 800635c:	df000015 	stw	fp,0(sp)
 8006360:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006364:	d0a78617 	ldw	r2,-25064(gp)
 8006368:	10800044 	addi	r2,r2,1
 800636c:	d0a78615 	stw	r2,-25064(gp)
	portMEMORY_BARRIER();
}
 8006370:	0001883a 	nop
 8006374:	e037883a 	mov	sp,fp
 8006378:	df000017 	ldw	fp,0(sp)
 800637c:	dec00104 	addi	sp,sp,4
 8006380:	f800283a 	ret

08006384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006384:	defffb04 	addi	sp,sp,-20
 8006388:	dfc00415 	stw	ra,16(sp)
 800638c:	df000315 	stw	fp,12(sp)
 8006390:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 8006394:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 8006398:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800639c:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 80063a0:	d0a78617 	ldw	r2,-25064(gp)
 80063a4:	10bfffc4 	addi	r2,r2,-1
 80063a8:	d0a78615 	stw	r2,-25064(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ac:	d0a78617 	ldw	r2,-25064(gp)
 80063b0:	1000461e 	bne	r2,zero,80064cc <xTaskResumeAll+0x148>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063b4:	d0a77c17 	ldw	r2,-25104(gp)
 80063b8:	10004426 	beq	r2,zero,80064cc <xTaskResumeAll+0x148>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063bc:	00002906 	br	8006464 <xTaskResumeAll+0xe0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c0:	00822074 	movhi	r2,2177
 80063c4:	108a5d04 	addi	r2,r2,10612
 80063c8:	10800317 	ldw	r2,12(r2)
 80063cc:	10800317 	ldw	r2,12(r2)
 80063d0:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063d4:	e0bffd17 	ldw	r2,-12(fp)
 80063d8:	10800604 	addi	r2,r2,24
 80063dc:	1009883a 	mov	r4,r2
 80063e0:	80039d80 	call	80039d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e4:	e0bffd17 	ldw	r2,-12(fp)
 80063e8:	10800104 	addi	r2,r2,4
 80063ec:	1009883a 	mov	r4,r2
 80063f0:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063f4:	e0bffd17 	ldw	r2,-12(fp)
 80063f8:	10800b17 	ldw	r2,44(r2)
 80063fc:	d0e77e17 	ldw	r3,-25096(gp)
 8006400:	1880032e 	bgeu	r3,r2,8006410 <xTaskResumeAll+0x8c>
 8006404:	e0bffd17 	ldw	r2,-12(fp)
 8006408:	10800b17 	ldw	r2,44(r2)
 800640c:	d0a77e15 	stw	r2,-25096(gp)
 8006410:	e0bffd17 	ldw	r2,-12(fp)
 8006414:	10800b17 	ldw	r2,44(r2)
 8006418:	01400504 	movi	r5,20
 800641c:	1009883a 	mov	r4,r2
 8006420:	80082e00 	call	80082e0 <__mulsi3>
 8006424:	1007883a 	mov	r3,r2
 8006428:	00822074 	movhi	r2,2177
 800642c:	108a3a04 	addi	r2,r2,10472
 8006430:	1887883a 	add	r3,r3,r2
 8006434:	e0bffd17 	ldw	r2,-12(fp)
 8006438:	10800104 	addi	r2,r2,4
 800643c:	100b883a 	mov	r5,r2
 8006440:	1809883a 	mov	r4,r3
 8006444:	80038740 	call	8003874 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006448:	e0bffd17 	ldw	r2,-12(fp)
 800644c:	10c00b17 	ldw	r3,44(r2)
 8006450:	d0a77817 	ldw	r2,-25120(gp)
 8006454:	10800b17 	ldw	r2,44(r2)
 8006458:	18800236 	bltu	r3,r2,8006464 <xTaskResumeAll+0xe0>
					{
						xYieldPending = pdTRUE;
 800645c:	00800044 	movi	r2,1
 8006460:	d0a78115 	stw	r2,-25084(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006464:	00822074 	movhi	r2,2177
 8006468:	108a5d04 	addi	r2,r2,10612
 800646c:	10800017 	ldw	r2,0(r2)
 8006470:	103fd31e 	bne	r2,zero,80063c0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006474:	e0bffd17 	ldw	r2,-12(fp)
 8006478:	10000126 	beq	r2,zero,8006480 <xTaskResumeAll+0xfc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800647c:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006480:	d0a78017 	ldw	r2,-25088(gp)
 8006484:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006488:	e0bfff17 	ldw	r2,-4(fp)
 800648c:	10000a26 	beq	r2,zero,80064b8 <xTaskResumeAll+0x134>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006490:	800659c0 	call	800659c <xTaskIncrementTick>
 8006494:	10000226 	beq	r2,zero,80064a0 <xTaskResumeAll+0x11c>
							{
								xYieldPending = pdTRUE;
 8006498:	00800044 	movi	r2,1
 800649c:	d0a78115 	stw	r2,-25084(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064a0:	e0bfff17 	ldw	r2,-4(fp)
 80064a4:	10bfffc4 	addi	r2,r2,-1
 80064a8:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064ac:	e0bfff17 	ldw	r2,-4(fp)
 80064b0:	103ff71e 	bne	r2,zero,8006490 <xTaskResumeAll+0x10c>

						uxPendedTicks = 0;
 80064b4:	d0278015 	stw	zero,-25088(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064b8:	d0a78117 	ldw	r2,-25084(gp)
 80064bc:	10000326 	beq	r2,zero,80064cc <xTaskResumeAll+0x148>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064c0:	00800044 	movi	r2,1
 80064c4:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064c8:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064cc:	80073700 	call	8007370 <vTaskExitCritical>

	return xAlreadyYielded;
 80064d0:	e0bffe17 	ldw	r2,-8(fp)
}
 80064d4:	e037883a 	mov	sp,fp
 80064d8:	dfc00117 	ldw	ra,4(sp)
 80064dc:	df000017 	ldw	fp,0(sp)
 80064e0:	dec00204 	addi	sp,sp,8
 80064e4:	f800283a 	ret

080064e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064e8:	defffe04 	addi	sp,sp,-8
 80064ec:	df000115 	stw	fp,4(sp)
 80064f0:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064f4:	d0a77d17 	ldw	r2,-25100(gp)
 80064f8:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064fc:	e0bfff17 	ldw	r2,-4(fp)
}
 8006500:	e037883a 	mov	sp,fp
 8006504:	df000017 	ldw	fp,0(sp)
 8006508:	dec00104 	addi	sp,sp,4
 800650c:	f800283a 	ret

08006510 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006510:	defffd04 	addi	sp,sp,-12
 8006514:	df000215 	stw	fp,8(sp)
 8006518:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800651c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 8006520:	d0a77d17 	ldw	r2,-25100(gp)
 8006524:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006528:	e0bfff17 	ldw	r2,-4(fp)
}
 800652c:	e037883a 	mov	sp,fp
 8006530:	df000017 	ldw	fp,0(sp)
 8006534:	dec00104 	addi	sp,sp,4
 8006538:	f800283a 	ret

0800653c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800653c:	deffff04 	addi	sp,sp,-4
 8006540:	df000015 	stw	fp,0(sp)
 8006544:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8006548:	d0a77c17 	ldw	r2,-25104(gp)
}
 800654c:	e037883a 	mov	sp,fp
 8006550:	df000017 	ldw	fp,0(sp)
 8006554:	dec00104 	addi	sp,sp,4
 8006558:	f800283a 	ret

0800655c <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800655c:	defffd04 	addi	sp,sp,-12
 8006560:	df000215 	stw	fp,8(sp)
 8006564:	df000204 	addi	fp,sp,8
 8006568:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800656c:	e0bfff17 	ldw	r2,-4(fp)
 8006570:	1000021e 	bne	r2,zero,800657c <pcTaskGetName+0x20>
 8006574:	d0a77817 	ldw	r2,-25120(gp)
 8006578:	00000106 	br	8006580 <pcTaskGetName+0x24>
 800657c:	e0bfff17 	ldw	r2,-4(fp)
 8006580:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 8006584:	e0bffe17 	ldw	r2,-8(fp)
 8006588:	10800d04 	addi	r2,r2,52
}
 800658c:	e037883a 	mov	sp,fp
 8006590:	df000017 	ldw	fp,0(sp)
 8006594:	dec00104 	addi	sp,sp,4
 8006598:	f800283a 	ret

0800659c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800659c:	defff804 	addi	sp,sp,-32
 80065a0:	dfc00715 	stw	ra,28(sp)
 80065a4:	df000615 	stw	fp,24(sp)
 80065a8:	dc000515 	stw	r16,20(sp)
 80065ac:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065b0:	e03ffa15 	stw	zero,-24(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b4:	d0a78617 	ldw	r2,-25064(gp)
 80065b8:	10005d1e 	bne	r2,zero,8006730 <xTaskIncrementTick+0x194>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065bc:	d0a77d17 	ldw	r2,-25100(gp)
 80065c0:	10800044 	addi	r2,r2,1
 80065c4:	e0bffb15 	stw	r2,-20(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065c8:	e0bffb17 	ldw	r2,-20(fp)
 80065cc:	d0a77d15 	stw	r2,-25100(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065d0:	e0bffb17 	ldw	r2,-20(fp)
 80065d4:	10000a1e 	bne	r2,zero,8006600 <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
 80065d8:	d0a77917 	ldw	r2,-25116(gp)
 80065dc:	e0bffc15 	stw	r2,-16(fp)
 80065e0:	d0a77a17 	ldw	r2,-25112(gp)
 80065e4:	d0a77915 	stw	r2,-25116(gp)
 80065e8:	e0bffc17 	ldw	r2,-16(fp)
 80065ec:	d0a77a15 	stw	r2,-25112(gp)
 80065f0:	d0a78217 	ldw	r2,-25080(gp)
 80065f4:	10800044 	addi	r2,r2,1
 80065f8:	d0a78215 	stw	r2,-25080(gp)
 80065fc:	8006edc0 	call	8006edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006600:	d0a78417 	ldw	r2,-25072(gp)
 8006604:	e0fffb17 	ldw	r3,-20(fp)
 8006608:	18803b36 	bltu	r3,r2,80066f8 <xTaskIncrementTick+0x15c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660c:	d0a77917 	ldw	r2,-25116(gp)
 8006610:	10800017 	ldw	r2,0(r2)
 8006614:	1000031e 	bne	r2,zero,8006624 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	00bfffc4 	movi	r2,-1
 800661c:	d0a78415 	stw	r2,-25072(gp)
					break;
 8006620:	00003506 	br	80066f8 <xTaskIncrementTick+0x15c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006624:	d0a77917 	ldw	r2,-25116(gp)
 8006628:	10800317 	ldw	r2,12(r2)
 800662c:	10800317 	ldw	r2,12(r2)
 8006630:	e0bffd15 	stw	r2,-12(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006634:	e0bffd17 	ldw	r2,-12(fp)
 8006638:	10800117 	ldw	r2,4(r2)
 800663c:	e0bffe15 	stw	r2,-8(fp)

					if( xConstTickCount < xItemValue )
 8006640:	e0fffb17 	ldw	r3,-20(fp)
 8006644:	e0bffe17 	ldw	r2,-8(fp)
 8006648:	1880032e 	bgeu	r3,r2,8006658 <xTaskIncrementTick+0xbc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800664c:	e0bffe17 	ldw	r2,-8(fp)
 8006650:	d0a78415 	stw	r2,-25072(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006654:	00002806 	br	80066f8 <xTaskIncrementTick+0x15c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006658:	e0bffd17 	ldw	r2,-12(fp)
 800665c:	10800104 	addi	r2,r2,4
 8006660:	1009883a 	mov	r4,r2
 8006664:	80039d80 	call	80039d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006668:	e0bffd17 	ldw	r2,-12(fp)
 800666c:	10800a17 	ldw	r2,40(r2)
 8006670:	10000426 	beq	r2,zero,8006684 <xTaskIncrementTick+0xe8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006674:	e0bffd17 	ldw	r2,-12(fp)
 8006678:	10800604 	addi	r2,r2,24
 800667c:	1009883a 	mov	r4,r2
 8006680:	80039d80 	call	80039d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006684:	e0bffd17 	ldw	r2,-12(fp)
 8006688:	10800b17 	ldw	r2,44(r2)
 800668c:	d0e77e17 	ldw	r3,-25096(gp)
 8006690:	1880032e 	bgeu	r3,r2,80066a0 <xTaskIncrementTick+0x104>
 8006694:	e0bffd17 	ldw	r2,-12(fp)
 8006698:	10800b17 	ldw	r2,44(r2)
 800669c:	d0a77e15 	stw	r2,-25096(gp)
 80066a0:	e0bffd17 	ldw	r2,-12(fp)
 80066a4:	10800b17 	ldw	r2,44(r2)
 80066a8:	01400504 	movi	r5,20
 80066ac:	1009883a 	mov	r4,r2
 80066b0:	80082e00 	call	80082e0 <__mulsi3>
 80066b4:	1007883a 	mov	r3,r2
 80066b8:	00822074 	movhi	r2,2177
 80066bc:	108a3a04 	addi	r2,r2,10472
 80066c0:	1887883a 	add	r3,r3,r2
 80066c4:	e0bffd17 	ldw	r2,-12(fp)
 80066c8:	10800104 	addi	r2,r2,4
 80066cc:	100b883a 	mov	r5,r2
 80066d0:	1809883a 	mov	r4,r3
 80066d4:	80038740 	call	8003874 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d8:	e0bffd17 	ldw	r2,-12(fp)
 80066dc:	10c00b17 	ldw	r3,44(r2)
 80066e0:	d0a77817 	ldw	r2,-25120(gp)
 80066e4:	10800b17 	ldw	r2,44(r2)
 80066e8:	18bfc836 	bltu	r3,r2,800660c <xTaskIncrementTick+0x70>
						{
							xSwitchRequired = pdTRUE;
 80066ec:	00800044 	movi	r2,1
 80066f0:	e0bffa15 	stw	r2,-24(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80066f4:	003fc506 	br	800660c <xTaskIncrementTick+0x70>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066f8:	d0a77817 	ldw	r2,-25120(gp)
 80066fc:	10800b17 	ldw	r2,44(r2)
 8006700:	04022074 	movhi	r16,2177
 8006704:	840a3a04 	addi	r16,r16,10472
 8006708:	01400504 	movi	r5,20
 800670c:	1009883a 	mov	r4,r2
 8006710:	80082e00 	call	80082e0 <__mulsi3>
 8006714:	8085883a 	add	r2,r16,r2
 8006718:	10800017 	ldw	r2,0(r2)
 800671c:	108000b0 	cmpltui	r2,r2,2
 8006720:	1000061e 	bne	r2,zero,800673c <xTaskIncrementTick+0x1a0>
			{
				xSwitchRequired = pdTRUE;
 8006724:	00800044 	movi	r2,1
 8006728:	e0bffa15 	stw	r2,-24(fp)
 800672c:	00000306 	br	800673c <xTaskIncrementTick+0x1a0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006730:	d0a78017 	ldw	r2,-25088(gp)
 8006734:	10800044 	addi	r2,r2,1
 8006738:	d0a78015 	stw	r2,-25088(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800673c:	d0a78117 	ldw	r2,-25084(gp)
 8006740:	10000226 	beq	r2,zero,800674c <xTaskIncrementTick+0x1b0>
		{
			xSwitchRequired = pdTRUE;
 8006744:	00800044 	movi	r2,1
 8006748:	e0bffa15 	stw	r2,-24(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800674c:	e0bffa17 	ldw	r2,-24(fp)
}
 8006750:	e6ffff04 	addi	sp,fp,-4
 8006754:	dfc00217 	ldw	ra,8(sp)
 8006758:	df000117 	ldw	fp,4(sp)
 800675c:	dc000017 	ldw	r16,0(sp)
 8006760:	dec00304 	addi	sp,sp,12
 8006764:	f800283a 	ret

08006768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006768:	defffb04 	addi	sp,sp,-20
 800676c:	dfc00415 	stw	ra,16(sp)
 8006770:	df000315 	stw	fp,12(sp)
 8006774:	dc000215 	stw	r16,8(sp)
 8006778:	df000304 	addi	fp,sp,12
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800677c:	d0a78617 	ldw	r2,-25064(gp)
 8006780:	10000326 	beq	r2,zero,8006790 <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006784:	00800044 	movi	r2,1
 8006788:	d0a78115 	stw	r2,-25084(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800678c:	00002d06 	br	8006844 <vTaskSwitchContext+0xdc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8006790:	d0278115 	stw	zero,-25084(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006794:	d0a77e17 	ldw	r2,-25096(gp)
 8006798:	e0bffd15 	stw	r2,-12(fp)
 800679c:	00000306 	br	80067ac <vTaskSwitchContext+0x44>
 80067a0:	e0bffd17 	ldw	r2,-12(fp)
 80067a4:	10bfffc4 	addi	r2,r2,-1
 80067a8:	e0bffd15 	stw	r2,-12(fp)
 80067ac:	04022074 	movhi	r16,2177
 80067b0:	840a3a04 	addi	r16,r16,10472
 80067b4:	e0bffd17 	ldw	r2,-12(fp)
 80067b8:	01400504 	movi	r5,20
 80067bc:	1009883a 	mov	r4,r2
 80067c0:	80082e00 	call	80082e0 <__mulsi3>
 80067c4:	8085883a 	add	r2,r16,r2
 80067c8:	10800017 	ldw	r2,0(r2)
 80067cc:	103ff426 	beq	r2,zero,80067a0 <vTaskSwitchContext+0x38>
 80067d0:	01400504 	movi	r5,20
 80067d4:	e13ffd17 	ldw	r4,-12(fp)
 80067d8:	80082e00 	call	80082e0 <__mulsi3>
 80067dc:	1007883a 	mov	r3,r2
 80067e0:	00822074 	movhi	r2,2177
 80067e4:	108a3a04 	addi	r2,r2,10472
 80067e8:	1885883a 	add	r2,r3,r2
 80067ec:	e0bffe15 	stw	r2,-8(fp)
 80067f0:	e0bffe17 	ldw	r2,-8(fp)
 80067f4:	10800117 	ldw	r2,4(r2)
 80067f8:	10c00117 	ldw	r3,4(r2)
 80067fc:	e0bffe17 	ldw	r2,-8(fp)
 8006800:	10c00115 	stw	r3,4(r2)
 8006804:	e0bffe17 	ldw	r2,-8(fp)
 8006808:	10c00117 	ldw	r3,4(r2)
 800680c:	e0bffe17 	ldw	r2,-8(fp)
 8006810:	10800204 	addi	r2,r2,8
 8006814:	1880051e 	bne	r3,r2,800682c <vTaskSwitchContext+0xc4>
 8006818:	e0bffe17 	ldw	r2,-8(fp)
 800681c:	10800117 	ldw	r2,4(r2)
 8006820:	10c00117 	ldw	r3,4(r2)
 8006824:	e0bffe17 	ldw	r2,-8(fp)
 8006828:	10c00115 	stw	r3,4(r2)
 800682c:	e0bffe17 	ldw	r2,-8(fp)
 8006830:	10800117 	ldw	r2,4(r2)
 8006834:	10800317 	ldw	r2,12(r2)
 8006838:	d0a77815 	stw	r2,-25120(gp)
 800683c:	e0bffd17 	ldw	r2,-12(fp)
 8006840:	d0a77e15 	stw	r2,-25096(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006844:	0001883a 	nop
 8006848:	e6ffff04 	addi	sp,fp,-4
 800684c:	dfc00217 	ldw	ra,8(sp)
 8006850:	df000117 	ldw	fp,4(sp)
 8006854:	dc000017 	ldw	r16,0(sp)
 8006858:	dec00304 	addi	sp,sp,12
 800685c:	f800283a 	ret

08006860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006860:	defffc04 	addi	sp,sp,-16
 8006864:	dfc00315 	stw	ra,12(sp)
 8006868:	df000215 	stw	fp,8(sp)
 800686c:	df000204 	addi	fp,sp,8
 8006870:	e13ffe15 	stw	r4,-8(fp)
 8006874:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006878:	d0a77817 	ldw	r2,-25120(gp)
 800687c:	10800604 	addi	r2,r2,24
 8006880:	100b883a 	mov	r5,r2
 8006884:	e13ffe17 	ldw	r4,-8(fp)
 8006888:	80039000 	call	8003900 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800688c:	01400044 	movi	r5,1
 8006890:	e13fff17 	ldw	r4,-4(fp)
 8006894:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
}
 8006898:	0001883a 	nop
 800689c:	e037883a 	mov	sp,fp
 80068a0:	dfc00117 	ldw	ra,4(sp)
 80068a4:	df000017 	ldw	fp,0(sp)
 80068a8:	dec00204 	addi	sp,sp,8
 80068ac:	f800283a 	ret

080068b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80068b0:	defffb04 	addi	sp,sp,-20
 80068b4:	dfc00415 	stw	ra,16(sp)
 80068b8:	df000315 	stw	fp,12(sp)
 80068bc:	df000304 	addi	fp,sp,12
 80068c0:	e13ffd15 	stw	r4,-12(fp)
 80068c4:	e17ffe15 	stw	r5,-8(fp)
 80068c8:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80068cc:	d0a77817 	ldw	r2,-25120(gp)
 80068d0:	e0fffe17 	ldw	r3,-8(fp)
 80068d4:	18e00034 	orhi	r3,r3,32768
 80068d8:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068dc:	d0a77817 	ldw	r2,-25120(gp)
 80068e0:	10800604 	addi	r2,r2,24
 80068e4:	100b883a 	mov	r5,r2
 80068e8:	e13ffd17 	ldw	r4,-12(fp)
 80068ec:	80038740 	call	8003874 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068f0:	01400044 	movi	r5,1
 80068f4:	e13fff17 	ldw	r4,-4(fp)
 80068f8:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>
}
 80068fc:	0001883a 	nop
 8006900:	e037883a 	mov	sp,fp
 8006904:	dfc00117 	ldw	ra,4(sp)
 8006908:	df000017 	ldw	fp,0(sp)
 800690c:	dec00204 	addi	sp,sp,8
 8006910:	f800283a 	ret

08006914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006914:	defffb04 	addi	sp,sp,-20
 8006918:	dfc00415 	stw	ra,16(sp)
 800691c:	df000315 	stw	fp,12(sp)
 8006920:	df000304 	addi	fp,sp,12
 8006924:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006928:	e0bfff17 	ldw	r2,-4(fp)
 800692c:	10800317 	ldw	r2,12(r2)
 8006930:	10800317 	ldw	r2,12(r2)
 8006934:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006938:	e0bffe17 	ldw	r2,-8(fp)
 800693c:	10800604 	addi	r2,r2,24
 8006940:	1009883a 	mov	r4,r2
 8006944:	80039d80 	call	80039d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006948:	d0a78617 	ldw	r2,-25064(gp)
 800694c:	10001a1e 	bne	r2,zero,80069b8 <xTaskRemoveFromEventList+0xa4>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006950:	e0bffe17 	ldw	r2,-8(fp)
 8006954:	10800104 	addi	r2,r2,4
 8006958:	1009883a 	mov	r4,r2
 800695c:	80039d80 	call	80039d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006960:	e0bffe17 	ldw	r2,-8(fp)
 8006964:	10800b17 	ldw	r2,44(r2)
 8006968:	d0e77e17 	ldw	r3,-25096(gp)
 800696c:	1880032e 	bgeu	r3,r2,800697c <xTaskRemoveFromEventList+0x68>
 8006970:	e0bffe17 	ldw	r2,-8(fp)
 8006974:	10800b17 	ldw	r2,44(r2)
 8006978:	d0a77e15 	stw	r2,-25096(gp)
 800697c:	e0bffe17 	ldw	r2,-8(fp)
 8006980:	10800b17 	ldw	r2,44(r2)
 8006984:	01400504 	movi	r5,20
 8006988:	1009883a 	mov	r4,r2
 800698c:	80082e00 	call	80082e0 <__mulsi3>
 8006990:	1007883a 	mov	r3,r2
 8006994:	00822074 	movhi	r2,2177
 8006998:	108a3a04 	addi	r2,r2,10472
 800699c:	1887883a 	add	r3,r3,r2
 80069a0:	e0bffe17 	ldw	r2,-8(fp)
 80069a4:	10800104 	addi	r2,r2,4
 80069a8:	100b883a 	mov	r5,r2
 80069ac:	1809883a 	mov	r4,r3
 80069b0:	80038740 	call	8003874 <vListInsertEnd>
 80069b4:	00000606 	br	80069d0 <xTaskRemoveFromEventList+0xbc>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069b8:	e0bffe17 	ldw	r2,-8(fp)
 80069bc:	10800604 	addi	r2,r2,24
 80069c0:	100b883a 	mov	r5,r2
 80069c4:	01022074 	movhi	r4,2177
 80069c8:	210a5d04 	addi	r4,r4,10612
 80069cc:	80038740 	call	8003874 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069d0:	e0bffe17 	ldw	r2,-8(fp)
 80069d4:	10800b17 	ldw	r2,44(r2)
 80069d8:	d0e77817 	ldw	r3,-25120(gp)
 80069dc:	18c00b17 	ldw	r3,44(r3)
 80069e0:	1880052e 	bgeu	r3,r2,80069f8 <xTaskRemoveFromEventList+0xe4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069e4:	00800044 	movi	r2,1
 80069e8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ec:	00800044 	movi	r2,1
 80069f0:	d0a78115 	stw	r2,-25084(gp)
 80069f4:	00000106 	br	80069fc <xTaskRemoveFromEventList+0xe8>
	}
	else
	{
		xReturn = pdFALSE;
 80069f8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 80069fc:	e0bffd17 	ldw	r2,-12(fp)
}
 8006a00:	e037883a 	mov	sp,fp
 8006a04:	dfc00117 	ldw	ra,4(sp)
 8006a08:	df000017 	ldw	fp,0(sp)
 8006a0c:	dec00204 	addi	sp,sp,8
 8006a10:	f800283a 	ret

08006a14 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006a14:	defffb04 	addi	sp,sp,-20
 8006a18:	dfc00415 	stw	ra,16(sp)
 8006a1c:	df000315 	stw	fp,12(sp)
 8006a20:	df000304 	addi	fp,sp,12
 8006a24:	e13ffe15 	stw	r4,-8(fp)
 8006a28:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a2c:	e0bfff17 	ldw	r2,-4(fp)
 8006a30:	10e00034 	orhi	r3,r2,32768
 8006a34:	e0bffe17 	ldw	r2,-8(fp)
 8006a38:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3c:	e0bffe17 	ldw	r2,-8(fp)
 8006a40:	10800317 	ldw	r2,12(r2)
 8006a44:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8006a48:	e13ffe17 	ldw	r4,-8(fp)
 8006a4c:	80039d80 	call	80039d8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a50:	e0bffd17 	ldw	r2,-12(fp)
 8006a54:	10800104 	addi	r2,r2,4
 8006a58:	1009883a 	mov	r4,r2
 8006a5c:	80039d80 	call	80039d8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006a60:	e0bffd17 	ldw	r2,-12(fp)
 8006a64:	10800b17 	ldw	r2,44(r2)
 8006a68:	d0e77e17 	ldw	r3,-25096(gp)
 8006a6c:	1880032e 	bgeu	r3,r2,8006a7c <vTaskRemoveFromUnorderedEventList+0x68>
 8006a70:	e0bffd17 	ldw	r2,-12(fp)
 8006a74:	10800b17 	ldw	r2,44(r2)
 8006a78:	d0a77e15 	stw	r2,-25096(gp)
 8006a7c:	e0bffd17 	ldw	r2,-12(fp)
 8006a80:	10800b17 	ldw	r2,44(r2)
 8006a84:	01400504 	movi	r5,20
 8006a88:	1009883a 	mov	r4,r2
 8006a8c:	80082e00 	call	80082e0 <__mulsi3>
 8006a90:	1007883a 	mov	r3,r2
 8006a94:	00822074 	movhi	r2,2177
 8006a98:	108a3a04 	addi	r2,r2,10472
 8006a9c:	1887883a 	add	r3,r3,r2
 8006aa0:	e0bffd17 	ldw	r2,-12(fp)
 8006aa4:	10800104 	addi	r2,r2,4
 8006aa8:	100b883a 	mov	r5,r2
 8006aac:	1809883a 	mov	r4,r3
 8006ab0:	80038740 	call	8003874 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ab4:	e0bffd17 	ldw	r2,-12(fp)
 8006ab8:	10800b17 	ldw	r2,44(r2)
 8006abc:	d0e77817 	ldw	r3,-25120(gp)
 8006ac0:	18c00b17 	ldw	r3,44(r3)
 8006ac4:	1880022e 	bgeu	r3,r2,8006ad0 <vTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006ac8:	00800044 	movi	r2,1
 8006acc:	d0a78115 	stw	r2,-25084(gp)
	}
}
 8006ad0:	0001883a 	nop
 8006ad4:	e037883a 	mov	sp,fp
 8006ad8:	dfc00117 	ldw	ra,4(sp)
 8006adc:	df000017 	ldw	fp,0(sp)
 8006ae0:	dec00204 	addi	sp,sp,8
 8006ae4:	f800283a 	ret

08006ae8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae8:	defffd04 	addi	sp,sp,-12
 8006aec:	dfc00215 	stw	ra,8(sp)
 8006af0:	df000115 	stw	fp,4(sp)
 8006af4:	df000104 	addi	fp,sp,4
 8006af8:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 8006afc:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b00:	d0e78217 	ldw	r3,-25080(gp)
 8006b04:	e0bfff17 	ldw	r2,-4(fp)
 8006b08:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006b0c:	d0e77d17 	ldw	r3,-25100(gp)
 8006b10:	e0bfff17 	ldw	r2,-4(fp)
 8006b14:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 8006b18:	80073700 	call	8007370 <vTaskExitCritical>
}
 8006b1c:	0001883a 	nop
 8006b20:	e037883a 	mov	sp,fp
 8006b24:	dfc00117 	ldw	ra,4(sp)
 8006b28:	df000017 	ldw	fp,0(sp)
 8006b2c:	dec00204 	addi	sp,sp,8
 8006b30:	f800283a 	ret

08006b34 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b34:	defffe04 	addi	sp,sp,-8
 8006b38:	df000115 	stw	fp,4(sp)
 8006b3c:	df000104 	addi	fp,sp,4
 8006b40:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b44:	d0e78217 	ldw	r3,-25080(gp)
 8006b48:	e0bfff17 	ldw	r2,-4(fp)
 8006b4c:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b50:	d0e77d17 	ldw	r3,-25100(gp)
 8006b54:	e0bfff17 	ldw	r2,-4(fp)
 8006b58:	10c00115 	stw	r3,4(r2)
}
 8006b5c:	0001883a 	nop
 8006b60:	e037883a 	mov	sp,fp
 8006b64:	df000017 	ldw	fp,0(sp)
 8006b68:	dec00104 	addi	sp,sp,4
 8006b6c:	f800283a 	ret

08006b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b70:	defff904 	addi	sp,sp,-28
 8006b74:	dfc00615 	stw	ra,24(sp)
 8006b78:	df000515 	stw	fp,20(sp)
 8006b7c:	df000504 	addi	fp,sp,20
 8006b80:	e13ffe15 	stw	r4,-8(fp)
 8006b84:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8006b88:	800731c0 	call	800731c <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b8c:	d0a77d17 	ldw	r2,-25100(gp)
 8006b90:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b94:	e0bffe17 	ldw	r2,-8(fp)
 8006b98:	10800117 	ldw	r2,4(r2)
 8006b9c:	e0fffc17 	ldw	r3,-16(fp)
 8006ba0:	1885c83a 	sub	r2,r3,r2
 8006ba4:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ba8:	e0bfff17 	ldw	r2,-4(fp)
 8006bac:	10800017 	ldw	r2,0(r2)
 8006bb0:	10bfffd8 	cmpnei	r2,r2,-1
 8006bb4:	1000021e 	bne	r2,zero,8006bc0 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb8:	e03ffb15 	stw	zero,-20(fp)
 8006bbc:	00001d06 	br	8006c34 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bc0:	e0bffe17 	ldw	r2,-8(fp)
 8006bc4:	10c00017 	ldw	r3,0(r2)
 8006bc8:	d0a78217 	ldw	r2,-25080(gp)
 8006bcc:	18800726 	beq	r3,r2,8006bec <xTaskCheckForTimeOut+0x7c>
 8006bd0:	e0bffe17 	ldw	r2,-8(fp)
 8006bd4:	10800117 	ldw	r2,4(r2)
 8006bd8:	e0fffc17 	ldw	r3,-16(fp)
 8006bdc:	18800336 	bltu	r3,r2,8006bec <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006be0:	00800044 	movi	r2,1
 8006be4:	e0bffb15 	stw	r2,-20(fp)
 8006be8:	00001206 	br	8006c34 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bec:	e0bfff17 	ldw	r2,-4(fp)
 8006bf0:	10800017 	ldw	r2,0(r2)
 8006bf4:	e0fffd17 	ldw	r3,-12(fp)
 8006bf8:	18800a2e 	bgeu	r3,r2,8006c24 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bfc:	e0bfff17 	ldw	r2,-4(fp)
 8006c00:	10c00017 	ldw	r3,0(r2)
 8006c04:	e0bffd17 	ldw	r2,-12(fp)
 8006c08:	1887c83a 	sub	r3,r3,r2
 8006c0c:	e0bfff17 	ldw	r2,-4(fp)
 8006c10:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c14:	e13ffe17 	ldw	r4,-8(fp)
 8006c18:	8006b340 	call	8006b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c1c:	e03ffb15 	stw	zero,-20(fp)
 8006c20:	00000406 	br	8006c34 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c24:	e0bfff17 	ldw	r2,-4(fp)
 8006c28:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 8006c2c:	00800044 	movi	r2,1
 8006c30:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 8006c34:	80073700 	call	8007370 <vTaskExitCritical>

	return xReturn;
 8006c38:	e0bffb17 	ldw	r2,-20(fp)
}
 8006c3c:	e037883a 	mov	sp,fp
 8006c40:	dfc00117 	ldw	ra,4(sp)
 8006c44:	df000017 	ldw	fp,0(sp)
 8006c48:	dec00204 	addi	sp,sp,8
 8006c4c:	f800283a 	ret

08006c50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c50:	deffff04 	addi	sp,sp,-4
 8006c54:	df000015 	stw	fp,0(sp)
 8006c58:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 8006c5c:	00800044 	movi	r2,1
 8006c60:	d0a78115 	stw	r2,-25084(gp)
}
 8006c64:	0001883a 	nop
 8006c68:	e037883a 	mov	sp,fp
 8006c6c:	df000017 	ldw	fp,0(sp)
 8006c70:	dec00104 	addi	sp,sp,4
 8006c74:	f800283a 	ret

08006c78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c78:	defffd04 	addi	sp,sp,-12
 8006c7c:	dfc00215 	stw	ra,8(sp)
 8006c80:	df000115 	stw	fp,4(sp)
 8006c84:	df000104 	addi	fp,sp,4
 8006c88:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c8c:	8006d540 	call	8006d54 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8006c90:	003ffe06 	br	8006c8c <prvIdleTask+0x14>

08006c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c94:	defffd04 	addi	sp,sp,-12
 8006c98:	dfc00215 	stw	ra,8(sp)
 8006c9c:	df000115 	stw	fp,4(sp)
 8006ca0:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca4:	e03fff15 	stw	zero,-4(fp)
 8006ca8:	00000c06 	br	8006cdc <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cac:	01400504 	movi	r5,20
 8006cb0:	e13fff17 	ldw	r4,-4(fp)
 8006cb4:	80082e00 	call	80082e0 <__mulsi3>
 8006cb8:	1007883a 	mov	r3,r2
 8006cbc:	00822074 	movhi	r2,2177
 8006cc0:	108a3a04 	addi	r2,r2,10472
 8006cc4:	1885883a 	add	r2,r3,r2
 8006cc8:	1009883a 	mov	r4,r2
 8006ccc:	80037e00 	call	80037e0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd0:	e0bfff17 	ldw	r2,-4(fp)
 8006cd4:	10800044 	addi	r2,r2,1
 8006cd8:	e0bfff15 	stw	r2,-4(fp)
 8006cdc:	e0bfff17 	ldw	r2,-4(fp)
 8006ce0:	10800170 	cmpltui	r2,r2,5
 8006ce4:	103ff11e 	bne	r2,zero,8006cac <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ce8:	01022074 	movhi	r4,2177
 8006cec:	210a5304 	addi	r4,r4,10572
 8006cf0:	80037e00 	call	80037e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cf4:	01022074 	movhi	r4,2177
 8006cf8:	210a5804 	addi	r4,r4,10592
 8006cfc:	80037e00 	call	80037e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d00:	01022074 	movhi	r4,2177
 8006d04:	210a5d04 	addi	r4,r4,10612
 8006d08:	80037e00 	call	80037e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d0c:	01022074 	movhi	r4,2177
 8006d10:	210a6204 	addi	r4,r4,10632
 8006d14:	80037e00 	call	80037e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d18:	01022074 	movhi	r4,2177
 8006d1c:	210a6704 	addi	r4,r4,10652
 8006d20:	80037e00 	call	80037e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d24:	00822074 	movhi	r2,2177
 8006d28:	108a5304 	addi	r2,r2,10572
 8006d2c:	d0a77915 	stw	r2,-25116(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d30:	00822074 	movhi	r2,2177
 8006d34:	108a5804 	addi	r2,r2,10592
 8006d38:	d0a77a15 	stw	r2,-25112(gp)
}
 8006d3c:	0001883a 	nop
 8006d40:	e037883a 	mov	sp,fp
 8006d44:	dfc00117 	ldw	ra,4(sp)
 8006d48:	df000017 	ldw	fp,0(sp)
 8006d4c:	dec00204 	addi	sp,sp,8
 8006d50:	f800283a 	ret

08006d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d54:	defffd04 	addi	sp,sp,-12
 8006d58:	dfc00215 	stw	ra,8(sp)
 8006d5c:	df000115 	stw	fp,4(sp)
 8006d60:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d64:	00001306 	br	8006db4 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 8006d68:	800731c0 	call	800731c <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6c:	00822074 	movhi	r2,2177
 8006d70:	108a6204 	addi	r2,r2,10632
 8006d74:	10800317 	ldw	r2,12(r2)
 8006d78:	10800317 	ldw	r2,12(r2)
 8006d7c:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d80:	e0bfff17 	ldw	r2,-4(fp)
 8006d84:	10800104 	addi	r2,r2,4
 8006d88:	1009883a 	mov	r4,r2
 8006d8c:	80039d80 	call	80039d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d90:	d0a77c17 	ldw	r2,-25104(gp)
 8006d94:	10bfffc4 	addi	r2,r2,-1
 8006d98:	d0a77c15 	stw	r2,-25104(gp)
				--uxDeletedTasksWaitingCleanUp;
 8006d9c:	d0a77b17 	ldw	r2,-25108(gp)
 8006da0:	10bfffc4 	addi	r2,r2,-1
 8006da4:	d0a77b15 	stw	r2,-25108(gp)
			}
			taskEXIT_CRITICAL();
 8006da8:	80073700 	call	8007370 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 8006dac:	e13fff17 	ldw	r4,-4(fp)
 8006db0:	8006e980 	call	8006e98 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db4:	d0a77b17 	ldw	r2,-25108(gp)
 8006db8:	103feb1e 	bne	r2,zero,8006d68 <prvCheckTasksWaitingTermination+0x14>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dbc:	0001883a 	nop
 8006dc0:	e037883a 	mov	sp,fp
 8006dc4:	dfc00117 	ldw	ra,4(sp)
 8006dc8:	df000017 	ldw	fp,0(sp)
 8006dcc:	dec00204 	addi	sp,sp,8
 8006dd0:	f800283a 	ret

08006dd4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006dd4:	defffd04 	addi	sp,sp,-12
 8006dd8:	df000215 	stw	fp,8(sp)
 8006ddc:	df000204 	addi	fp,sp,8
 8006de0:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 8006de4:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006de8:	00000606 	br	8006e04 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006dec:	e0bfff17 	ldw	r2,-4(fp)
 8006df0:	10800044 	addi	r2,r2,1
 8006df4:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 8006df8:	e0bffe17 	ldw	r2,-8(fp)
 8006dfc:	10800044 	addi	r2,r2,1
 8006e00:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006e04:	e0bfff17 	ldw	r2,-4(fp)
 8006e08:	10800003 	ldbu	r2,0(r2)
 8006e0c:	10803fcc 	andi	r2,r2,255
 8006e10:	10802960 	cmpeqi	r2,r2,165
 8006e14:	103ff51e 	bne	r2,zero,8006dec <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006e18:	e0bffe17 	ldw	r2,-8(fp)
 8006e1c:	1004d0ba 	srli	r2,r2,2
 8006e20:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006e24:	e0bffe17 	ldw	r2,-8(fp)
	}
 8006e28:	e037883a 	mov	sp,fp
 8006e2c:	df000017 	ldw	fp,0(sp)
 8006e30:	dec00104 	addi	sp,sp,4
 8006e34:	f800283a 	ret

08006e38 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006e38:	defffa04 	addi	sp,sp,-24
 8006e3c:	dfc00515 	stw	ra,20(sp)
 8006e40:	df000415 	stw	fp,16(sp)
 8006e44:	df000404 	addi	fp,sp,16
 8006e48:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006e4c:	e0bfff17 	ldw	r2,-4(fp)
 8006e50:	1000021e 	bne	r2,zero,8006e5c <uxTaskGetStackHighWaterMark+0x24>
 8006e54:	d0a77817 	ldw	r2,-25120(gp)
 8006e58:	00000106 	br	8006e60 <uxTaskGetStackHighWaterMark+0x28>
 8006e5c:	e0bfff17 	ldw	r2,-4(fp)
 8006e60:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006e64:	e0bffc17 	ldw	r2,-16(fp)
 8006e68:	10800c17 	ldw	r2,48(r2)
 8006e6c:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8006e70:	e13ffd17 	ldw	r4,-12(fp)
 8006e74:	8006dd40 	call	8006dd4 <prvTaskCheckFreeStackSpace>
 8006e78:	10bfffcc 	andi	r2,r2,65535
 8006e7c:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 8006e80:	e0bffe17 	ldw	r2,-8(fp)
	}
 8006e84:	e037883a 	mov	sp,fp
 8006e88:	dfc00117 	ldw	ra,4(sp)
 8006e8c:	df000017 	ldw	fp,0(sp)
 8006e90:	dec00204 	addi	sp,sp,8
 8006e94:	f800283a 	ret

08006e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e98:	defffd04 	addi	sp,sp,-12
 8006e9c:	dfc00215 	stw	ra,8(sp)
 8006ea0:	df000115 	stw	fp,4(sp)
 8006ea4:	df000104 	addi	fp,sp,4
 8006ea8:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006eac:	e0bfff17 	ldw	r2,-4(fp)
 8006eb0:	10800c17 	ldw	r2,48(r2)
 8006eb4:	1009883a 	mov	r4,r2
 8006eb8:	80040dc0 	call	80040dc <vPortFree>
			vPortFree( pxTCB );
 8006ebc:	e13fff17 	ldw	r4,-4(fp)
 8006ec0:	80040dc0 	call	80040dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ec4:	0001883a 	nop
 8006ec8:	e037883a 	mov	sp,fp
 8006ecc:	dfc00117 	ldw	ra,4(sp)
 8006ed0:	df000017 	ldw	fp,0(sp)
 8006ed4:	dec00204 	addi	sp,sp,8
 8006ed8:	f800283a 	ret

08006edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006edc:	defffe04 	addi	sp,sp,-8
 8006ee0:	df000115 	stw	fp,4(sp)
 8006ee4:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee8:	d0a77917 	ldw	r2,-25116(gp)
 8006eec:	10800017 	ldw	r2,0(r2)
 8006ef0:	1000031e 	bne	r2,zero,8006f00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef4:	00bfffc4 	movi	r2,-1
 8006ef8:	d0a78415 	stw	r2,-25072(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006efc:	00000706 	br	8006f1c <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f00:	d0a77917 	ldw	r2,-25116(gp)
 8006f04:	10800317 	ldw	r2,12(r2)
 8006f08:	10800317 	ldw	r2,12(r2)
 8006f0c:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f10:	e0bfff17 	ldw	r2,-4(fp)
 8006f14:	10800117 	ldw	r2,4(r2)
 8006f18:	d0a78415 	stw	r2,-25072(gp)
	}
}
 8006f1c:	0001883a 	nop
 8006f20:	e037883a 	mov	sp,fp
 8006f24:	df000017 	ldw	fp,0(sp)
 8006f28:	dec00104 	addi	sp,sp,4
 8006f2c:	f800283a 	ret

08006f30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006f30:	defffe04 	addi	sp,sp,-8
 8006f34:	df000115 	stw	fp,4(sp)
 8006f38:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006f3c:	d0a77817 	ldw	r2,-25120(gp)
 8006f40:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 8006f44:	e0bfff17 	ldw	r2,-4(fp)
	}
 8006f48:	e037883a 	mov	sp,fp
 8006f4c:	df000017 	ldw	fp,0(sp)
 8006f50:	dec00104 	addi	sp,sp,4
 8006f54:	f800283a 	ret

08006f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f58:	defffa04 	addi	sp,sp,-24
 8006f5c:	dfc00515 	stw	ra,20(sp)
 8006f60:	df000415 	stw	fp,16(sp)
 8006f64:	dc000315 	stw	r16,12(sp)
 8006f68:	df000404 	addi	fp,sp,16
 8006f6c:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f70:	e0bffe17 	ldw	r2,-8(fp)
 8006f74:	e0bffd15 	stw	r2,-12(fp)
	BaseType_t xReturn = pdFALSE;
 8006f78:	e03ffc15 	stw	zero,-16(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f7c:	e0bffe17 	ldw	r2,-8(fp)
 8006f80:	10004626 	beq	r2,zero,800709c <xTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f84:	e0bffd17 	ldw	r2,-12(fp)
 8006f88:	10c00b17 	ldw	r3,44(r2)
 8006f8c:	d0a77817 	ldw	r2,-25120(gp)
 8006f90:	10800b17 	ldw	r2,44(r2)
 8006f94:	18803a2e 	bgeu	r3,r2,8007080 <xTaskPriorityInherit+0x128>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f98:	e0bffd17 	ldw	r2,-12(fp)
 8006f9c:	10800617 	ldw	r2,24(r2)
 8006fa0:	10000616 	blt	r2,zero,8006fbc <xTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa4:	d0a77817 	ldw	r2,-25120(gp)
 8006fa8:	10800b17 	ldw	r2,44(r2)
 8006fac:	00c00144 	movi	r3,5
 8006fb0:	1887c83a 	sub	r3,r3,r2
 8006fb4:	e0bffd17 	ldw	r2,-12(fp)
 8006fb8:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fbc:	e0bffd17 	ldw	r2,-12(fp)
 8006fc0:	14000517 	ldw	r16,20(r2)
 8006fc4:	e0bffd17 	ldw	r2,-12(fp)
 8006fc8:	10800b17 	ldw	r2,44(r2)
 8006fcc:	01400504 	movi	r5,20
 8006fd0:	1009883a 	mov	r4,r2
 8006fd4:	80082e00 	call	80082e0 <__mulsi3>
 8006fd8:	1007883a 	mov	r3,r2
 8006fdc:	00822074 	movhi	r2,2177
 8006fe0:	108a3a04 	addi	r2,r2,10472
 8006fe4:	1885883a 	add	r2,r3,r2
 8006fe8:	80801e1e 	bne	r16,r2,8007064 <xTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fec:	e0bffd17 	ldw	r2,-12(fp)
 8006ff0:	10800104 	addi	r2,r2,4
 8006ff4:	1009883a 	mov	r4,r2
 8006ff8:	80039d80 	call	80039d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ffc:	d0a77817 	ldw	r2,-25120(gp)
 8007000:	10c00b17 	ldw	r3,44(r2)
 8007004:	e0bffd17 	ldw	r2,-12(fp)
 8007008:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800700c:	e0bffd17 	ldw	r2,-12(fp)
 8007010:	10800b17 	ldw	r2,44(r2)
 8007014:	d0e77e17 	ldw	r3,-25096(gp)
 8007018:	1880032e 	bgeu	r3,r2,8007028 <xTaskPriorityInherit+0xd0>
 800701c:	e0bffd17 	ldw	r2,-12(fp)
 8007020:	10800b17 	ldw	r2,44(r2)
 8007024:	d0a77e15 	stw	r2,-25096(gp)
 8007028:	e0bffd17 	ldw	r2,-12(fp)
 800702c:	10800b17 	ldw	r2,44(r2)
 8007030:	01400504 	movi	r5,20
 8007034:	1009883a 	mov	r4,r2
 8007038:	80082e00 	call	80082e0 <__mulsi3>
 800703c:	1007883a 	mov	r3,r2
 8007040:	00822074 	movhi	r2,2177
 8007044:	108a3a04 	addi	r2,r2,10472
 8007048:	1887883a 	add	r3,r3,r2
 800704c:	e0bffd17 	ldw	r2,-12(fp)
 8007050:	10800104 	addi	r2,r2,4
 8007054:	100b883a 	mov	r5,r2
 8007058:	1809883a 	mov	r4,r3
 800705c:	80038740 	call	8003874 <vListInsertEnd>
 8007060:	00000406 	br	8007074 <xTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007064:	d0a77817 	ldw	r2,-25120(gp)
 8007068:	10c00b17 	ldw	r3,44(r2)
 800706c:	e0bffd17 	ldw	r2,-12(fp)
 8007070:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007074:	00800044 	movi	r2,1
 8007078:	e0bffc15 	stw	r2,-16(fp)
 800707c:	00000706 	br	800709c <xTaskPriorityInherit+0x144>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007080:	e0bffd17 	ldw	r2,-12(fp)
 8007084:	10c01017 	ldw	r3,64(r2)
 8007088:	d0a77817 	ldw	r2,-25120(gp)
 800708c:	10800b17 	ldw	r2,44(r2)
 8007090:	1880022e 	bgeu	r3,r2,800709c <xTaskPriorityInherit+0x144>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007094:	00800044 	movi	r2,1
 8007098:	e0bffc15 	stw	r2,-16(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800709c:	e0bffc17 	ldw	r2,-16(fp)
	}
 80070a0:	e6ffff04 	addi	sp,fp,-4
 80070a4:	dfc00217 	ldw	ra,8(sp)
 80070a8:	df000117 	ldw	fp,4(sp)
 80070ac:	dc000017 	ldw	r16,0(sp)
 80070b0:	dec00304 	addi	sp,sp,12
 80070b4:	f800283a 	ret

080070b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070b8:	defffb04 	addi	sp,sp,-20
 80070bc:	dfc00415 	stw	ra,16(sp)
 80070c0:	df000315 	stw	fp,12(sp)
 80070c4:	df000304 	addi	fp,sp,12
 80070c8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 80070cc:	e0bfff17 	ldw	r2,-4(fp)
 80070d0:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 80070d4:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 80070d8:	e0bfff17 	ldw	r2,-4(fp)
 80070dc:	10003226 	beq	r2,zero,80071a8 <xTaskPriorityDisinherit+0xf0>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80070e0:	e0bffe17 	ldw	r2,-8(fp)
 80070e4:	10801117 	ldw	r2,68(r2)
 80070e8:	10ffffc4 	addi	r3,r2,-1
 80070ec:	e0bffe17 	ldw	r2,-8(fp)
 80070f0:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070f4:	e0bffe17 	ldw	r2,-8(fp)
 80070f8:	10c00b17 	ldw	r3,44(r2)
 80070fc:	e0bffe17 	ldw	r2,-8(fp)
 8007100:	10801017 	ldw	r2,64(r2)
 8007104:	18802826 	beq	r3,r2,80071a8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007108:	e0bffe17 	ldw	r2,-8(fp)
 800710c:	10801117 	ldw	r2,68(r2)
 8007110:	1000251e 	bne	r2,zero,80071a8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007114:	e0bffe17 	ldw	r2,-8(fp)
 8007118:	10800104 	addi	r2,r2,4
 800711c:	1009883a 	mov	r4,r2
 8007120:	80039d80 	call	80039d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007124:	e0bffe17 	ldw	r2,-8(fp)
 8007128:	10c01017 	ldw	r3,64(r2)
 800712c:	e0bffe17 	ldw	r2,-8(fp)
 8007130:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007134:	e0bffe17 	ldw	r2,-8(fp)
 8007138:	10800b17 	ldw	r2,44(r2)
 800713c:	00c00144 	movi	r3,5
 8007140:	1887c83a 	sub	r3,r3,r2
 8007144:	e0bffe17 	ldw	r2,-8(fp)
 8007148:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 800714c:	e0bffe17 	ldw	r2,-8(fp)
 8007150:	10800b17 	ldw	r2,44(r2)
 8007154:	d0e77e17 	ldw	r3,-25096(gp)
 8007158:	1880032e 	bgeu	r3,r2,8007168 <xTaskPriorityDisinherit+0xb0>
 800715c:	e0bffe17 	ldw	r2,-8(fp)
 8007160:	10800b17 	ldw	r2,44(r2)
 8007164:	d0a77e15 	stw	r2,-25096(gp)
 8007168:	e0bffe17 	ldw	r2,-8(fp)
 800716c:	10800b17 	ldw	r2,44(r2)
 8007170:	01400504 	movi	r5,20
 8007174:	1009883a 	mov	r4,r2
 8007178:	80082e00 	call	80082e0 <__mulsi3>
 800717c:	1007883a 	mov	r3,r2
 8007180:	00822074 	movhi	r2,2177
 8007184:	108a3a04 	addi	r2,r2,10472
 8007188:	1887883a 	add	r3,r3,r2
 800718c:	e0bffe17 	ldw	r2,-8(fp)
 8007190:	10800104 	addi	r2,r2,4
 8007194:	100b883a 	mov	r5,r2
 8007198:	1809883a 	mov	r4,r3
 800719c:	80038740 	call	8003874 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071a0:	00800044 	movi	r2,1
 80071a4:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071a8:	e0bffd17 	ldw	r2,-12(fp)
	}
 80071ac:	e037883a 	mov	sp,fp
 80071b0:	dfc00117 	ldw	ra,4(sp)
 80071b4:	df000017 	ldw	fp,0(sp)
 80071b8:	dec00204 	addi	sp,sp,8
 80071bc:	f800283a 	ret

080071c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071c0:	defff704 	addi	sp,sp,-36
 80071c4:	dfc00815 	stw	ra,32(sp)
 80071c8:	df000715 	stw	fp,28(sp)
 80071cc:	dc000615 	stw	r16,24(sp)
 80071d0:	df000704 	addi	fp,sp,28
 80071d4:	e13ffd15 	stw	r4,-12(fp)
 80071d8:	e17ffe15 	stw	r5,-8(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 80071dc:	e0bffd17 	ldw	r2,-12(fp)
 80071e0:	e0bffa15 	stw	r2,-24(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071e4:	00800044 	movi	r2,1
 80071e8:	e0bffb15 	stw	r2,-20(fp)

		if( pxMutexHolder != NULL )
 80071ec:	e0bffd17 	ldw	r2,-12(fp)
 80071f0:	10004326 	beq	r2,zero,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071f4:	e0bffa17 	ldw	r2,-24(fp)
 80071f8:	10c01017 	ldw	r3,64(r2)
 80071fc:	e0bffe17 	ldw	r2,-8(fp)
 8007200:	1880032e 	bgeu	r3,r2,8007210 <vTaskPriorityDisinheritAfterTimeout+0x50>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007204:	e0bffe17 	ldw	r2,-8(fp)
 8007208:	e0bff915 	stw	r2,-28(fp)
 800720c:	00000306 	br	800721c <vTaskPriorityDisinheritAfterTimeout+0x5c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007210:	e0bffa17 	ldw	r2,-24(fp)
 8007214:	10801017 	ldw	r2,64(r2)
 8007218:	e0bff915 	stw	r2,-28(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800721c:	e0bffa17 	ldw	r2,-24(fp)
 8007220:	10c00b17 	ldw	r3,44(r2)
 8007224:	e0bff917 	ldw	r2,-28(fp)
 8007228:	18803526 	beq	r3,r2,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800722c:	e0bffa17 	ldw	r2,-24(fp)
 8007230:	10c01117 	ldw	r3,68(r2)
 8007234:	e0bffb17 	ldw	r2,-20(fp)
 8007238:	1880311e 	bne	r3,r2,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800723c:	e0bffa17 	ldw	r2,-24(fp)
 8007240:	10800b17 	ldw	r2,44(r2)
 8007244:	e0bffc15 	stw	r2,-16(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 8007248:	e0bffa17 	ldw	r2,-24(fp)
 800724c:	e0fff917 	ldw	r3,-28(fp)
 8007250:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007254:	e0bffa17 	ldw	r2,-24(fp)
 8007258:	10800617 	ldw	r2,24(r2)
 800725c:	10000516 	blt	r2,zero,8007274 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007260:	00c00144 	movi	r3,5
 8007264:	e0bff917 	ldw	r2,-28(fp)
 8007268:	1887c83a 	sub	r3,r3,r2
 800726c:	e0bffa17 	ldw	r2,-24(fp)
 8007270:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007274:	e0bffa17 	ldw	r2,-24(fp)
 8007278:	14000517 	ldw	r16,20(r2)
 800727c:	01400504 	movi	r5,20
 8007280:	e13ffc17 	ldw	r4,-16(fp)
 8007284:	80082e00 	call	80082e0 <__mulsi3>
 8007288:	1007883a 	mov	r3,r2
 800728c:	00822074 	movhi	r2,2177
 8007290:	108a3a04 	addi	r2,r2,10472
 8007294:	1885883a 	add	r2,r3,r2
 8007298:	8080191e 	bne	r16,r2,8007300 <vTaskPriorityDisinheritAfterTimeout+0x140>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729c:	e0bffa17 	ldw	r2,-24(fp)
 80072a0:	10800104 	addi	r2,r2,4
 80072a4:	1009883a 	mov	r4,r2
 80072a8:	80039d80 	call	80039d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072ac:	e0bffa17 	ldw	r2,-24(fp)
 80072b0:	10800b17 	ldw	r2,44(r2)
 80072b4:	d0e77e17 	ldw	r3,-25096(gp)
 80072b8:	1880032e 	bgeu	r3,r2,80072c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
 80072bc:	e0bffa17 	ldw	r2,-24(fp)
 80072c0:	10800b17 	ldw	r2,44(r2)
 80072c4:	d0a77e15 	stw	r2,-25096(gp)
 80072c8:	e0bffa17 	ldw	r2,-24(fp)
 80072cc:	10800b17 	ldw	r2,44(r2)
 80072d0:	01400504 	movi	r5,20
 80072d4:	1009883a 	mov	r4,r2
 80072d8:	80082e00 	call	80082e0 <__mulsi3>
 80072dc:	1007883a 	mov	r3,r2
 80072e0:	00822074 	movhi	r2,2177
 80072e4:	108a3a04 	addi	r2,r2,10472
 80072e8:	1887883a 	add	r3,r3,r2
 80072ec:	e0bffa17 	ldw	r2,-24(fp)
 80072f0:	10800104 	addi	r2,r2,4
 80072f4:	100b883a 	mov	r5,r2
 80072f8:	1809883a 	mov	r4,r3
 80072fc:	80038740 	call	8003874 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007300:	0001883a 	nop
 8007304:	e6ffff04 	addi	sp,fp,-4
 8007308:	dfc00217 	ldw	ra,8(sp)
 800730c:	df000117 	ldw	fp,4(sp)
 8007310:	dc000017 	ldw	r16,0(sp)
 8007314:	dec00304 	addi	sp,sp,12
 8007318:	f800283a 	ret

0800731c <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 800731c:	defffe04 	addi	sp,sp,-8
 8007320:	df000115 	stw	fp,4(sp)
 8007324:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007328:	0005303a 	rdctl	r2,status
 800732c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007330:	e0ffff17 	ldw	r3,-4(fp)
 8007334:	00bfff84 	movi	r2,-2
 8007338:	1884703a 	and	r2,r3,r2
 800733c:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 8007340:	d0a77f17 	ldw	r2,-25092(gp)
 8007344:	10000526 	beq	r2,zero,800735c <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 8007348:	d0a77817 	ldw	r2,-25120(gp)
 800734c:	10c00f17 	ldw	r3,60(r2)
 8007350:	18c00044 	addi	r3,r3,1
 8007354:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 8007358:	d0a77817 	ldw	r2,-25120(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800735c:	0001883a 	nop
 8007360:	e037883a 	mov	sp,fp
 8007364:	df000017 	ldw	fp,0(sp)
 8007368:	dec00104 	addi	sp,sp,4
 800736c:	f800283a 	ret

08007370 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 8007370:	defffe04 	addi	sp,sp,-8
 8007374:	df000115 	stw	fp,4(sp)
 8007378:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 800737c:	d0a77f17 	ldw	r2,-25092(gp)
 8007380:	10000e26 	beq	r2,zero,80073bc <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 8007384:	d0a77817 	ldw	r2,-25120(gp)
 8007388:	10800f17 	ldw	r2,60(r2)
 800738c:	10000b26 	beq	r2,zero,80073bc <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 8007390:	d0a77817 	ldw	r2,-25120(gp)
 8007394:	10c00f17 	ldw	r3,60(r2)
 8007398:	18ffffc4 	addi	r3,r3,-1
 800739c:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 80073a0:	d0a77817 	ldw	r2,-25120(gp)
 80073a4:	10800f17 	ldw	r2,60(r2)
 80073a8:	1000041e 	bne	r2,zero,80073bc <vTaskExitCritical+0x4c>
 80073ac:	00800044 	movi	r2,1
 80073b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80073b4:	e0bfff17 	ldw	r2,-4(fp)
 80073b8:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073bc:	0001883a 	nop
 80073c0:	e037883a 	mov	sp,fp
 80073c4:	df000017 	ldw	fp,0(sp)
 80073c8:	dec00104 	addi	sp,sp,4
 80073cc:	f800283a 	ret

080073d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80073d0:	defffe04 	addi	sp,sp,-8
 80073d4:	df000115 	stw	fp,4(sp)
 80073d8:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80073dc:	d0a77817 	ldw	r2,-25120(gp)
 80073e0:	10800617 	ldw	r2,24(r2)
 80073e4:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e8:	d0a77817 	ldw	r2,-25120(gp)
 80073ec:	d0e77817 	ldw	r3,-25120(gp)
 80073f0:	18c00b17 	ldw	r3,44(r3)
 80073f4:	01000144 	movi	r4,5
 80073f8:	20c7c83a 	sub	r3,r4,r3
 80073fc:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 8007400:	e0bfff17 	ldw	r2,-4(fp)
}
 8007404:	e037883a 	mov	sp,fp
 8007408:	df000017 	ldw	fp,0(sp)
 800740c:	dec00104 	addi	sp,sp,4
 8007410:	f800283a 	ret

08007414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007414:	deffff04 	addi	sp,sp,-4
 8007418:	df000015 	stw	fp,0(sp)
 800741c:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007420:	d0a77817 	ldw	r2,-25120(gp)
 8007424:	10000426 	beq	r2,zero,8007438 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007428:	d0a77817 	ldw	r2,-25120(gp)
 800742c:	10c01117 	ldw	r3,68(r2)
 8007430:	18c00044 	addi	r3,r3,1
 8007434:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 8007438:	d0a77817 	ldw	r2,-25120(gp)
	}
 800743c:	e037883a 	mov	sp,fp
 8007440:	df000017 	ldw	fp,0(sp)
 8007444:	dec00104 	addi	sp,sp,4
 8007448:	f800283a 	ret

0800744c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800744c:	defffb04 	addi	sp,sp,-20
 8007450:	dfc00415 	stw	ra,16(sp)
 8007454:	df000315 	stw	fp,12(sp)
 8007458:	df000304 	addi	fp,sp,12
 800745c:	e13ffe15 	stw	r4,-8(fp)
 8007460:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007464:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007468:	d0a77817 	ldw	r2,-25120(gp)
 800746c:	10801217 	ldw	r2,72(r2)
 8007470:	1000091e 	bne	r2,zero,8007498 <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007474:	d0a77817 	ldw	r2,-25120(gp)
 8007478:	00c00044 	movi	r3,1
 800747c:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 8007480:	e0bfff17 	ldw	r2,-4(fp)
 8007484:	10000426 	beq	r2,zero,8007498 <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007488:	01400044 	movi	r5,1
 800748c:	e13fff17 	ldw	r4,-4(fp)
 8007490:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007494:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007498:	80073700 	call	8007370 <vTaskExitCritical>

		taskENTER_CRITICAL();
 800749c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80074a0:	d0a77817 	ldw	r2,-25120(gp)
 80074a4:	10801217 	ldw	r2,72(r2)
 80074a8:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 80074ac:	e0bffd17 	ldw	r2,-12(fp)
 80074b0:	10000926 	beq	r2,zero,80074d8 <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 80074b4:	e0bffe17 	ldw	r2,-8(fp)
 80074b8:	10000326 	beq	r2,zero,80074c8 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80074bc:	d0a77817 	ldw	r2,-25120(gp)
 80074c0:	10001215 	stw	zero,72(r2)
 80074c4:	00000406 	br	80074d8 <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80074c8:	d0a77817 	ldw	r2,-25120(gp)
 80074cc:	e0fffd17 	ldw	r3,-12(fp)
 80074d0:	18ffffc4 	addi	r3,r3,-1
 80074d4:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074d8:	d0a77817 	ldw	r2,-25120(gp)
 80074dc:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 80074e0:	80073700 	call	8007370 <vTaskExitCritical>

		return ulReturn;
 80074e4:	e0bffd17 	ldw	r2,-12(fp)
	}
 80074e8:	e037883a 	mov	sp,fp
 80074ec:	dfc00117 	ldw	ra,4(sp)
 80074f0:	df000017 	ldw	fp,0(sp)
 80074f4:	dec00204 	addi	sp,sp,8
 80074f8:	f800283a 	ret

080074fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80074fc:	defff904 	addi	sp,sp,-28
 8007500:	dfc00615 	stw	ra,24(sp)
 8007504:	df000515 	stw	fp,20(sp)
 8007508:	df000504 	addi	fp,sp,20
 800750c:	e13ffc15 	stw	r4,-16(fp)
 8007510:	e17ffd15 	stw	r5,-12(fp)
 8007514:	e1bffe15 	stw	r6,-8(fp)
 8007518:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800751c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007520:	d0a77817 	ldw	r2,-25120(gp)
 8007524:	10801303 	ldbu	r2,76(r2)
 8007528:	10803fcc 	andi	r2,r2,255
 800752c:	108000a0 	cmpeqi	r2,r2,2
 8007530:	10000f1e 	bne	r2,zero,8007570 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007534:	d0a77817 	ldw	r2,-25120(gp)
 8007538:	11001217 	ldw	r4,72(r2)
 800753c:	e0fffc17 	ldw	r3,-16(fp)
 8007540:	00c6303a 	nor	r3,zero,r3
 8007544:	20c6703a 	and	r3,r4,r3
 8007548:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800754c:	d0a77817 	ldw	r2,-25120(gp)
 8007550:	00c00044 	movi	r3,1
 8007554:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 8007558:	e0bfff17 	ldw	r2,-4(fp)
 800755c:	10000426 	beq	r2,zero,8007570 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007560:	01400044 	movi	r5,1
 8007564:	e13fff17 	ldw	r4,-4(fp)
 8007568:	8007b3c0 	call	8007b3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800756c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007570:	80073700 	call	8007370 <vTaskExitCritical>

		taskENTER_CRITICAL();
 8007574:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007578:	e0bffe17 	ldw	r2,-8(fp)
 800757c:	10000426 	beq	r2,zero,8007590 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007580:	d0a77817 	ldw	r2,-25120(gp)
 8007584:	10c01217 	ldw	r3,72(r2)
 8007588:	e0bffe17 	ldw	r2,-8(fp)
 800758c:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007590:	d0a77817 	ldw	r2,-25120(gp)
 8007594:	10801303 	ldbu	r2,76(r2)
 8007598:	10803fcc 	andi	r2,r2,255
 800759c:	108000a0 	cmpeqi	r2,r2,2
 80075a0:	1000021e 	bne	r2,zero,80075ac <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80075a4:	e03ffb15 	stw	zero,-20(fp)
 80075a8:	00000806 	br	80075cc <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80075ac:	d0a77817 	ldw	r2,-25120(gp)
 80075b0:	11001217 	ldw	r4,72(r2)
 80075b4:	e0fffd17 	ldw	r3,-12(fp)
 80075b8:	00c6303a 	nor	r3,zero,r3
 80075bc:	20c6703a 	and	r3,r4,r3
 80075c0:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 80075c4:	00800044 	movi	r2,1
 80075c8:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075cc:	d0a77817 	ldw	r2,-25120(gp)
 80075d0:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 80075d4:	80073700 	call	8007370 <vTaskExitCritical>

		return xReturn;
 80075d8:	e0bffb17 	ldw	r2,-20(fp)
	}
 80075dc:	e037883a 	mov	sp,fp
 80075e0:	dfc00117 	ldw	ra,4(sp)
 80075e4:	df000017 	ldw	fp,0(sp)
 80075e8:	dec00204 	addi	sp,sp,8
 80075ec:	f800283a 	ret

080075f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80075f0:	defff704 	addi	sp,sp,-36
 80075f4:	dfc00815 	stw	ra,32(sp)
 80075f8:	df000715 	stw	fp,28(sp)
 80075fc:	df000704 	addi	fp,sp,28
 8007600:	e13ffc15 	stw	r4,-16(fp)
 8007604:	e17ffd15 	stw	r5,-12(fp)
 8007608:	e1bffe15 	stw	r6,-8(fp)
 800760c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007610:	00800044 	movi	r2,1
 8007614:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 8007618:	e0bffc17 	ldw	r2,-16(fp)
 800761c:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 8007620:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007624:	e0bfff17 	ldw	r2,-4(fp)
 8007628:	10000426 	beq	r2,zero,800763c <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800762c:	e0bffa17 	ldw	r2,-24(fp)
 8007630:	10c01217 	ldw	r3,72(r2)
 8007634:	e0bfff17 	ldw	r2,-4(fp)
 8007638:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800763c:	e0bffa17 	ldw	r2,-24(fp)
 8007640:	10801303 	ldbu	r2,76(r2)
 8007644:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007648:	e0bffa17 	ldw	r2,-24(fp)
 800764c:	00c00084 	movi	r3,2
 8007650:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 8007654:	e0bffe17 	ldw	r2,-8(fp)
 8007658:	10800168 	cmpgeui	r2,r2,5
 800765c:	1000261e 	bne	r2,zero,80076f8 <xTaskGenericNotify+0x108>
 8007660:	e0bffe17 	ldw	r2,-8(fp)
 8007664:	100690ba 	slli	r3,r2,2
 8007668:	00820034 	movhi	r2,2048
 800766c:	109d9f04 	addi	r2,r2,30332
 8007670:	1885883a 	add	r2,r3,r2
 8007674:	10800017 	ldw	r2,0(r2)
 8007678:	1000683a 	jmp	r2
 800767c:	08007700 	call	800770 <__alt_mem_sdram-0x77ff890>
 8007680:	08007690 	cmplti	zero,at,474
 8007684:	080076ac 	andhi	zero,at,474
 8007688:	080076c4 	addi	zero,at,475
 800768c:	080076d4 	ori	zero,at,475
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007690:	e0bffa17 	ldw	r2,-24(fp)
 8007694:	10c01217 	ldw	r3,72(r2)
 8007698:	e0bffd17 	ldw	r2,-12(fp)
 800769c:	1886b03a 	or	r3,r3,r2
 80076a0:	e0bffa17 	ldw	r2,-24(fp)
 80076a4:	10c01215 	stw	r3,72(r2)
					break;
 80076a8:	00001606 	br	8007704 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80076ac:	e0bffa17 	ldw	r2,-24(fp)
 80076b0:	10801217 	ldw	r2,72(r2)
 80076b4:	10c00044 	addi	r3,r2,1
 80076b8:	e0bffa17 	ldw	r2,-24(fp)
 80076bc:	10c01215 	stw	r3,72(r2)
					break;
 80076c0:	00001006 	br	8007704 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80076c4:	e0bffa17 	ldw	r2,-24(fp)
 80076c8:	e0fffd17 	ldw	r3,-12(fp)
 80076cc:	10c01215 	stw	r3,72(r2)
					break;
 80076d0:	00000c06 	br	8007704 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076d4:	e0bffb03 	ldbu	r2,-20(fp)
 80076d8:	108000a0 	cmpeqi	r2,r2,2
 80076dc:	1000041e 	bne	r2,zero,80076f0 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80076e0:	e0bffa17 	ldw	r2,-24(fp)
 80076e4:	e0fffd17 	ldw	r3,-12(fp)
 80076e8:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80076ec:	00000506 	br	8007704 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80076f0:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 80076f4:	00000306 	br	8007704 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 80076f8:	0001883a 	nop
 80076fc:	00000106 	br	8007704 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8007700:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007704:	e0bffb03 	ldbu	r2,-20(fp)
 8007708:	10800058 	cmpnei	r2,r2,1
 800770c:	10001f1e 	bne	r2,zero,800778c <xTaskGenericNotify+0x19c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007710:	e0bffa17 	ldw	r2,-24(fp)
 8007714:	10800104 	addi	r2,r2,4
 8007718:	1009883a 	mov	r4,r2
 800771c:	80039d80 	call	80039d8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007720:	e0bffa17 	ldw	r2,-24(fp)
 8007724:	10800b17 	ldw	r2,44(r2)
 8007728:	d0e77e17 	ldw	r3,-25096(gp)
 800772c:	1880032e 	bgeu	r3,r2,800773c <xTaskGenericNotify+0x14c>
 8007730:	e0bffa17 	ldw	r2,-24(fp)
 8007734:	10800b17 	ldw	r2,44(r2)
 8007738:	d0a77e15 	stw	r2,-25096(gp)
 800773c:	e0bffa17 	ldw	r2,-24(fp)
 8007740:	10800b17 	ldw	r2,44(r2)
 8007744:	01400504 	movi	r5,20
 8007748:	1009883a 	mov	r4,r2
 800774c:	80082e00 	call	80082e0 <__mulsi3>
 8007750:	1007883a 	mov	r3,r2
 8007754:	00822074 	movhi	r2,2177
 8007758:	108a3a04 	addi	r2,r2,10472
 800775c:	1887883a 	add	r3,r3,r2
 8007760:	e0bffa17 	ldw	r2,-24(fp)
 8007764:	10800104 	addi	r2,r2,4
 8007768:	100b883a 	mov	r5,r2
 800776c:	1809883a 	mov	r4,r3
 8007770:	80038740 	call	8003874 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007774:	e0bffa17 	ldw	r2,-24(fp)
 8007778:	10800b17 	ldw	r2,44(r2)
 800777c:	d0e77817 	ldw	r3,-25120(gp)
 8007780:	18c00b17 	ldw	r3,44(r3)
 8007784:	1880012e 	bgeu	r3,r2,800778c <xTaskGenericNotify+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007788:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800778c:	80073700 	call	8007370 <vTaskExitCritical>

		return xReturn;
 8007790:	e0bff917 	ldw	r2,-28(fp)
	}
 8007794:	e037883a 	mov	sp,fp
 8007798:	dfc00117 	ldw	ra,4(sp)
 800779c:	df000017 	ldw	fp,0(sp)
 80077a0:	dec00204 	addi	sp,sp,8
 80077a4:	f800283a 	ret

080077a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077a8:	defff604 	addi	sp,sp,-40
 80077ac:	dfc00915 	stw	ra,36(sp)
 80077b0:	df000815 	stw	fp,32(sp)
 80077b4:	df000804 	addi	fp,sp,32
 80077b8:	e13ffc15 	stw	r4,-16(fp)
 80077bc:	e17ffd15 	stw	r5,-12(fp)
 80077c0:	e1bffe15 	stw	r6,-8(fp)
 80077c4:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80077c8:	00800044 	movi	r2,1
 80077cc:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80077d0:	e0bffc17 	ldw	r2,-16(fp)
 80077d4:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077d8:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 80077dc:	e0bfff17 	ldw	r2,-4(fp)
 80077e0:	10000426 	beq	r2,zero,80077f4 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80077e4:	e0bff917 	ldw	r2,-28(fp)
 80077e8:	10c01217 	ldw	r3,72(r2)
 80077ec:	e0bfff17 	ldw	r2,-4(fp)
 80077f0:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077f4:	e0bff917 	ldw	r2,-28(fp)
 80077f8:	10801303 	ldbu	r2,76(r2)
 80077fc:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007800:	e0bff917 	ldw	r2,-28(fp)
 8007804:	00c00084 	movi	r3,2
 8007808:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 800780c:	e0bffe17 	ldw	r2,-8(fp)
 8007810:	10800168 	cmpgeui	r2,r2,5
 8007814:	1000261e 	bne	r2,zero,80078b0 <xTaskGenericNotifyFromISR+0x108>
 8007818:	e0bffe17 	ldw	r2,-8(fp)
 800781c:	100690ba 	slli	r3,r2,2
 8007820:	00820034 	movhi	r2,2048
 8007824:	109e0d04 	addi	r2,r2,30772
 8007828:	1885883a 	add	r2,r3,r2
 800782c:	10800017 	ldw	r2,0(r2)
 8007830:	1000683a 	jmp	r2
 8007834:	080078b8 	rdprs	zero,at,482
 8007838:	08007848 	cmpgei	zero,at,481
 800783c:	08007864 	muli	zero,at,481
 8007840:	0800787c 	xorhi	zero,at,481
 8007844:	0800788c 	andi	zero,at,482
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007848:	e0bff917 	ldw	r2,-28(fp)
 800784c:	10c01217 	ldw	r3,72(r2)
 8007850:	e0bffd17 	ldw	r2,-12(fp)
 8007854:	1886b03a 	or	r3,r3,r2
 8007858:	e0bff917 	ldw	r2,-28(fp)
 800785c:	10c01215 	stw	r3,72(r2)
					break;
 8007860:	00001606 	br	80078bc <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007864:	e0bff917 	ldw	r2,-28(fp)
 8007868:	10801217 	ldw	r2,72(r2)
 800786c:	10c00044 	addi	r3,r2,1
 8007870:	e0bff917 	ldw	r2,-28(fp)
 8007874:	10c01215 	stw	r3,72(r2)
					break;
 8007878:	00001006 	br	80078bc <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800787c:	e0bff917 	ldw	r2,-28(fp)
 8007880:	e0fffd17 	ldw	r3,-12(fp)
 8007884:	10c01215 	stw	r3,72(r2)
					break;
 8007888:	00000c06 	br	80078bc <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800788c:	e0bffb03 	ldbu	r2,-20(fp)
 8007890:	108000a0 	cmpeqi	r2,r2,2
 8007894:	1000041e 	bne	r2,zero,80078a8 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007898:	e0bff917 	ldw	r2,-28(fp)
 800789c:	e0fffd17 	ldw	r3,-12(fp)
 80078a0:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80078a4:	00000506 	br	80078bc <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80078a8:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 80078ac:	00000306 	br	80078bc <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 80078b0:	0001883a 	nop
 80078b4:	00000106 	br	80078bc <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 80078b8:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078bc:	e0bffb03 	ldbu	r2,-20(fp)
 80078c0:	10800058 	cmpnei	r2,r2,1
 80078c4:	10002e1e 	bne	r2,zero,8007980 <xTaskGenericNotifyFromISR+0x1d8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c8:	d0a78617 	ldw	r2,-25064(gp)
 80078cc:	10001a1e 	bne	r2,zero,8007938 <xTaskGenericNotifyFromISR+0x190>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d0:	e0bff917 	ldw	r2,-28(fp)
 80078d4:	10800104 	addi	r2,r2,4
 80078d8:	1009883a 	mov	r4,r2
 80078dc:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078e0:	e0bff917 	ldw	r2,-28(fp)
 80078e4:	10800b17 	ldw	r2,44(r2)
 80078e8:	d0e77e17 	ldw	r3,-25096(gp)
 80078ec:	1880032e 	bgeu	r3,r2,80078fc <xTaskGenericNotifyFromISR+0x154>
 80078f0:	e0bff917 	ldw	r2,-28(fp)
 80078f4:	10800b17 	ldw	r2,44(r2)
 80078f8:	d0a77e15 	stw	r2,-25096(gp)
 80078fc:	e0bff917 	ldw	r2,-28(fp)
 8007900:	10800b17 	ldw	r2,44(r2)
 8007904:	01400504 	movi	r5,20
 8007908:	1009883a 	mov	r4,r2
 800790c:	80082e00 	call	80082e0 <__mulsi3>
 8007910:	1007883a 	mov	r3,r2
 8007914:	00822074 	movhi	r2,2177
 8007918:	108a3a04 	addi	r2,r2,10472
 800791c:	1887883a 	add	r3,r3,r2
 8007920:	e0bff917 	ldw	r2,-28(fp)
 8007924:	10800104 	addi	r2,r2,4
 8007928:	100b883a 	mov	r5,r2
 800792c:	1809883a 	mov	r4,r3
 8007930:	80038740 	call	8003874 <vListInsertEnd>
 8007934:	00000606 	br	8007950 <xTaskGenericNotifyFromISR+0x1a8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007938:	e0bff917 	ldw	r2,-28(fp)
 800793c:	10800604 	addi	r2,r2,24
 8007940:	100b883a 	mov	r5,r2
 8007944:	01022074 	movhi	r4,2177
 8007948:	210a5d04 	addi	r4,r4,10612
 800794c:	80038740 	call	8003874 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007950:	e0bff917 	ldw	r2,-28(fp)
 8007954:	10800b17 	ldw	r2,44(r2)
 8007958:	d0e77817 	ldw	r3,-25120(gp)
 800795c:	18c00b17 	ldw	r3,44(r3)
 8007960:	1880072e 	bgeu	r3,r2,8007980 <xTaskGenericNotifyFromISR+0x1d8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007964:	e0800217 	ldw	r2,8(fp)
 8007968:	10000326 	beq	r2,zero,8007978 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800796c:	e0800217 	ldw	r2,8(fp)
 8007970:	00c00044 	movi	r3,1
 8007974:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007978:	00800044 	movi	r2,1
 800797c:	d0a78115 	stw	r2,-25084(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007980:	e0bff817 	ldw	r2,-32(fp)
	}
 8007984:	e037883a 	mov	sp,fp
 8007988:	dfc00117 	ldw	ra,4(sp)
 800798c:	df000017 	ldw	fp,0(sp)
 8007990:	dec00204 	addi	sp,sp,8
 8007994:	f800283a 	ret

08007998 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007998:	defff904 	addi	sp,sp,-28
 800799c:	dfc00615 	stw	ra,24(sp)
 80079a0:	df000515 	stw	fp,20(sp)
 80079a4:	df000504 	addi	fp,sp,20
 80079a8:	e13ffe15 	stw	r4,-8(fp)
 80079ac:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80079b0:	e0bffe17 	ldw	r2,-8(fp)
 80079b4:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079b8:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80079bc:	e0bffb17 	ldw	r2,-20(fp)
 80079c0:	10801303 	ldbu	r2,76(r2)
 80079c4:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079c8:	e0bffb17 	ldw	r2,-20(fp)
 80079cc:	00c00084 	movi	r3,2
 80079d0:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80079d4:	e0bffb17 	ldw	r2,-20(fp)
 80079d8:	10801217 	ldw	r2,72(r2)
 80079dc:	10c00044 	addi	r3,r2,1
 80079e0:	e0bffb17 	ldw	r2,-20(fp)
 80079e4:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079e8:	e0bffd03 	ldbu	r2,-12(fp)
 80079ec:	10800058 	cmpnei	r2,r2,1
 80079f0:	10002e1e 	bne	r2,zero,8007aac <vTaskNotifyGiveFromISR+0x114>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079f4:	d0a78617 	ldw	r2,-25064(gp)
 80079f8:	10001a1e 	bne	r2,zero,8007a64 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079fc:	e0bffb17 	ldw	r2,-20(fp)
 8007a00:	10800104 	addi	r2,r2,4
 8007a04:	1009883a 	mov	r4,r2
 8007a08:	80039d80 	call	80039d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a0c:	e0bffb17 	ldw	r2,-20(fp)
 8007a10:	10800b17 	ldw	r2,44(r2)
 8007a14:	d0e77e17 	ldw	r3,-25096(gp)
 8007a18:	1880032e 	bgeu	r3,r2,8007a28 <vTaskNotifyGiveFromISR+0x90>
 8007a1c:	e0bffb17 	ldw	r2,-20(fp)
 8007a20:	10800b17 	ldw	r2,44(r2)
 8007a24:	d0a77e15 	stw	r2,-25096(gp)
 8007a28:	e0bffb17 	ldw	r2,-20(fp)
 8007a2c:	10800b17 	ldw	r2,44(r2)
 8007a30:	01400504 	movi	r5,20
 8007a34:	1009883a 	mov	r4,r2
 8007a38:	80082e00 	call	80082e0 <__mulsi3>
 8007a3c:	1007883a 	mov	r3,r2
 8007a40:	00822074 	movhi	r2,2177
 8007a44:	108a3a04 	addi	r2,r2,10472
 8007a48:	1887883a 	add	r3,r3,r2
 8007a4c:	e0bffb17 	ldw	r2,-20(fp)
 8007a50:	10800104 	addi	r2,r2,4
 8007a54:	100b883a 	mov	r5,r2
 8007a58:	1809883a 	mov	r4,r3
 8007a5c:	80038740 	call	8003874 <vListInsertEnd>
 8007a60:	00000606 	br	8007a7c <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a64:	e0bffb17 	ldw	r2,-20(fp)
 8007a68:	10800604 	addi	r2,r2,24
 8007a6c:	100b883a 	mov	r5,r2
 8007a70:	01022074 	movhi	r4,2177
 8007a74:	210a5d04 	addi	r4,r4,10612
 8007a78:	80038740 	call	8003874 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a7c:	e0bffb17 	ldw	r2,-20(fp)
 8007a80:	10800b17 	ldw	r2,44(r2)
 8007a84:	d0e77817 	ldw	r3,-25120(gp)
 8007a88:	18c00b17 	ldw	r3,44(r3)
 8007a8c:	1880072e 	bgeu	r3,r2,8007aac <vTaskNotifyGiveFromISR+0x114>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a90:	e0bfff17 	ldw	r2,-4(fp)
 8007a94:	10000326 	beq	r2,zero,8007aa4 <vTaskNotifyGiveFromISR+0x10c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a98:	e0bfff17 	ldw	r2,-4(fp)
 8007a9c:	00c00044 	movi	r3,1
 8007aa0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007aa4:	00800044 	movi	r2,1
 8007aa8:	d0a78115 	stw	r2,-25084(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8007aac:	0001883a 	nop
 8007ab0:	e037883a 	mov	sp,fp
 8007ab4:	dfc00117 	ldw	ra,4(sp)
 8007ab8:	df000017 	ldw	fp,0(sp)
 8007abc:	dec00204 	addi	sp,sp,8
 8007ac0:	f800283a 	ret

08007ac4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007ac4:	defffb04 	addi	sp,sp,-20
 8007ac8:	dfc00415 	stw	ra,16(sp)
 8007acc:	df000315 	stw	fp,12(sp)
 8007ad0:	df000304 	addi	fp,sp,12
 8007ad4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007ad8:	e0bfff17 	ldw	r2,-4(fp)
 8007adc:	1000021e 	bne	r2,zero,8007ae8 <xTaskNotifyStateClear+0x24>
 8007ae0:	d0a77817 	ldw	r2,-25120(gp)
 8007ae4:	00000106 	br	8007aec <xTaskNotifyStateClear+0x28>
 8007ae8:	e0bfff17 	ldw	r2,-4(fp)
 8007aec:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 8007af0:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007af4:	e0bffe17 	ldw	r2,-8(fp)
 8007af8:	10801303 	ldbu	r2,76(r2)
 8007afc:	10803fcc 	andi	r2,r2,255
 8007b00:	10800098 	cmpnei	r2,r2,2
 8007b04:	1000051e 	bne	r2,zero,8007b1c <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b08:	e0bffe17 	ldw	r2,-8(fp)
 8007b0c:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 8007b10:	00800044 	movi	r2,1
 8007b14:	e0bffd15 	stw	r2,-12(fp)
 8007b18:	00000106 	br	8007b20 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 8007b1c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 8007b20:	80073700 	call	8007370 <vTaskExitCritical>

		return xReturn;
 8007b24:	e0bffd17 	ldw	r2,-12(fp)
	}
 8007b28:	e037883a 	mov	sp,fp
 8007b2c:	dfc00117 	ldw	ra,4(sp)
 8007b30:	df000017 	ldw	fp,0(sp)
 8007b34:	dec00204 	addi	sp,sp,8
 8007b38:	f800283a 	ret

08007b3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b3c:	defffa04 	addi	sp,sp,-24
 8007b40:	dfc00515 	stw	ra,20(sp)
 8007b44:	df000415 	stw	fp,16(sp)
 8007b48:	df000404 	addi	fp,sp,16
 8007b4c:	e13ffe15 	stw	r4,-8(fp)
 8007b50:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b54:	d0a77d17 	ldw	r2,-25100(gp)
 8007b58:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b5c:	d0a77817 	ldw	r2,-25120(gp)
 8007b60:	10800104 	addi	r2,r2,4
 8007b64:	1009883a 	mov	r4,r2
 8007b68:	80039d80 	call	80039d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b6c:	e0bffe17 	ldw	r2,-8(fp)
 8007b70:	10bfffd8 	cmpnei	r2,r2,-1
 8007b74:	1000091e 	bne	r2,zero,8007b9c <prvAddCurrentTaskToDelayedList+0x60>
 8007b78:	e0bfff17 	ldw	r2,-4(fp)
 8007b7c:	10000726 	beq	r2,zero,8007b9c <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b80:	d0a77817 	ldw	r2,-25120(gp)
 8007b84:	10800104 	addi	r2,r2,4
 8007b88:	100b883a 	mov	r5,r2
 8007b8c:	01022074 	movhi	r4,2177
 8007b90:	210a6704 	addi	r4,r4,10652
 8007b94:	80038740 	call	8003874 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b98:	00001c06 	br	8007c0c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b9c:	e0fffc17 	ldw	r3,-16(fp)
 8007ba0:	e0bffe17 	ldw	r2,-8(fp)
 8007ba4:	1885883a 	add	r2,r3,r2
 8007ba8:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bac:	d0a77817 	ldw	r2,-25120(gp)
 8007bb0:	e0fffd17 	ldw	r3,-12(fp)
 8007bb4:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 8007bb8:	e0fffd17 	ldw	r3,-12(fp)
 8007bbc:	e0bffc17 	ldw	r2,-16(fp)
 8007bc0:	1880072e 	bgeu	r3,r2,8007be0 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bc4:	d0e77a17 	ldw	r3,-25112(gp)
 8007bc8:	d0a77817 	ldw	r2,-25120(gp)
 8007bcc:	10800104 	addi	r2,r2,4
 8007bd0:	100b883a 	mov	r5,r2
 8007bd4:	1809883a 	mov	r4,r3
 8007bd8:	80039000 	call	8003900 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bdc:	00000b06 	br	8007c0c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be0:	d0e77917 	ldw	r3,-25116(gp)
 8007be4:	d0a77817 	ldw	r2,-25120(gp)
 8007be8:	10800104 	addi	r2,r2,4
 8007bec:	100b883a 	mov	r5,r2
 8007bf0:	1809883a 	mov	r4,r3
 8007bf4:	80039000 	call	8003900 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bf8:	d0a78417 	ldw	r2,-25072(gp)
 8007bfc:	e0fffd17 	ldw	r3,-12(fp)
 8007c00:	1880022e 	bgeu	r3,r2,8007c0c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8007c04:	e0bffd17 	ldw	r2,-12(fp)
 8007c08:	d0a78415 	stw	r2,-25072(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c0c:	0001883a 	nop
 8007c10:	e037883a 	mov	sp,fp
 8007c14:	dfc00117 	ldw	ra,4(sp)
 8007c18:	df000017 	ldw	fp,0(sp)
 8007c1c:	dec00204 	addi	sp,sp,8
 8007c20:	f800283a 	ret

08007c24 <xSerialPortInitMinimal>:
static void vUARTReceiveHandler( alt_u32 status );
static void vUARTTransmitHandler( alt_u32 status );
/*---------------------------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
 8007c24:	defffb04 	addi	sp,sp,-20
 8007c28:	dfc00415 	stw	ra,16(sp)
 8007c2c:	df000315 	stw	fp,12(sp)
 8007c30:	df000304 	addi	fp,sp,12
 8007c34:	e13ffe15 	stw	r4,-8(fp)
 8007c38:	e17fff15 	stw	r5,-4(fp)
	/* Create the queues used to hold Rx and Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8007c3c:	000d883a 	mov	r6,zero
 8007c40:	01400044 	movi	r5,1
 8007c44:	e13fff17 	ldw	r4,-4(fp)
 8007c48:	80043880 	call	8004388 <xQueueGenericCreate>
 8007c4c:	d0a78715 	stw	r2,-25060(gp)
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8007c50:	e0bfff17 	ldw	r2,-4(fp)
 8007c54:	10800044 	addi	r2,r2,1
 8007c58:	000d883a 	mov	r6,zero
 8007c5c:	01400044 	movi	r5,1
 8007c60:	1009883a 	mov	r4,r2
 8007c64:	80043880 	call	8004388 <xQueueGenericCreate>
 8007c68:	d0a78815 	stw	r2,-25056(gp)

	/* If the queues were created correctly then setup the serial port hardware. */
	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
 8007c6c:	d0a78717 	ldw	r2,-25060(gp)
 8007c70:	10001426 	beq	r2,zero,8007cc4 <xSerialPortInitMinimal+0xa0>
 8007c74:	d0a78817 	ldw	r2,-25056(gp)
 8007c78:	10001226 	beq	r2,zero,8007cc4 <xSerialPortInitMinimal+0xa0>
	{
		portENTER_CRITICAL();
 8007c7c:	800731c0 	call	800731c <vTaskEnterCritical>
		{
			uartControl = ALTERA_AVALON_UART_CONTROL_RTS_MSK | ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
 8007c80:	00832004 	movi	r2,3200
 8007c84:	d0a78915 	stw	r2,-25052(gp)
			IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007c88:	d0a78917 	ldw	r2,-25052(gp)
 8007c8c:	1007883a 	mov	r3,r2
 8007c90:	00840034 	movhi	r2,4096
 8007c94:	10912304 	addi	r2,r2,17548
 8007c98:	10c00035 	stwio	r3,0(r2)

		    /* register the interrupt handler */
			//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ,
 8007c9c:	d8000015 	stw	zero,0(sp)
 8007ca0:	000f883a 	mov	r7,zero
 8007ca4:	01820034 	movhi	r6,2048
 8007ca8:	319fa504 	addi	r6,r6,32404
 8007cac:	01400084 	movi	r5,2
 8007cb0:	0009883a 	mov	r4,zero
 8007cb4:	800b16c0 	call	800b16c <alt_ic_isr_register>
#else
	alt_irq_register ( UART_IRQ, NULL, vUARTInterruptHandler );

#endif
		}
		portEXIT_CRITICAL();
 8007cb8:	80073700 	call	8007370 <vTaskExitCritical>
	}
	else
	{
		return ( xComPortHandle ) 0;
	}
    return ( xComPortHandle ) 1;
 8007cbc:	00800044 	movi	r2,1
 8007cc0:	00000106 	br	8007cc8 <xSerialPortInitMinimal+0xa4>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		return ( xComPortHandle ) 0;
 8007cc4:	0005883a 	mov	r2,zero
	}
    return ( xComPortHandle ) 1;
}
 8007cc8:	e037883a 	mov	sp,fp
 8007ccc:	dfc00117 	ldw	ra,4(sp)
 8007cd0:	df000017 	ldw	fp,0(sp)
 8007cd4:	dec00204 	addi	sp,sp,8
 8007cd8:	f800283a 	ret

08007cdc <vSerialClose>:
/*---------------------------------------------------------------------------*/

void vSerialClose( xComPortHandle xPort )
{
 8007cdc:	defffe04 	addi	sp,sp,-8
 8007ce0:	df000115 	stw	fp,4(sp)
 8007ce4:	df000104 	addi	fp,sp,4
 8007ce8:	e13fff15 	stw	r4,-4(fp)
    /* Never used. */
}
 8007cec:	0001883a 	nop
 8007cf0:	e037883a 	mov	sp,fp
 8007cf4:	df000017 	ldw	fp,0(sp)
 8007cf8:	dec00104 	addi	sp,sp,4
 8007cfc:	f800283a 	ret

08007d00 <xSerialGetChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, portTickType xBlockTime )
{
 8007d00:	defffb04 	addi	sp,sp,-20
 8007d04:	dfc00415 	stw	ra,16(sp)
 8007d08:	df000315 	stw	fp,12(sp)
 8007d0c:	df000304 	addi	fp,sp,12
 8007d10:	e13ffd15 	stw	r4,-12(fp)
 8007d14:	e17ffe15 	stw	r5,-8(fp)
 8007d18:	e1bfff15 	stw	r6,-4(fp)
	( void ) pxPort;


	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 8007d1c:	d0a78717 	ldw	r2,-25060(gp)
 8007d20:	e1bfff17 	ldw	r6,-4(fp)
 8007d24:	e17ffe17 	ldw	r5,-8(fp)
 8007d28:	1009883a 	mov	r4,r2
 8007d2c:	8004a6c0 	call	8004a6c <xQueueReceive>
 8007d30:	10000226 	beq	r2,zero,8007d3c <xSerialGetChar+0x3c>
	{
		return pdTRUE;
 8007d34:	00800044 	movi	r2,1
 8007d38:	00000906 	br	8007d60 <xSerialGetChar+0x60>
	}
	else
	{
		uartControl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8007d3c:	d0a78917 	ldw	r2,-25052(gp)
 8007d40:	10802014 	ori	r2,r2,128
 8007d44:	d0a78915 	stw	r2,-25052(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007d48:	d0a78917 	ldw	r2,-25052(gp)
 8007d4c:	1007883a 	mov	r3,r2
 8007d50:	00840034 	movhi	r2,4096
 8007d54:	10912304 	addi	r2,r2,17548
 8007d58:	10c00035 	stwio	r3,0(r2)
		return pdFALSE;
 8007d5c:	0005883a 	mov	r2,zero
	}
}
 8007d60:	e037883a 	mov	sp,fp
 8007d64:	dfc00117 	ldw	ra,4(sp)
 8007d68:	df000017 	ldw	fp,0(sp)
 8007d6c:	dec00204 	addi	sp,sp,8
 8007d70:	f800283a 	ret

08007d74 <xSerialPutChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, portTickType xBlockTime )
{
 8007d74:	defffa04 	addi	sp,sp,-24
 8007d78:	dfc00515 	stw	ra,20(sp)
 8007d7c:	df000415 	stw	fp,16(sp)
 8007d80:	df000404 	addi	fp,sp,16
 8007d84:	e13ffd15 	stw	r4,-12(fp)
 8007d88:	2805883a 	mov	r2,r5
 8007d8c:	e1bfff15 	stw	r6,-4(fp)
 8007d90:	e0bffe05 	stb	r2,-8(fp)
signed portBASE_TYPE lReturn = pdPASS;
 8007d94:	00800044 	movi	r2,1
 8007d98:	e0bffc15 	stw	r2,-16(fp)

	/* Place the character in the queue of characters to be transmitted. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 8007d9c:	d0a78817 	ldw	r2,-25056(gp)
 8007da0:	e0fffe04 	addi	r3,fp,-8
 8007da4:	000f883a 	mov	r7,zero
 8007da8:	e1bfff17 	ldw	r6,-4(fp)
 8007dac:	180b883a 	mov	r5,r3
 8007db0:	1009883a 	mov	r4,r2
 8007db4:	80046f40 	call	80046f4 <xQueueGenericSend>
 8007db8:	10800058 	cmpnei	r2,r2,1
 8007dbc:	10000b1e 	bne	r2,zero,8007dec <xSerialPutChar+0x78>
	{
        /*Triggers an interrupt on every character or (down) when queue is full. */
        uartControl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8007dc0:	d0a78917 	ldw	r2,-25052(gp)
 8007dc4:	10801014 	ori	r2,r2,64
 8007dc8:	d0a78915 	stw	r2,-25052(gp)
        IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007dcc:	d0a78917 	ldw	r2,-25052(gp)
 8007dd0:	1007883a 	mov	r3,r2
 8007dd4:	00840034 	movhi	r2,4096
 8007dd8:	10912304 	addi	r2,r2,17548
 8007ddc:	10c00035 	stwio	r3,0(r2)
        lReturn = pdPASS;
 8007de0:	00800044 	movi	r2,1
 8007de4:	e0bffc15 	stw	r2,-16(fp)
 8007de8:	00000106 	br	8007df0 <xSerialPutChar+0x7c>
    }
    else
    {
		lReturn = pdFAIL;
 8007dec:	e03ffc15 	stw	zero,-16(fp)
	}
	return lReturn;
 8007df0:	e0bffc17 	ldw	r2,-16(fp)
}
 8007df4:	e037883a 	mov	sp,fp
 8007df8:	dfc00117 	ldw	ra,4(sp)
 8007dfc:	df000017 	ldw	fp,0(sp)
 8007e00:	dec00204 	addi	sp,sp,8
 8007e04:	f800283a 	ret

08007e08 <vSerialPutString>:
/*---------------------------------------------------------------------------*/

void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
{
 8007e08:	defffa04 	addi	sp,sp,-24
 8007e0c:	dfc00515 	stw	ra,20(sp)
 8007e10:	df000415 	stw	fp,16(sp)
 8007e14:	df000404 	addi	fp,sp,16
 8007e18:	e13ffd15 	stw	r4,-12(fp)
 8007e1c:	e17ffe15 	stw	r5,-8(fp)
 8007e20:	3005883a 	mov	r2,r6
 8007e24:	e0bfff0d 	sth	r2,-4(fp)

	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
 8007e28:	e0bffe17 	ldw	r2,-8(fp)
 8007e2c:	e0bffc15 	stw	r2,-16(fp)
	while( *pxNext )
 8007e30:	00000c06 	br	8007e64 <vSerialPutString+0x5c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 8007e34:	e0bffc17 	ldw	r2,-16(fp)
 8007e38:	10800003 	ldbu	r2,0(r2)
 8007e3c:	10803fcc 	andi	r2,r2,255
 8007e40:	1080201c 	xori	r2,r2,128
 8007e44:	10bfe004 	addi	r2,r2,-128
 8007e48:	000d883a 	mov	r6,zero
 8007e4c:	100b883a 	mov	r5,r2
 8007e50:	e13ffd17 	ldw	r4,-12(fp)
 8007e54:	8007d740 	call	8007d74 <xSerialPutChar>
		pxNext++;
 8007e58:	e0bffc17 	ldw	r2,-16(fp)
 8007e5c:	10800044 	addi	r2,r2,1
 8007e60:	e0bffc15 	stw	r2,-16(fp)
	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
	while( *pxNext )
 8007e64:	e0bffc17 	ldw	r2,-16(fp)
 8007e68:	10800003 	ldbu	r2,0(r2)
 8007e6c:	10803fcc 	andi	r2,r2,255
 8007e70:	1080201c 	xori	r2,r2,128
 8007e74:	10bfe004 	addi	r2,r2,-128
 8007e78:	103fee1e 	bne	r2,zero,8007e34 <vSerialPutString+0x2c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
		pxNext++;
	}
}
 8007e7c:	0001883a 	nop
 8007e80:	e037883a 	mov	sp,fp
 8007e84:	dfc00117 	ldw	ra,4(sp)
 8007e88:	df000017 	ldw	fp,0(sp)
 8007e8c:	dec00204 	addi	sp,sp,8
 8007e90:	f800283a 	ret

08007e94 <vUARTInterruptHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void vUARTInterruptHandler(void* context)
#else
static void vUARTInterruptHandler(void* context, alt_u32 id)
#endif
{
 8007e94:	defffc04 	addi	sp,sp,-16
 8007e98:	dfc00315 	stw	ra,12(sp)
 8007e9c:	df000215 	stw	fp,8(sp)
 8007ea0:	df000204 	addi	fp,sp,8
 8007ea4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 status;

	/* Read the status register in order to determine the cause of the
    interrupt. */
	status = IORD_ALTERA_AVALON_UART_STATUS( UART_BASE );
 8007ea8:	00840034 	movhi	r2,4096
 8007eac:	10912204 	addi	r2,r2,17544
 8007eb0:	10800037 	ldwio	r2,0(r2)
 8007eb4:	e0bffe15 	stw	r2,-8(fp)

	/* Clear any error flags set at the device */
	IOWR_ALTERA_AVALON_UART_STATUS( UART_BASE, 0 );
 8007eb8:	0007883a 	mov	r3,zero
 8007ebc:	00840034 	movhi	r2,4096
 8007ec0:	10912204 	addi	r2,r2,17544
 8007ec4:	10c00035 	stwio	r3,0(r2)

	/* process a read irq */
	if ( status & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
 8007ec8:	e0bffe17 	ldw	r2,-8(fp)
 8007ecc:	1080200c 	andi	r2,r2,128
 8007ed0:	10000226 	beq	r2,zero,8007edc <vUARTInterruptHandler+0x48>
	{
		vUARTReceiveHandler( status );
 8007ed4:	e13ffe17 	ldw	r4,-8(fp)
 8007ed8:	8007f080 	call	8007f08 <vUARTReceiveHandler>
	}

	/* process a write irq */
	if ( status & ( ALTERA_AVALON_UART_STATUS_TRDY_MSK  ) )
 8007edc:	e0bffe17 	ldw	r2,-8(fp)
 8007ee0:	1080100c 	andi	r2,r2,64
 8007ee4:	10000226 	beq	r2,zero,8007ef0 <vUARTInterruptHandler+0x5c>
	{
		vUARTTransmitHandler( status );
 8007ee8:	e13ffe17 	ldw	r4,-8(fp)
 8007eec:	8007fac0 	call	8007fac <vUARTTransmitHandler>
	}
}
 8007ef0:	0001883a 	nop
 8007ef4:	e037883a 	mov	sp,fp
 8007ef8:	dfc00117 	ldw	ra,4(sp)
 8007efc:	df000017 	ldw	fp,0(sp)
 8007f00:	dec00204 	addi	sp,sp,8
 8007f04:	f800283a 	ret

08007f08 <vUARTReceiveHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTReceiveHandler( alt_u32 status )
{
 8007f08:	defffb04 	addi	sp,sp,-20
 8007f0c:	dfc00415 	stw	ra,16(sp)
 8007f10:	df000315 	stw	fp,12(sp)
 8007f14:	df000304 	addi	fp,sp,12
 8007f18:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8007f1c:	e03ffe15 	stw	zero,-8(fp)

	/* If there was an error, discard the data */
	if ( status & ( ALTERA_AVALON_UART_STATUS_PE_MSK | ALTERA_AVALON_UART_STATUS_FE_MSK ) )
 8007f20:	e0bfff17 	ldw	r2,-4(fp)
 8007f24:	108000cc 	andi	r2,r2,3
 8007f28:	10000226 	beq	r2,zero,8007f34 <vUARTReceiveHandler+0x2c>
	{
        asm("break");
 8007f2c:	003da03a 	break	0
 8007f30:	00001906 	br	8007f98 <vUARTReceiveHandler+0x90>
		return;
	}

	/* Transfer data from the device to the circular buffer */
	cChar = IORD_ALTERA_AVALON_UART_RXDATA( UART_BASE );
 8007f34:	00840034 	movhi	r2,4096
 8007f38:	10912004 	addi	r2,r2,17536
 8007f3c:	10800037 	ldwio	r2,0(r2)
 8007f40:	e0bffd05 	stb	r2,-12(fp)
	if ( pdTRUE != xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken ) )
 8007f44:	d0a78717 	ldw	r2,-25060(gp)
 8007f48:	e0fffe04 	addi	r3,fp,-8
 8007f4c:	000f883a 	mov	r7,zero
 8007f50:	180d883a 	mov	r6,r3
 8007f54:	e17ffd04 	addi	r5,fp,-12
 8007f58:	1009883a 	mov	r4,r2
 8007f5c:	80048a80 	call	80048a8 <xQueueGenericSendFromISR>
 8007f60:	10800060 	cmpeqi	r2,r2,1
 8007f64:	1000091e 	bne	r2,zero,8007f8c <vUARTReceiveHandler+0x84>
	{
		/* If the circular buffer was full, disable interrupts. Interrupts will
        be re-enabled when data is removed from the buffer. */
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8007f68:	d0e78917 	ldw	r3,-25052(gp)
 8007f6c:	00bfdfc4 	movi	r2,-129
 8007f70:	1884703a 	and	r2,r3,r2
 8007f74:	d0a78915 	stw	r2,-25052(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8007f78:	d0a78917 	ldw	r2,-25052(gp)
 8007f7c:	1007883a 	mov	r3,r2
 8007f80:	00840034 	movhi	r2,4096
 8007f84:	10912304 	addi	r2,r2,17548
 8007f88:	10c00035 	stwio	r3,0(r2)
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8007f8c:	e0bffe17 	ldw	r2,-8(fp)
 8007f90:	10000126 	beq	r2,zero,8007f98 <vUARTReceiveHandler+0x90>
 8007f94:	80067680 	call	8006768 <vTaskSwitchContext>
}
 8007f98:	e037883a 	mov	sp,fp
 8007f9c:	dfc00117 	ldw	ra,4(sp)
 8007fa0:	df000017 	ldw	fp,0(sp)
 8007fa4:	dec00204 	addi	sp,sp,8
 8007fa8:	f800283a 	ret

08007fac <vUARTTransmitHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTTransmitHandler( alt_u32 status )
{
 8007fac:	defffb04 	addi	sp,sp,-20
 8007fb0:	dfc00415 	stw	ra,16(sp)
 8007fb4:	df000315 	stw	fp,12(sp)
 8007fb8:	df000304 	addi	fp,sp,12
 8007fbc:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8007fc0:	e03ffe15 	stw	zero,-8(fp)
	/* Transfer data if there is some ready to be transferred */
	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
 8007fc4:	d0a78817 	ldw	r2,-25056(gp)
 8007fc8:	e0fffe04 	addi	r3,fp,-8
 8007fcc:	180d883a 	mov	r6,r3
 8007fd0:	e17ffd04 	addi	r5,fp,-12
 8007fd4:	1009883a 	mov	r4,r2
 8007fd8:	8004fd40 	call	8004fd4 <xQueueReceiveFromISR>
 8007fdc:	10800058 	cmpnei	r2,r2,1
 8007fe0:	1000081e 	bne	r2,zero,8008004 <vUARTTransmitHandler+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA( UART_BASE, cChar );
 8007fe4:	e0bffd03 	ldbu	r2,-12(fp)
 8007fe8:	10c03fcc 	andi	r3,r2,255
 8007fec:	18c0201c 	xori	r3,r3,128
 8007ff0:	18ffe004 	addi	r3,r3,-128
 8007ff4:	00840034 	movhi	r2,4096
 8007ff8:	10912104 	addi	r2,r2,17540
 8007ffc:	10c00035 	stwio	r3,0(r2)
 8008000:	00000406 	br	8008014 <vUARTTransmitHandler+0x68>
    }
    else
    {
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8008004:	d0e78917 	ldw	r3,-25052(gp)
 8008008:	00bfefc4 	movi	r2,-65
 800800c:	1884703a 	and	r2,r3,r2
 8008010:	d0a78915 	stw	r2,-25052(gp)
    }

	IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8008014:	d0a78917 	ldw	r2,-25052(gp)
 8008018:	1007883a 	mov	r3,r2
 800801c:	00840034 	movhi	r2,4096
 8008020:	10912304 	addi	r2,r2,17548
 8008024:	10c00035 	stwio	r3,0(r2)
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8008028:	e0bffe17 	ldw	r2,-8(fp)
 800802c:	10000126 	beq	r2,zero,8008034 <vUARTTransmitHandler+0x88>
 8008030:	80067680 	call	8006768 <vTaskSwitchContext>
}
 8008034:	0001883a 	nop
 8008038:	e037883a 	mov	sp,fp
 800803c:	dfc00117 	ldw	ra,4(sp)
 8008040:	df000017 	ldw	fp,0(sp)
 8008044:	dec00204 	addi	sp,sp,8
 8008048:	f800283a 	ret

0800804c <main>:
static void prvPrintTask2( void *pvParameters );
//-----------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------
int main()
{
 800804c:	defffc04 	addi	sp,sp,-16
 8008050:	dfc00315 	stw	ra,12(sp)
 8008054:	df000215 	stw	fp,8(sp)
 8008058:	df000204 	addi	fp,sp,8
	/* Configure any hardware required for this demo. */
	vParTestInitialise();
 800805c:	80036a00 	call	80036a0 <vParTestInitialise>

	printf("Hello from Nios II!\n");
 8008060:	01020074 	movhi	r4,2049
 8008064:	213b6804 	addi	r4,r4,-4704
 8008068:	80086380 	call	8008638 <puts>

	/* prvPrintTask1 uses sprintf so requires more stack. */
	xTaskCreate( prvPrintTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, mainTASK1_PRIORITY, NULL );
 800806c:	d8000115 	stw	zero,4(sp)
 8008070:	00800044 	movi	r2,1
 8008074:	d8800015 	stw	r2,0(sp)
 8008078:	000f883a 	mov	r7,zero
 800807c:	01810004 	movi	r6,1024
 8008080:	01420074 	movhi	r5,2049
 8008084:	297b6d04 	addi	r5,r5,-4684
 8008088:	01020074 	movhi	r4,2049
 800808c:	21203104 	addi	r4,r4,-32572
 8008090:	80056e80 	call	80056e8 <xTaskCreate>
	/* prvPrintTask2 uses sprintf so requires more stack. */
	xTaskCreate( prvPrintTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, mainTASK2_PRIORITY, NULL );
 8008094:	d8000115 	stw	zero,4(sp)
 8008098:	00800084 	movi	r2,2
 800809c:	d8800015 	stw	r2,0(sp)
 80080a0:	000f883a 	mov	r7,zero
 80080a4:	01810004 	movi	r6,1024
 80080a8:	01420074 	movhi	r5,2049
 80080ac:	297b6f04 	addi	r5,r5,-4676
 80080b0:	01020074 	movhi	r4,2049
 80080b4:	21203e04 	addi	r4,r4,-32520
 80080b8:	80056e80 	call	80056e8 <xTaskCreate>

      /* Finally start the scheduler. */
	vTaskStartScheduler();
 80080bc:	80062800 	call	8006280 <vTaskStartScheduler>

	/* Will only reach here if there is insufficient heap available to start
	the scheduler. */
	for( ;; );
 80080c0:	003fff06 	br	80080c0 <main+0x74>

080080c4 <prvPrintTask1>:

  return 0;
}
/*-----------------------------------------------------------*/
static void prvPrintTask1( void *pvParameters )
{
 80080c4:	defffd04 	addi	sp,sp,-12
 80080c8:	dfc00215 	stw	ra,8(sp)
 80080cc:	df000115 	stw	fp,4(sp)
 80080d0:	df000104 	addi	fp,sp,4
 80080d4:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK1_PERIOD / portTICK_PERIOD_MS);
 80080d8:	01007d04 	movi	r4,500
 80080dc:	8005c940 	call	8005c94 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task1\r\n" );
 80080e0:	01020074 	movhi	r4,2049
 80080e4:	213b7104 	addi	r4,r4,-4668
 80080e8:	80086380 	call	8008638 <puts>
        /*Control LED 1 DE0-NANO*/
        vParTestToggleLED(1);
 80080ec:	01000044 	movi	r4,1
 80080f0:	80037740 	call	8003774 <vParTestToggleLED>
	}
 80080f4:	003ff806 	br	80080d8 <prvPrintTask1+0x14>

080080f8 <prvPrintTask2>:
}
/*-----------------------------------------------------------*/
static void prvPrintTask2( void *pvParameters )
{
 80080f8:	defffd04 	addi	sp,sp,-12
 80080fc:	dfc00215 	stw	ra,8(sp)
 8008100:	df000115 	stw	fp,4(sp)
 8008104:	df000104 	addi	fp,sp,4
 8008108:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK2_PERIOD / portTICK_PERIOD_MS);
 800810c:	0100fa04 	movi	r4,1000
 8008110:	8005c940 	call	8005c94 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task2\r\n" );
 8008114:	01020074 	movhi	r4,2049
 8008118:	213b7504 	addi	r4,r4,-4652
 800811c:	80086380 	call	8008638 <puts>

        /*Control LED 2 DE0-NANO*/
        vParTestToggleLED(2);
 8008120:	01000084 	movi	r4,2
 8008124:	80037740 	call	8003774 <vParTestToggleLED>
	}
 8008128:	003ff806 	br	800810c <prvPrintTask2+0x14>

0800812c <__divsi3>:
 800812c:	20001b16 	blt	r4,zero,800819c <__divsi3+0x70>
 8008130:	000f883a 	mov	r7,zero
 8008134:	28001616 	blt	r5,zero,8008190 <__divsi3+0x64>
 8008138:	200d883a 	mov	r6,r4
 800813c:	29001a2e 	bgeu	r5,r4,80081a8 <__divsi3+0x7c>
 8008140:	00800804 	movi	r2,32
 8008144:	00c00044 	movi	r3,1
 8008148:	00000106 	br	8008150 <__divsi3+0x24>
 800814c:	10000d26 	beq	r2,zero,8008184 <__divsi3+0x58>
 8008150:	294b883a 	add	r5,r5,r5
 8008154:	10bfffc4 	addi	r2,r2,-1
 8008158:	18c7883a 	add	r3,r3,r3
 800815c:	293ffb36 	bltu	r5,r4,800814c <__divsi3+0x20>
 8008160:	0005883a 	mov	r2,zero
 8008164:	18000726 	beq	r3,zero,8008184 <__divsi3+0x58>
 8008168:	0005883a 	mov	r2,zero
 800816c:	31400236 	bltu	r6,r5,8008178 <__divsi3+0x4c>
 8008170:	314dc83a 	sub	r6,r6,r5
 8008174:	10c4b03a 	or	r2,r2,r3
 8008178:	1806d07a 	srli	r3,r3,1
 800817c:	280ad07a 	srli	r5,r5,1
 8008180:	183ffa1e 	bne	r3,zero,800816c <__divsi3+0x40>
 8008184:	38000126 	beq	r7,zero,800818c <__divsi3+0x60>
 8008188:	0085c83a 	sub	r2,zero,r2
 800818c:	f800283a 	ret
 8008190:	014bc83a 	sub	r5,zero,r5
 8008194:	39c0005c 	xori	r7,r7,1
 8008198:	003fe706 	br	8008138 <__divsi3+0xc>
 800819c:	0109c83a 	sub	r4,zero,r4
 80081a0:	01c00044 	movi	r7,1
 80081a4:	003fe306 	br	8008134 <__divsi3+0x8>
 80081a8:	00c00044 	movi	r3,1
 80081ac:	003fee06 	br	8008168 <__divsi3+0x3c>

080081b0 <__modsi3>:
 80081b0:	20001716 	blt	r4,zero,8008210 <__modsi3+0x60>
 80081b4:	000f883a 	mov	r7,zero
 80081b8:	2005883a 	mov	r2,r4
 80081bc:	28001216 	blt	r5,zero,8008208 <__modsi3+0x58>
 80081c0:	2900162e 	bgeu	r5,r4,800821c <__modsi3+0x6c>
 80081c4:	01800804 	movi	r6,32
 80081c8:	00c00044 	movi	r3,1
 80081cc:	00000106 	br	80081d4 <__modsi3+0x24>
 80081d0:	30000a26 	beq	r6,zero,80081fc <__modsi3+0x4c>
 80081d4:	294b883a 	add	r5,r5,r5
 80081d8:	31bfffc4 	addi	r6,r6,-1
 80081dc:	18c7883a 	add	r3,r3,r3
 80081e0:	293ffb36 	bltu	r5,r4,80081d0 <__modsi3+0x20>
 80081e4:	18000526 	beq	r3,zero,80081fc <__modsi3+0x4c>
 80081e8:	1806d07a 	srli	r3,r3,1
 80081ec:	11400136 	bltu	r2,r5,80081f4 <__modsi3+0x44>
 80081f0:	1145c83a 	sub	r2,r2,r5
 80081f4:	280ad07a 	srli	r5,r5,1
 80081f8:	183ffb1e 	bne	r3,zero,80081e8 <__modsi3+0x38>
 80081fc:	38000126 	beq	r7,zero,8008204 <__modsi3+0x54>
 8008200:	0085c83a 	sub	r2,zero,r2
 8008204:	f800283a 	ret
 8008208:	014bc83a 	sub	r5,zero,r5
 800820c:	003fec06 	br	80081c0 <__modsi3+0x10>
 8008210:	0109c83a 	sub	r4,zero,r4
 8008214:	01c00044 	movi	r7,1
 8008218:	003fe706 	br	80081b8 <__modsi3+0x8>
 800821c:	00c00044 	movi	r3,1
 8008220:	003ff106 	br	80081e8 <__modsi3+0x38>

08008224 <__udivsi3>:
 8008224:	200d883a 	mov	r6,r4
 8008228:	2900152e 	bgeu	r5,r4,8008280 <__udivsi3+0x5c>
 800822c:	28001416 	blt	r5,zero,8008280 <__udivsi3+0x5c>
 8008230:	00800804 	movi	r2,32
 8008234:	00c00044 	movi	r3,1
 8008238:	00000206 	br	8008244 <__udivsi3+0x20>
 800823c:	10000e26 	beq	r2,zero,8008278 <__udivsi3+0x54>
 8008240:	28000516 	blt	r5,zero,8008258 <__udivsi3+0x34>
 8008244:	294b883a 	add	r5,r5,r5
 8008248:	10bfffc4 	addi	r2,r2,-1
 800824c:	18c7883a 	add	r3,r3,r3
 8008250:	293ffa36 	bltu	r5,r4,800823c <__udivsi3+0x18>
 8008254:	18000826 	beq	r3,zero,8008278 <__udivsi3+0x54>
 8008258:	0005883a 	mov	r2,zero
 800825c:	31400236 	bltu	r6,r5,8008268 <__udivsi3+0x44>
 8008260:	314dc83a 	sub	r6,r6,r5
 8008264:	10c4b03a 	or	r2,r2,r3
 8008268:	1806d07a 	srli	r3,r3,1
 800826c:	280ad07a 	srli	r5,r5,1
 8008270:	183ffa1e 	bne	r3,zero,800825c <__udivsi3+0x38>
 8008274:	f800283a 	ret
 8008278:	0005883a 	mov	r2,zero
 800827c:	f800283a 	ret
 8008280:	00c00044 	movi	r3,1
 8008284:	003ff406 	br	8008258 <__udivsi3+0x34>

08008288 <__umodsi3>:
 8008288:	2005883a 	mov	r2,r4
 800828c:	2900122e 	bgeu	r5,r4,80082d8 <__umodsi3+0x50>
 8008290:	28001116 	blt	r5,zero,80082d8 <__umodsi3+0x50>
 8008294:	01800804 	movi	r6,32
 8008298:	00c00044 	movi	r3,1
 800829c:	00000206 	br	80082a8 <__umodsi3+0x20>
 80082a0:	30000c26 	beq	r6,zero,80082d4 <__umodsi3+0x4c>
 80082a4:	28000516 	blt	r5,zero,80082bc <__umodsi3+0x34>
 80082a8:	294b883a 	add	r5,r5,r5
 80082ac:	31bfffc4 	addi	r6,r6,-1
 80082b0:	18c7883a 	add	r3,r3,r3
 80082b4:	293ffa36 	bltu	r5,r4,80082a0 <__umodsi3+0x18>
 80082b8:	18000626 	beq	r3,zero,80082d4 <__umodsi3+0x4c>
 80082bc:	1806d07a 	srli	r3,r3,1
 80082c0:	11400136 	bltu	r2,r5,80082c8 <__umodsi3+0x40>
 80082c4:	1145c83a 	sub	r2,r2,r5
 80082c8:	280ad07a 	srli	r5,r5,1
 80082cc:	183ffb1e 	bne	r3,zero,80082bc <__umodsi3+0x34>
 80082d0:	f800283a 	ret
 80082d4:	f800283a 	ret
 80082d8:	00c00044 	movi	r3,1
 80082dc:	003ff706 	br	80082bc <__umodsi3+0x34>

080082e0 <__mulsi3>:
 80082e0:	0005883a 	mov	r2,zero
 80082e4:	20000726 	beq	r4,zero,8008304 <__mulsi3+0x24>
 80082e8:	20c0004c 	andi	r3,r4,1
 80082ec:	2008d07a 	srli	r4,r4,1
 80082f0:	18000126 	beq	r3,zero,80082f8 <__mulsi3+0x18>
 80082f4:	1145883a 	add	r2,r2,r5
 80082f8:	294b883a 	add	r5,r5,r5
 80082fc:	203ffa1e 	bne	r4,zero,80082e8 <__mulsi3+0x8>
 8008300:	f800283a 	ret
 8008304:	f800283a 	ret

08008308 <memcpy>:
 8008308:	defffd04 	addi	sp,sp,-12
 800830c:	dfc00215 	stw	ra,8(sp)
 8008310:	dc400115 	stw	r17,4(sp)
 8008314:	dc000015 	stw	r16,0(sp)
 8008318:	00c003c4 	movi	r3,15
 800831c:	2005883a 	mov	r2,r4
 8008320:	1980452e 	bgeu	r3,r6,8008438 <memcpy+0x130>
 8008324:	2906b03a 	or	r3,r5,r4
 8008328:	18c000cc 	andi	r3,r3,3
 800832c:	1800441e 	bne	r3,zero,8008440 <memcpy+0x138>
 8008330:	347ffc04 	addi	r17,r6,-16
 8008334:	8822d13a 	srli	r17,r17,4
 8008338:	28c00104 	addi	r3,r5,4
 800833c:	23400104 	addi	r13,r4,4
 8008340:	8820913a 	slli	r16,r17,4
 8008344:	2b000204 	addi	r12,r5,8
 8008348:	22c00204 	addi	r11,r4,8
 800834c:	84000504 	addi	r16,r16,20
 8008350:	2a800304 	addi	r10,r5,12
 8008354:	22400304 	addi	r9,r4,12
 8008358:	2c21883a 	add	r16,r5,r16
 800835c:	2811883a 	mov	r8,r5
 8008360:	200f883a 	mov	r7,r4
 8008364:	41000017 	ldw	r4,0(r8)
 8008368:	1fc00017 	ldw	ra,0(r3)
 800836c:	63c00017 	ldw	r15,0(r12)
 8008370:	39000015 	stw	r4,0(r7)
 8008374:	53800017 	ldw	r14,0(r10)
 8008378:	6fc00015 	stw	ra,0(r13)
 800837c:	5bc00015 	stw	r15,0(r11)
 8008380:	4b800015 	stw	r14,0(r9)
 8008384:	18c00404 	addi	r3,r3,16
 8008388:	39c00404 	addi	r7,r7,16
 800838c:	42000404 	addi	r8,r8,16
 8008390:	6b400404 	addi	r13,r13,16
 8008394:	63000404 	addi	r12,r12,16
 8008398:	5ac00404 	addi	r11,r11,16
 800839c:	52800404 	addi	r10,r10,16
 80083a0:	4a400404 	addi	r9,r9,16
 80083a4:	1c3fef1e 	bne	r3,r16,8008364 <memcpy+0x5c>
 80083a8:	89c00044 	addi	r7,r17,1
 80083ac:	380e913a 	slli	r7,r7,4
 80083b0:	310003cc 	andi	r4,r6,15
 80083b4:	02c000c4 	movi	r11,3
 80083b8:	11c7883a 	add	r3,r2,r7
 80083bc:	29cb883a 	add	r5,r5,r7
 80083c0:	5900212e 	bgeu	r11,r4,8008448 <memcpy+0x140>
 80083c4:	1813883a 	mov	r9,r3
 80083c8:	2811883a 	mov	r8,r5
 80083cc:	200f883a 	mov	r7,r4
 80083d0:	42800017 	ldw	r10,0(r8)
 80083d4:	4a400104 	addi	r9,r9,4
 80083d8:	39ffff04 	addi	r7,r7,-4
 80083dc:	4abfff15 	stw	r10,-4(r9)
 80083e0:	42000104 	addi	r8,r8,4
 80083e4:	59fffa36 	bltu	r11,r7,80083d0 <memcpy+0xc8>
 80083e8:	213fff04 	addi	r4,r4,-4
 80083ec:	2008d0ba 	srli	r4,r4,2
 80083f0:	318000cc 	andi	r6,r6,3
 80083f4:	21000044 	addi	r4,r4,1
 80083f8:	2109883a 	add	r4,r4,r4
 80083fc:	2109883a 	add	r4,r4,r4
 8008400:	1907883a 	add	r3,r3,r4
 8008404:	290b883a 	add	r5,r5,r4
 8008408:	30000626 	beq	r6,zero,8008424 <memcpy+0x11c>
 800840c:	198d883a 	add	r6,r3,r6
 8008410:	29c00003 	ldbu	r7,0(r5)
 8008414:	18c00044 	addi	r3,r3,1
 8008418:	29400044 	addi	r5,r5,1
 800841c:	19ffffc5 	stb	r7,-1(r3)
 8008420:	19bffb1e 	bne	r3,r6,8008410 <memcpy+0x108>
 8008424:	dfc00217 	ldw	ra,8(sp)
 8008428:	dc400117 	ldw	r17,4(sp)
 800842c:	dc000017 	ldw	r16,0(sp)
 8008430:	dec00304 	addi	sp,sp,12
 8008434:	f800283a 	ret
 8008438:	2007883a 	mov	r3,r4
 800843c:	003ff206 	br	8008408 <memcpy+0x100>
 8008440:	2007883a 	mov	r3,r4
 8008444:	003ff106 	br	800840c <memcpy+0x104>
 8008448:	200d883a 	mov	r6,r4
 800844c:	003fee06 	br	8008408 <memcpy+0x100>

08008450 <memset>:
 8008450:	20c000cc 	andi	r3,r4,3
 8008454:	2005883a 	mov	r2,r4
 8008458:	18004426 	beq	r3,zero,800856c <memset+0x11c>
 800845c:	31ffffc4 	addi	r7,r6,-1
 8008460:	30004026 	beq	r6,zero,8008564 <memset+0x114>
 8008464:	2813883a 	mov	r9,r5
 8008468:	200d883a 	mov	r6,r4
 800846c:	2007883a 	mov	r3,r4
 8008470:	00000406 	br	8008484 <memset+0x34>
 8008474:	3a3fffc4 	addi	r8,r7,-1
 8008478:	31800044 	addi	r6,r6,1
 800847c:	38003926 	beq	r7,zero,8008564 <memset+0x114>
 8008480:	400f883a 	mov	r7,r8
 8008484:	18c00044 	addi	r3,r3,1
 8008488:	32400005 	stb	r9,0(r6)
 800848c:	1a0000cc 	andi	r8,r3,3
 8008490:	403ff81e 	bne	r8,zero,8008474 <memset+0x24>
 8008494:	010000c4 	movi	r4,3
 8008498:	21c02d2e 	bgeu	r4,r7,8008550 <memset+0x100>
 800849c:	29003fcc 	andi	r4,r5,255
 80084a0:	200c923a 	slli	r6,r4,8
 80084a4:	3108b03a 	or	r4,r6,r4
 80084a8:	200c943a 	slli	r6,r4,16
 80084ac:	218cb03a 	or	r6,r4,r6
 80084b0:	010003c4 	movi	r4,15
 80084b4:	21c0182e 	bgeu	r4,r7,8008518 <memset+0xc8>
 80084b8:	3b3ffc04 	addi	r12,r7,-16
 80084bc:	6018d13a 	srli	r12,r12,4
 80084c0:	1a000104 	addi	r8,r3,4
 80084c4:	1ac00204 	addi	r11,r3,8
 80084c8:	6008913a 	slli	r4,r12,4
 80084cc:	1a800304 	addi	r10,r3,12
 80084d0:	1813883a 	mov	r9,r3
 80084d4:	21000504 	addi	r4,r4,20
 80084d8:	1909883a 	add	r4,r3,r4
 80084dc:	49800015 	stw	r6,0(r9)
 80084e0:	41800015 	stw	r6,0(r8)
 80084e4:	59800015 	stw	r6,0(r11)
 80084e8:	51800015 	stw	r6,0(r10)
 80084ec:	42000404 	addi	r8,r8,16
 80084f0:	4a400404 	addi	r9,r9,16
 80084f4:	5ac00404 	addi	r11,r11,16
 80084f8:	52800404 	addi	r10,r10,16
 80084fc:	413ff71e 	bne	r8,r4,80084dc <memset+0x8c>
 8008500:	63000044 	addi	r12,r12,1
 8008504:	6018913a 	slli	r12,r12,4
 8008508:	39c003cc 	andi	r7,r7,15
 800850c:	010000c4 	movi	r4,3
 8008510:	1b07883a 	add	r3,r3,r12
 8008514:	21c00e2e 	bgeu	r4,r7,8008550 <memset+0x100>
 8008518:	1813883a 	mov	r9,r3
 800851c:	3811883a 	mov	r8,r7
 8008520:	010000c4 	movi	r4,3
 8008524:	49800015 	stw	r6,0(r9)
 8008528:	423fff04 	addi	r8,r8,-4
 800852c:	4a400104 	addi	r9,r9,4
 8008530:	223ffc36 	bltu	r4,r8,8008524 <memset+0xd4>
 8008534:	393fff04 	addi	r4,r7,-4
 8008538:	2008d0ba 	srli	r4,r4,2
 800853c:	39c000cc 	andi	r7,r7,3
 8008540:	21000044 	addi	r4,r4,1
 8008544:	2109883a 	add	r4,r4,r4
 8008548:	2109883a 	add	r4,r4,r4
 800854c:	1907883a 	add	r3,r3,r4
 8008550:	38000526 	beq	r7,zero,8008568 <memset+0x118>
 8008554:	19cf883a 	add	r7,r3,r7
 8008558:	19400005 	stb	r5,0(r3)
 800855c:	18c00044 	addi	r3,r3,1
 8008560:	38fffd1e 	bne	r7,r3,8008558 <memset+0x108>
 8008564:	f800283a 	ret
 8008568:	f800283a 	ret
 800856c:	2007883a 	mov	r3,r4
 8008570:	300f883a 	mov	r7,r6
 8008574:	003fc706 	br	8008494 <memset+0x44>

08008578 <_puts_r>:
 8008578:	defff604 	addi	sp,sp,-40
 800857c:	dc000715 	stw	r16,28(sp)
 8008580:	2021883a 	mov	r16,r4
 8008584:	2809883a 	mov	r4,r5
 8008588:	dc400815 	stw	r17,32(sp)
 800858c:	dfc00915 	stw	ra,36(sp)
 8008590:	2823883a 	mov	r17,r5
 8008594:	800864c0 	call	800864c <strlen>
 8008598:	10c00044 	addi	r3,r2,1
 800859c:	d8800115 	stw	r2,4(sp)
 80085a0:	00820074 	movhi	r2,2049
 80085a4:	10bb7904 	addi	r2,r2,-4636
 80085a8:	d8800215 	stw	r2,8(sp)
 80085ac:	00800044 	movi	r2,1
 80085b0:	d8800315 	stw	r2,12(sp)
 80085b4:	00800084 	movi	r2,2
 80085b8:	dc400015 	stw	r17,0(sp)
 80085bc:	d8c00615 	stw	r3,24(sp)
 80085c0:	dec00415 	stw	sp,16(sp)
 80085c4:	d8800515 	stw	r2,20(sp)
 80085c8:	80000226 	beq	r16,zero,80085d4 <_puts_r+0x5c>
 80085cc:	80800e17 	ldw	r2,56(r16)
 80085d0:	10001426 	beq	r2,zero,8008624 <_puts_r+0xac>
 80085d4:	81400217 	ldw	r5,8(r16)
 80085d8:	2880030b 	ldhu	r2,12(r5)
 80085dc:	10c8000c 	andi	r3,r2,8192
 80085e0:	1800061e 	bne	r3,zero,80085fc <_puts_r+0x84>
 80085e4:	29001917 	ldw	r4,100(r5)
 80085e8:	00f7ffc4 	movi	r3,-8193
 80085ec:	10880014 	ori	r2,r2,8192
 80085f0:	20c6703a 	and	r3,r4,r3
 80085f4:	2880030d 	sth	r2,12(r5)
 80085f8:	28c01915 	stw	r3,100(r5)
 80085fc:	d9800404 	addi	r6,sp,16
 8008600:	8009883a 	mov	r4,r16
 8008604:	8008a940 	call	8008a94 <__sfvwrite_r>
 8008608:	1000091e 	bne	r2,zero,8008630 <_puts_r+0xb8>
 800860c:	00800284 	movi	r2,10
 8008610:	dfc00917 	ldw	ra,36(sp)
 8008614:	dc400817 	ldw	r17,32(sp)
 8008618:	dc000717 	ldw	r16,28(sp)
 800861c:	dec00a04 	addi	sp,sp,40
 8008620:	f800283a 	ret
 8008624:	8009883a 	mov	r4,r16
 8008628:	8008a440 	call	8008a44 <__sinit>
 800862c:	003fe906 	br	80085d4 <_puts_r+0x5c>
 8008630:	00bfffc4 	movi	r2,-1
 8008634:	003ff606 	br	8008610 <_puts_r+0x98>

08008638 <puts>:
 8008638:	00820074 	movhi	r2,2049
 800863c:	1082a504 	addi	r2,r2,2708
 8008640:	200b883a 	mov	r5,r4
 8008644:	11000017 	ldw	r4,0(r2)
 8008648:	80085781 	jmpi	8008578 <_puts_r>

0800864c <strlen>:
 800864c:	208000cc 	andi	r2,r4,3
 8008650:	10002026 	beq	r2,zero,80086d4 <strlen+0x88>
 8008654:	20800007 	ldb	r2,0(r4)
 8008658:	10002026 	beq	r2,zero,80086dc <strlen+0x90>
 800865c:	2005883a 	mov	r2,r4
 8008660:	00000206 	br	800866c <strlen+0x20>
 8008664:	10c00007 	ldb	r3,0(r2)
 8008668:	18001826 	beq	r3,zero,80086cc <strlen+0x80>
 800866c:	10800044 	addi	r2,r2,1
 8008670:	10c000cc 	andi	r3,r2,3
 8008674:	183ffb1e 	bne	r3,zero,8008664 <strlen+0x18>
 8008678:	10c00017 	ldw	r3,0(r2)
 800867c:	01ffbff4 	movhi	r7,65279
 8008680:	39ffbfc4 	addi	r7,r7,-257
 8008684:	00ca303a 	nor	r5,zero,r3
 8008688:	01a02074 	movhi	r6,32897
 800868c:	19c7883a 	add	r3,r3,r7
 8008690:	31a02004 	addi	r6,r6,-32640
 8008694:	1946703a 	and	r3,r3,r5
 8008698:	1986703a 	and	r3,r3,r6
 800869c:	1800091e 	bne	r3,zero,80086c4 <strlen+0x78>
 80086a0:	10800104 	addi	r2,r2,4
 80086a4:	10c00017 	ldw	r3,0(r2)
 80086a8:	19cb883a 	add	r5,r3,r7
 80086ac:	00c6303a 	nor	r3,zero,r3
 80086b0:	28c6703a 	and	r3,r5,r3
 80086b4:	1986703a 	and	r3,r3,r6
 80086b8:	183ff926 	beq	r3,zero,80086a0 <strlen+0x54>
 80086bc:	00000106 	br	80086c4 <strlen+0x78>
 80086c0:	10800044 	addi	r2,r2,1
 80086c4:	10c00007 	ldb	r3,0(r2)
 80086c8:	183ffd1e 	bne	r3,zero,80086c0 <strlen+0x74>
 80086cc:	1105c83a 	sub	r2,r2,r4
 80086d0:	f800283a 	ret
 80086d4:	2005883a 	mov	r2,r4
 80086d8:	003fe706 	br	8008678 <strlen+0x2c>
 80086dc:	0005883a 	mov	r2,zero
 80086e0:	f800283a 	ret

080086e4 <__fp_unlock>:
 80086e4:	0005883a 	mov	r2,zero
 80086e8:	f800283a 	ret

080086ec <_cleanup_r>:
 80086ec:	01420074 	movhi	r5,2049
 80086f0:	29690b04 	addi	r5,r5,-23508
 80086f4:	80090201 	jmpi	8009020 <_fwalk_reent>

080086f8 <__sinit.part.1>:
 80086f8:	defff704 	addi	sp,sp,-36
 80086fc:	00c20074 	movhi	r3,2049
 8008700:	dfc00815 	stw	ra,32(sp)
 8008704:	ddc00715 	stw	r23,28(sp)
 8008708:	dd800615 	stw	r22,24(sp)
 800870c:	dd400515 	stw	r21,20(sp)
 8008710:	dd000415 	stw	r20,16(sp)
 8008714:	dcc00315 	stw	r19,12(sp)
 8008718:	dc800215 	stw	r18,8(sp)
 800871c:	dc400115 	stw	r17,4(sp)
 8008720:	dc000015 	stw	r16,0(sp)
 8008724:	18e1bb04 	addi	r3,r3,-30996
 8008728:	24000117 	ldw	r16,4(r4)
 800872c:	20c00f15 	stw	r3,60(r4)
 8008730:	2080bb04 	addi	r2,r4,748
 8008734:	00c000c4 	movi	r3,3
 8008738:	20c0b915 	stw	r3,740(r4)
 800873c:	2080ba15 	stw	r2,744(r4)
 8008740:	2000b815 	stw	zero,736(r4)
 8008744:	05c00204 	movi	r23,8
 8008748:	00800104 	movi	r2,4
 800874c:	2025883a 	mov	r18,r4
 8008750:	b80d883a 	mov	r6,r23
 8008754:	81001704 	addi	r4,r16,92
 8008758:	000b883a 	mov	r5,zero
 800875c:	80000015 	stw	zero,0(r16)
 8008760:	80000115 	stw	zero,4(r16)
 8008764:	80000215 	stw	zero,8(r16)
 8008768:	8080030d 	sth	r2,12(r16)
 800876c:	80001915 	stw	zero,100(r16)
 8008770:	8000038d 	sth	zero,14(r16)
 8008774:	80000415 	stw	zero,16(r16)
 8008778:	80000515 	stw	zero,20(r16)
 800877c:	80000615 	stw	zero,24(r16)
 8008780:	80084500 	call	8008450 <memset>
 8008784:	05820074 	movhi	r22,2049
 8008788:	94400217 	ldw	r17,8(r18)
 800878c:	05420074 	movhi	r21,2049
 8008790:	05020074 	movhi	r20,2049
 8008794:	04c20074 	movhi	r19,2049
 8008798:	b5a83a04 	addi	r22,r22,-24344
 800879c:	ad685104 	addi	r21,r21,-24252
 80087a0:	a5287004 	addi	r20,r20,-24128
 80087a4:	9ce88704 	addi	r19,r19,-24036
 80087a8:	85800815 	stw	r22,32(r16)
 80087ac:	85400915 	stw	r21,36(r16)
 80087b0:	85000a15 	stw	r20,40(r16)
 80087b4:	84c00b15 	stw	r19,44(r16)
 80087b8:	84000715 	stw	r16,28(r16)
 80087bc:	00800284 	movi	r2,10
 80087c0:	8880030d 	sth	r2,12(r17)
 80087c4:	00800044 	movi	r2,1
 80087c8:	b80d883a 	mov	r6,r23
 80087cc:	89001704 	addi	r4,r17,92
 80087d0:	000b883a 	mov	r5,zero
 80087d4:	88000015 	stw	zero,0(r17)
 80087d8:	88000115 	stw	zero,4(r17)
 80087dc:	88000215 	stw	zero,8(r17)
 80087e0:	88001915 	stw	zero,100(r17)
 80087e4:	8880038d 	sth	r2,14(r17)
 80087e8:	88000415 	stw	zero,16(r17)
 80087ec:	88000515 	stw	zero,20(r17)
 80087f0:	88000615 	stw	zero,24(r17)
 80087f4:	80084500 	call	8008450 <memset>
 80087f8:	94000317 	ldw	r16,12(r18)
 80087fc:	00800484 	movi	r2,18
 8008800:	8c400715 	stw	r17,28(r17)
 8008804:	8d800815 	stw	r22,32(r17)
 8008808:	8d400915 	stw	r21,36(r17)
 800880c:	8d000a15 	stw	r20,40(r17)
 8008810:	8cc00b15 	stw	r19,44(r17)
 8008814:	8080030d 	sth	r2,12(r16)
 8008818:	00800084 	movi	r2,2
 800881c:	80000015 	stw	zero,0(r16)
 8008820:	80000115 	stw	zero,4(r16)
 8008824:	80000215 	stw	zero,8(r16)
 8008828:	80001915 	stw	zero,100(r16)
 800882c:	8080038d 	sth	r2,14(r16)
 8008830:	80000415 	stw	zero,16(r16)
 8008834:	80000515 	stw	zero,20(r16)
 8008838:	80000615 	stw	zero,24(r16)
 800883c:	b80d883a 	mov	r6,r23
 8008840:	000b883a 	mov	r5,zero
 8008844:	81001704 	addi	r4,r16,92
 8008848:	80084500 	call	8008450 <memset>
 800884c:	00800044 	movi	r2,1
 8008850:	84000715 	stw	r16,28(r16)
 8008854:	85800815 	stw	r22,32(r16)
 8008858:	85400915 	stw	r21,36(r16)
 800885c:	85000a15 	stw	r20,40(r16)
 8008860:	84c00b15 	stw	r19,44(r16)
 8008864:	90800e15 	stw	r2,56(r18)
 8008868:	dfc00817 	ldw	ra,32(sp)
 800886c:	ddc00717 	ldw	r23,28(sp)
 8008870:	dd800617 	ldw	r22,24(sp)
 8008874:	dd400517 	ldw	r21,20(sp)
 8008878:	dd000417 	ldw	r20,16(sp)
 800887c:	dcc00317 	ldw	r19,12(sp)
 8008880:	dc800217 	ldw	r18,8(sp)
 8008884:	dc400117 	ldw	r17,4(sp)
 8008888:	dc000017 	ldw	r16,0(sp)
 800888c:	dec00904 	addi	sp,sp,36
 8008890:	f800283a 	ret

08008894 <__fp_lock>:
 8008894:	0005883a 	mov	r2,zero
 8008898:	f800283a 	ret

0800889c <__sfmoreglue>:
 800889c:	defffc04 	addi	sp,sp,-16
 80088a0:	dc800215 	stw	r18,8(sp)
 80088a4:	2825883a 	mov	r18,r5
 80088a8:	dc000015 	stw	r16,0(sp)
 80088ac:	01401a04 	movi	r5,104
 80088b0:	2021883a 	mov	r16,r4
 80088b4:	913fffc4 	addi	r4,r18,-1
 80088b8:	dfc00315 	stw	ra,12(sp)
 80088bc:	dc400115 	stw	r17,4(sp)
 80088c0:	80082e00 	call	80082e0 <__mulsi3>
 80088c4:	8009883a 	mov	r4,r16
 80088c8:	11401d04 	addi	r5,r2,116
 80088cc:	1023883a 	mov	r17,r2
 80088d0:	80090e40 	call	80090e4 <_malloc_r>
 80088d4:	1021883a 	mov	r16,r2
 80088d8:	10000726 	beq	r2,zero,80088f8 <__sfmoreglue+0x5c>
 80088dc:	11000304 	addi	r4,r2,12
 80088e0:	10000015 	stw	zero,0(r2)
 80088e4:	14800115 	stw	r18,4(r2)
 80088e8:	11000215 	stw	r4,8(r2)
 80088ec:	89801a04 	addi	r6,r17,104
 80088f0:	000b883a 	mov	r5,zero
 80088f4:	80084500 	call	8008450 <memset>
 80088f8:	8005883a 	mov	r2,r16
 80088fc:	dfc00317 	ldw	ra,12(sp)
 8008900:	dc800217 	ldw	r18,8(sp)
 8008904:	dc400117 	ldw	r17,4(sp)
 8008908:	dc000017 	ldw	r16,0(sp)
 800890c:	dec00404 	addi	sp,sp,16
 8008910:	f800283a 	ret

08008914 <__sfp>:
 8008914:	defffb04 	addi	sp,sp,-20
 8008918:	dc000015 	stw	r16,0(sp)
 800891c:	04020074 	movhi	r16,2049
 8008920:	8402a404 	addi	r16,r16,2704
 8008924:	dcc00315 	stw	r19,12(sp)
 8008928:	2027883a 	mov	r19,r4
 800892c:	81000017 	ldw	r4,0(r16)
 8008930:	dfc00415 	stw	ra,16(sp)
 8008934:	dc800215 	stw	r18,8(sp)
 8008938:	20800e17 	ldw	r2,56(r4)
 800893c:	dc400115 	stw	r17,4(sp)
 8008940:	1000021e 	bne	r2,zero,800894c <__sfp+0x38>
 8008944:	80086f80 	call	80086f8 <__sinit.part.1>
 8008948:	81000017 	ldw	r4,0(r16)
 800894c:	2480b804 	addi	r18,r4,736
 8008950:	047fffc4 	movi	r17,-1
 8008954:	91000117 	ldw	r4,4(r18)
 8008958:	94000217 	ldw	r16,8(r18)
 800895c:	213fffc4 	addi	r4,r4,-1
 8008960:	20000a16 	blt	r4,zero,800898c <__sfp+0x78>
 8008964:	8080030f 	ldh	r2,12(r16)
 8008968:	10000c26 	beq	r2,zero,800899c <__sfp+0x88>
 800896c:	80c01d04 	addi	r3,r16,116
 8008970:	00000206 	br	800897c <__sfp+0x68>
 8008974:	18bfe60f 	ldh	r2,-104(r3)
 8008978:	10000826 	beq	r2,zero,800899c <__sfp+0x88>
 800897c:	213fffc4 	addi	r4,r4,-1
 8008980:	1c3ffd04 	addi	r16,r3,-12
 8008984:	18c01a04 	addi	r3,r3,104
 8008988:	247ffa1e 	bne	r4,r17,8008974 <__sfp+0x60>
 800898c:	90800017 	ldw	r2,0(r18)
 8008990:	10001d26 	beq	r2,zero,8008a08 <__sfp+0xf4>
 8008994:	1025883a 	mov	r18,r2
 8008998:	003fee06 	br	8008954 <__sfp+0x40>
 800899c:	00bfffc4 	movi	r2,-1
 80089a0:	8080038d 	sth	r2,14(r16)
 80089a4:	00800044 	movi	r2,1
 80089a8:	8080030d 	sth	r2,12(r16)
 80089ac:	80001915 	stw	zero,100(r16)
 80089b0:	80000015 	stw	zero,0(r16)
 80089b4:	80000215 	stw	zero,8(r16)
 80089b8:	80000115 	stw	zero,4(r16)
 80089bc:	80000415 	stw	zero,16(r16)
 80089c0:	80000515 	stw	zero,20(r16)
 80089c4:	80000615 	stw	zero,24(r16)
 80089c8:	01800204 	movi	r6,8
 80089cc:	000b883a 	mov	r5,zero
 80089d0:	81001704 	addi	r4,r16,92
 80089d4:	80084500 	call	8008450 <memset>
 80089d8:	8005883a 	mov	r2,r16
 80089dc:	80000c15 	stw	zero,48(r16)
 80089e0:	80000d15 	stw	zero,52(r16)
 80089e4:	80001115 	stw	zero,68(r16)
 80089e8:	80001215 	stw	zero,72(r16)
 80089ec:	dfc00417 	ldw	ra,16(sp)
 80089f0:	dcc00317 	ldw	r19,12(sp)
 80089f4:	dc800217 	ldw	r18,8(sp)
 80089f8:	dc400117 	ldw	r17,4(sp)
 80089fc:	dc000017 	ldw	r16,0(sp)
 8008a00:	dec00504 	addi	sp,sp,20
 8008a04:	f800283a 	ret
 8008a08:	01400104 	movi	r5,4
 8008a0c:	9809883a 	mov	r4,r19
 8008a10:	800889c0 	call	800889c <__sfmoreglue>
 8008a14:	90800015 	stw	r2,0(r18)
 8008a18:	103fde1e 	bne	r2,zero,8008994 <__sfp+0x80>
 8008a1c:	00800304 	movi	r2,12
 8008a20:	98800015 	stw	r2,0(r19)
 8008a24:	0005883a 	mov	r2,zero
 8008a28:	003ff006 	br	80089ec <__sfp+0xd8>

08008a2c <_cleanup>:
 8008a2c:	00820074 	movhi	r2,2049
 8008a30:	1082a404 	addi	r2,r2,2704
 8008a34:	11000017 	ldw	r4,0(r2)
 8008a38:	01420074 	movhi	r5,2049
 8008a3c:	29690b04 	addi	r5,r5,-23508
 8008a40:	80090201 	jmpi	8009020 <_fwalk_reent>

08008a44 <__sinit>:
 8008a44:	20800e17 	ldw	r2,56(r4)
 8008a48:	10000126 	beq	r2,zero,8008a50 <__sinit+0xc>
 8008a4c:	f800283a 	ret
 8008a50:	80086f81 	jmpi	80086f8 <__sinit.part.1>

08008a54 <__sfp_lock_acquire>:
 8008a54:	f800283a 	ret

08008a58 <__sfp_lock_release>:
 8008a58:	f800283a 	ret

08008a5c <__sinit_lock_acquire>:
 8008a5c:	f800283a 	ret

08008a60 <__sinit_lock_release>:
 8008a60:	f800283a 	ret

08008a64 <__fp_lock_all>:
 8008a64:	00820074 	movhi	r2,2049
 8008a68:	1082a504 	addi	r2,r2,2708
 8008a6c:	11000017 	ldw	r4,0(r2)
 8008a70:	01420074 	movhi	r5,2049
 8008a74:	29622504 	addi	r5,r5,-30572
 8008a78:	8008f5c1 	jmpi	8008f5c <_fwalk>

08008a7c <__fp_unlock_all>:
 8008a7c:	00820074 	movhi	r2,2049
 8008a80:	1082a504 	addi	r2,r2,2708
 8008a84:	11000017 	ldw	r4,0(r2)
 8008a88:	01420074 	movhi	r5,2049
 8008a8c:	2961b904 	addi	r5,r5,-31004
 8008a90:	8008f5c1 	jmpi	8008f5c <_fwalk>

08008a94 <__sfvwrite_r>:
 8008a94:	30800217 	ldw	r2,8(r6)
 8008a98:	10006726 	beq	r2,zero,8008c38 <__sfvwrite_r+0x1a4>
 8008a9c:	28c0030b 	ldhu	r3,12(r5)
 8008aa0:	defff404 	addi	sp,sp,-48
 8008aa4:	dd400715 	stw	r21,28(sp)
 8008aa8:	dd000615 	stw	r20,24(sp)
 8008aac:	dc000215 	stw	r16,8(sp)
 8008ab0:	dfc00b15 	stw	ra,44(sp)
 8008ab4:	df000a15 	stw	fp,40(sp)
 8008ab8:	ddc00915 	stw	r23,36(sp)
 8008abc:	dd800815 	stw	r22,32(sp)
 8008ac0:	dcc00515 	stw	r19,20(sp)
 8008ac4:	dc800415 	stw	r18,16(sp)
 8008ac8:	dc400315 	stw	r17,12(sp)
 8008acc:	1880020c 	andi	r2,r3,8
 8008ad0:	2821883a 	mov	r16,r5
 8008ad4:	202b883a 	mov	r21,r4
 8008ad8:	3029883a 	mov	r20,r6
 8008adc:	10002726 	beq	r2,zero,8008b7c <__sfvwrite_r+0xe8>
 8008ae0:	28800417 	ldw	r2,16(r5)
 8008ae4:	10002526 	beq	r2,zero,8008b7c <__sfvwrite_r+0xe8>
 8008ae8:	1880008c 	andi	r2,r3,2
 8008aec:	a4400017 	ldw	r17,0(r20)
 8008af0:	10002a26 	beq	r2,zero,8008b9c <__sfvwrite_r+0x108>
 8008af4:	05a00034 	movhi	r22,32768
 8008af8:	0027883a 	mov	r19,zero
 8008afc:	0025883a 	mov	r18,zero
 8008b00:	b5bf0004 	addi	r22,r22,-1024
 8008b04:	980d883a 	mov	r6,r19
 8008b08:	a809883a 	mov	r4,r21
 8008b0c:	90004626 	beq	r18,zero,8008c28 <__sfvwrite_r+0x194>
 8008b10:	900f883a 	mov	r7,r18
 8008b14:	b480022e 	bgeu	r22,r18,8008b20 <__sfvwrite_r+0x8c>
 8008b18:	01e00034 	movhi	r7,32768
 8008b1c:	39ff0004 	addi	r7,r7,-1024
 8008b20:	80800917 	ldw	r2,36(r16)
 8008b24:	81400717 	ldw	r5,28(r16)
 8008b28:	103ee83a 	callr	r2
 8008b2c:	00805a0e 	bge	zero,r2,8008c98 <__sfvwrite_r+0x204>
 8008b30:	a0c00217 	ldw	r3,8(r20)
 8008b34:	98a7883a 	add	r19,r19,r2
 8008b38:	90a5c83a 	sub	r18,r18,r2
 8008b3c:	1885c83a 	sub	r2,r3,r2
 8008b40:	a0800215 	stw	r2,8(r20)
 8008b44:	103fef1e 	bne	r2,zero,8008b04 <__sfvwrite_r+0x70>
 8008b48:	0005883a 	mov	r2,zero
 8008b4c:	dfc00b17 	ldw	ra,44(sp)
 8008b50:	df000a17 	ldw	fp,40(sp)
 8008b54:	ddc00917 	ldw	r23,36(sp)
 8008b58:	dd800817 	ldw	r22,32(sp)
 8008b5c:	dd400717 	ldw	r21,28(sp)
 8008b60:	dd000617 	ldw	r20,24(sp)
 8008b64:	dcc00517 	ldw	r19,20(sp)
 8008b68:	dc800417 	ldw	r18,16(sp)
 8008b6c:	dc400317 	ldw	r17,12(sp)
 8008b70:	dc000217 	ldw	r16,8(sp)
 8008b74:	dec00c04 	addi	sp,sp,48
 8008b78:	f800283a 	ret
 8008b7c:	800b883a 	mov	r5,r16
 8008b80:	a809883a 	mov	r4,r21
 8008b84:	800a2840 	call	800a284 <__swsetup_r>
 8008b88:	1000ee1e 	bne	r2,zero,8008f44 <__sfvwrite_r+0x4b0>
 8008b8c:	80c0030b 	ldhu	r3,12(r16)
 8008b90:	a4400017 	ldw	r17,0(r20)
 8008b94:	1880008c 	andi	r2,r3,2
 8008b98:	103fd61e 	bne	r2,zero,8008af4 <__sfvwrite_r+0x60>
 8008b9c:	1880004c 	andi	r2,r3,1
 8008ba0:	1000421e 	bne	r2,zero,8008cac <__sfvwrite_r+0x218>
 8008ba4:	0039883a 	mov	fp,zero
 8008ba8:	0025883a 	mov	r18,zero
 8008bac:	90001a26 	beq	r18,zero,8008c18 <__sfvwrite_r+0x184>
 8008bb0:	1880800c 	andi	r2,r3,512
 8008bb4:	84c00217 	ldw	r19,8(r16)
 8008bb8:	10002126 	beq	r2,zero,8008c40 <__sfvwrite_r+0x1ac>
 8008bbc:	982f883a 	mov	r23,r19
 8008bc0:	94c09636 	bltu	r18,r19,8008e1c <__sfvwrite_r+0x388>
 8008bc4:	1881200c 	andi	r2,r3,1152
 8008bc8:	1000a11e 	bne	r2,zero,8008e50 <__sfvwrite_r+0x3bc>
 8008bcc:	81000017 	ldw	r4,0(r16)
 8008bd0:	b80d883a 	mov	r6,r23
 8008bd4:	e00b883a 	mov	r5,fp
 8008bd8:	80099d40 	call	80099d4 <memmove>
 8008bdc:	80c00217 	ldw	r3,8(r16)
 8008be0:	81000017 	ldw	r4,0(r16)
 8008be4:	9005883a 	mov	r2,r18
 8008be8:	1ce7c83a 	sub	r19,r3,r19
 8008bec:	25cf883a 	add	r7,r4,r23
 8008bf0:	84c00215 	stw	r19,8(r16)
 8008bf4:	81c00015 	stw	r7,0(r16)
 8008bf8:	a0c00217 	ldw	r3,8(r20)
 8008bfc:	e0b9883a 	add	fp,fp,r2
 8008c00:	90a5c83a 	sub	r18,r18,r2
 8008c04:	18a7c83a 	sub	r19,r3,r2
 8008c08:	a4c00215 	stw	r19,8(r20)
 8008c0c:	983fce26 	beq	r19,zero,8008b48 <__sfvwrite_r+0xb4>
 8008c10:	80c0030b 	ldhu	r3,12(r16)
 8008c14:	903fe61e 	bne	r18,zero,8008bb0 <__sfvwrite_r+0x11c>
 8008c18:	8f000017 	ldw	fp,0(r17)
 8008c1c:	8c800117 	ldw	r18,4(r17)
 8008c20:	8c400204 	addi	r17,r17,8
 8008c24:	003fe106 	br	8008bac <__sfvwrite_r+0x118>
 8008c28:	8cc00017 	ldw	r19,0(r17)
 8008c2c:	8c800117 	ldw	r18,4(r17)
 8008c30:	8c400204 	addi	r17,r17,8
 8008c34:	003fb306 	br	8008b04 <__sfvwrite_r+0x70>
 8008c38:	0005883a 	mov	r2,zero
 8008c3c:	f800283a 	ret
 8008c40:	81000017 	ldw	r4,0(r16)
 8008c44:	80800417 	ldw	r2,16(r16)
 8008c48:	11005a36 	bltu	r2,r4,8008db4 <__sfvwrite_r+0x320>
 8008c4c:	85c00517 	ldw	r23,20(r16)
 8008c50:	95c05836 	bltu	r18,r23,8008db4 <__sfvwrite_r+0x320>
 8008c54:	00a00034 	movhi	r2,32768
 8008c58:	10bfffc4 	addi	r2,r2,-1
 8008c5c:	9009883a 	mov	r4,r18
 8008c60:	1480012e 	bgeu	r2,r18,8008c68 <__sfvwrite_r+0x1d4>
 8008c64:	1009883a 	mov	r4,r2
 8008c68:	b80b883a 	mov	r5,r23
 8008c6c:	800812c0 	call	800812c <__divsi3>
 8008c70:	b80b883a 	mov	r5,r23
 8008c74:	1009883a 	mov	r4,r2
 8008c78:	80082e00 	call	80082e0 <__mulsi3>
 8008c7c:	81400717 	ldw	r5,28(r16)
 8008c80:	80c00917 	ldw	r3,36(r16)
 8008c84:	100f883a 	mov	r7,r2
 8008c88:	e00d883a 	mov	r6,fp
 8008c8c:	a809883a 	mov	r4,r21
 8008c90:	183ee83a 	callr	r3
 8008c94:	00bfd816 	blt	zero,r2,8008bf8 <__sfvwrite_r+0x164>
 8008c98:	8080030b 	ldhu	r2,12(r16)
 8008c9c:	10801014 	ori	r2,r2,64
 8008ca0:	8080030d 	sth	r2,12(r16)
 8008ca4:	00bfffc4 	movi	r2,-1
 8008ca8:	003fa806 	br	8008b4c <__sfvwrite_r+0xb8>
 8008cac:	0027883a 	mov	r19,zero
 8008cb0:	0011883a 	mov	r8,zero
 8008cb4:	0039883a 	mov	fp,zero
 8008cb8:	0025883a 	mov	r18,zero
 8008cbc:	90001f26 	beq	r18,zero,8008d3c <__sfvwrite_r+0x2a8>
 8008cc0:	40005a26 	beq	r8,zero,8008e2c <__sfvwrite_r+0x398>
 8008cc4:	982d883a 	mov	r22,r19
 8008cc8:	94c0012e 	bgeu	r18,r19,8008cd0 <__sfvwrite_r+0x23c>
 8008ccc:	902d883a 	mov	r22,r18
 8008cd0:	81000017 	ldw	r4,0(r16)
 8008cd4:	80800417 	ldw	r2,16(r16)
 8008cd8:	b02f883a 	mov	r23,r22
 8008cdc:	81c00517 	ldw	r7,20(r16)
 8008ce0:	1100032e 	bgeu	r2,r4,8008cf0 <__sfvwrite_r+0x25c>
 8008ce4:	80c00217 	ldw	r3,8(r16)
 8008ce8:	38c7883a 	add	r3,r7,r3
 8008cec:	1d801816 	blt	r3,r22,8008d50 <__sfvwrite_r+0x2bc>
 8008cf0:	b1c03e16 	blt	r22,r7,8008dec <__sfvwrite_r+0x358>
 8008cf4:	80800917 	ldw	r2,36(r16)
 8008cf8:	81400717 	ldw	r5,28(r16)
 8008cfc:	e00d883a 	mov	r6,fp
 8008d00:	da000115 	stw	r8,4(sp)
 8008d04:	a809883a 	mov	r4,r21
 8008d08:	103ee83a 	callr	r2
 8008d0c:	102f883a 	mov	r23,r2
 8008d10:	da000117 	ldw	r8,4(sp)
 8008d14:	00bfe00e 	bge	zero,r2,8008c98 <__sfvwrite_r+0x204>
 8008d18:	9de7c83a 	sub	r19,r19,r23
 8008d1c:	98001f26 	beq	r19,zero,8008d9c <__sfvwrite_r+0x308>
 8008d20:	a0800217 	ldw	r2,8(r20)
 8008d24:	e5f9883a 	add	fp,fp,r23
 8008d28:	95e5c83a 	sub	r18,r18,r23
 8008d2c:	15efc83a 	sub	r23,r2,r23
 8008d30:	a5c00215 	stw	r23,8(r20)
 8008d34:	b83f8426 	beq	r23,zero,8008b48 <__sfvwrite_r+0xb4>
 8008d38:	903fe11e 	bne	r18,zero,8008cc0 <__sfvwrite_r+0x22c>
 8008d3c:	8f000017 	ldw	fp,0(r17)
 8008d40:	8c800117 	ldw	r18,4(r17)
 8008d44:	0011883a 	mov	r8,zero
 8008d48:	8c400204 	addi	r17,r17,8
 8008d4c:	003fdb06 	br	8008cbc <__sfvwrite_r+0x228>
 8008d50:	180d883a 	mov	r6,r3
 8008d54:	e00b883a 	mov	r5,fp
 8008d58:	da000115 	stw	r8,4(sp)
 8008d5c:	d8c00015 	stw	r3,0(sp)
 8008d60:	80099d40 	call	80099d4 <memmove>
 8008d64:	d8c00017 	ldw	r3,0(sp)
 8008d68:	80800017 	ldw	r2,0(r16)
 8008d6c:	800b883a 	mov	r5,r16
 8008d70:	a809883a 	mov	r4,r21
 8008d74:	10c5883a 	add	r2,r2,r3
 8008d78:	80800015 	stw	r2,0(r16)
 8008d7c:	d8c00015 	stw	r3,0(sp)
 8008d80:	800a74c0 	call	800a74c <_fflush_r>
 8008d84:	d8c00017 	ldw	r3,0(sp)
 8008d88:	da000117 	ldw	r8,4(sp)
 8008d8c:	103fc21e 	bne	r2,zero,8008c98 <__sfvwrite_r+0x204>
 8008d90:	182f883a 	mov	r23,r3
 8008d94:	9de7c83a 	sub	r19,r19,r23
 8008d98:	983fe11e 	bne	r19,zero,8008d20 <__sfvwrite_r+0x28c>
 8008d9c:	800b883a 	mov	r5,r16
 8008da0:	a809883a 	mov	r4,r21
 8008da4:	800a74c0 	call	800a74c <_fflush_r>
 8008da8:	103fbb1e 	bne	r2,zero,8008c98 <__sfvwrite_r+0x204>
 8008dac:	0011883a 	mov	r8,zero
 8008db0:	003fdb06 	br	8008d20 <__sfvwrite_r+0x28c>
 8008db4:	94c0012e 	bgeu	r18,r19,8008dbc <__sfvwrite_r+0x328>
 8008db8:	9027883a 	mov	r19,r18
 8008dbc:	980d883a 	mov	r6,r19
 8008dc0:	e00b883a 	mov	r5,fp
 8008dc4:	80099d40 	call	80099d4 <memmove>
 8008dc8:	80800217 	ldw	r2,8(r16)
 8008dcc:	80c00017 	ldw	r3,0(r16)
 8008dd0:	14c5c83a 	sub	r2,r2,r19
 8008dd4:	1cc7883a 	add	r3,r3,r19
 8008dd8:	80800215 	stw	r2,8(r16)
 8008ddc:	80c00015 	stw	r3,0(r16)
 8008de0:	10004326 	beq	r2,zero,8008ef0 <__sfvwrite_r+0x45c>
 8008de4:	9805883a 	mov	r2,r19
 8008de8:	003f8306 	br	8008bf8 <__sfvwrite_r+0x164>
 8008dec:	b00d883a 	mov	r6,r22
 8008df0:	e00b883a 	mov	r5,fp
 8008df4:	da000115 	stw	r8,4(sp)
 8008df8:	80099d40 	call	80099d4 <memmove>
 8008dfc:	80800217 	ldw	r2,8(r16)
 8008e00:	80c00017 	ldw	r3,0(r16)
 8008e04:	da000117 	ldw	r8,4(sp)
 8008e08:	1585c83a 	sub	r2,r2,r22
 8008e0c:	1dad883a 	add	r22,r3,r22
 8008e10:	80800215 	stw	r2,8(r16)
 8008e14:	85800015 	stw	r22,0(r16)
 8008e18:	003fbf06 	br	8008d18 <__sfvwrite_r+0x284>
 8008e1c:	81000017 	ldw	r4,0(r16)
 8008e20:	9027883a 	mov	r19,r18
 8008e24:	902f883a 	mov	r23,r18
 8008e28:	003f6906 	br	8008bd0 <__sfvwrite_r+0x13c>
 8008e2c:	900d883a 	mov	r6,r18
 8008e30:	01400284 	movi	r5,10
 8008e34:	e009883a 	mov	r4,fp
 8008e38:	80098f00 	call	80098f0 <memchr>
 8008e3c:	10003e26 	beq	r2,zero,8008f38 <__sfvwrite_r+0x4a4>
 8008e40:	10800044 	addi	r2,r2,1
 8008e44:	1727c83a 	sub	r19,r2,fp
 8008e48:	02000044 	movi	r8,1
 8008e4c:	003f9d06 	br	8008cc4 <__sfvwrite_r+0x230>
 8008e50:	80800517 	ldw	r2,20(r16)
 8008e54:	81400417 	ldw	r5,16(r16)
 8008e58:	81c00017 	ldw	r7,0(r16)
 8008e5c:	10a7883a 	add	r19,r2,r2
 8008e60:	9885883a 	add	r2,r19,r2
 8008e64:	1026d7fa 	srli	r19,r2,31
 8008e68:	396dc83a 	sub	r22,r7,r5
 8008e6c:	b1000044 	addi	r4,r22,1
 8008e70:	9885883a 	add	r2,r19,r2
 8008e74:	1027d07a 	srai	r19,r2,1
 8008e78:	2485883a 	add	r2,r4,r18
 8008e7c:	980d883a 	mov	r6,r19
 8008e80:	9880022e 	bgeu	r19,r2,8008e8c <__sfvwrite_r+0x3f8>
 8008e84:	1027883a 	mov	r19,r2
 8008e88:	100d883a 	mov	r6,r2
 8008e8c:	18c1000c 	andi	r3,r3,1024
 8008e90:	18001c26 	beq	r3,zero,8008f04 <__sfvwrite_r+0x470>
 8008e94:	300b883a 	mov	r5,r6
 8008e98:	a809883a 	mov	r4,r21
 8008e9c:	80090e40 	call	80090e4 <_malloc_r>
 8008ea0:	102f883a 	mov	r23,r2
 8008ea4:	10002926 	beq	r2,zero,8008f4c <__sfvwrite_r+0x4b8>
 8008ea8:	81400417 	ldw	r5,16(r16)
 8008eac:	b00d883a 	mov	r6,r22
 8008eb0:	1009883a 	mov	r4,r2
 8008eb4:	80083080 	call	8008308 <memcpy>
 8008eb8:	8080030b 	ldhu	r2,12(r16)
 8008ebc:	00fedfc4 	movi	r3,-1153
 8008ec0:	10c4703a 	and	r2,r2,r3
 8008ec4:	10802014 	ori	r2,r2,128
 8008ec8:	8080030d 	sth	r2,12(r16)
 8008ecc:	bd89883a 	add	r4,r23,r22
 8008ed0:	9d8fc83a 	sub	r7,r19,r22
 8008ed4:	85c00415 	stw	r23,16(r16)
 8008ed8:	84c00515 	stw	r19,20(r16)
 8008edc:	81000015 	stw	r4,0(r16)
 8008ee0:	9027883a 	mov	r19,r18
 8008ee4:	81c00215 	stw	r7,8(r16)
 8008ee8:	902f883a 	mov	r23,r18
 8008eec:	003f3806 	br	8008bd0 <__sfvwrite_r+0x13c>
 8008ef0:	800b883a 	mov	r5,r16
 8008ef4:	a809883a 	mov	r4,r21
 8008ef8:	800a74c0 	call	800a74c <_fflush_r>
 8008efc:	103fb926 	beq	r2,zero,8008de4 <__sfvwrite_r+0x350>
 8008f00:	003f6506 	br	8008c98 <__sfvwrite_r+0x204>
 8008f04:	a809883a 	mov	r4,r21
 8008f08:	8009b300 	call	8009b30 <_realloc_r>
 8008f0c:	102f883a 	mov	r23,r2
 8008f10:	103fee1e 	bne	r2,zero,8008ecc <__sfvwrite_r+0x438>
 8008f14:	81400417 	ldw	r5,16(r16)
 8008f18:	a809883a 	mov	r4,r21
 8008f1c:	800a8fc0 	call	800a8fc <_free_r>
 8008f20:	8080030b 	ldhu	r2,12(r16)
 8008f24:	00ffdfc4 	movi	r3,-129
 8008f28:	1884703a 	and	r2,r3,r2
 8008f2c:	00c00304 	movi	r3,12
 8008f30:	a8c00015 	stw	r3,0(r21)
 8008f34:	003f5906 	br	8008c9c <__sfvwrite_r+0x208>
 8008f38:	94c00044 	addi	r19,r18,1
 8008f3c:	02000044 	movi	r8,1
 8008f40:	003f6006 	br	8008cc4 <__sfvwrite_r+0x230>
 8008f44:	00bfffc4 	movi	r2,-1
 8008f48:	003f0006 	br	8008b4c <__sfvwrite_r+0xb8>
 8008f4c:	00800304 	movi	r2,12
 8008f50:	a8800015 	stw	r2,0(r21)
 8008f54:	8080030b 	ldhu	r2,12(r16)
 8008f58:	003f5006 	br	8008c9c <__sfvwrite_r+0x208>

08008f5c <_fwalk>:
 8008f5c:	defff704 	addi	sp,sp,-36
 8008f60:	dd000415 	stw	r20,16(sp)
 8008f64:	dfc00815 	stw	ra,32(sp)
 8008f68:	ddc00715 	stw	r23,28(sp)
 8008f6c:	dd800615 	stw	r22,24(sp)
 8008f70:	dd400515 	stw	r21,20(sp)
 8008f74:	dcc00315 	stw	r19,12(sp)
 8008f78:	dc800215 	stw	r18,8(sp)
 8008f7c:	dc400115 	stw	r17,4(sp)
 8008f80:	dc000015 	stw	r16,0(sp)
 8008f84:	2500b804 	addi	r20,r4,736
 8008f88:	a0002326 	beq	r20,zero,8009018 <_fwalk+0xbc>
 8008f8c:	282b883a 	mov	r21,r5
 8008f90:	002f883a 	mov	r23,zero
 8008f94:	05800044 	movi	r22,1
 8008f98:	04ffffc4 	movi	r19,-1
 8008f9c:	a4400117 	ldw	r17,4(r20)
 8008fa0:	a4800217 	ldw	r18,8(r20)
 8008fa4:	8c7fffc4 	addi	r17,r17,-1
 8008fa8:	88000d16 	blt	r17,zero,8008fe0 <_fwalk+0x84>
 8008fac:	94000304 	addi	r16,r18,12
 8008fb0:	94800384 	addi	r18,r18,14
 8008fb4:	8080000b 	ldhu	r2,0(r16)
 8008fb8:	8c7fffc4 	addi	r17,r17,-1
 8008fbc:	813ffd04 	addi	r4,r16,-12
 8008fc0:	b080042e 	bgeu	r22,r2,8008fd4 <_fwalk+0x78>
 8008fc4:	9080000f 	ldh	r2,0(r18)
 8008fc8:	14c00226 	beq	r2,r19,8008fd4 <_fwalk+0x78>
 8008fcc:	a83ee83a 	callr	r21
 8008fd0:	b8aeb03a 	or	r23,r23,r2
 8008fd4:	84001a04 	addi	r16,r16,104
 8008fd8:	94801a04 	addi	r18,r18,104
 8008fdc:	8cfff51e 	bne	r17,r19,8008fb4 <_fwalk+0x58>
 8008fe0:	a5000017 	ldw	r20,0(r20)
 8008fe4:	a03fed1e 	bne	r20,zero,8008f9c <_fwalk+0x40>
 8008fe8:	b805883a 	mov	r2,r23
 8008fec:	dfc00817 	ldw	ra,32(sp)
 8008ff0:	ddc00717 	ldw	r23,28(sp)
 8008ff4:	dd800617 	ldw	r22,24(sp)
 8008ff8:	dd400517 	ldw	r21,20(sp)
 8008ffc:	dd000417 	ldw	r20,16(sp)
 8009000:	dcc00317 	ldw	r19,12(sp)
 8009004:	dc800217 	ldw	r18,8(sp)
 8009008:	dc400117 	ldw	r17,4(sp)
 800900c:	dc000017 	ldw	r16,0(sp)
 8009010:	dec00904 	addi	sp,sp,36
 8009014:	f800283a 	ret
 8009018:	002f883a 	mov	r23,zero
 800901c:	003ff206 	br	8008fe8 <_fwalk+0x8c>

08009020 <_fwalk_reent>:
 8009020:	defff704 	addi	sp,sp,-36
 8009024:	dd000415 	stw	r20,16(sp)
 8009028:	dfc00815 	stw	ra,32(sp)
 800902c:	ddc00715 	stw	r23,28(sp)
 8009030:	dd800615 	stw	r22,24(sp)
 8009034:	dd400515 	stw	r21,20(sp)
 8009038:	dcc00315 	stw	r19,12(sp)
 800903c:	dc800215 	stw	r18,8(sp)
 8009040:	dc400115 	stw	r17,4(sp)
 8009044:	dc000015 	stw	r16,0(sp)
 8009048:	2500b804 	addi	r20,r4,736
 800904c:	a0002326 	beq	r20,zero,80090dc <_fwalk_reent+0xbc>
 8009050:	282b883a 	mov	r21,r5
 8009054:	2027883a 	mov	r19,r4
 8009058:	002f883a 	mov	r23,zero
 800905c:	05800044 	movi	r22,1
 8009060:	04bfffc4 	movi	r18,-1
 8009064:	a4400117 	ldw	r17,4(r20)
 8009068:	a4000217 	ldw	r16,8(r20)
 800906c:	8c7fffc4 	addi	r17,r17,-1
 8009070:	88000c16 	blt	r17,zero,80090a4 <_fwalk_reent+0x84>
 8009074:	84000304 	addi	r16,r16,12
 8009078:	8080000b 	ldhu	r2,0(r16)
 800907c:	8c7fffc4 	addi	r17,r17,-1
 8009080:	817ffd04 	addi	r5,r16,-12
 8009084:	b080052e 	bgeu	r22,r2,800909c <_fwalk_reent+0x7c>
 8009088:	8080008f 	ldh	r2,2(r16)
 800908c:	9809883a 	mov	r4,r19
 8009090:	14800226 	beq	r2,r18,800909c <_fwalk_reent+0x7c>
 8009094:	a83ee83a 	callr	r21
 8009098:	b8aeb03a 	or	r23,r23,r2
 800909c:	84001a04 	addi	r16,r16,104
 80090a0:	8cbff51e 	bne	r17,r18,8009078 <_fwalk_reent+0x58>
 80090a4:	a5000017 	ldw	r20,0(r20)
 80090a8:	a03fee1e 	bne	r20,zero,8009064 <_fwalk_reent+0x44>
 80090ac:	b805883a 	mov	r2,r23
 80090b0:	dfc00817 	ldw	ra,32(sp)
 80090b4:	ddc00717 	ldw	r23,28(sp)
 80090b8:	dd800617 	ldw	r22,24(sp)
 80090bc:	dd400517 	ldw	r21,20(sp)
 80090c0:	dd000417 	ldw	r20,16(sp)
 80090c4:	dcc00317 	ldw	r19,12(sp)
 80090c8:	dc800217 	ldw	r18,8(sp)
 80090cc:	dc400117 	ldw	r17,4(sp)
 80090d0:	dc000017 	ldw	r16,0(sp)
 80090d4:	dec00904 	addi	sp,sp,36
 80090d8:	f800283a 	ret
 80090dc:	002f883a 	mov	r23,zero
 80090e0:	003ff206 	br	80090ac <_fwalk_reent+0x8c>

080090e4 <_malloc_r>:
 80090e4:	defff504 	addi	sp,sp,-44
 80090e8:	dc800315 	stw	r18,12(sp)
 80090ec:	dfc00a15 	stw	ra,40(sp)
 80090f0:	df000915 	stw	fp,36(sp)
 80090f4:	ddc00815 	stw	r23,32(sp)
 80090f8:	dd800715 	stw	r22,28(sp)
 80090fc:	dd400615 	stw	r21,24(sp)
 8009100:	dd000515 	stw	r20,20(sp)
 8009104:	dcc00415 	stw	r19,16(sp)
 8009108:	dc400215 	stw	r17,8(sp)
 800910c:	dc000115 	stw	r16,4(sp)
 8009110:	288002c4 	addi	r2,r5,11
 8009114:	00c00584 	movi	r3,22
 8009118:	2025883a 	mov	r18,r4
 800911c:	18807f2e 	bgeu	r3,r2,800931c <_malloc_r+0x238>
 8009120:	047ffe04 	movi	r17,-8
 8009124:	1462703a 	and	r17,r2,r17
 8009128:	8800a316 	blt	r17,zero,80093b8 <_malloc_r+0x2d4>
 800912c:	8940a236 	bltu	r17,r5,80093b8 <_malloc_r+0x2d4>
 8009130:	800b6840 	call	800b684 <__malloc_lock>
 8009134:	00807dc4 	movi	r2,503
 8009138:	1441e92e 	bgeu	r2,r17,80098e0 <_malloc_r+0x7fc>
 800913c:	8804d27a 	srli	r2,r17,9
 8009140:	1000a126 	beq	r2,zero,80093c8 <_malloc_r+0x2e4>
 8009144:	00c00104 	movi	r3,4
 8009148:	18811e36 	bltu	r3,r2,80095c4 <_malloc_r+0x4e0>
 800914c:	8804d1ba 	srli	r2,r17,6
 8009150:	12000e44 	addi	r8,r2,57
 8009154:	11c00e04 	addi	r7,r2,56
 8009158:	4209883a 	add	r4,r8,r8
 800915c:	04c20074 	movhi	r19,2049
 8009160:	2109883a 	add	r4,r4,r4
 8009164:	9cfca704 	addi	r19,r19,-3428
 8009168:	2109883a 	add	r4,r4,r4
 800916c:	9909883a 	add	r4,r19,r4
 8009170:	24000117 	ldw	r16,4(r4)
 8009174:	213ffe04 	addi	r4,r4,-8
 8009178:	24009726 	beq	r4,r16,80093d8 <_malloc_r+0x2f4>
 800917c:	80800117 	ldw	r2,4(r16)
 8009180:	01bfff04 	movi	r6,-4
 8009184:	014003c4 	movi	r5,15
 8009188:	1184703a 	and	r2,r2,r6
 800918c:	1447c83a 	sub	r3,r2,r17
 8009190:	28c00716 	blt	r5,r3,80091b0 <_malloc_r+0xcc>
 8009194:	1800920e 	bge	r3,zero,80093e0 <_malloc_r+0x2fc>
 8009198:	84000317 	ldw	r16,12(r16)
 800919c:	24008e26 	beq	r4,r16,80093d8 <_malloc_r+0x2f4>
 80091a0:	80800117 	ldw	r2,4(r16)
 80091a4:	1184703a 	and	r2,r2,r6
 80091a8:	1447c83a 	sub	r3,r2,r17
 80091ac:	28fff90e 	bge	r5,r3,8009194 <_malloc_r+0xb0>
 80091b0:	3809883a 	mov	r4,r7
 80091b4:	01820074 	movhi	r6,2049
 80091b8:	9c000417 	ldw	r16,16(r19)
 80091bc:	31bca704 	addi	r6,r6,-3428
 80091c0:	32000204 	addi	r8,r6,8
 80091c4:	82013426 	beq	r16,r8,8009698 <_malloc_r+0x5b4>
 80091c8:	80c00117 	ldw	r3,4(r16)
 80091cc:	00bfff04 	movi	r2,-4
 80091d0:	188e703a 	and	r7,r3,r2
 80091d4:	3c45c83a 	sub	r2,r7,r17
 80091d8:	00c003c4 	movi	r3,15
 80091dc:	18811f16 	blt	r3,r2,800965c <_malloc_r+0x578>
 80091e0:	32000515 	stw	r8,20(r6)
 80091e4:	32000415 	stw	r8,16(r6)
 80091e8:	10007f0e 	bge	r2,zero,80093e8 <_malloc_r+0x304>
 80091ec:	00807fc4 	movi	r2,511
 80091f0:	11c0fd36 	bltu	r2,r7,80095e8 <_malloc_r+0x504>
 80091f4:	3806d0fa 	srli	r3,r7,3
 80091f8:	01c00044 	movi	r7,1
 80091fc:	30800117 	ldw	r2,4(r6)
 8009200:	19400044 	addi	r5,r3,1
 8009204:	294b883a 	add	r5,r5,r5
 8009208:	1807d0ba 	srai	r3,r3,2
 800920c:	294b883a 	add	r5,r5,r5
 8009210:	294b883a 	add	r5,r5,r5
 8009214:	298b883a 	add	r5,r5,r6
 8009218:	38c6983a 	sll	r3,r7,r3
 800921c:	29c00017 	ldw	r7,0(r5)
 8009220:	2a7ffe04 	addi	r9,r5,-8
 8009224:	1886b03a 	or	r3,r3,r2
 8009228:	82400315 	stw	r9,12(r16)
 800922c:	81c00215 	stw	r7,8(r16)
 8009230:	30c00115 	stw	r3,4(r6)
 8009234:	2c000015 	stw	r16,0(r5)
 8009238:	3c000315 	stw	r16,12(r7)
 800923c:	2005d0ba 	srai	r2,r4,2
 8009240:	01400044 	movi	r5,1
 8009244:	288a983a 	sll	r5,r5,r2
 8009248:	19406f36 	bltu	r3,r5,8009408 <_malloc_r+0x324>
 800924c:	28c4703a 	and	r2,r5,r3
 8009250:	10000a1e 	bne	r2,zero,800927c <_malloc_r+0x198>
 8009254:	00bfff04 	movi	r2,-4
 8009258:	294b883a 	add	r5,r5,r5
 800925c:	2088703a 	and	r4,r4,r2
 8009260:	28c4703a 	and	r2,r5,r3
 8009264:	21000104 	addi	r4,r4,4
 8009268:	1000041e 	bne	r2,zero,800927c <_malloc_r+0x198>
 800926c:	294b883a 	add	r5,r5,r5
 8009270:	28c4703a 	and	r2,r5,r3
 8009274:	21000104 	addi	r4,r4,4
 8009278:	103ffc26 	beq	r2,zero,800926c <_malloc_r+0x188>
 800927c:	02bfff04 	movi	r10,-4
 8009280:	024003c4 	movi	r9,15
 8009284:	21800044 	addi	r6,r4,1
 8009288:	318d883a 	add	r6,r6,r6
 800928c:	318d883a 	add	r6,r6,r6
 8009290:	318d883a 	add	r6,r6,r6
 8009294:	998d883a 	add	r6,r19,r6
 8009298:	333ffe04 	addi	r12,r6,-8
 800929c:	2017883a 	mov	r11,r4
 80092a0:	31800104 	addi	r6,r6,4
 80092a4:	34000017 	ldw	r16,0(r6)
 80092a8:	31fffd04 	addi	r7,r6,-12
 80092ac:	81c0041e 	bne	r16,r7,80092c0 <_malloc_r+0x1dc>
 80092b0:	0000fb06 	br	80096a0 <_malloc_r+0x5bc>
 80092b4:	1801030e 	bge	r3,zero,80096c4 <_malloc_r+0x5e0>
 80092b8:	84000317 	ldw	r16,12(r16)
 80092bc:	81c0f826 	beq	r16,r7,80096a0 <_malloc_r+0x5bc>
 80092c0:	80800117 	ldw	r2,4(r16)
 80092c4:	1284703a 	and	r2,r2,r10
 80092c8:	1447c83a 	sub	r3,r2,r17
 80092cc:	48fff90e 	bge	r9,r3,80092b4 <_malloc_r+0x1d0>
 80092d0:	80800317 	ldw	r2,12(r16)
 80092d4:	81000217 	ldw	r4,8(r16)
 80092d8:	89400054 	ori	r5,r17,1
 80092dc:	81400115 	stw	r5,4(r16)
 80092e0:	20800315 	stw	r2,12(r4)
 80092e4:	11000215 	stw	r4,8(r2)
 80092e8:	8463883a 	add	r17,r16,r17
 80092ec:	9c400515 	stw	r17,20(r19)
 80092f0:	9c400415 	stw	r17,16(r19)
 80092f4:	18800054 	ori	r2,r3,1
 80092f8:	88800115 	stw	r2,4(r17)
 80092fc:	8a000315 	stw	r8,12(r17)
 8009300:	8a000215 	stw	r8,8(r17)
 8009304:	88e3883a 	add	r17,r17,r3
 8009308:	88c00015 	stw	r3,0(r17)
 800930c:	9009883a 	mov	r4,r18
 8009310:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009314:	80800204 	addi	r2,r16,8
 8009318:	00001b06 	br	8009388 <_malloc_r+0x2a4>
 800931c:	04400404 	movi	r17,16
 8009320:	89402536 	bltu	r17,r5,80093b8 <_malloc_r+0x2d4>
 8009324:	800b6840 	call	800b684 <__malloc_lock>
 8009328:	00800184 	movi	r2,6
 800932c:	01000084 	movi	r4,2
 8009330:	04c20074 	movhi	r19,2049
 8009334:	1085883a 	add	r2,r2,r2
 8009338:	9cfca704 	addi	r19,r19,-3428
 800933c:	1085883a 	add	r2,r2,r2
 8009340:	9885883a 	add	r2,r19,r2
 8009344:	14000117 	ldw	r16,4(r2)
 8009348:	10fffe04 	addi	r3,r2,-8
 800934c:	80c0d926 	beq	r16,r3,80096b4 <_malloc_r+0x5d0>
 8009350:	80c00117 	ldw	r3,4(r16)
 8009354:	81000317 	ldw	r4,12(r16)
 8009358:	00bfff04 	movi	r2,-4
 800935c:	1884703a 	and	r2,r3,r2
 8009360:	81400217 	ldw	r5,8(r16)
 8009364:	8085883a 	add	r2,r16,r2
 8009368:	10c00117 	ldw	r3,4(r2)
 800936c:	29000315 	stw	r4,12(r5)
 8009370:	21400215 	stw	r5,8(r4)
 8009374:	18c00054 	ori	r3,r3,1
 8009378:	10c00115 	stw	r3,4(r2)
 800937c:	9009883a 	mov	r4,r18
 8009380:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009384:	80800204 	addi	r2,r16,8
 8009388:	dfc00a17 	ldw	ra,40(sp)
 800938c:	df000917 	ldw	fp,36(sp)
 8009390:	ddc00817 	ldw	r23,32(sp)
 8009394:	dd800717 	ldw	r22,28(sp)
 8009398:	dd400617 	ldw	r21,24(sp)
 800939c:	dd000517 	ldw	r20,20(sp)
 80093a0:	dcc00417 	ldw	r19,16(sp)
 80093a4:	dc800317 	ldw	r18,12(sp)
 80093a8:	dc400217 	ldw	r17,8(sp)
 80093ac:	dc000117 	ldw	r16,4(sp)
 80093b0:	dec00b04 	addi	sp,sp,44
 80093b4:	f800283a 	ret
 80093b8:	00800304 	movi	r2,12
 80093bc:	90800015 	stw	r2,0(r18)
 80093c0:	0005883a 	mov	r2,zero
 80093c4:	003ff006 	br	8009388 <_malloc_r+0x2a4>
 80093c8:	01002004 	movi	r4,128
 80093cc:	02001004 	movi	r8,64
 80093d0:	01c00fc4 	movi	r7,63
 80093d4:	003f6106 	br	800915c <_malloc_r+0x78>
 80093d8:	4009883a 	mov	r4,r8
 80093dc:	003f7506 	br	80091b4 <_malloc_r+0xd0>
 80093e0:	81000317 	ldw	r4,12(r16)
 80093e4:	003fde06 	br	8009360 <_malloc_r+0x27c>
 80093e8:	81c5883a 	add	r2,r16,r7
 80093ec:	11400117 	ldw	r5,4(r2)
 80093f0:	9009883a 	mov	r4,r18
 80093f4:	29400054 	ori	r5,r5,1
 80093f8:	11400115 	stw	r5,4(r2)
 80093fc:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009400:	80800204 	addi	r2,r16,8
 8009404:	003fe006 	br	8009388 <_malloc_r+0x2a4>
 8009408:	9c000217 	ldw	r16,8(r19)
 800940c:	00bfff04 	movi	r2,-4
 8009410:	85800117 	ldw	r22,4(r16)
 8009414:	b0ac703a 	and	r22,r22,r2
 8009418:	b4400336 	bltu	r22,r17,8009428 <_malloc_r+0x344>
 800941c:	b445c83a 	sub	r2,r22,r17
 8009420:	00c003c4 	movi	r3,15
 8009424:	18805d16 	blt	r3,r2,800959c <_malloc_r+0x4b8>
 8009428:	05c20074 	movhi	r23,2049
 800942c:	00820074 	movhi	r2,2049
 8009430:	108a2c04 	addi	r2,r2,10416
 8009434:	bdc2a604 	addi	r23,r23,2712
 8009438:	15400017 	ldw	r21,0(r2)
 800943c:	b8c00017 	ldw	r3,0(r23)
 8009440:	00bfffc4 	movi	r2,-1
 8009444:	858d883a 	add	r6,r16,r22
 8009448:	8d6b883a 	add	r21,r17,r21
 800944c:	1880ea26 	beq	r3,r2,80097f8 <_malloc_r+0x714>
 8009450:	ad4403c4 	addi	r21,r21,4111
 8009454:	00bc0004 	movi	r2,-4096
 8009458:	a8aa703a 	and	r21,r21,r2
 800945c:	a80b883a 	mov	r5,r21
 8009460:	9009883a 	mov	r4,r18
 8009464:	d9800015 	stw	r6,0(sp)
 8009468:	800a0940 	call	800a094 <_sbrk_r>
 800946c:	1029883a 	mov	r20,r2
 8009470:	00bfffc4 	movi	r2,-1
 8009474:	d9800017 	ldw	r6,0(sp)
 8009478:	a080e826 	beq	r20,r2,800981c <_malloc_r+0x738>
 800947c:	a180a636 	bltu	r20,r6,8009718 <_malloc_r+0x634>
 8009480:	07022074 	movhi	fp,2177
 8009484:	e70a6c04 	addi	fp,fp,10672
 8009488:	e0800017 	ldw	r2,0(fp)
 800948c:	a887883a 	add	r3,r21,r2
 8009490:	e0c00015 	stw	r3,0(fp)
 8009494:	3500e626 	beq	r6,r20,8009830 <_malloc_r+0x74c>
 8009498:	b9000017 	ldw	r4,0(r23)
 800949c:	00bfffc4 	movi	r2,-1
 80094a0:	2080ee26 	beq	r4,r2,800985c <_malloc_r+0x778>
 80094a4:	a185c83a 	sub	r2,r20,r6
 80094a8:	10c5883a 	add	r2,r2,r3
 80094ac:	e0800015 	stw	r2,0(fp)
 80094b0:	a0c001cc 	andi	r3,r20,7
 80094b4:	1800bc26 	beq	r3,zero,80097a8 <_malloc_r+0x6c4>
 80094b8:	a0e9c83a 	sub	r20,r20,r3
 80094bc:	00840204 	movi	r2,4104
 80094c0:	a5000204 	addi	r20,r20,8
 80094c4:	10c7c83a 	sub	r3,r2,r3
 80094c8:	a545883a 	add	r2,r20,r21
 80094cc:	1083ffcc 	andi	r2,r2,4095
 80094d0:	18abc83a 	sub	r21,r3,r2
 80094d4:	a80b883a 	mov	r5,r21
 80094d8:	9009883a 	mov	r4,r18
 80094dc:	800a0940 	call	800a094 <_sbrk_r>
 80094e0:	00ffffc4 	movi	r3,-1
 80094e4:	10c0e126 	beq	r2,r3,800986c <_malloc_r+0x788>
 80094e8:	1505c83a 	sub	r2,r2,r20
 80094ec:	1545883a 	add	r2,r2,r21
 80094f0:	10800054 	ori	r2,r2,1
 80094f4:	e0c00017 	ldw	r3,0(fp)
 80094f8:	9d000215 	stw	r20,8(r19)
 80094fc:	a0800115 	stw	r2,4(r20)
 8009500:	a8c7883a 	add	r3,r21,r3
 8009504:	e0c00015 	stw	r3,0(fp)
 8009508:	84c00e26 	beq	r16,r19,8009544 <_malloc_r+0x460>
 800950c:	018003c4 	movi	r6,15
 8009510:	3580a72e 	bgeu	r6,r22,80097b0 <_malloc_r+0x6cc>
 8009514:	81400117 	ldw	r5,4(r16)
 8009518:	013ffe04 	movi	r4,-8
 800951c:	b0bffd04 	addi	r2,r22,-12
 8009520:	1104703a 	and	r2,r2,r4
 8009524:	2900004c 	andi	r4,r5,1
 8009528:	2088b03a 	or	r4,r4,r2
 800952c:	81000115 	stw	r4,4(r16)
 8009530:	01400144 	movi	r5,5
 8009534:	8089883a 	add	r4,r16,r2
 8009538:	21400115 	stw	r5,4(r4)
 800953c:	21400215 	stw	r5,8(r4)
 8009540:	3080cd36 	bltu	r6,r2,8009878 <_malloc_r+0x794>
 8009544:	00820074 	movhi	r2,2049
 8009548:	108a2b04 	addi	r2,r2,10412
 800954c:	11000017 	ldw	r4,0(r2)
 8009550:	20c0012e 	bgeu	r4,r3,8009558 <_malloc_r+0x474>
 8009554:	10c00015 	stw	r3,0(r2)
 8009558:	00820074 	movhi	r2,2049
 800955c:	108a2a04 	addi	r2,r2,10408
 8009560:	11000017 	ldw	r4,0(r2)
 8009564:	9c000217 	ldw	r16,8(r19)
 8009568:	20c0012e 	bgeu	r4,r3,8009570 <_malloc_r+0x48c>
 800956c:	10c00015 	stw	r3,0(r2)
 8009570:	80c00117 	ldw	r3,4(r16)
 8009574:	00bfff04 	movi	r2,-4
 8009578:	1886703a 	and	r3,r3,r2
 800957c:	1c45c83a 	sub	r2,r3,r17
 8009580:	1c400236 	bltu	r3,r17,800958c <_malloc_r+0x4a8>
 8009584:	00c003c4 	movi	r3,15
 8009588:	18800416 	blt	r3,r2,800959c <_malloc_r+0x4b8>
 800958c:	9009883a 	mov	r4,r18
 8009590:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009594:	0005883a 	mov	r2,zero
 8009598:	003f7b06 	br	8009388 <_malloc_r+0x2a4>
 800959c:	88c00054 	ori	r3,r17,1
 80095a0:	80c00115 	stw	r3,4(r16)
 80095a4:	8463883a 	add	r17,r16,r17
 80095a8:	10800054 	ori	r2,r2,1
 80095ac:	9c400215 	stw	r17,8(r19)
 80095b0:	88800115 	stw	r2,4(r17)
 80095b4:	9009883a 	mov	r4,r18
 80095b8:	800b6a80 	call	800b6a8 <__malloc_unlock>
 80095bc:	80800204 	addi	r2,r16,8
 80095c0:	003f7106 	br	8009388 <_malloc_r+0x2a4>
 80095c4:	00c00504 	movi	r3,20
 80095c8:	18804a2e 	bgeu	r3,r2,80096f4 <_malloc_r+0x610>
 80095cc:	00c01504 	movi	r3,84
 80095d0:	18806e36 	bltu	r3,r2,800978c <_malloc_r+0x6a8>
 80095d4:	8804d33a 	srli	r2,r17,12
 80095d8:	12001bc4 	addi	r8,r2,111
 80095dc:	11c01b84 	addi	r7,r2,110
 80095e0:	4209883a 	add	r4,r8,r8
 80095e4:	003edd06 	br	800915c <_malloc_r+0x78>
 80095e8:	3804d27a 	srli	r2,r7,9
 80095ec:	00c00104 	movi	r3,4
 80095f0:	1880442e 	bgeu	r3,r2,8009704 <_malloc_r+0x620>
 80095f4:	00c00504 	movi	r3,20
 80095f8:	18808136 	bltu	r3,r2,8009800 <_malloc_r+0x71c>
 80095fc:	11401704 	addi	r5,r2,92
 8009600:	10c016c4 	addi	r3,r2,91
 8009604:	294b883a 	add	r5,r5,r5
 8009608:	294b883a 	add	r5,r5,r5
 800960c:	294b883a 	add	r5,r5,r5
 8009610:	994b883a 	add	r5,r19,r5
 8009614:	28800017 	ldw	r2,0(r5)
 8009618:	01820074 	movhi	r6,2049
 800961c:	297ffe04 	addi	r5,r5,-8
 8009620:	31bca704 	addi	r6,r6,-3428
 8009624:	28806526 	beq	r5,r2,80097bc <_malloc_r+0x6d8>
 8009628:	01bfff04 	movi	r6,-4
 800962c:	10c00117 	ldw	r3,4(r2)
 8009630:	1986703a 	and	r3,r3,r6
 8009634:	38c0022e 	bgeu	r7,r3,8009640 <_malloc_r+0x55c>
 8009638:	10800217 	ldw	r2,8(r2)
 800963c:	28bffb1e 	bne	r5,r2,800962c <_malloc_r+0x548>
 8009640:	11400317 	ldw	r5,12(r2)
 8009644:	98c00117 	ldw	r3,4(r19)
 8009648:	81400315 	stw	r5,12(r16)
 800964c:	80800215 	stw	r2,8(r16)
 8009650:	2c000215 	stw	r16,8(r5)
 8009654:	14000315 	stw	r16,12(r2)
 8009658:	003ef806 	br	800923c <_malloc_r+0x158>
 800965c:	88c00054 	ori	r3,r17,1
 8009660:	80c00115 	stw	r3,4(r16)
 8009664:	8463883a 	add	r17,r16,r17
 8009668:	34400515 	stw	r17,20(r6)
 800966c:	34400415 	stw	r17,16(r6)
 8009670:	10c00054 	ori	r3,r2,1
 8009674:	8a000315 	stw	r8,12(r17)
 8009678:	8a000215 	stw	r8,8(r17)
 800967c:	88c00115 	stw	r3,4(r17)
 8009680:	88a3883a 	add	r17,r17,r2
 8009684:	88800015 	stw	r2,0(r17)
 8009688:	9009883a 	mov	r4,r18
 800968c:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009690:	80800204 	addi	r2,r16,8
 8009694:	003f3c06 	br	8009388 <_malloc_r+0x2a4>
 8009698:	30c00117 	ldw	r3,4(r6)
 800969c:	003ee706 	br	800923c <_malloc_r+0x158>
 80096a0:	5ac00044 	addi	r11,r11,1
 80096a4:	588000cc 	andi	r2,r11,3
 80096a8:	31800204 	addi	r6,r6,8
 80096ac:	103efd1e 	bne	r2,zero,80092a4 <_malloc_r+0x1c0>
 80096b0:	00002406 	br	8009744 <_malloc_r+0x660>
 80096b4:	14000317 	ldw	r16,12(r2)
 80096b8:	143f251e 	bne	r2,r16,8009350 <_malloc_r+0x26c>
 80096bc:	21000084 	addi	r4,r4,2
 80096c0:	003ebc06 	br	80091b4 <_malloc_r+0xd0>
 80096c4:	8085883a 	add	r2,r16,r2
 80096c8:	10c00117 	ldw	r3,4(r2)
 80096cc:	81000317 	ldw	r4,12(r16)
 80096d0:	81400217 	ldw	r5,8(r16)
 80096d4:	18c00054 	ori	r3,r3,1
 80096d8:	10c00115 	stw	r3,4(r2)
 80096dc:	29000315 	stw	r4,12(r5)
 80096e0:	21400215 	stw	r5,8(r4)
 80096e4:	9009883a 	mov	r4,r18
 80096e8:	800b6a80 	call	800b6a8 <__malloc_unlock>
 80096ec:	80800204 	addi	r2,r16,8
 80096f0:	003f2506 	br	8009388 <_malloc_r+0x2a4>
 80096f4:	12001704 	addi	r8,r2,92
 80096f8:	11c016c4 	addi	r7,r2,91
 80096fc:	4209883a 	add	r4,r8,r8
 8009700:	003e9606 	br	800915c <_malloc_r+0x78>
 8009704:	3804d1ba 	srli	r2,r7,6
 8009708:	11400e44 	addi	r5,r2,57
 800970c:	10c00e04 	addi	r3,r2,56
 8009710:	294b883a 	add	r5,r5,r5
 8009714:	003fbc06 	br	8009608 <_malloc_r+0x524>
 8009718:	84ff5926 	beq	r16,r19,8009480 <_malloc_r+0x39c>
 800971c:	00820074 	movhi	r2,2049
 8009720:	10bca704 	addi	r2,r2,-3428
 8009724:	14000217 	ldw	r16,8(r2)
 8009728:	00bfff04 	movi	r2,-4
 800972c:	80c00117 	ldw	r3,4(r16)
 8009730:	1886703a 	and	r3,r3,r2
 8009734:	003f9106 	br	800957c <_malloc_r+0x498>
 8009738:	60800217 	ldw	r2,8(r12)
 800973c:	213fffc4 	addi	r4,r4,-1
 8009740:	1300651e 	bne	r2,r12,80098d8 <_malloc_r+0x7f4>
 8009744:	208000cc 	andi	r2,r4,3
 8009748:	633ffe04 	addi	r12,r12,-8
 800974c:	103ffa1e 	bne	r2,zero,8009738 <_malloc_r+0x654>
 8009750:	98800117 	ldw	r2,4(r19)
 8009754:	0146303a 	nor	r3,zero,r5
 8009758:	1884703a 	and	r2,r3,r2
 800975c:	98800115 	stw	r2,4(r19)
 8009760:	294b883a 	add	r5,r5,r5
 8009764:	117f2836 	bltu	r2,r5,8009408 <_malloc_r+0x324>
 8009768:	283f2726 	beq	r5,zero,8009408 <_malloc_r+0x324>
 800976c:	2886703a 	and	r3,r5,r2
 8009770:	5809883a 	mov	r4,r11
 8009774:	183ec31e 	bne	r3,zero,8009284 <_malloc_r+0x1a0>
 8009778:	294b883a 	add	r5,r5,r5
 800977c:	2886703a 	and	r3,r5,r2
 8009780:	21000104 	addi	r4,r4,4
 8009784:	183ffc26 	beq	r3,zero,8009778 <_malloc_r+0x694>
 8009788:	003ebe06 	br	8009284 <_malloc_r+0x1a0>
 800978c:	00c05504 	movi	r3,340
 8009790:	18801236 	bltu	r3,r2,80097dc <_malloc_r+0x6f8>
 8009794:	8804d3fa 	srli	r2,r17,15
 8009798:	12001e04 	addi	r8,r2,120
 800979c:	11c01dc4 	addi	r7,r2,119
 80097a0:	4209883a 	add	r4,r8,r8
 80097a4:	003e6d06 	br	800915c <_malloc_r+0x78>
 80097a8:	00c40004 	movi	r3,4096
 80097ac:	003f4606 	br	80094c8 <_malloc_r+0x3e4>
 80097b0:	00800044 	movi	r2,1
 80097b4:	a0800115 	stw	r2,4(r20)
 80097b8:	003f7406 	br	800958c <_malloc_r+0x4a8>
 80097bc:	1805d0ba 	srai	r2,r3,2
 80097c0:	01c00044 	movi	r7,1
 80097c4:	30c00117 	ldw	r3,4(r6)
 80097c8:	388e983a 	sll	r7,r7,r2
 80097cc:	2805883a 	mov	r2,r5
 80097d0:	38c6b03a 	or	r3,r7,r3
 80097d4:	30c00115 	stw	r3,4(r6)
 80097d8:	003f9b06 	br	8009648 <_malloc_r+0x564>
 80097dc:	00c15504 	movi	r3,1364
 80097e0:	18801a36 	bltu	r3,r2,800984c <_malloc_r+0x768>
 80097e4:	8804d4ba 	srli	r2,r17,18
 80097e8:	12001f44 	addi	r8,r2,125
 80097ec:	11c01f04 	addi	r7,r2,124
 80097f0:	4209883a 	add	r4,r8,r8
 80097f4:	003e5906 	br	800915c <_malloc_r+0x78>
 80097f8:	ad400404 	addi	r21,r21,16
 80097fc:	003f1706 	br	800945c <_malloc_r+0x378>
 8009800:	00c01504 	movi	r3,84
 8009804:	18802336 	bltu	r3,r2,8009894 <_malloc_r+0x7b0>
 8009808:	3804d33a 	srli	r2,r7,12
 800980c:	11401bc4 	addi	r5,r2,111
 8009810:	10c01b84 	addi	r3,r2,110
 8009814:	294b883a 	add	r5,r5,r5
 8009818:	003f7b06 	br	8009608 <_malloc_r+0x524>
 800981c:	9c000217 	ldw	r16,8(r19)
 8009820:	00bfff04 	movi	r2,-4
 8009824:	80c00117 	ldw	r3,4(r16)
 8009828:	1886703a 	and	r3,r3,r2
 800982c:	003f5306 	br	800957c <_malloc_r+0x498>
 8009830:	3083ffcc 	andi	r2,r6,4095
 8009834:	103f181e 	bne	r2,zero,8009498 <_malloc_r+0x3b4>
 8009838:	99000217 	ldw	r4,8(r19)
 800983c:	b545883a 	add	r2,r22,r21
 8009840:	10800054 	ori	r2,r2,1
 8009844:	20800115 	stw	r2,4(r4)
 8009848:	003f3e06 	br	8009544 <_malloc_r+0x460>
 800984c:	01003f84 	movi	r4,254
 8009850:	02001fc4 	movi	r8,127
 8009854:	01c01f84 	movi	r7,126
 8009858:	003e4006 	br	800915c <_malloc_r+0x78>
 800985c:	00820074 	movhi	r2,2049
 8009860:	1082a604 	addi	r2,r2,2712
 8009864:	15000015 	stw	r20,0(r2)
 8009868:	003f1106 	br	80094b0 <_malloc_r+0x3cc>
 800986c:	00800044 	movi	r2,1
 8009870:	002b883a 	mov	r21,zero
 8009874:	003f1f06 	br	80094f4 <_malloc_r+0x410>
 8009878:	81400204 	addi	r5,r16,8
 800987c:	9009883a 	mov	r4,r18
 8009880:	800a8fc0 	call	800a8fc <_free_r>
 8009884:	00822074 	movhi	r2,2177
 8009888:	108a6c04 	addi	r2,r2,10672
 800988c:	10c00017 	ldw	r3,0(r2)
 8009890:	003f2c06 	br	8009544 <_malloc_r+0x460>
 8009894:	00c05504 	movi	r3,340
 8009898:	18800536 	bltu	r3,r2,80098b0 <_malloc_r+0x7cc>
 800989c:	3804d3fa 	srli	r2,r7,15
 80098a0:	11401e04 	addi	r5,r2,120
 80098a4:	10c01dc4 	addi	r3,r2,119
 80098a8:	294b883a 	add	r5,r5,r5
 80098ac:	003f5606 	br	8009608 <_malloc_r+0x524>
 80098b0:	00c15504 	movi	r3,1364
 80098b4:	18800536 	bltu	r3,r2,80098cc <_malloc_r+0x7e8>
 80098b8:	3804d4ba 	srli	r2,r7,18
 80098bc:	11401f44 	addi	r5,r2,125
 80098c0:	10c01f04 	addi	r3,r2,124
 80098c4:	294b883a 	add	r5,r5,r5
 80098c8:	003f4f06 	br	8009608 <_malloc_r+0x524>
 80098cc:	01403f84 	movi	r5,254
 80098d0:	00c01f84 	movi	r3,126
 80098d4:	003f4c06 	br	8009608 <_malloc_r+0x524>
 80098d8:	98800117 	ldw	r2,4(r19)
 80098dc:	003fa006 	br	8009760 <_malloc_r+0x67c>
 80098e0:	8808d0fa 	srli	r4,r17,3
 80098e4:	20800044 	addi	r2,r4,1
 80098e8:	1085883a 	add	r2,r2,r2
 80098ec:	003e9006 	br	8009330 <_malloc_r+0x24c>

080098f0 <memchr>:
 80098f0:	208000cc 	andi	r2,r4,3
 80098f4:	280f883a 	mov	r7,r5
 80098f8:	10003426 	beq	r2,zero,80099cc <memchr+0xdc>
 80098fc:	30bfffc4 	addi	r2,r6,-1
 8009900:	30001a26 	beq	r6,zero,800996c <memchr+0x7c>
 8009904:	20c00003 	ldbu	r3,0(r4)
 8009908:	29803fcc 	andi	r6,r5,255
 800990c:	30c0051e 	bne	r6,r3,8009924 <memchr+0x34>
 8009910:	00001806 	br	8009974 <memchr+0x84>
 8009914:	10001526 	beq	r2,zero,800996c <memchr+0x7c>
 8009918:	20c00003 	ldbu	r3,0(r4)
 800991c:	10bfffc4 	addi	r2,r2,-1
 8009920:	30c01426 	beq	r6,r3,8009974 <memchr+0x84>
 8009924:	21000044 	addi	r4,r4,1
 8009928:	20c000cc 	andi	r3,r4,3
 800992c:	183ff91e 	bne	r3,zero,8009914 <memchr+0x24>
 8009930:	020000c4 	movi	r8,3
 8009934:	40801136 	bltu	r8,r2,800997c <memchr+0x8c>
 8009938:	10000c26 	beq	r2,zero,800996c <memchr+0x7c>
 800993c:	20c00003 	ldbu	r3,0(r4)
 8009940:	29403fcc 	andi	r5,r5,255
 8009944:	28c00b26 	beq	r5,r3,8009974 <memchr+0x84>
 8009948:	20c00044 	addi	r3,r4,1
 800994c:	39803fcc 	andi	r6,r7,255
 8009950:	2089883a 	add	r4,r4,r2
 8009954:	00000306 	br	8009964 <memchr+0x74>
 8009958:	18c00044 	addi	r3,r3,1
 800995c:	197fffc3 	ldbu	r5,-1(r3)
 8009960:	31400526 	beq	r6,r5,8009978 <memchr+0x88>
 8009964:	1805883a 	mov	r2,r3
 8009968:	20fffb1e 	bne	r4,r3,8009958 <memchr+0x68>
 800996c:	0005883a 	mov	r2,zero
 8009970:	f800283a 	ret
 8009974:	2005883a 	mov	r2,r4
 8009978:	f800283a 	ret
 800997c:	28c03fcc 	andi	r3,r5,255
 8009980:	1812923a 	slli	r9,r3,8
 8009984:	02ffbff4 	movhi	r11,65279
 8009988:	02a02074 	movhi	r10,32897
 800998c:	48d2b03a 	or	r9,r9,r3
 8009990:	4806943a 	slli	r3,r9,16
 8009994:	5affbfc4 	addi	r11,r11,-257
 8009998:	52a02004 	addi	r10,r10,-32640
 800999c:	48d2b03a 	or	r9,r9,r3
 80099a0:	20c00017 	ldw	r3,0(r4)
 80099a4:	48c6f03a 	xor	r3,r9,r3
 80099a8:	1acd883a 	add	r6,r3,r11
 80099ac:	00c6303a 	nor	r3,zero,r3
 80099b0:	30c6703a 	and	r3,r6,r3
 80099b4:	1a86703a 	and	r3,r3,r10
 80099b8:	183fe01e 	bne	r3,zero,800993c <memchr+0x4c>
 80099bc:	10bfff04 	addi	r2,r2,-4
 80099c0:	21000104 	addi	r4,r4,4
 80099c4:	40bff636 	bltu	r8,r2,80099a0 <memchr+0xb0>
 80099c8:	003fdb06 	br	8009938 <memchr+0x48>
 80099cc:	3005883a 	mov	r2,r6
 80099d0:	003fd706 	br	8009930 <memchr+0x40>

080099d4 <memmove>:
 80099d4:	2005883a 	mov	r2,r4
 80099d8:	29000b2e 	bgeu	r5,r4,8009a08 <memmove+0x34>
 80099dc:	298f883a 	add	r7,r5,r6
 80099e0:	21c0092e 	bgeu	r4,r7,8009a08 <memmove+0x34>
 80099e4:	2187883a 	add	r3,r4,r6
 80099e8:	198bc83a 	sub	r5,r3,r6
 80099ec:	30004826 	beq	r6,zero,8009b10 <memmove+0x13c>
 80099f0:	39ffffc4 	addi	r7,r7,-1
 80099f4:	39000003 	ldbu	r4,0(r7)
 80099f8:	18ffffc4 	addi	r3,r3,-1
 80099fc:	19000005 	stb	r4,0(r3)
 8009a00:	28fffb1e 	bne	r5,r3,80099f0 <memmove+0x1c>
 8009a04:	f800283a 	ret
 8009a08:	00c003c4 	movi	r3,15
 8009a0c:	1980412e 	bgeu	r3,r6,8009b14 <memmove+0x140>
 8009a10:	2886b03a 	or	r3,r5,r2
 8009a14:	18c000cc 	andi	r3,r3,3
 8009a18:	1800401e 	bne	r3,zero,8009b1c <memmove+0x148>
 8009a1c:	33fffc04 	addi	r15,r6,-16
 8009a20:	781ed13a 	srli	r15,r15,4
 8009a24:	28c00104 	addi	r3,r5,4
 8009a28:	13400104 	addi	r13,r2,4
 8009a2c:	781c913a 	slli	r14,r15,4
 8009a30:	2b000204 	addi	r12,r5,8
 8009a34:	12c00204 	addi	r11,r2,8
 8009a38:	73800504 	addi	r14,r14,20
 8009a3c:	2a800304 	addi	r10,r5,12
 8009a40:	12400304 	addi	r9,r2,12
 8009a44:	2b9d883a 	add	r14,r5,r14
 8009a48:	2811883a 	mov	r8,r5
 8009a4c:	100f883a 	mov	r7,r2
 8009a50:	41000017 	ldw	r4,0(r8)
 8009a54:	39c00404 	addi	r7,r7,16
 8009a58:	18c00404 	addi	r3,r3,16
 8009a5c:	393ffc15 	stw	r4,-16(r7)
 8009a60:	193ffc17 	ldw	r4,-16(r3)
 8009a64:	6b400404 	addi	r13,r13,16
 8009a68:	5ac00404 	addi	r11,r11,16
 8009a6c:	693ffc15 	stw	r4,-16(r13)
 8009a70:	61000017 	ldw	r4,0(r12)
 8009a74:	4a400404 	addi	r9,r9,16
 8009a78:	42000404 	addi	r8,r8,16
 8009a7c:	593ffc15 	stw	r4,-16(r11)
 8009a80:	51000017 	ldw	r4,0(r10)
 8009a84:	63000404 	addi	r12,r12,16
 8009a88:	52800404 	addi	r10,r10,16
 8009a8c:	493ffc15 	stw	r4,-16(r9)
 8009a90:	1bbfef1e 	bne	r3,r14,8009a50 <memmove+0x7c>
 8009a94:	79000044 	addi	r4,r15,1
 8009a98:	2008913a 	slli	r4,r4,4
 8009a9c:	328003cc 	andi	r10,r6,15
 8009aa0:	02c000c4 	movi	r11,3
 8009aa4:	1107883a 	add	r3,r2,r4
 8009aa8:	290b883a 	add	r5,r5,r4
 8009aac:	5a801e2e 	bgeu	r11,r10,8009b28 <memmove+0x154>
 8009ab0:	1813883a 	mov	r9,r3
 8009ab4:	2811883a 	mov	r8,r5
 8009ab8:	500f883a 	mov	r7,r10
 8009abc:	41000017 	ldw	r4,0(r8)
 8009ac0:	4a400104 	addi	r9,r9,4
 8009ac4:	39ffff04 	addi	r7,r7,-4
 8009ac8:	493fff15 	stw	r4,-4(r9)
 8009acc:	42000104 	addi	r8,r8,4
 8009ad0:	59fffa36 	bltu	r11,r7,8009abc <memmove+0xe8>
 8009ad4:	513fff04 	addi	r4,r10,-4
 8009ad8:	2008d0ba 	srli	r4,r4,2
 8009adc:	318000cc 	andi	r6,r6,3
 8009ae0:	21000044 	addi	r4,r4,1
 8009ae4:	2109883a 	add	r4,r4,r4
 8009ae8:	2109883a 	add	r4,r4,r4
 8009aec:	1907883a 	add	r3,r3,r4
 8009af0:	290b883a 	add	r5,r5,r4
 8009af4:	30000b26 	beq	r6,zero,8009b24 <memmove+0x150>
 8009af8:	198d883a 	add	r6,r3,r6
 8009afc:	29c00003 	ldbu	r7,0(r5)
 8009b00:	18c00044 	addi	r3,r3,1
 8009b04:	29400044 	addi	r5,r5,1
 8009b08:	19ffffc5 	stb	r7,-1(r3)
 8009b0c:	19bffb1e 	bne	r3,r6,8009afc <memmove+0x128>
 8009b10:	f800283a 	ret
 8009b14:	1007883a 	mov	r3,r2
 8009b18:	003ff606 	br	8009af4 <memmove+0x120>
 8009b1c:	1007883a 	mov	r3,r2
 8009b20:	003ff506 	br	8009af8 <memmove+0x124>
 8009b24:	f800283a 	ret
 8009b28:	500d883a 	mov	r6,r10
 8009b2c:	003ff106 	br	8009af4 <memmove+0x120>

08009b30 <_realloc_r>:
 8009b30:	defff604 	addi	sp,sp,-40
 8009b34:	dc800215 	stw	r18,8(sp)
 8009b38:	dfc00915 	stw	ra,36(sp)
 8009b3c:	df000815 	stw	fp,32(sp)
 8009b40:	ddc00715 	stw	r23,28(sp)
 8009b44:	dd800615 	stw	r22,24(sp)
 8009b48:	dd400515 	stw	r21,20(sp)
 8009b4c:	dd000415 	stw	r20,16(sp)
 8009b50:	dcc00315 	stw	r19,12(sp)
 8009b54:	dc400115 	stw	r17,4(sp)
 8009b58:	dc000015 	stw	r16,0(sp)
 8009b5c:	3025883a 	mov	r18,r6
 8009b60:	2800b726 	beq	r5,zero,8009e40 <_realloc_r+0x310>
 8009b64:	282b883a 	mov	r21,r5
 8009b68:	2029883a 	mov	r20,r4
 8009b6c:	800b6840 	call	800b684 <__malloc_lock>
 8009b70:	a8bfff17 	ldw	r2,-4(r21)
 8009b74:	043fff04 	movi	r16,-4
 8009b78:	90c002c4 	addi	r3,r18,11
 8009b7c:	01000584 	movi	r4,22
 8009b80:	acfffe04 	addi	r19,r21,-8
 8009b84:	1420703a 	and	r16,r2,r16
 8009b88:	20c0332e 	bgeu	r4,r3,8009c58 <_realloc_r+0x128>
 8009b8c:	047ffe04 	movi	r17,-8
 8009b90:	1c62703a 	and	r17,r3,r17
 8009b94:	8807883a 	mov	r3,r17
 8009b98:	88005816 	blt	r17,zero,8009cfc <_realloc_r+0x1cc>
 8009b9c:	8c805736 	bltu	r17,r18,8009cfc <_realloc_r+0x1cc>
 8009ba0:	80c0300e 	bge	r16,r3,8009c64 <_realloc_r+0x134>
 8009ba4:	07020074 	movhi	fp,2049
 8009ba8:	e73ca704 	addi	fp,fp,-3428
 8009bac:	e1c00217 	ldw	r7,8(fp)
 8009bb0:	9c09883a 	add	r4,r19,r16
 8009bb4:	22000117 	ldw	r8,4(r4)
 8009bb8:	21c06326 	beq	r4,r7,8009d48 <_realloc_r+0x218>
 8009bbc:	017fff84 	movi	r5,-2
 8009bc0:	414a703a 	and	r5,r8,r5
 8009bc4:	214b883a 	add	r5,r4,r5
 8009bc8:	29800117 	ldw	r6,4(r5)
 8009bcc:	3180004c 	andi	r6,r6,1
 8009bd0:	30003f26 	beq	r6,zero,8009cd0 <_realloc_r+0x1a0>
 8009bd4:	1080004c 	andi	r2,r2,1
 8009bd8:	10008326 	beq	r2,zero,8009de8 <_realloc_r+0x2b8>
 8009bdc:	900b883a 	mov	r5,r18
 8009be0:	a009883a 	mov	r4,r20
 8009be4:	80090e40 	call	80090e4 <_malloc_r>
 8009be8:	1025883a 	mov	r18,r2
 8009bec:	10011e26 	beq	r2,zero,800a068 <_realloc_r+0x538>
 8009bf0:	a93fff17 	ldw	r4,-4(r21)
 8009bf4:	10fffe04 	addi	r3,r2,-8
 8009bf8:	00bfff84 	movi	r2,-2
 8009bfc:	2084703a 	and	r2,r4,r2
 8009c00:	9885883a 	add	r2,r19,r2
 8009c04:	1880ee26 	beq	r3,r2,8009fc0 <_realloc_r+0x490>
 8009c08:	81bfff04 	addi	r6,r16,-4
 8009c0c:	00800904 	movi	r2,36
 8009c10:	1180b836 	bltu	r2,r6,8009ef4 <_realloc_r+0x3c4>
 8009c14:	00c004c4 	movi	r3,19
 8009c18:	19809636 	bltu	r3,r6,8009e74 <_realloc_r+0x344>
 8009c1c:	9005883a 	mov	r2,r18
 8009c20:	a807883a 	mov	r3,r21
 8009c24:	19000017 	ldw	r4,0(r3)
 8009c28:	11000015 	stw	r4,0(r2)
 8009c2c:	19000117 	ldw	r4,4(r3)
 8009c30:	11000115 	stw	r4,4(r2)
 8009c34:	18c00217 	ldw	r3,8(r3)
 8009c38:	10c00215 	stw	r3,8(r2)
 8009c3c:	a80b883a 	mov	r5,r21
 8009c40:	a009883a 	mov	r4,r20
 8009c44:	800a8fc0 	call	800a8fc <_free_r>
 8009c48:	a009883a 	mov	r4,r20
 8009c4c:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009c50:	9005883a 	mov	r2,r18
 8009c54:	00001206 	br	8009ca0 <_realloc_r+0x170>
 8009c58:	00c00404 	movi	r3,16
 8009c5c:	1823883a 	mov	r17,r3
 8009c60:	003fce06 	br	8009b9c <_realloc_r+0x6c>
 8009c64:	a825883a 	mov	r18,r21
 8009c68:	8445c83a 	sub	r2,r16,r17
 8009c6c:	00c003c4 	movi	r3,15
 8009c70:	18802636 	bltu	r3,r2,8009d0c <_realloc_r+0x1dc>
 8009c74:	99800117 	ldw	r6,4(r19)
 8009c78:	9c07883a 	add	r3,r19,r16
 8009c7c:	3180004c 	andi	r6,r6,1
 8009c80:	3420b03a 	or	r16,r6,r16
 8009c84:	9c000115 	stw	r16,4(r19)
 8009c88:	18800117 	ldw	r2,4(r3)
 8009c8c:	10800054 	ori	r2,r2,1
 8009c90:	18800115 	stw	r2,4(r3)
 8009c94:	a009883a 	mov	r4,r20
 8009c98:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009c9c:	9005883a 	mov	r2,r18
 8009ca0:	dfc00917 	ldw	ra,36(sp)
 8009ca4:	df000817 	ldw	fp,32(sp)
 8009ca8:	ddc00717 	ldw	r23,28(sp)
 8009cac:	dd800617 	ldw	r22,24(sp)
 8009cb0:	dd400517 	ldw	r21,20(sp)
 8009cb4:	dd000417 	ldw	r20,16(sp)
 8009cb8:	dcc00317 	ldw	r19,12(sp)
 8009cbc:	dc800217 	ldw	r18,8(sp)
 8009cc0:	dc400117 	ldw	r17,4(sp)
 8009cc4:	dc000017 	ldw	r16,0(sp)
 8009cc8:	dec00a04 	addi	sp,sp,40
 8009ccc:	f800283a 	ret
 8009cd0:	017fff04 	movi	r5,-4
 8009cd4:	414a703a 	and	r5,r8,r5
 8009cd8:	814d883a 	add	r6,r16,r5
 8009cdc:	30c01f16 	blt	r6,r3,8009d5c <_realloc_r+0x22c>
 8009ce0:	20800317 	ldw	r2,12(r4)
 8009ce4:	20c00217 	ldw	r3,8(r4)
 8009ce8:	a825883a 	mov	r18,r21
 8009cec:	3021883a 	mov	r16,r6
 8009cf0:	18800315 	stw	r2,12(r3)
 8009cf4:	10c00215 	stw	r3,8(r2)
 8009cf8:	003fdb06 	br	8009c68 <_realloc_r+0x138>
 8009cfc:	00800304 	movi	r2,12
 8009d00:	a0800015 	stw	r2,0(r20)
 8009d04:	0005883a 	mov	r2,zero
 8009d08:	003fe506 	br	8009ca0 <_realloc_r+0x170>
 8009d0c:	98c00117 	ldw	r3,4(r19)
 8009d10:	9c4b883a 	add	r5,r19,r17
 8009d14:	11000054 	ori	r4,r2,1
 8009d18:	18c0004c 	andi	r3,r3,1
 8009d1c:	1c62b03a 	or	r17,r3,r17
 8009d20:	9c400115 	stw	r17,4(r19)
 8009d24:	29000115 	stw	r4,4(r5)
 8009d28:	2885883a 	add	r2,r5,r2
 8009d2c:	10c00117 	ldw	r3,4(r2)
 8009d30:	29400204 	addi	r5,r5,8
 8009d34:	a009883a 	mov	r4,r20
 8009d38:	18c00054 	ori	r3,r3,1
 8009d3c:	10c00115 	stw	r3,4(r2)
 8009d40:	800a8fc0 	call	800a8fc <_free_r>
 8009d44:	003fd306 	br	8009c94 <_realloc_r+0x164>
 8009d48:	017fff04 	movi	r5,-4
 8009d4c:	414a703a 	and	r5,r8,r5
 8009d50:	89800404 	addi	r6,r17,16
 8009d54:	8151883a 	add	r8,r16,r5
 8009d58:	4180590e 	bge	r8,r6,8009ec0 <_realloc_r+0x390>
 8009d5c:	1080004c 	andi	r2,r2,1
 8009d60:	103f9e1e 	bne	r2,zero,8009bdc <_realloc_r+0xac>
 8009d64:	adbffe17 	ldw	r22,-8(r21)
 8009d68:	00bfff04 	movi	r2,-4
 8009d6c:	9dadc83a 	sub	r22,r19,r22
 8009d70:	b1800117 	ldw	r6,4(r22)
 8009d74:	3084703a 	and	r2,r6,r2
 8009d78:	20002026 	beq	r4,zero,8009dfc <_realloc_r+0x2cc>
 8009d7c:	80af883a 	add	r23,r16,r2
 8009d80:	b96f883a 	add	r23,r23,r5
 8009d84:	21c05f26 	beq	r4,r7,8009f04 <_realloc_r+0x3d4>
 8009d88:	b8c01c16 	blt	r23,r3,8009dfc <_realloc_r+0x2cc>
 8009d8c:	20800317 	ldw	r2,12(r4)
 8009d90:	20c00217 	ldw	r3,8(r4)
 8009d94:	81bfff04 	addi	r6,r16,-4
 8009d98:	01000904 	movi	r4,36
 8009d9c:	18800315 	stw	r2,12(r3)
 8009da0:	10c00215 	stw	r3,8(r2)
 8009da4:	b0c00217 	ldw	r3,8(r22)
 8009da8:	b0800317 	ldw	r2,12(r22)
 8009dac:	b4800204 	addi	r18,r22,8
 8009db0:	18800315 	stw	r2,12(r3)
 8009db4:	10c00215 	stw	r3,8(r2)
 8009db8:	21801b36 	bltu	r4,r6,8009e28 <_realloc_r+0x2f8>
 8009dbc:	008004c4 	movi	r2,19
 8009dc0:	1180352e 	bgeu	r2,r6,8009e98 <_realloc_r+0x368>
 8009dc4:	a8800017 	ldw	r2,0(r21)
 8009dc8:	b0800215 	stw	r2,8(r22)
 8009dcc:	a8800117 	ldw	r2,4(r21)
 8009dd0:	b0800315 	stw	r2,12(r22)
 8009dd4:	008006c4 	movi	r2,27
 8009dd8:	11807f36 	bltu	r2,r6,8009fd8 <_realloc_r+0x4a8>
 8009ddc:	b0800404 	addi	r2,r22,16
 8009de0:	ad400204 	addi	r21,r21,8
 8009de4:	00002d06 	br	8009e9c <_realloc_r+0x36c>
 8009de8:	adbffe17 	ldw	r22,-8(r21)
 8009dec:	00bfff04 	movi	r2,-4
 8009df0:	9dadc83a 	sub	r22,r19,r22
 8009df4:	b1000117 	ldw	r4,4(r22)
 8009df8:	2084703a 	and	r2,r4,r2
 8009dfc:	b03f7726 	beq	r22,zero,8009bdc <_realloc_r+0xac>
 8009e00:	80af883a 	add	r23,r16,r2
 8009e04:	b8ff7516 	blt	r23,r3,8009bdc <_realloc_r+0xac>
 8009e08:	b0800317 	ldw	r2,12(r22)
 8009e0c:	b0c00217 	ldw	r3,8(r22)
 8009e10:	81bfff04 	addi	r6,r16,-4
 8009e14:	01000904 	movi	r4,36
 8009e18:	18800315 	stw	r2,12(r3)
 8009e1c:	10c00215 	stw	r3,8(r2)
 8009e20:	b4800204 	addi	r18,r22,8
 8009e24:	21bfe52e 	bgeu	r4,r6,8009dbc <_realloc_r+0x28c>
 8009e28:	a80b883a 	mov	r5,r21
 8009e2c:	9009883a 	mov	r4,r18
 8009e30:	80099d40 	call	80099d4 <memmove>
 8009e34:	b821883a 	mov	r16,r23
 8009e38:	b027883a 	mov	r19,r22
 8009e3c:	003f8a06 	br	8009c68 <_realloc_r+0x138>
 8009e40:	300b883a 	mov	r5,r6
 8009e44:	dfc00917 	ldw	ra,36(sp)
 8009e48:	df000817 	ldw	fp,32(sp)
 8009e4c:	ddc00717 	ldw	r23,28(sp)
 8009e50:	dd800617 	ldw	r22,24(sp)
 8009e54:	dd400517 	ldw	r21,20(sp)
 8009e58:	dd000417 	ldw	r20,16(sp)
 8009e5c:	dcc00317 	ldw	r19,12(sp)
 8009e60:	dc800217 	ldw	r18,8(sp)
 8009e64:	dc400117 	ldw	r17,4(sp)
 8009e68:	dc000017 	ldw	r16,0(sp)
 8009e6c:	dec00a04 	addi	sp,sp,40
 8009e70:	80090e41 	jmpi	80090e4 <_malloc_r>
 8009e74:	a8c00017 	ldw	r3,0(r21)
 8009e78:	90c00015 	stw	r3,0(r18)
 8009e7c:	a8c00117 	ldw	r3,4(r21)
 8009e80:	90c00115 	stw	r3,4(r18)
 8009e84:	00c006c4 	movi	r3,27
 8009e88:	19804536 	bltu	r3,r6,8009fa0 <_realloc_r+0x470>
 8009e8c:	90800204 	addi	r2,r18,8
 8009e90:	a8c00204 	addi	r3,r21,8
 8009e94:	003f6306 	br	8009c24 <_realloc_r+0xf4>
 8009e98:	9005883a 	mov	r2,r18
 8009e9c:	a8c00017 	ldw	r3,0(r21)
 8009ea0:	b821883a 	mov	r16,r23
 8009ea4:	b027883a 	mov	r19,r22
 8009ea8:	10c00015 	stw	r3,0(r2)
 8009eac:	a8c00117 	ldw	r3,4(r21)
 8009eb0:	10c00115 	stw	r3,4(r2)
 8009eb4:	a8c00217 	ldw	r3,8(r21)
 8009eb8:	10c00215 	stw	r3,8(r2)
 8009ebc:	003f6a06 	br	8009c68 <_realloc_r+0x138>
 8009ec0:	9c67883a 	add	r19,r19,r17
 8009ec4:	4445c83a 	sub	r2,r8,r17
 8009ec8:	e4c00215 	stw	r19,8(fp)
 8009ecc:	10800054 	ori	r2,r2,1
 8009ed0:	98800115 	stw	r2,4(r19)
 8009ed4:	a8bfff17 	ldw	r2,-4(r21)
 8009ed8:	a009883a 	mov	r4,r20
 8009edc:	1080004c 	andi	r2,r2,1
 8009ee0:	1462b03a 	or	r17,r2,r17
 8009ee4:	ac7fff15 	stw	r17,-4(r21)
 8009ee8:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009eec:	a805883a 	mov	r2,r21
 8009ef0:	003f6b06 	br	8009ca0 <_realloc_r+0x170>
 8009ef4:	a80b883a 	mov	r5,r21
 8009ef8:	9009883a 	mov	r4,r18
 8009efc:	80099d40 	call	80099d4 <memmove>
 8009f00:	003f4e06 	br	8009c3c <_realloc_r+0x10c>
 8009f04:	89000404 	addi	r4,r17,16
 8009f08:	b93fbc16 	blt	r23,r4,8009dfc <_realloc_r+0x2cc>
 8009f0c:	b0800317 	ldw	r2,12(r22)
 8009f10:	b0c00217 	ldw	r3,8(r22)
 8009f14:	81bfff04 	addi	r6,r16,-4
 8009f18:	01000904 	movi	r4,36
 8009f1c:	18800315 	stw	r2,12(r3)
 8009f20:	10c00215 	stw	r3,8(r2)
 8009f24:	b4800204 	addi	r18,r22,8
 8009f28:	21804336 	bltu	r4,r6,800a038 <_realloc_r+0x508>
 8009f2c:	008004c4 	movi	r2,19
 8009f30:	11803f2e 	bgeu	r2,r6,800a030 <_realloc_r+0x500>
 8009f34:	a8800017 	ldw	r2,0(r21)
 8009f38:	b0800215 	stw	r2,8(r22)
 8009f3c:	a8800117 	ldw	r2,4(r21)
 8009f40:	b0800315 	stw	r2,12(r22)
 8009f44:	008006c4 	movi	r2,27
 8009f48:	11803f36 	bltu	r2,r6,800a048 <_realloc_r+0x518>
 8009f4c:	b0800404 	addi	r2,r22,16
 8009f50:	ad400204 	addi	r21,r21,8
 8009f54:	a8c00017 	ldw	r3,0(r21)
 8009f58:	10c00015 	stw	r3,0(r2)
 8009f5c:	a8c00117 	ldw	r3,4(r21)
 8009f60:	10c00115 	stw	r3,4(r2)
 8009f64:	a8c00217 	ldw	r3,8(r21)
 8009f68:	10c00215 	stw	r3,8(r2)
 8009f6c:	b447883a 	add	r3,r22,r17
 8009f70:	bc45c83a 	sub	r2,r23,r17
 8009f74:	e0c00215 	stw	r3,8(fp)
 8009f78:	10800054 	ori	r2,r2,1
 8009f7c:	18800115 	stw	r2,4(r3)
 8009f80:	b0800117 	ldw	r2,4(r22)
 8009f84:	a009883a 	mov	r4,r20
 8009f88:	1080004c 	andi	r2,r2,1
 8009f8c:	1462b03a 	or	r17,r2,r17
 8009f90:	b4400115 	stw	r17,4(r22)
 8009f94:	800b6a80 	call	800b6a8 <__malloc_unlock>
 8009f98:	9005883a 	mov	r2,r18
 8009f9c:	003f4006 	br	8009ca0 <_realloc_r+0x170>
 8009fa0:	a8c00217 	ldw	r3,8(r21)
 8009fa4:	90c00215 	stw	r3,8(r18)
 8009fa8:	a8c00317 	ldw	r3,12(r21)
 8009fac:	90c00315 	stw	r3,12(r18)
 8009fb0:	30801126 	beq	r6,r2,8009ff8 <_realloc_r+0x4c8>
 8009fb4:	90800404 	addi	r2,r18,16
 8009fb8:	a8c00404 	addi	r3,r21,16
 8009fbc:	003f1906 	br	8009c24 <_realloc_r+0xf4>
 8009fc0:	90ffff17 	ldw	r3,-4(r18)
 8009fc4:	00bfff04 	movi	r2,-4
 8009fc8:	a825883a 	mov	r18,r21
 8009fcc:	1884703a 	and	r2,r3,r2
 8009fd0:	80a1883a 	add	r16,r16,r2
 8009fd4:	003f2406 	br	8009c68 <_realloc_r+0x138>
 8009fd8:	a8800217 	ldw	r2,8(r21)
 8009fdc:	b0800415 	stw	r2,16(r22)
 8009fe0:	a8800317 	ldw	r2,12(r21)
 8009fe4:	b0800515 	stw	r2,20(r22)
 8009fe8:	31000a26 	beq	r6,r4,800a014 <_realloc_r+0x4e4>
 8009fec:	b0800604 	addi	r2,r22,24
 8009ff0:	ad400404 	addi	r21,r21,16
 8009ff4:	003fa906 	br	8009e9c <_realloc_r+0x36c>
 8009ff8:	a9000417 	ldw	r4,16(r21)
 8009ffc:	90800604 	addi	r2,r18,24
 800a000:	a8c00604 	addi	r3,r21,24
 800a004:	91000415 	stw	r4,16(r18)
 800a008:	a9000517 	ldw	r4,20(r21)
 800a00c:	91000515 	stw	r4,20(r18)
 800a010:	003f0406 	br	8009c24 <_realloc_r+0xf4>
 800a014:	a8c00417 	ldw	r3,16(r21)
 800a018:	ad400604 	addi	r21,r21,24
 800a01c:	b0800804 	addi	r2,r22,32
 800a020:	b0c00615 	stw	r3,24(r22)
 800a024:	a8ffff17 	ldw	r3,-4(r21)
 800a028:	b0c00715 	stw	r3,28(r22)
 800a02c:	003f9b06 	br	8009e9c <_realloc_r+0x36c>
 800a030:	9005883a 	mov	r2,r18
 800a034:	003fc706 	br	8009f54 <_realloc_r+0x424>
 800a038:	a80b883a 	mov	r5,r21
 800a03c:	9009883a 	mov	r4,r18
 800a040:	80099d40 	call	80099d4 <memmove>
 800a044:	003fc906 	br	8009f6c <_realloc_r+0x43c>
 800a048:	a8800217 	ldw	r2,8(r21)
 800a04c:	b0800415 	stw	r2,16(r22)
 800a050:	a8800317 	ldw	r2,12(r21)
 800a054:	b0800515 	stw	r2,20(r22)
 800a058:	31000726 	beq	r6,r4,800a078 <_realloc_r+0x548>
 800a05c:	b0800604 	addi	r2,r22,24
 800a060:	ad400404 	addi	r21,r21,16
 800a064:	003fbb06 	br	8009f54 <_realloc_r+0x424>
 800a068:	a009883a 	mov	r4,r20
 800a06c:	800b6a80 	call	800b6a8 <__malloc_unlock>
 800a070:	0005883a 	mov	r2,zero
 800a074:	003f0a06 	br	8009ca0 <_realloc_r+0x170>
 800a078:	a8c00417 	ldw	r3,16(r21)
 800a07c:	ad400604 	addi	r21,r21,24
 800a080:	b0800804 	addi	r2,r22,32
 800a084:	b0c00615 	stw	r3,24(r22)
 800a088:	a8ffff17 	ldw	r3,-4(r21)
 800a08c:	b0c00715 	stw	r3,28(r22)
 800a090:	003fb006 	br	8009f54 <_realloc_r+0x424>

0800a094 <_sbrk_r>:
 800a094:	defffd04 	addi	sp,sp,-12
 800a098:	dc000015 	stw	r16,0(sp)
 800a09c:	04020074 	movhi	r16,2049
 800a0a0:	dc400115 	stw	r17,4(sp)
 800a0a4:	840a2d04 	addi	r16,r16,10420
 800a0a8:	2023883a 	mov	r17,r4
 800a0ac:	2809883a 	mov	r4,r5
 800a0b0:	dfc00215 	stw	ra,8(sp)
 800a0b4:	80000015 	stw	zero,0(r16)
 800a0b8:	800b8900 	call	800b890 <sbrk>
 800a0bc:	00ffffc4 	movi	r3,-1
 800a0c0:	10c00526 	beq	r2,r3,800a0d8 <_sbrk_r+0x44>
 800a0c4:	dfc00217 	ldw	ra,8(sp)
 800a0c8:	dc400117 	ldw	r17,4(sp)
 800a0cc:	dc000017 	ldw	r16,0(sp)
 800a0d0:	dec00304 	addi	sp,sp,12
 800a0d4:	f800283a 	ret
 800a0d8:	80c00017 	ldw	r3,0(r16)
 800a0dc:	183ff926 	beq	r3,zero,800a0c4 <_sbrk_r+0x30>
 800a0e0:	88c00015 	stw	r3,0(r17)
 800a0e4:	003ff706 	br	800a0c4 <_sbrk_r+0x30>

0800a0e8 <__sread>:
 800a0e8:	defffe04 	addi	sp,sp,-8
 800a0ec:	dc000015 	stw	r16,0(sp)
 800a0f0:	2821883a 	mov	r16,r5
 800a0f4:	2940038f 	ldh	r5,14(r5)
 800a0f8:	dfc00115 	stw	ra,4(sp)
 800a0fc:	800ae280 	call	800ae28 <_read_r>
 800a100:	10000716 	blt	r2,zero,800a120 <__sread+0x38>
 800a104:	80c01417 	ldw	r3,80(r16)
 800a108:	1887883a 	add	r3,r3,r2
 800a10c:	80c01415 	stw	r3,80(r16)
 800a110:	dfc00117 	ldw	ra,4(sp)
 800a114:	dc000017 	ldw	r16,0(sp)
 800a118:	dec00204 	addi	sp,sp,8
 800a11c:	f800283a 	ret
 800a120:	80c0030b 	ldhu	r3,12(r16)
 800a124:	18fbffcc 	andi	r3,r3,61439
 800a128:	80c0030d 	sth	r3,12(r16)
 800a12c:	dfc00117 	ldw	ra,4(sp)
 800a130:	dc000017 	ldw	r16,0(sp)
 800a134:	dec00204 	addi	sp,sp,8
 800a138:	f800283a 	ret

0800a13c <__seofread>:
 800a13c:	0005883a 	mov	r2,zero
 800a140:	f800283a 	ret

0800a144 <__swrite>:
 800a144:	2880030b 	ldhu	r2,12(r5)
 800a148:	defffb04 	addi	sp,sp,-20
 800a14c:	dcc00315 	stw	r19,12(sp)
 800a150:	dc800215 	stw	r18,8(sp)
 800a154:	dc400115 	stw	r17,4(sp)
 800a158:	dc000015 	stw	r16,0(sp)
 800a15c:	dfc00415 	stw	ra,16(sp)
 800a160:	10c0400c 	andi	r3,r2,256
 800a164:	2821883a 	mov	r16,r5
 800a168:	2023883a 	mov	r17,r4
 800a16c:	3025883a 	mov	r18,r6
 800a170:	3827883a 	mov	r19,r7
 800a174:	18000526 	beq	r3,zero,800a18c <__swrite+0x48>
 800a178:	2940038f 	ldh	r5,14(r5)
 800a17c:	01c00084 	movi	r7,2
 800a180:	000d883a 	mov	r6,zero
 800a184:	800ac0c0 	call	800ac0c <_lseek_r>
 800a188:	8080030b 	ldhu	r2,12(r16)
 800a18c:	8140038f 	ldh	r5,14(r16)
 800a190:	10bbffcc 	andi	r2,r2,61439
 800a194:	980f883a 	mov	r7,r19
 800a198:	900d883a 	mov	r6,r18
 800a19c:	8809883a 	mov	r4,r17
 800a1a0:	8080030d 	sth	r2,12(r16)
 800a1a4:	dfc00417 	ldw	ra,16(sp)
 800a1a8:	dcc00317 	ldw	r19,12(sp)
 800a1ac:	dc800217 	ldw	r18,8(sp)
 800a1b0:	dc400117 	ldw	r17,4(sp)
 800a1b4:	dc000017 	ldw	r16,0(sp)
 800a1b8:	dec00504 	addi	sp,sp,20
 800a1bc:	800a2241 	jmpi	800a224 <_write_r>

0800a1c0 <__sseek>:
 800a1c0:	defffe04 	addi	sp,sp,-8
 800a1c4:	dc000015 	stw	r16,0(sp)
 800a1c8:	2821883a 	mov	r16,r5
 800a1cc:	2940038f 	ldh	r5,14(r5)
 800a1d0:	dfc00115 	stw	ra,4(sp)
 800a1d4:	800ac0c0 	call	800ac0c <_lseek_r>
 800a1d8:	00ffffc4 	movi	r3,-1
 800a1dc:	10c00826 	beq	r2,r3,800a200 <__sseek+0x40>
 800a1e0:	80c0030b 	ldhu	r3,12(r16)
 800a1e4:	80801415 	stw	r2,80(r16)
 800a1e8:	18c40014 	ori	r3,r3,4096
 800a1ec:	80c0030d 	sth	r3,12(r16)
 800a1f0:	dfc00117 	ldw	ra,4(sp)
 800a1f4:	dc000017 	ldw	r16,0(sp)
 800a1f8:	dec00204 	addi	sp,sp,8
 800a1fc:	f800283a 	ret
 800a200:	80c0030b 	ldhu	r3,12(r16)
 800a204:	18fbffcc 	andi	r3,r3,61439
 800a208:	80c0030d 	sth	r3,12(r16)
 800a20c:	dfc00117 	ldw	ra,4(sp)
 800a210:	dc000017 	ldw	r16,0(sp)
 800a214:	dec00204 	addi	sp,sp,8
 800a218:	f800283a 	ret

0800a21c <__sclose>:
 800a21c:	2940038f 	ldh	r5,14(r5)
 800a220:	800a3d81 	jmpi	800a3d8 <_close_r>

0800a224 <_write_r>:
 800a224:	defffd04 	addi	sp,sp,-12
 800a228:	2805883a 	mov	r2,r5
 800a22c:	dc000015 	stw	r16,0(sp)
 800a230:	04020074 	movhi	r16,2049
 800a234:	dc400115 	stw	r17,4(sp)
 800a238:	300b883a 	mov	r5,r6
 800a23c:	840a2d04 	addi	r16,r16,10420
 800a240:	2023883a 	mov	r17,r4
 800a244:	380d883a 	mov	r6,r7
 800a248:	1009883a 	mov	r4,r2
 800a24c:	dfc00215 	stw	ra,8(sp)
 800a250:	80000015 	stw	zero,0(r16)
 800a254:	800b97c0 	call	800b97c <write>
 800a258:	00ffffc4 	movi	r3,-1
 800a25c:	10c00526 	beq	r2,r3,800a274 <_write_r+0x50>
 800a260:	dfc00217 	ldw	ra,8(sp)
 800a264:	dc400117 	ldw	r17,4(sp)
 800a268:	dc000017 	ldw	r16,0(sp)
 800a26c:	dec00304 	addi	sp,sp,12
 800a270:	f800283a 	ret
 800a274:	80c00017 	ldw	r3,0(r16)
 800a278:	183ff926 	beq	r3,zero,800a260 <_write_r+0x3c>
 800a27c:	88c00015 	stw	r3,0(r17)
 800a280:	003ff706 	br	800a260 <_write_r+0x3c>

0800a284 <__swsetup_r>:
 800a284:	00820074 	movhi	r2,2049
 800a288:	defffd04 	addi	sp,sp,-12
 800a28c:	1082a504 	addi	r2,r2,2708
 800a290:	dc400115 	stw	r17,4(sp)
 800a294:	2023883a 	mov	r17,r4
 800a298:	11000017 	ldw	r4,0(r2)
 800a29c:	dc000015 	stw	r16,0(sp)
 800a2a0:	dfc00215 	stw	ra,8(sp)
 800a2a4:	2821883a 	mov	r16,r5
 800a2a8:	20000226 	beq	r4,zero,800a2b4 <__swsetup_r+0x30>
 800a2ac:	20800e17 	ldw	r2,56(r4)
 800a2b0:	10003126 	beq	r2,zero,800a378 <__swsetup_r+0xf4>
 800a2b4:	8080030b 	ldhu	r2,12(r16)
 800a2b8:	10c0020c 	andi	r3,r2,8
 800a2bc:	1009883a 	mov	r4,r2
 800a2c0:	18000f26 	beq	r3,zero,800a300 <__swsetup_r+0x7c>
 800a2c4:	80c00417 	ldw	r3,16(r16)
 800a2c8:	18001526 	beq	r3,zero,800a320 <__swsetup_r+0x9c>
 800a2cc:	1100004c 	andi	r4,r2,1
 800a2d0:	20001c1e 	bne	r4,zero,800a344 <__swsetup_r+0xc0>
 800a2d4:	1080008c 	andi	r2,r2,2
 800a2d8:	1000291e 	bne	r2,zero,800a380 <__swsetup_r+0xfc>
 800a2dc:	80800517 	ldw	r2,20(r16)
 800a2e0:	80800215 	stw	r2,8(r16)
 800a2e4:	18001c26 	beq	r3,zero,800a358 <__swsetup_r+0xd4>
 800a2e8:	0005883a 	mov	r2,zero
 800a2ec:	dfc00217 	ldw	ra,8(sp)
 800a2f0:	dc400117 	ldw	r17,4(sp)
 800a2f4:	dc000017 	ldw	r16,0(sp)
 800a2f8:	dec00304 	addi	sp,sp,12
 800a2fc:	f800283a 	ret
 800a300:	2080040c 	andi	r2,r4,16
 800a304:	10002e26 	beq	r2,zero,800a3c0 <__swsetup_r+0x13c>
 800a308:	2080010c 	andi	r2,r4,4
 800a30c:	10001e1e 	bne	r2,zero,800a388 <__swsetup_r+0x104>
 800a310:	80c00417 	ldw	r3,16(r16)
 800a314:	20800214 	ori	r2,r4,8
 800a318:	8080030d 	sth	r2,12(r16)
 800a31c:	183feb1e 	bne	r3,zero,800a2cc <__swsetup_r+0x48>
 800a320:	1100a00c 	andi	r4,r2,640
 800a324:	01408004 	movi	r5,512
 800a328:	217fe826 	beq	r4,r5,800a2cc <__swsetup_r+0x48>
 800a32c:	800b883a 	mov	r5,r16
 800a330:	8809883a 	mov	r4,r17
 800a334:	800ac6c0 	call	800ac6c <__smakebuf_r>
 800a338:	8080030b 	ldhu	r2,12(r16)
 800a33c:	80c00417 	ldw	r3,16(r16)
 800a340:	003fe206 	br	800a2cc <__swsetup_r+0x48>
 800a344:	80800517 	ldw	r2,20(r16)
 800a348:	80000215 	stw	zero,8(r16)
 800a34c:	0085c83a 	sub	r2,zero,r2
 800a350:	80800615 	stw	r2,24(r16)
 800a354:	183fe41e 	bne	r3,zero,800a2e8 <__swsetup_r+0x64>
 800a358:	80c0030b 	ldhu	r3,12(r16)
 800a35c:	0005883a 	mov	r2,zero
 800a360:	1900200c 	andi	r4,r3,128
 800a364:	203fe126 	beq	r4,zero,800a2ec <__swsetup_r+0x68>
 800a368:	18c01014 	ori	r3,r3,64
 800a36c:	80c0030d 	sth	r3,12(r16)
 800a370:	00bfffc4 	movi	r2,-1
 800a374:	003fdd06 	br	800a2ec <__swsetup_r+0x68>
 800a378:	8008a440 	call	8008a44 <__sinit>
 800a37c:	003fcd06 	br	800a2b4 <__swsetup_r+0x30>
 800a380:	0005883a 	mov	r2,zero
 800a384:	003fd606 	br	800a2e0 <__swsetup_r+0x5c>
 800a388:	81400c17 	ldw	r5,48(r16)
 800a38c:	28000626 	beq	r5,zero,800a3a8 <__swsetup_r+0x124>
 800a390:	80801004 	addi	r2,r16,64
 800a394:	28800326 	beq	r5,r2,800a3a4 <__swsetup_r+0x120>
 800a398:	8809883a 	mov	r4,r17
 800a39c:	800a8fc0 	call	800a8fc <_free_r>
 800a3a0:	8100030b 	ldhu	r4,12(r16)
 800a3a4:	80000c15 	stw	zero,48(r16)
 800a3a8:	80c00417 	ldw	r3,16(r16)
 800a3ac:	00bff6c4 	movi	r2,-37
 800a3b0:	1108703a 	and	r4,r2,r4
 800a3b4:	80000115 	stw	zero,4(r16)
 800a3b8:	80c00015 	stw	r3,0(r16)
 800a3bc:	003fd506 	br	800a314 <__swsetup_r+0x90>
 800a3c0:	00800244 	movi	r2,9
 800a3c4:	88800015 	stw	r2,0(r17)
 800a3c8:	20801014 	ori	r2,r4,64
 800a3cc:	8080030d 	sth	r2,12(r16)
 800a3d0:	00bfffc4 	movi	r2,-1
 800a3d4:	003fc506 	br	800a2ec <__swsetup_r+0x68>

0800a3d8 <_close_r>:
 800a3d8:	defffd04 	addi	sp,sp,-12
 800a3dc:	dc000015 	stw	r16,0(sp)
 800a3e0:	04020074 	movhi	r16,2049
 800a3e4:	dc400115 	stw	r17,4(sp)
 800a3e8:	840a2d04 	addi	r16,r16,10420
 800a3ec:	2023883a 	mov	r17,r4
 800a3f0:	2809883a 	mov	r4,r5
 800a3f4:	dfc00215 	stw	ra,8(sp)
 800a3f8:	80000015 	stw	zero,0(r16)
 800a3fc:	800af740 	call	800af74 <close>
 800a400:	00ffffc4 	movi	r3,-1
 800a404:	10c00526 	beq	r2,r3,800a41c <_close_r+0x44>
 800a408:	dfc00217 	ldw	ra,8(sp)
 800a40c:	dc400117 	ldw	r17,4(sp)
 800a410:	dc000017 	ldw	r16,0(sp)
 800a414:	dec00304 	addi	sp,sp,12
 800a418:	f800283a 	ret
 800a41c:	80c00017 	ldw	r3,0(r16)
 800a420:	183ff926 	beq	r3,zero,800a408 <_close_r+0x30>
 800a424:	88c00015 	stw	r3,0(r17)
 800a428:	003ff706 	br	800a408 <_close_r+0x30>

0800a42c <_fclose_r>:
 800a42c:	28003926 	beq	r5,zero,800a514 <_fclose_r+0xe8>
 800a430:	defffc04 	addi	sp,sp,-16
 800a434:	dc400115 	stw	r17,4(sp)
 800a438:	dc000015 	stw	r16,0(sp)
 800a43c:	dfc00315 	stw	ra,12(sp)
 800a440:	dc800215 	stw	r18,8(sp)
 800a444:	2023883a 	mov	r17,r4
 800a448:	2821883a 	mov	r16,r5
 800a44c:	20000226 	beq	r4,zero,800a458 <_fclose_r+0x2c>
 800a450:	20800e17 	ldw	r2,56(r4)
 800a454:	10002726 	beq	r2,zero,800a4f4 <_fclose_r+0xc8>
 800a458:	8080030f 	ldh	r2,12(r16)
 800a45c:	1000071e 	bne	r2,zero,800a47c <_fclose_r+0x50>
 800a460:	0005883a 	mov	r2,zero
 800a464:	dfc00317 	ldw	ra,12(sp)
 800a468:	dc800217 	ldw	r18,8(sp)
 800a46c:	dc400117 	ldw	r17,4(sp)
 800a470:	dc000017 	ldw	r16,0(sp)
 800a474:	dec00404 	addi	sp,sp,16
 800a478:	f800283a 	ret
 800a47c:	800b883a 	mov	r5,r16
 800a480:	8809883a 	mov	r4,r17
 800a484:	800a5300 	call	800a530 <__sflush_r>
 800a488:	1025883a 	mov	r18,r2
 800a48c:	80800b17 	ldw	r2,44(r16)
 800a490:	10000426 	beq	r2,zero,800a4a4 <_fclose_r+0x78>
 800a494:	81400717 	ldw	r5,28(r16)
 800a498:	8809883a 	mov	r4,r17
 800a49c:	103ee83a 	callr	r2
 800a4a0:	10001616 	blt	r2,zero,800a4fc <_fclose_r+0xd0>
 800a4a4:	8080030b 	ldhu	r2,12(r16)
 800a4a8:	1080200c 	andi	r2,r2,128
 800a4ac:	1000151e 	bne	r2,zero,800a504 <_fclose_r+0xd8>
 800a4b0:	81400c17 	ldw	r5,48(r16)
 800a4b4:	28000526 	beq	r5,zero,800a4cc <_fclose_r+0xa0>
 800a4b8:	80801004 	addi	r2,r16,64
 800a4bc:	28800226 	beq	r5,r2,800a4c8 <_fclose_r+0x9c>
 800a4c0:	8809883a 	mov	r4,r17
 800a4c4:	800a8fc0 	call	800a8fc <_free_r>
 800a4c8:	80000c15 	stw	zero,48(r16)
 800a4cc:	81401117 	ldw	r5,68(r16)
 800a4d0:	28000326 	beq	r5,zero,800a4e0 <_fclose_r+0xb4>
 800a4d4:	8809883a 	mov	r4,r17
 800a4d8:	800a8fc0 	call	800a8fc <_free_r>
 800a4dc:	80001115 	stw	zero,68(r16)
 800a4e0:	8008a540 	call	8008a54 <__sfp_lock_acquire>
 800a4e4:	8000030d 	sth	zero,12(r16)
 800a4e8:	8008a580 	call	8008a58 <__sfp_lock_release>
 800a4ec:	9005883a 	mov	r2,r18
 800a4f0:	003fdc06 	br	800a464 <_fclose_r+0x38>
 800a4f4:	8008a440 	call	8008a44 <__sinit>
 800a4f8:	003fd706 	br	800a458 <_fclose_r+0x2c>
 800a4fc:	04bfffc4 	movi	r18,-1
 800a500:	003fe806 	br	800a4a4 <_fclose_r+0x78>
 800a504:	81400417 	ldw	r5,16(r16)
 800a508:	8809883a 	mov	r4,r17
 800a50c:	800a8fc0 	call	800a8fc <_free_r>
 800a510:	003fe706 	br	800a4b0 <_fclose_r+0x84>
 800a514:	0005883a 	mov	r2,zero
 800a518:	f800283a 	ret

0800a51c <fclose>:
 800a51c:	00820074 	movhi	r2,2049
 800a520:	1082a504 	addi	r2,r2,2708
 800a524:	200b883a 	mov	r5,r4
 800a528:	11000017 	ldw	r4,0(r2)
 800a52c:	800a42c1 	jmpi	800a42c <_fclose_r>

0800a530 <__sflush_r>:
 800a530:	2880030b 	ldhu	r2,12(r5)
 800a534:	defffb04 	addi	sp,sp,-20
 800a538:	dcc00315 	stw	r19,12(sp)
 800a53c:	dc400115 	stw	r17,4(sp)
 800a540:	dfc00415 	stw	ra,16(sp)
 800a544:	dc800215 	stw	r18,8(sp)
 800a548:	dc000015 	stw	r16,0(sp)
 800a54c:	10c0020c 	andi	r3,r2,8
 800a550:	2823883a 	mov	r17,r5
 800a554:	2027883a 	mov	r19,r4
 800a558:	1800311e 	bne	r3,zero,800a620 <__sflush_r+0xf0>
 800a55c:	28c00117 	ldw	r3,4(r5)
 800a560:	10820014 	ori	r2,r2,2048
 800a564:	2880030d 	sth	r2,12(r5)
 800a568:	00c04b0e 	bge	zero,r3,800a698 <__sflush_r+0x168>
 800a56c:	8a000a17 	ldw	r8,40(r17)
 800a570:	40002326 	beq	r8,zero,800a600 <__sflush_r+0xd0>
 800a574:	9c000017 	ldw	r16,0(r19)
 800a578:	10c4000c 	andi	r3,r2,4096
 800a57c:	98000015 	stw	zero,0(r19)
 800a580:	18004826 	beq	r3,zero,800a6a4 <__sflush_r+0x174>
 800a584:	89801417 	ldw	r6,80(r17)
 800a588:	10c0010c 	andi	r3,r2,4
 800a58c:	18000626 	beq	r3,zero,800a5a8 <__sflush_r+0x78>
 800a590:	88c00117 	ldw	r3,4(r17)
 800a594:	88800c17 	ldw	r2,48(r17)
 800a598:	30cdc83a 	sub	r6,r6,r3
 800a59c:	10000226 	beq	r2,zero,800a5a8 <__sflush_r+0x78>
 800a5a0:	88800f17 	ldw	r2,60(r17)
 800a5a4:	308dc83a 	sub	r6,r6,r2
 800a5a8:	89400717 	ldw	r5,28(r17)
 800a5ac:	000f883a 	mov	r7,zero
 800a5b0:	9809883a 	mov	r4,r19
 800a5b4:	403ee83a 	callr	r8
 800a5b8:	00ffffc4 	movi	r3,-1
 800a5bc:	10c04426 	beq	r2,r3,800a6d0 <__sflush_r+0x1a0>
 800a5c0:	88c0030b 	ldhu	r3,12(r17)
 800a5c4:	89000417 	ldw	r4,16(r17)
 800a5c8:	88000115 	stw	zero,4(r17)
 800a5cc:	197dffcc 	andi	r5,r3,63487
 800a5d0:	8940030d 	sth	r5,12(r17)
 800a5d4:	89000015 	stw	r4,0(r17)
 800a5d8:	18c4000c 	andi	r3,r3,4096
 800a5dc:	18002c1e 	bne	r3,zero,800a690 <__sflush_r+0x160>
 800a5e0:	89400c17 	ldw	r5,48(r17)
 800a5e4:	9c000015 	stw	r16,0(r19)
 800a5e8:	28000526 	beq	r5,zero,800a600 <__sflush_r+0xd0>
 800a5ec:	88801004 	addi	r2,r17,64
 800a5f0:	28800226 	beq	r5,r2,800a5fc <__sflush_r+0xcc>
 800a5f4:	9809883a 	mov	r4,r19
 800a5f8:	800a8fc0 	call	800a8fc <_free_r>
 800a5fc:	88000c15 	stw	zero,48(r17)
 800a600:	0005883a 	mov	r2,zero
 800a604:	dfc00417 	ldw	ra,16(sp)
 800a608:	dcc00317 	ldw	r19,12(sp)
 800a60c:	dc800217 	ldw	r18,8(sp)
 800a610:	dc400117 	ldw	r17,4(sp)
 800a614:	dc000017 	ldw	r16,0(sp)
 800a618:	dec00504 	addi	sp,sp,20
 800a61c:	f800283a 	ret
 800a620:	2c800417 	ldw	r18,16(r5)
 800a624:	903ff626 	beq	r18,zero,800a600 <__sflush_r+0xd0>
 800a628:	2c000017 	ldw	r16,0(r5)
 800a62c:	108000cc 	andi	r2,r2,3
 800a630:	2c800015 	stw	r18,0(r5)
 800a634:	84a1c83a 	sub	r16,r16,r18
 800a638:	1000131e 	bne	r2,zero,800a688 <__sflush_r+0x158>
 800a63c:	28800517 	ldw	r2,20(r5)
 800a640:	88800215 	stw	r2,8(r17)
 800a644:	04000316 	blt	zero,r16,800a654 <__sflush_r+0x124>
 800a648:	003fed06 	br	800a600 <__sflush_r+0xd0>
 800a64c:	90a5883a 	add	r18,r18,r2
 800a650:	043feb0e 	bge	zero,r16,800a600 <__sflush_r+0xd0>
 800a654:	88800917 	ldw	r2,36(r17)
 800a658:	89400717 	ldw	r5,28(r17)
 800a65c:	800f883a 	mov	r7,r16
 800a660:	900d883a 	mov	r6,r18
 800a664:	9809883a 	mov	r4,r19
 800a668:	103ee83a 	callr	r2
 800a66c:	80a1c83a 	sub	r16,r16,r2
 800a670:	00bff616 	blt	zero,r2,800a64c <__sflush_r+0x11c>
 800a674:	88c0030b 	ldhu	r3,12(r17)
 800a678:	00bfffc4 	movi	r2,-1
 800a67c:	18c01014 	ori	r3,r3,64
 800a680:	88c0030d 	sth	r3,12(r17)
 800a684:	003fdf06 	br	800a604 <__sflush_r+0xd4>
 800a688:	0005883a 	mov	r2,zero
 800a68c:	003fec06 	br	800a640 <__sflush_r+0x110>
 800a690:	88801415 	stw	r2,80(r17)
 800a694:	003fd206 	br	800a5e0 <__sflush_r+0xb0>
 800a698:	28c00f17 	ldw	r3,60(r5)
 800a69c:	00ffb316 	blt	zero,r3,800a56c <__sflush_r+0x3c>
 800a6a0:	003fd706 	br	800a600 <__sflush_r+0xd0>
 800a6a4:	89400717 	ldw	r5,28(r17)
 800a6a8:	000d883a 	mov	r6,zero
 800a6ac:	01c00044 	movi	r7,1
 800a6b0:	9809883a 	mov	r4,r19
 800a6b4:	403ee83a 	callr	r8
 800a6b8:	100d883a 	mov	r6,r2
 800a6bc:	00bfffc4 	movi	r2,-1
 800a6c0:	30801426 	beq	r6,r2,800a714 <__sflush_r+0x1e4>
 800a6c4:	8880030b 	ldhu	r2,12(r17)
 800a6c8:	8a000a17 	ldw	r8,40(r17)
 800a6cc:	003fae06 	br	800a588 <__sflush_r+0x58>
 800a6d0:	98c00017 	ldw	r3,0(r19)
 800a6d4:	183fba26 	beq	r3,zero,800a5c0 <__sflush_r+0x90>
 800a6d8:	01000744 	movi	r4,29
 800a6dc:	19000626 	beq	r3,r4,800a6f8 <__sflush_r+0x1c8>
 800a6e0:	01000584 	movi	r4,22
 800a6e4:	19000426 	beq	r3,r4,800a6f8 <__sflush_r+0x1c8>
 800a6e8:	88c0030b 	ldhu	r3,12(r17)
 800a6ec:	18c01014 	ori	r3,r3,64
 800a6f0:	88c0030d 	sth	r3,12(r17)
 800a6f4:	003fc306 	br	800a604 <__sflush_r+0xd4>
 800a6f8:	8880030b 	ldhu	r2,12(r17)
 800a6fc:	88c00417 	ldw	r3,16(r17)
 800a700:	88000115 	stw	zero,4(r17)
 800a704:	10bdffcc 	andi	r2,r2,63487
 800a708:	8880030d 	sth	r2,12(r17)
 800a70c:	88c00015 	stw	r3,0(r17)
 800a710:	003fb306 	br	800a5e0 <__sflush_r+0xb0>
 800a714:	98800017 	ldw	r2,0(r19)
 800a718:	103fea26 	beq	r2,zero,800a6c4 <__sflush_r+0x194>
 800a71c:	00c00744 	movi	r3,29
 800a720:	10c00226 	beq	r2,r3,800a72c <__sflush_r+0x1fc>
 800a724:	00c00584 	movi	r3,22
 800a728:	10c0031e 	bne	r2,r3,800a738 <__sflush_r+0x208>
 800a72c:	9c000015 	stw	r16,0(r19)
 800a730:	0005883a 	mov	r2,zero
 800a734:	003fb306 	br	800a604 <__sflush_r+0xd4>
 800a738:	88c0030b 	ldhu	r3,12(r17)
 800a73c:	3005883a 	mov	r2,r6
 800a740:	18c01014 	ori	r3,r3,64
 800a744:	88c0030d 	sth	r3,12(r17)
 800a748:	003fae06 	br	800a604 <__sflush_r+0xd4>

0800a74c <_fflush_r>:
 800a74c:	defffd04 	addi	sp,sp,-12
 800a750:	dc000115 	stw	r16,4(sp)
 800a754:	dfc00215 	stw	ra,8(sp)
 800a758:	2021883a 	mov	r16,r4
 800a75c:	20000226 	beq	r4,zero,800a768 <_fflush_r+0x1c>
 800a760:	20800e17 	ldw	r2,56(r4)
 800a764:	10000c26 	beq	r2,zero,800a798 <_fflush_r+0x4c>
 800a768:	2880030f 	ldh	r2,12(r5)
 800a76c:	1000051e 	bne	r2,zero,800a784 <_fflush_r+0x38>
 800a770:	0005883a 	mov	r2,zero
 800a774:	dfc00217 	ldw	ra,8(sp)
 800a778:	dc000117 	ldw	r16,4(sp)
 800a77c:	dec00304 	addi	sp,sp,12
 800a780:	f800283a 	ret
 800a784:	8009883a 	mov	r4,r16
 800a788:	dfc00217 	ldw	ra,8(sp)
 800a78c:	dc000117 	ldw	r16,4(sp)
 800a790:	dec00304 	addi	sp,sp,12
 800a794:	800a5301 	jmpi	800a530 <__sflush_r>
 800a798:	d9400015 	stw	r5,0(sp)
 800a79c:	8008a440 	call	8008a44 <__sinit>
 800a7a0:	d9400017 	ldw	r5,0(sp)
 800a7a4:	003ff006 	br	800a768 <_fflush_r+0x1c>

0800a7a8 <fflush>:
 800a7a8:	20000526 	beq	r4,zero,800a7c0 <fflush+0x18>
 800a7ac:	00820074 	movhi	r2,2049
 800a7b0:	1082a504 	addi	r2,r2,2708
 800a7b4:	200b883a 	mov	r5,r4
 800a7b8:	11000017 	ldw	r4,0(r2)
 800a7bc:	800a74c1 	jmpi	800a74c <_fflush_r>
 800a7c0:	00820074 	movhi	r2,2049
 800a7c4:	1082a404 	addi	r2,r2,2704
 800a7c8:	11000017 	ldw	r4,0(r2)
 800a7cc:	01420074 	movhi	r5,2049
 800a7d0:	2969d304 	addi	r5,r5,-22708
 800a7d4:	80090201 	jmpi	8009020 <_fwalk_reent>

0800a7d8 <_malloc_trim_r>:
 800a7d8:	defffb04 	addi	sp,sp,-20
 800a7dc:	dcc00315 	stw	r19,12(sp)
 800a7e0:	04c20074 	movhi	r19,2049
 800a7e4:	dc800215 	stw	r18,8(sp)
 800a7e8:	dc400115 	stw	r17,4(sp)
 800a7ec:	dc000015 	stw	r16,0(sp)
 800a7f0:	dfc00415 	stw	ra,16(sp)
 800a7f4:	2821883a 	mov	r16,r5
 800a7f8:	9cfca704 	addi	r19,r19,-3428
 800a7fc:	2025883a 	mov	r18,r4
 800a800:	800b6840 	call	800b684 <__malloc_lock>
 800a804:	98800217 	ldw	r2,8(r19)
 800a808:	14400117 	ldw	r17,4(r2)
 800a80c:	00bfff04 	movi	r2,-4
 800a810:	88a2703a 	and	r17,r17,r2
 800a814:	8c21c83a 	sub	r16,r17,r16
 800a818:	8403fbc4 	addi	r16,r16,4079
 800a81c:	8020d33a 	srli	r16,r16,12
 800a820:	0083ffc4 	movi	r2,4095
 800a824:	843fffc4 	addi	r16,r16,-1
 800a828:	8020933a 	slli	r16,r16,12
 800a82c:	1400060e 	bge	r2,r16,800a848 <_malloc_trim_r+0x70>
 800a830:	000b883a 	mov	r5,zero
 800a834:	9009883a 	mov	r4,r18
 800a838:	800a0940 	call	800a094 <_sbrk_r>
 800a83c:	98c00217 	ldw	r3,8(r19)
 800a840:	1c47883a 	add	r3,r3,r17
 800a844:	10c00a26 	beq	r2,r3,800a870 <_malloc_trim_r+0x98>
 800a848:	9009883a 	mov	r4,r18
 800a84c:	800b6a80 	call	800b6a8 <__malloc_unlock>
 800a850:	0005883a 	mov	r2,zero
 800a854:	dfc00417 	ldw	ra,16(sp)
 800a858:	dcc00317 	ldw	r19,12(sp)
 800a85c:	dc800217 	ldw	r18,8(sp)
 800a860:	dc400117 	ldw	r17,4(sp)
 800a864:	dc000017 	ldw	r16,0(sp)
 800a868:	dec00504 	addi	sp,sp,20
 800a86c:	f800283a 	ret
 800a870:	040bc83a 	sub	r5,zero,r16
 800a874:	9009883a 	mov	r4,r18
 800a878:	800a0940 	call	800a094 <_sbrk_r>
 800a87c:	00ffffc4 	movi	r3,-1
 800a880:	10c00d26 	beq	r2,r3,800a8b8 <_malloc_trim_r+0xe0>
 800a884:	00c22074 	movhi	r3,2177
 800a888:	18ca6c04 	addi	r3,r3,10672
 800a88c:	18800017 	ldw	r2,0(r3)
 800a890:	99000217 	ldw	r4,8(r19)
 800a894:	8c23c83a 	sub	r17,r17,r16
 800a898:	8c400054 	ori	r17,r17,1
 800a89c:	1421c83a 	sub	r16,r2,r16
 800a8a0:	24400115 	stw	r17,4(r4)
 800a8a4:	9009883a 	mov	r4,r18
 800a8a8:	1c000015 	stw	r16,0(r3)
 800a8ac:	800b6a80 	call	800b6a8 <__malloc_unlock>
 800a8b0:	00800044 	movi	r2,1
 800a8b4:	003fe706 	br	800a854 <_malloc_trim_r+0x7c>
 800a8b8:	000b883a 	mov	r5,zero
 800a8bc:	9009883a 	mov	r4,r18
 800a8c0:	800a0940 	call	800a094 <_sbrk_r>
 800a8c4:	99000217 	ldw	r4,8(r19)
 800a8c8:	014003c4 	movi	r5,15
 800a8cc:	1107c83a 	sub	r3,r2,r4
 800a8d0:	28ffdd0e 	bge	r5,r3,800a848 <_malloc_trim_r+0x70>
 800a8d4:	01420074 	movhi	r5,2049
 800a8d8:	2942a604 	addi	r5,r5,2712
 800a8dc:	29400017 	ldw	r5,0(r5)
 800a8e0:	18c00054 	ori	r3,r3,1
 800a8e4:	20c00115 	stw	r3,4(r4)
 800a8e8:	00c22074 	movhi	r3,2177
 800a8ec:	1145c83a 	sub	r2,r2,r5
 800a8f0:	18ca6c04 	addi	r3,r3,10672
 800a8f4:	18800015 	stw	r2,0(r3)
 800a8f8:	003fd306 	br	800a848 <_malloc_trim_r+0x70>

0800a8fc <_free_r>:
 800a8fc:	28004126 	beq	r5,zero,800aa04 <_free_r+0x108>
 800a900:	defffd04 	addi	sp,sp,-12
 800a904:	dc400115 	stw	r17,4(sp)
 800a908:	dc000015 	stw	r16,0(sp)
 800a90c:	2023883a 	mov	r17,r4
 800a910:	2821883a 	mov	r16,r5
 800a914:	dfc00215 	stw	ra,8(sp)
 800a918:	800b6840 	call	800b684 <__malloc_lock>
 800a91c:	81ffff17 	ldw	r7,-4(r16)
 800a920:	00bfff84 	movi	r2,-2
 800a924:	01020074 	movhi	r4,2049
 800a928:	81bffe04 	addi	r6,r16,-8
 800a92c:	3884703a 	and	r2,r7,r2
 800a930:	213ca704 	addi	r4,r4,-3428
 800a934:	308b883a 	add	r5,r6,r2
 800a938:	2a400117 	ldw	r9,4(r5)
 800a93c:	22000217 	ldw	r8,8(r4)
 800a940:	00ffff04 	movi	r3,-4
 800a944:	48c6703a 	and	r3,r9,r3
 800a948:	2a005726 	beq	r5,r8,800aaa8 <_free_r+0x1ac>
 800a94c:	28c00115 	stw	r3,4(r5)
 800a950:	39c0004c 	andi	r7,r7,1
 800a954:	3800091e 	bne	r7,zero,800a97c <_free_r+0x80>
 800a958:	823ffe17 	ldw	r8,-8(r16)
 800a95c:	22400204 	addi	r9,r4,8
 800a960:	320dc83a 	sub	r6,r6,r8
 800a964:	31c00217 	ldw	r7,8(r6)
 800a968:	1205883a 	add	r2,r2,r8
 800a96c:	3a406526 	beq	r7,r9,800ab04 <_free_r+0x208>
 800a970:	32000317 	ldw	r8,12(r6)
 800a974:	3a000315 	stw	r8,12(r7)
 800a978:	41c00215 	stw	r7,8(r8)
 800a97c:	28cf883a 	add	r7,r5,r3
 800a980:	39c00117 	ldw	r7,4(r7)
 800a984:	39c0004c 	andi	r7,r7,1
 800a988:	38003a26 	beq	r7,zero,800aa74 <_free_r+0x178>
 800a98c:	10c00054 	ori	r3,r2,1
 800a990:	30c00115 	stw	r3,4(r6)
 800a994:	3087883a 	add	r3,r6,r2
 800a998:	18800015 	stw	r2,0(r3)
 800a99c:	00c07fc4 	movi	r3,511
 800a9a0:	18801936 	bltu	r3,r2,800aa08 <_free_r+0x10c>
 800a9a4:	1004d0fa 	srli	r2,r2,3
 800a9a8:	01c00044 	movi	r7,1
 800a9ac:	21400117 	ldw	r5,4(r4)
 800a9b0:	10c00044 	addi	r3,r2,1
 800a9b4:	18c7883a 	add	r3,r3,r3
 800a9b8:	1005d0ba 	srai	r2,r2,2
 800a9bc:	18c7883a 	add	r3,r3,r3
 800a9c0:	18c7883a 	add	r3,r3,r3
 800a9c4:	1907883a 	add	r3,r3,r4
 800a9c8:	3884983a 	sll	r2,r7,r2
 800a9cc:	19c00017 	ldw	r7,0(r3)
 800a9d0:	1a3ffe04 	addi	r8,r3,-8
 800a9d4:	1144b03a 	or	r2,r2,r5
 800a9d8:	32000315 	stw	r8,12(r6)
 800a9dc:	31c00215 	stw	r7,8(r6)
 800a9e0:	20800115 	stw	r2,4(r4)
 800a9e4:	19800015 	stw	r6,0(r3)
 800a9e8:	39800315 	stw	r6,12(r7)
 800a9ec:	8809883a 	mov	r4,r17
 800a9f0:	dfc00217 	ldw	ra,8(sp)
 800a9f4:	dc400117 	ldw	r17,4(sp)
 800a9f8:	dc000017 	ldw	r16,0(sp)
 800a9fc:	dec00304 	addi	sp,sp,12
 800aa00:	800b6a81 	jmpi	800b6a8 <__malloc_unlock>
 800aa04:	f800283a 	ret
 800aa08:	100ad27a 	srli	r5,r2,9
 800aa0c:	00c00104 	movi	r3,4
 800aa10:	19404a36 	bltu	r3,r5,800ab3c <_free_r+0x240>
 800aa14:	100ad1ba 	srli	r5,r2,6
 800aa18:	28c00e44 	addi	r3,r5,57
 800aa1c:	18c7883a 	add	r3,r3,r3
 800aa20:	29400e04 	addi	r5,r5,56
 800aa24:	18c7883a 	add	r3,r3,r3
 800aa28:	18c7883a 	add	r3,r3,r3
 800aa2c:	1909883a 	add	r4,r3,r4
 800aa30:	20c00017 	ldw	r3,0(r4)
 800aa34:	01c20074 	movhi	r7,2049
 800aa38:	213ffe04 	addi	r4,r4,-8
 800aa3c:	39fca704 	addi	r7,r7,-3428
 800aa40:	20c04426 	beq	r4,r3,800ab54 <_free_r+0x258>
 800aa44:	01ffff04 	movi	r7,-4
 800aa48:	19400117 	ldw	r5,4(r3)
 800aa4c:	29ca703a 	and	r5,r5,r7
 800aa50:	1140022e 	bgeu	r2,r5,800aa5c <_free_r+0x160>
 800aa54:	18c00217 	ldw	r3,8(r3)
 800aa58:	20fffb1e 	bne	r4,r3,800aa48 <_free_r+0x14c>
 800aa5c:	19000317 	ldw	r4,12(r3)
 800aa60:	31000315 	stw	r4,12(r6)
 800aa64:	30c00215 	stw	r3,8(r6)
 800aa68:	21800215 	stw	r6,8(r4)
 800aa6c:	19800315 	stw	r6,12(r3)
 800aa70:	003fde06 	br	800a9ec <_free_r+0xf0>
 800aa74:	29c00217 	ldw	r7,8(r5)
 800aa78:	10c5883a 	add	r2,r2,r3
 800aa7c:	00c20074 	movhi	r3,2049
 800aa80:	18fca904 	addi	r3,r3,-3420
 800aa84:	38c03b26 	beq	r7,r3,800ab74 <_free_r+0x278>
 800aa88:	2a000317 	ldw	r8,12(r5)
 800aa8c:	11400054 	ori	r5,r2,1
 800aa90:	3087883a 	add	r3,r6,r2
 800aa94:	3a000315 	stw	r8,12(r7)
 800aa98:	41c00215 	stw	r7,8(r8)
 800aa9c:	31400115 	stw	r5,4(r6)
 800aaa0:	18800015 	stw	r2,0(r3)
 800aaa4:	003fbd06 	br	800a99c <_free_r+0xa0>
 800aaa8:	39c0004c 	andi	r7,r7,1
 800aaac:	10c5883a 	add	r2,r2,r3
 800aab0:	3800071e 	bne	r7,zero,800aad0 <_free_r+0x1d4>
 800aab4:	81fffe17 	ldw	r7,-8(r16)
 800aab8:	31cdc83a 	sub	r6,r6,r7
 800aabc:	30c00317 	ldw	r3,12(r6)
 800aac0:	31400217 	ldw	r5,8(r6)
 800aac4:	11c5883a 	add	r2,r2,r7
 800aac8:	28c00315 	stw	r3,12(r5)
 800aacc:	19400215 	stw	r5,8(r3)
 800aad0:	10c00054 	ori	r3,r2,1
 800aad4:	30c00115 	stw	r3,4(r6)
 800aad8:	00c20074 	movhi	r3,2049
 800aadc:	18c2a704 	addi	r3,r3,2716
 800aae0:	18c00017 	ldw	r3,0(r3)
 800aae4:	21800215 	stw	r6,8(r4)
 800aae8:	10ffc036 	bltu	r2,r3,800a9ec <_free_r+0xf0>
 800aaec:	00820074 	movhi	r2,2049
 800aaf0:	108a2c04 	addi	r2,r2,10416
 800aaf4:	11400017 	ldw	r5,0(r2)
 800aaf8:	8809883a 	mov	r4,r17
 800aafc:	800a7d80 	call	800a7d8 <_malloc_trim_r>
 800ab00:	003fba06 	br	800a9ec <_free_r+0xf0>
 800ab04:	28c9883a 	add	r4,r5,r3
 800ab08:	21000117 	ldw	r4,4(r4)
 800ab0c:	2100004c 	andi	r4,r4,1
 800ab10:	2000391e 	bne	r4,zero,800abf8 <_free_r+0x2fc>
 800ab14:	29c00217 	ldw	r7,8(r5)
 800ab18:	29000317 	ldw	r4,12(r5)
 800ab1c:	1885883a 	add	r2,r3,r2
 800ab20:	10c00054 	ori	r3,r2,1
 800ab24:	39000315 	stw	r4,12(r7)
 800ab28:	21c00215 	stw	r7,8(r4)
 800ab2c:	30c00115 	stw	r3,4(r6)
 800ab30:	308d883a 	add	r6,r6,r2
 800ab34:	30800015 	stw	r2,0(r6)
 800ab38:	003fac06 	br	800a9ec <_free_r+0xf0>
 800ab3c:	00c00504 	movi	r3,20
 800ab40:	19401536 	bltu	r3,r5,800ab98 <_free_r+0x29c>
 800ab44:	28c01704 	addi	r3,r5,92
 800ab48:	18c7883a 	add	r3,r3,r3
 800ab4c:	294016c4 	addi	r5,r5,91
 800ab50:	003fb406 	br	800aa24 <_free_r+0x128>
 800ab54:	280bd0ba 	srai	r5,r5,2
 800ab58:	00c00044 	movi	r3,1
 800ab5c:	38800117 	ldw	r2,4(r7)
 800ab60:	194a983a 	sll	r5,r3,r5
 800ab64:	2007883a 	mov	r3,r4
 800ab68:	2884b03a 	or	r2,r5,r2
 800ab6c:	38800115 	stw	r2,4(r7)
 800ab70:	003fbb06 	br	800aa60 <_free_r+0x164>
 800ab74:	21800515 	stw	r6,20(r4)
 800ab78:	21800415 	stw	r6,16(r4)
 800ab7c:	10c00054 	ori	r3,r2,1
 800ab80:	31c00315 	stw	r7,12(r6)
 800ab84:	31c00215 	stw	r7,8(r6)
 800ab88:	30c00115 	stw	r3,4(r6)
 800ab8c:	308d883a 	add	r6,r6,r2
 800ab90:	30800015 	stw	r2,0(r6)
 800ab94:	003f9506 	br	800a9ec <_free_r+0xf0>
 800ab98:	00c01504 	movi	r3,84
 800ab9c:	19400536 	bltu	r3,r5,800abb4 <_free_r+0x2b8>
 800aba0:	100ad33a 	srli	r5,r2,12
 800aba4:	28c01bc4 	addi	r3,r5,111
 800aba8:	18c7883a 	add	r3,r3,r3
 800abac:	29401b84 	addi	r5,r5,110
 800abb0:	003f9c06 	br	800aa24 <_free_r+0x128>
 800abb4:	00c05504 	movi	r3,340
 800abb8:	19400536 	bltu	r3,r5,800abd0 <_free_r+0x2d4>
 800abbc:	100ad3fa 	srli	r5,r2,15
 800abc0:	28c01e04 	addi	r3,r5,120
 800abc4:	18c7883a 	add	r3,r3,r3
 800abc8:	29401dc4 	addi	r5,r5,119
 800abcc:	003f9506 	br	800aa24 <_free_r+0x128>
 800abd0:	00c15504 	movi	r3,1364
 800abd4:	19400536 	bltu	r3,r5,800abec <_free_r+0x2f0>
 800abd8:	100ad4ba 	srli	r5,r2,18
 800abdc:	28c01f44 	addi	r3,r5,125
 800abe0:	18c7883a 	add	r3,r3,r3
 800abe4:	29401f04 	addi	r5,r5,124
 800abe8:	003f8e06 	br	800aa24 <_free_r+0x128>
 800abec:	00c03f84 	movi	r3,254
 800abf0:	01401f84 	movi	r5,126
 800abf4:	003f8b06 	br	800aa24 <_free_r+0x128>
 800abf8:	10c00054 	ori	r3,r2,1
 800abfc:	30c00115 	stw	r3,4(r6)
 800ac00:	308d883a 	add	r6,r6,r2
 800ac04:	30800015 	stw	r2,0(r6)
 800ac08:	003f7806 	br	800a9ec <_free_r+0xf0>

0800ac0c <_lseek_r>:
 800ac0c:	defffd04 	addi	sp,sp,-12
 800ac10:	2805883a 	mov	r2,r5
 800ac14:	dc000015 	stw	r16,0(sp)
 800ac18:	04020074 	movhi	r16,2049
 800ac1c:	dc400115 	stw	r17,4(sp)
 800ac20:	300b883a 	mov	r5,r6
 800ac24:	840a2d04 	addi	r16,r16,10420
 800ac28:	2023883a 	mov	r17,r4
 800ac2c:	380d883a 	mov	r6,r7
 800ac30:	1009883a 	mov	r4,r2
 800ac34:	dfc00215 	stw	ra,8(sp)
 800ac38:	80000015 	stw	zero,0(r16)
 800ac3c:	800b52c0 	call	800b52c <lseek>
 800ac40:	00ffffc4 	movi	r3,-1
 800ac44:	10c00526 	beq	r2,r3,800ac5c <_lseek_r+0x50>
 800ac48:	dfc00217 	ldw	ra,8(sp)
 800ac4c:	dc400117 	ldw	r17,4(sp)
 800ac50:	dc000017 	ldw	r16,0(sp)
 800ac54:	dec00304 	addi	sp,sp,12
 800ac58:	f800283a 	ret
 800ac5c:	80c00017 	ldw	r3,0(r16)
 800ac60:	183ff926 	beq	r3,zero,800ac48 <_lseek_r+0x3c>
 800ac64:	88c00015 	stw	r3,0(r17)
 800ac68:	003ff706 	br	800ac48 <_lseek_r+0x3c>

0800ac6c <__smakebuf_r>:
 800ac6c:	2880030b 	ldhu	r2,12(r5)
 800ac70:	10c0008c 	andi	r3,r2,2
 800ac74:	1800411e 	bne	r3,zero,800ad7c <__smakebuf_r+0x110>
 800ac78:	deffec04 	addi	sp,sp,-80
 800ac7c:	dc000f15 	stw	r16,60(sp)
 800ac80:	2821883a 	mov	r16,r5
 800ac84:	2940038f 	ldh	r5,14(r5)
 800ac88:	dc401015 	stw	r17,64(sp)
 800ac8c:	dfc01315 	stw	ra,76(sp)
 800ac90:	dcc01215 	stw	r19,72(sp)
 800ac94:	dc801115 	stw	r18,68(sp)
 800ac98:	2023883a 	mov	r17,r4
 800ac9c:	28001c16 	blt	r5,zero,800ad10 <__smakebuf_r+0xa4>
 800aca0:	d80d883a 	mov	r6,sp
 800aca4:	800ae880 	call	800ae88 <_fstat_r>
 800aca8:	10001816 	blt	r2,zero,800ad0c <__smakebuf_r+0xa0>
 800acac:	d8800117 	ldw	r2,4(sp)
 800acb0:	00e00014 	movui	r3,32768
 800acb4:	10bc000c 	andi	r2,r2,61440
 800acb8:	14c80020 	cmpeqi	r19,r2,8192
 800acbc:	10c03726 	beq	r2,r3,800ad9c <__smakebuf_r+0x130>
 800acc0:	80c0030b 	ldhu	r3,12(r16)
 800acc4:	18c20014 	ori	r3,r3,2048
 800acc8:	80c0030d 	sth	r3,12(r16)
 800accc:	00c80004 	movi	r3,8192
 800acd0:	10c0521e 	bne	r2,r3,800ae1c <__smakebuf_r+0x1b0>
 800acd4:	8140038f 	ldh	r5,14(r16)
 800acd8:	8809883a 	mov	r4,r17
 800acdc:	800aee40 	call	800aee4 <_isatty_r>
 800ace0:	10004c26 	beq	r2,zero,800ae14 <__smakebuf_r+0x1a8>
 800ace4:	8080030b 	ldhu	r2,12(r16)
 800ace8:	80c010c4 	addi	r3,r16,67
 800acec:	80c00015 	stw	r3,0(r16)
 800acf0:	10800054 	ori	r2,r2,1
 800acf4:	8080030d 	sth	r2,12(r16)
 800acf8:	00800044 	movi	r2,1
 800acfc:	80c00415 	stw	r3,16(r16)
 800ad00:	80800515 	stw	r2,20(r16)
 800ad04:	04810004 	movi	r18,1024
 800ad08:	00000706 	br	800ad28 <__smakebuf_r+0xbc>
 800ad0c:	8080030b 	ldhu	r2,12(r16)
 800ad10:	10c0200c 	andi	r3,r2,128
 800ad14:	18001f1e 	bne	r3,zero,800ad94 <__smakebuf_r+0x128>
 800ad18:	04810004 	movi	r18,1024
 800ad1c:	10820014 	ori	r2,r2,2048
 800ad20:	8080030d 	sth	r2,12(r16)
 800ad24:	0027883a 	mov	r19,zero
 800ad28:	900b883a 	mov	r5,r18
 800ad2c:	8809883a 	mov	r4,r17
 800ad30:	80090e40 	call	80090e4 <_malloc_r>
 800ad34:	10002c26 	beq	r2,zero,800ade8 <__smakebuf_r+0x17c>
 800ad38:	80c0030b 	ldhu	r3,12(r16)
 800ad3c:	01020074 	movhi	r4,2049
 800ad40:	2121bb04 	addi	r4,r4,-30996
 800ad44:	89000f15 	stw	r4,60(r17)
 800ad48:	18c02014 	ori	r3,r3,128
 800ad4c:	80c0030d 	sth	r3,12(r16)
 800ad50:	80800015 	stw	r2,0(r16)
 800ad54:	80800415 	stw	r2,16(r16)
 800ad58:	84800515 	stw	r18,20(r16)
 800ad5c:	98001a1e 	bne	r19,zero,800adc8 <__smakebuf_r+0x15c>
 800ad60:	dfc01317 	ldw	ra,76(sp)
 800ad64:	dcc01217 	ldw	r19,72(sp)
 800ad68:	dc801117 	ldw	r18,68(sp)
 800ad6c:	dc401017 	ldw	r17,64(sp)
 800ad70:	dc000f17 	ldw	r16,60(sp)
 800ad74:	dec01404 	addi	sp,sp,80
 800ad78:	f800283a 	ret
 800ad7c:	288010c4 	addi	r2,r5,67
 800ad80:	28800015 	stw	r2,0(r5)
 800ad84:	28800415 	stw	r2,16(r5)
 800ad88:	00800044 	movi	r2,1
 800ad8c:	28800515 	stw	r2,20(r5)
 800ad90:	f800283a 	ret
 800ad94:	04801004 	movi	r18,64
 800ad98:	003fe006 	br	800ad1c <__smakebuf_r+0xb0>
 800ad9c:	81000a17 	ldw	r4,40(r16)
 800ada0:	00c20074 	movhi	r3,2049
 800ada4:	18e87004 	addi	r3,r3,-24128
 800ada8:	20ffc51e 	bne	r4,r3,800acc0 <__smakebuf_r+0x54>
 800adac:	8080030b 	ldhu	r2,12(r16)
 800adb0:	04810004 	movi	r18,1024
 800adb4:	84801315 	stw	r18,76(r16)
 800adb8:	1484b03a 	or	r2,r2,r18
 800adbc:	8080030d 	sth	r2,12(r16)
 800adc0:	0027883a 	mov	r19,zero
 800adc4:	003fd806 	br	800ad28 <__smakebuf_r+0xbc>
 800adc8:	8140038f 	ldh	r5,14(r16)
 800adcc:	8809883a 	mov	r4,r17
 800add0:	800aee40 	call	800aee4 <_isatty_r>
 800add4:	103fe226 	beq	r2,zero,800ad60 <__smakebuf_r+0xf4>
 800add8:	8080030b 	ldhu	r2,12(r16)
 800addc:	10800054 	ori	r2,r2,1
 800ade0:	8080030d 	sth	r2,12(r16)
 800ade4:	003fde06 	br	800ad60 <__smakebuf_r+0xf4>
 800ade8:	8080030b 	ldhu	r2,12(r16)
 800adec:	10c0800c 	andi	r3,r2,512
 800adf0:	183fdb1e 	bne	r3,zero,800ad60 <__smakebuf_r+0xf4>
 800adf4:	10800094 	ori	r2,r2,2
 800adf8:	80c010c4 	addi	r3,r16,67
 800adfc:	8080030d 	sth	r2,12(r16)
 800ae00:	00800044 	movi	r2,1
 800ae04:	80c00015 	stw	r3,0(r16)
 800ae08:	80c00415 	stw	r3,16(r16)
 800ae0c:	80800515 	stw	r2,20(r16)
 800ae10:	003fd306 	br	800ad60 <__smakebuf_r+0xf4>
 800ae14:	04810004 	movi	r18,1024
 800ae18:	003fc306 	br	800ad28 <__smakebuf_r+0xbc>
 800ae1c:	0027883a 	mov	r19,zero
 800ae20:	04810004 	movi	r18,1024
 800ae24:	003fc006 	br	800ad28 <__smakebuf_r+0xbc>

0800ae28 <_read_r>:
 800ae28:	defffd04 	addi	sp,sp,-12
 800ae2c:	2805883a 	mov	r2,r5
 800ae30:	dc000015 	stw	r16,0(sp)
 800ae34:	04020074 	movhi	r16,2049
 800ae38:	dc400115 	stw	r17,4(sp)
 800ae3c:	300b883a 	mov	r5,r6
 800ae40:	840a2d04 	addi	r16,r16,10420
 800ae44:	2023883a 	mov	r17,r4
 800ae48:	380d883a 	mov	r6,r7
 800ae4c:	1009883a 	mov	r4,r2
 800ae50:	dfc00215 	stw	ra,8(sp)
 800ae54:	80000015 	stw	zero,0(r16)
 800ae58:	800b7080 	call	800b708 <read>
 800ae5c:	00ffffc4 	movi	r3,-1
 800ae60:	10c00526 	beq	r2,r3,800ae78 <_read_r+0x50>
 800ae64:	dfc00217 	ldw	ra,8(sp)
 800ae68:	dc400117 	ldw	r17,4(sp)
 800ae6c:	dc000017 	ldw	r16,0(sp)
 800ae70:	dec00304 	addi	sp,sp,12
 800ae74:	f800283a 	ret
 800ae78:	80c00017 	ldw	r3,0(r16)
 800ae7c:	183ff926 	beq	r3,zero,800ae64 <_read_r+0x3c>
 800ae80:	88c00015 	stw	r3,0(r17)
 800ae84:	003ff706 	br	800ae64 <_read_r+0x3c>

0800ae88 <_fstat_r>:
 800ae88:	defffd04 	addi	sp,sp,-12
 800ae8c:	2805883a 	mov	r2,r5
 800ae90:	dc000015 	stw	r16,0(sp)
 800ae94:	04020074 	movhi	r16,2049
 800ae98:	dc400115 	stw	r17,4(sp)
 800ae9c:	840a2d04 	addi	r16,r16,10420
 800aea0:	2023883a 	mov	r17,r4
 800aea4:	300b883a 	mov	r5,r6
 800aea8:	1009883a 	mov	r4,r2
 800aeac:	dfc00215 	stw	ra,8(sp)
 800aeb0:	80000015 	stw	zero,0(r16)
 800aeb4:	800b0b40 	call	800b0b4 <fstat>
 800aeb8:	00ffffc4 	movi	r3,-1
 800aebc:	10c00526 	beq	r2,r3,800aed4 <_fstat_r+0x4c>
 800aec0:	dfc00217 	ldw	ra,8(sp)
 800aec4:	dc400117 	ldw	r17,4(sp)
 800aec8:	dc000017 	ldw	r16,0(sp)
 800aecc:	dec00304 	addi	sp,sp,12
 800aed0:	f800283a 	ret
 800aed4:	80c00017 	ldw	r3,0(r16)
 800aed8:	183ff926 	beq	r3,zero,800aec0 <_fstat_r+0x38>
 800aedc:	88c00015 	stw	r3,0(r17)
 800aee0:	003ff706 	br	800aec0 <_fstat_r+0x38>

0800aee4 <_isatty_r>:
 800aee4:	defffd04 	addi	sp,sp,-12
 800aee8:	dc000015 	stw	r16,0(sp)
 800aeec:	04020074 	movhi	r16,2049
 800aef0:	dc400115 	stw	r17,4(sp)
 800aef4:	840a2d04 	addi	r16,r16,10420
 800aef8:	2023883a 	mov	r17,r4
 800aefc:	2809883a 	mov	r4,r5
 800af00:	dfc00215 	stw	ra,8(sp)
 800af04:	80000015 	stw	zero,0(r16)
 800af08:	800b3580 	call	800b358 <isatty>
 800af0c:	00ffffc4 	movi	r3,-1
 800af10:	10c00526 	beq	r2,r3,800af28 <_isatty_r+0x44>
 800af14:	dfc00217 	ldw	ra,8(sp)
 800af18:	dc400117 	ldw	r17,4(sp)
 800af1c:	dc000017 	ldw	r16,0(sp)
 800af20:	dec00304 	addi	sp,sp,12
 800af24:	f800283a 	ret
 800af28:	80c00017 	ldw	r3,0(r16)
 800af2c:	183ff926 	beq	r3,zero,800af14 <_isatty_r+0x30>
 800af30:	88c00015 	stw	r3,0(r17)
 800af34:	003ff706 	br	800af14 <_isatty_r+0x30>

0800af38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800af38:	defffe04 	addi	sp,sp,-8
 800af3c:	dfc00115 	stw	ra,4(sp)
 800af40:	df000015 	stw	fp,0(sp)
 800af44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800af48:	d0a00d17 	ldw	r2,-32716(gp)
 800af4c:	10000326 	beq	r2,zero,800af5c <alt_get_errno+0x24>
 800af50:	d0a00d17 	ldw	r2,-32716(gp)
 800af54:	103ee83a 	callr	r2
 800af58:	00000106 	br	800af60 <alt_get_errno+0x28>
 800af5c:	d0a78d04 	addi	r2,gp,-25036
}
 800af60:	e037883a 	mov	sp,fp
 800af64:	dfc00117 	ldw	ra,4(sp)
 800af68:	df000017 	ldw	fp,0(sp)
 800af6c:	dec00204 	addi	sp,sp,8
 800af70:	f800283a 	ret

0800af74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800af74:	defffb04 	addi	sp,sp,-20
 800af78:	dfc00415 	stw	ra,16(sp)
 800af7c:	df000315 	stw	fp,12(sp)
 800af80:	df000304 	addi	fp,sp,12
 800af84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800af88:	e0bfff17 	ldw	r2,-4(fp)
 800af8c:	10000816 	blt	r2,zero,800afb0 <close+0x3c>
 800af90:	01400304 	movi	r5,12
 800af94:	e13fff17 	ldw	r4,-4(fp)
 800af98:	80082e00 	call	80082e0 <__mulsi3>
 800af9c:	1007883a 	mov	r3,r2
 800afa0:	00820074 	movhi	r2,2049
 800afa4:	10bdb304 	addi	r2,r2,-2356
 800afa8:	1885883a 	add	r2,r3,r2
 800afac:	00000106 	br	800afb4 <close+0x40>
 800afb0:	0005883a 	mov	r2,zero
 800afb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800afb8:	e0bffd17 	ldw	r2,-12(fp)
 800afbc:	10001926 	beq	r2,zero,800b024 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800afc0:	e0bffd17 	ldw	r2,-12(fp)
 800afc4:	10800017 	ldw	r2,0(r2)
 800afc8:	10800417 	ldw	r2,16(r2)
 800afcc:	10000626 	beq	r2,zero,800afe8 <close+0x74>
 800afd0:	e0bffd17 	ldw	r2,-12(fp)
 800afd4:	10800017 	ldw	r2,0(r2)
 800afd8:	10800417 	ldw	r2,16(r2)
 800afdc:	e13ffd17 	ldw	r4,-12(fp)
 800afe0:	103ee83a 	callr	r2
 800afe4:	00000106 	br	800afec <close+0x78>
 800afe8:	0005883a 	mov	r2,zero
 800afec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800aff0:	e13fff17 	ldw	r4,-4(fp)
 800aff4:	800b80c0 	call	800b80c <alt_release_fd>
    if (rval < 0)
 800aff8:	e0bffe17 	ldw	r2,-8(fp)
 800affc:	1000070e 	bge	r2,zero,800b01c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800b000:	800af380 	call	800af38 <alt_get_errno>
 800b004:	1007883a 	mov	r3,r2
 800b008:	e0bffe17 	ldw	r2,-8(fp)
 800b00c:	0085c83a 	sub	r2,zero,r2
 800b010:	18800015 	stw	r2,0(r3)
      return -1;
 800b014:	00bfffc4 	movi	r2,-1
 800b018:	00000706 	br	800b038 <close+0xc4>
    }
    return 0;
 800b01c:	0005883a 	mov	r2,zero
 800b020:	00000506 	br	800b038 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b024:	800af380 	call	800af38 <alt_get_errno>
 800b028:	1007883a 	mov	r3,r2
 800b02c:	00801444 	movi	r2,81
 800b030:	18800015 	stw	r2,0(r3)
    return -1;
 800b034:	00bfffc4 	movi	r2,-1
  }
}
 800b038:	e037883a 	mov	sp,fp
 800b03c:	dfc00117 	ldw	ra,4(sp)
 800b040:	df000017 	ldw	fp,0(sp)
 800b044:	dec00204 	addi	sp,sp,8
 800b048:	f800283a 	ret

0800b04c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800b04c:	defffc04 	addi	sp,sp,-16
 800b050:	df000315 	stw	fp,12(sp)
 800b054:	df000304 	addi	fp,sp,12
 800b058:	e13ffd15 	stw	r4,-12(fp)
 800b05c:	e17ffe15 	stw	r5,-8(fp)
 800b060:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800b064:	e0bfff17 	ldw	r2,-4(fp)
}
 800b068:	e037883a 	mov	sp,fp
 800b06c:	df000017 	ldw	fp,0(sp)
 800b070:	dec00104 	addi	sp,sp,4
 800b074:	f800283a 	ret

0800b078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b078:	defffe04 	addi	sp,sp,-8
 800b07c:	dfc00115 	stw	ra,4(sp)
 800b080:	df000015 	stw	fp,0(sp)
 800b084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b088:	d0a00d17 	ldw	r2,-32716(gp)
 800b08c:	10000326 	beq	r2,zero,800b09c <alt_get_errno+0x24>
 800b090:	d0a00d17 	ldw	r2,-32716(gp)
 800b094:	103ee83a 	callr	r2
 800b098:	00000106 	br	800b0a0 <alt_get_errno+0x28>
 800b09c:	d0a78d04 	addi	r2,gp,-25036
}
 800b0a0:	e037883a 	mov	sp,fp
 800b0a4:	dfc00117 	ldw	ra,4(sp)
 800b0a8:	df000017 	ldw	fp,0(sp)
 800b0ac:	dec00204 	addi	sp,sp,8
 800b0b0:	f800283a 	ret

0800b0b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800b0b4:	defffb04 	addi	sp,sp,-20
 800b0b8:	dfc00415 	stw	ra,16(sp)
 800b0bc:	df000315 	stw	fp,12(sp)
 800b0c0:	df000304 	addi	fp,sp,12
 800b0c4:	e13ffe15 	stw	r4,-8(fp)
 800b0c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b0cc:	e0bffe17 	ldw	r2,-8(fp)
 800b0d0:	10000816 	blt	r2,zero,800b0f4 <fstat+0x40>
 800b0d4:	01400304 	movi	r5,12
 800b0d8:	e13ffe17 	ldw	r4,-8(fp)
 800b0dc:	80082e00 	call	80082e0 <__mulsi3>
 800b0e0:	1007883a 	mov	r3,r2
 800b0e4:	00820074 	movhi	r2,2049
 800b0e8:	10bdb304 	addi	r2,r2,-2356
 800b0ec:	1885883a 	add	r2,r3,r2
 800b0f0:	00000106 	br	800b0f8 <fstat+0x44>
 800b0f4:	0005883a 	mov	r2,zero
 800b0f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800b0fc:	e0bffd17 	ldw	r2,-12(fp)
 800b100:	10001026 	beq	r2,zero,800b144 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800b104:	e0bffd17 	ldw	r2,-12(fp)
 800b108:	10800017 	ldw	r2,0(r2)
 800b10c:	10800817 	ldw	r2,32(r2)
 800b110:	10000726 	beq	r2,zero,800b130 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800b114:	e0bffd17 	ldw	r2,-12(fp)
 800b118:	10800017 	ldw	r2,0(r2)
 800b11c:	10800817 	ldw	r2,32(r2)
 800b120:	e17fff17 	ldw	r5,-4(fp)
 800b124:	e13ffd17 	ldw	r4,-12(fp)
 800b128:	103ee83a 	callr	r2
 800b12c:	00000a06 	br	800b158 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800b130:	e0bfff17 	ldw	r2,-4(fp)
 800b134:	00c80004 	movi	r3,8192
 800b138:	10c00115 	stw	r3,4(r2)
      return 0;
 800b13c:	0005883a 	mov	r2,zero
 800b140:	00000506 	br	800b158 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b144:	800b0780 	call	800b078 <alt_get_errno>
 800b148:	1007883a 	mov	r3,r2
 800b14c:	00801444 	movi	r2,81
 800b150:	18800015 	stw	r2,0(r3)
    return -1;
 800b154:	00bfffc4 	movi	r2,-1
  }
}
 800b158:	e037883a 	mov	sp,fp
 800b15c:	dfc00117 	ldw	ra,4(sp)
 800b160:	df000017 	ldw	fp,0(sp)
 800b164:	dec00204 	addi	sp,sp,8
 800b168:	f800283a 	ret

0800b16c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800b16c:	defff904 	addi	sp,sp,-28
 800b170:	dfc00615 	stw	ra,24(sp)
 800b174:	df000515 	stw	fp,20(sp)
 800b178:	df000504 	addi	fp,sp,20
 800b17c:	e13ffc15 	stw	r4,-16(fp)
 800b180:	e17ffd15 	stw	r5,-12(fp)
 800b184:	e1bffe15 	stw	r6,-8(fp)
 800b188:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800b18c:	e0800217 	ldw	r2,8(fp)
 800b190:	d8800015 	stw	r2,0(sp)
 800b194:	e1ffff17 	ldw	r7,-4(fp)
 800b198:	e1bffe17 	ldw	r6,-8(fp)
 800b19c:	e17ffd17 	ldw	r5,-12(fp)
 800b1a0:	e13ffc17 	ldw	r4,-16(fp)
 800b1a4:	8003e280 	call	8003e28 <alt_iic_isr_register>
}  
 800b1a8:	e037883a 	mov	sp,fp
 800b1ac:	dfc00117 	ldw	ra,4(sp)
 800b1b0:	df000017 	ldw	fp,0(sp)
 800b1b4:	dec00204 	addi	sp,sp,8
 800b1b8:	f800283a 	ret

0800b1bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800b1bc:	defff904 	addi	sp,sp,-28
 800b1c0:	df000615 	stw	fp,24(sp)
 800b1c4:	df000604 	addi	fp,sp,24
 800b1c8:	e13ffe15 	stw	r4,-8(fp)
 800b1cc:	e17fff15 	stw	r5,-4(fp)
 800b1d0:	e0bfff17 	ldw	r2,-4(fp)
 800b1d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b1d8:	0005303a 	rdctl	r2,status
 800b1dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b1e0:	e0fffb17 	ldw	r3,-20(fp)
 800b1e4:	00bfff84 	movi	r2,-2
 800b1e8:	1884703a 	and	r2,r3,r2
 800b1ec:	1001703a 	wrctl	status,r2
  
  return context;
 800b1f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800b1f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800b1f8:	00c00044 	movi	r3,1
 800b1fc:	e0bffa17 	ldw	r2,-24(fp)
 800b200:	1884983a 	sll	r2,r3,r2
 800b204:	1007883a 	mov	r3,r2
 800b208:	d0a78e17 	ldw	r2,-25032(gp)
 800b20c:	1884b03a 	or	r2,r3,r2
 800b210:	d0a78e15 	stw	r2,-25032(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800b214:	d0a78e17 	ldw	r2,-25032(gp)
 800b218:	100170fa 	wrctl	ienable,r2
 800b21c:	e0bffc17 	ldw	r2,-16(fp)
 800b220:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b224:	e0bffd17 	ldw	r2,-12(fp)
 800b228:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800b22c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800b230:	0001883a 	nop
}
 800b234:	e037883a 	mov	sp,fp
 800b238:	df000017 	ldw	fp,0(sp)
 800b23c:	dec00104 	addi	sp,sp,4
 800b240:	f800283a 	ret

0800b244 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800b244:	defff904 	addi	sp,sp,-28
 800b248:	df000615 	stw	fp,24(sp)
 800b24c:	df000604 	addi	fp,sp,24
 800b250:	e13ffe15 	stw	r4,-8(fp)
 800b254:	e17fff15 	stw	r5,-4(fp)
 800b258:	e0bfff17 	ldw	r2,-4(fp)
 800b25c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b260:	0005303a 	rdctl	r2,status
 800b264:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b268:	e0fffb17 	ldw	r3,-20(fp)
 800b26c:	00bfff84 	movi	r2,-2
 800b270:	1884703a 	and	r2,r3,r2
 800b274:	1001703a 	wrctl	status,r2
  
  return context;
 800b278:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800b27c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800b280:	00c00044 	movi	r3,1
 800b284:	e0bffa17 	ldw	r2,-24(fp)
 800b288:	1884983a 	sll	r2,r3,r2
 800b28c:	0084303a 	nor	r2,zero,r2
 800b290:	1007883a 	mov	r3,r2
 800b294:	d0a78e17 	ldw	r2,-25032(gp)
 800b298:	1884703a 	and	r2,r3,r2
 800b29c:	d0a78e15 	stw	r2,-25032(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800b2a0:	d0a78e17 	ldw	r2,-25032(gp)
 800b2a4:	100170fa 	wrctl	ienable,r2
 800b2a8:	e0bffc17 	ldw	r2,-16(fp)
 800b2ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b2b0:	e0bffd17 	ldw	r2,-12(fp)
 800b2b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800b2b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800b2bc:	0001883a 	nop
}
 800b2c0:	e037883a 	mov	sp,fp
 800b2c4:	df000017 	ldw	fp,0(sp)
 800b2c8:	dec00104 	addi	sp,sp,4
 800b2cc:	f800283a 	ret

0800b2d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800b2d0:	defffc04 	addi	sp,sp,-16
 800b2d4:	df000315 	stw	fp,12(sp)
 800b2d8:	df000304 	addi	fp,sp,12
 800b2dc:	e13ffe15 	stw	r4,-8(fp)
 800b2e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800b2e4:	000530fa 	rdctl	r2,ienable
 800b2e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800b2ec:	00c00044 	movi	r3,1
 800b2f0:	e0bfff17 	ldw	r2,-4(fp)
 800b2f4:	1884983a 	sll	r2,r3,r2
 800b2f8:	1007883a 	mov	r3,r2
 800b2fc:	e0bffd17 	ldw	r2,-12(fp)
 800b300:	1884703a 	and	r2,r3,r2
 800b304:	1004c03a 	cmpne	r2,r2,zero
 800b308:	10803fcc 	andi	r2,r2,255
}
 800b30c:	e037883a 	mov	sp,fp
 800b310:	df000017 	ldw	fp,0(sp)
 800b314:	dec00104 	addi	sp,sp,4
 800b318:	f800283a 	ret

0800b31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b31c:	defffe04 	addi	sp,sp,-8
 800b320:	dfc00115 	stw	ra,4(sp)
 800b324:	df000015 	stw	fp,0(sp)
 800b328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b32c:	d0a00d17 	ldw	r2,-32716(gp)
 800b330:	10000326 	beq	r2,zero,800b340 <alt_get_errno+0x24>
 800b334:	d0a00d17 	ldw	r2,-32716(gp)
 800b338:	103ee83a 	callr	r2
 800b33c:	00000106 	br	800b344 <alt_get_errno+0x28>
 800b340:	d0a78d04 	addi	r2,gp,-25036
}
 800b344:	e037883a 	mov	sp,fp
 800b348:	dfc00117 	ldw	ra,4(sp)
 800b34c:	df000017 	ldw	fp,0(sp)
 800b350:	dec00204 	addi	sp,sp,8
 800b354:	f800283a 	ret

0800b358 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800b358:	deffed04 	addi	sp,sp,-76
 800b35c:	dfc01215 	stw	ra,72(sp)
 800b360:	df001115 	stw	fp,68(sp)
 800b364:	df001104 	addi	fp,sp,68
 800b368:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b36c:	e0bfff17 	ldw	r2,-4(fp)
 800b370:	10000816 	blt	r2,zero,800b394 <isatty+0x3c>
 800b374:	01400304 	movi	r5,12
 800b378:	e13fff17 	ldw	r4,-4(fp)
 800b37c:	80082e00 	call	80082e0 <__mulsi3>
 800b380:	1007883a 	mov	r3,r2
 800b384:	00820074 	movhi	r2,2049
 800b388:	10bdb304 	addi	r2,r2,-2356
 800b38c:	1885883a 	add	r2,r3,r2
 800b390:	00000106 	br	800b398 <isatty+0x40>
 800b394:	0005883a 	mov	r2,zero
 800b398:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800b39c:	e0bfef17 	ldw	r2,-68(fp)
 800b3a0:	10000e26 	beq	r2,zero,800b3dc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800b3a4:	e0bfef17 	ldw	r2,-68(fp)
 800b3a8:	10800017 	ldw	r2,0(r2)
 800b3ac:	10800817 	ldw	r2,32(r2)
 800b3b0:	1000021e 	bne	r2,zero,800b3bc <isatty+0x64>
    {
      return 1;
 800b3b4:	00800044 	movi	r2,1
 800b3b8:	00000d06 	br	800b3f0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800b3bc:	e0bff004 	addi	r2,fp,-64
 800b3c0:	100b883a 	mov	r5,r2
 800b3c4:	e13fff17 	ldw	r4,-4(fp)
 800b3c8:	800b0b40 	call	800b0b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800b3cc:	e0bff117 	ldw	r2,-60(fp)
 800b3d0:	10880020 	cmpeqi	r2,r2,8192
 800b3d4:	10803fcc 	andi	r2,r2,255
 800b3d8:	00000506 	br	800b3f0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b3dc:	800b31c0 	call	800b31c <alt_get_errno>
 800b3e0:	1007883a 	mov	r3,r2
 800b3e4:	00801444 	movi	r2,81
 800b3e8:	18800015 	stw	r2,0(r3)
    return 0;
 800b3ec:	0005883a 	mov	r2,zero
  }
}
 800b3f0:	e037883a 	mov	sp,fp
 800b3f4:	dfc00117 	ldw	ra,4(sp)
 800b3f8:	df000017 	ldw	fp,0(sp)
 800b3fc:	dec00204 	addi	sp,sp,8
 800b400:	f800283a 	ret

0800b404 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800b404:	defffc04 	addi	sp,sp,-16
 800b408:	df000315 	stw	fp,12(sp)
 800b40c:	df000304 	addi	fp,sp,12
 800b410:	e13ffd15 	stw	r4,-12(fp)
 800b414:	e17ffe15 	stw	r5,-8(fp)
 800b418:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800b41c:	e0fffe17 	ldw	r3,-8(fp)
 800b420:	e0bffd17 	ldw	r2,-12(fp)
 800b424:	18800c26 	beq	r3,r2,800b458 <alt_load_section+0x54>
  {
    while( to != end )
 800b428:	00000806 	br	800b44c <alt_load_section+0x48>
    {
      *to++ = *from++;
 800b42c:	e0bffe17 	ldw	r2,-8(fp)
 800b430:	10c00104 	addi	r3,r2,4
 800b434:	e0fffe15 	stw	r3,-8(fp)
 800b438:	e0fffd17 	ldw	r3,-12(fp)
 800b43c:	19000104 	addi	r4,r3,4
 800b440:	e13ffd15 	stw	r4,-12(fp)
 800b444:	18c00017 	ldw	r3,0(r3)
 800b448:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800b44c:	e0fffe17 	ldw	r3,-8(fp)
 800b450:	e0bfff17 	ldw	r2,-4(fp)
 800b454:	18bff51e 	bne	r3,r2,800b42c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800b458:	0001883a 	nop
 800b45c:	e037883a 	mov	sp,fp
 800b460:	df000017 	ldw	fp,0(sp)
 800b464:	dec00104 	addi	sp,sp,4
 800b468:	f800283a 	ret

0800b46c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800b46c:	defffe04 	addi	sp,sp,-8
 800b470:	dfc00115 	stw	ra,4(sp)
 800b474:	df000015 	stw	fp,0(sp)
 800b478:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800b47c:	01820074 	movhi	r6,2049
 800b480:	3182b404 	addi	r6,r6,2768
 800b484:	01420074 	movhi	r5,2049
 800b488:	297b9e04 	addi	r5,r5,-4488
 800b48c:	01020074 	movhi	r4,2049
 800b490:	2102b404 	addi	r4,r4,2768
 800b494:	800b4040 	call	800b404 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800b498:	01820034 	movhi	r6,2048
 800b49c:	31809404 	addi	r6,r6,592
 800b4a0:	01420034 	movhi	r5,2048
 800b4a4:	29400804 	addi	r5,r5,32
 800b4a8:	01020034 	movhi	r4,2048
 800b4ac:	21000804 	addi	r4,r4,32
 800b4b0:	800b4040 	call	800b404 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800b4b4:	01820074 	movhi	r6,2049
 800b4b8:	31bb9e04 	addi	r6,r6,-4488
 800b4bc:	01420074 	movhi	r5,2049
 800b4c0:	297b1804 	addi	r5,r5,-5024
 800b4c4:	01020074 	movhi	r4,2049
 800b4c8:	213b1804 	addi	r4,r4,-5024
 800b4cc:	800b4040 	call	800b404 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800b4d0:	800dee40 	call	800dee4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800b4d4:	800e1340 	call	800e134 <alt_icache_flush_all>
}
 800b4d8:	0001883a 	nop
 800b4dc:	e037883a 	mov	sp,fp
 800b4e0:	dfc00117 	ldw	ra,4(sp)
 800b4e4:	df000017 	ldw	fp,0(sp)
 800b4e8:	dec00204 	addi	sp,sp,8
 800b4ec:	f800283a 	ret

0800b4f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b4f0:	defffe04 	addi	sp,sp,-8
 800b4f4:	dfc00115 	stw	ra,4(sp)
 800b4f8:	df000015 	stw	fp,0(sp)
 800b4fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b500:	d0a00d17 	ldw	r2,-32716(gp)
 800b504:	10000326 	beq	r2,zero,800b514 <alt_get_errno+0x24>
 800b508:	d0a00d17 	ldw	r2,-32716(gp)
 800b50c:	103ee83a 	callr	r2
 800b510:	00000106 	br	800b518 <alt_get_errno+0x28>
 800b514:	d0a78d04 	addi	r2,gp,-25036
}
 800b518:	e037883a 	mov	sp,fp
 800b51c:	dfc00117 	ldw	ra,4(sp)
 800b520:	df000017 	ldw	fp,0(sp)
 800b524:	dec00204 	addi	sp,sp,8
 800b528:	f800283a 	ret

0800b52c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800b52c:	defff904 	addi	sp,sp,-28
 800b530:	dfc00615 	stw	ra,24(sp)
 800b534:	df000515 	stw	fp,20(sp)
 800b538:	df000504 	addi	fp,sp,20
 800b53c:	e13ffd15 	stw	r4,-12(fp)
 800b540:	e17ffe15 	stw	r5,-8(fp)
 800b544:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800b548:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b54c:	e0bffd17 	ldw	r2,-12(fp)
 800b550:	10000816 	blt	r2,zero,800b574 <lseek+0x48>
 800b554:	01400304 	movi	r5,12
 800b558:	e13ffd17 	ldw	r4,-12(fp)
 800b55c:	80082e00 	call	80082e0 <__mulsi3>
 800b560:	1007883a 	mov	r3,r2
 800b564:	00820074 	movhi	r2,2049
 800b568:	10bdb304 	addi	r2,r2,-2356
 800b56c:	1885883a 	add	r2,r3,r2
 800b570:	00000106 	br	800b578 <lseek+0x4c>
 800b574:	0005883a 	mov	r2,zero
 800b578:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800b57c:	e0bffc17 	ldw	r2,-16(fp)
 800b580:	10001026 	beq	r2,zero,800b5c4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800b584:	e0bffc17 	ldw	r2,-16(fp)
 800b588:	10800017 	ldw	r2,0(r2)
 800b58c:	10800717 	ldw	r2,28(r2)
 800b590:	10000926 	beq	r2,zero,800b5b8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800b594:	e0bffc17 	ldw	r2,-16(fp)
 800b598:	10800017 	ldw	r2,0(r2)
 800b59c:	10800717 	ldw	r2,28(r2)
 800b5a0:	e1bfff17 	ldw	r6,-4(fp)
 800b5a4:	e17ffe17 	ldw	r5,-8(fp)
 800b5a8:	e13ffc17 	ldw	r4,-16(fp)
 800b5ac:	103ee83a 	callr	r2
 800b5b0:	e0bffb15 	stw	r2,-20(fp)
 800b5b4:	00000506 	br	800b5cc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800b5b8:	00bfde84 	movi	r2,-134
 800b5bc:	e0bffb15 	stw	r2,-20(fp)
 800b5c0:	00000206 	br	800b5cc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800b5c4:	00bfebc4 	movi	r2,-81
 800b5c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800b5cc:	e0bffb17 	ldw	r2,-20(fp)
 800b5d0:	1000070e 	bge	r2,zero,800b5f0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800b5d4:	800b4f00 	call	800b4f0 <alt_get_errno>
 800b5d8:	1007883a 	mov	r3,r2
 800b5dc:	e0bffb17 	ldw	r2,-20(fp)
 800b5e0:	0085c83a 	sub	r2,zero,r2
 800b5e4:	18800015 	stw	r2,0(r3)
    rc = -1;
 800b5e8:	00bfffc4 	movi	r2,-1
 800b5ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800b5f0:	e0bffb17 	ldw	r2,-20(fp)
}
 800b5f4:	e037883a 	mov	sp,fp
 800b5f8:	dfc00117 	ldw	ra,4(sp)
 800b5fc:	df000017 	ldw	fp,0(sp)
 800b600:	dec00204 	addi	sp,sp,8
 800b604:	f800283a 	ret

0800b608 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800b608:	defffd04 	addi	sp,sp,-12
 800b60c:	dfc00215 	stw	ra,8(sp)
 800b610:	df000115 	stw	fp,4(sp)
 800b614:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800b618:	0009883a 	mov	r4,zero
 800b61c:	800bab00 	call	800bab0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800b620:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800b624:	800bae80 	call	800bae8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800b628:	01820074 	movhi	r6,2049
 800b62c:	31bb7e04 	addi	r6,r6,-4616
 800b630:	01420074 	movhi	r5,2049
 800b634:	297b7e04 	addi	r5,r5,-4616
 800b638:	01020074 	movhi	r4,2049
 800b63c:	213b7e04 	addi	r4,r4,-4616
 800b640:	800e2380 	call	800e238 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800b644:	800dfe40 	call	800dfe4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800b648:	01020074 	movhi	r4,2049
 800b64c:	21381104 	addi	r4,r4,-8124
 800b650:	800e8cc0 	call	800e8cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800b654:	d0a78f17 	ldw	r2,-25028(gp)
 800b658:	d0e79017 	ldw	r3,-25024(gp)
 800b65c:	d1279117 	ldw	r4,-25020(gp)
 800b660:	200d883a 	mov	r6,r4
 800b664:	180b883a 	mov	r5,r3
 800b668:	1009883a 	mov	r4,r2
 800b66c:	800804c0 	call	800804c <main>
 800b670:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800b674:	01000044 	movi	r4,1
 800b678:	800af740 	call	800af74 <close>
  exit (result);
 800b67c:	e13fff17 	ldw	r4,-4(fp)
 800b680:	800e8e00 	call	800e8e0 <exit>

0800b684 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800b684:	defffe04 	addi	sp,sp,-8
 800b688:	df000115 	stw	fp,4(sp)
 800b68c:	df000104 	addi	fp,sp,4
 800b690:	e13fff15 	stw	r4,-4(fp)
}
 800b694:	0001883a 	nop
 800b698:	e037883a 	mov	sp,fp
 800b69c:	df000017 	ldw	fp,0(sp)
 800b6a0:	dec00104 	addi	sp,sp,4
 800b6a4:	f800283a 	ret

0800b6a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800b6a8:	defffe04 	addi	sp,sp,-8
 800b6ac:	df000115 	stw	fp,4(sp)
 800b6b0:	df000104 	addi	fp,sp,4
 800b6b4:	e13fff15 	stw	r4,-4(fp)
}
 800b6b8:	0001883a 	nop
 800b6bc:	e037883a 	mov	sp,fp
 800b6c0:	df000017 	ldw	fp,0(sp)
 800b6c4:	dec00104 	addi	sp,sp,4
 800b6c8:	f800283a 	ret

0800b6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b6cc:	defffe04 	addi	sp,sp,-8
 800b6d0:	dfc00115 	stw	ra,4(sp)
 800b6d4:	df000015 	stw	fp,0(sp)
 800b6d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b6dc:	d0a00d17 	ldw	r2,-32716(gp)
 800b6e0:	10000326 	beq	r2,zero,800b6f0 <alt_get_errno+0x24>
 800b6e4:	d0a00d17 	ldw	r2,-32716(gp)
 800b6e8:	103ee83a 	callr	r2
 800b6ec:	00000106 	br	800b6f4 <alt_get_errno+0x28>
 800b6f0:	d0a78d04 	addi	r2,gp,-25036
}
 800b6f4:	e037883a 	mov	sp,fp
 800b6f8:	dfc00117 	ldw	ra,4(sp)
 800b6fc:	df000017 	ldw	fp,0(sp)
 800b700:	dec00204 	addi	sp,sp,8
 800b704:	f800283a 	ret

0800b708 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800b708:	defff904 	addi	sp,sp,-28
 800b70c:	dfc00615 	stw	ra,24(sp)
 800b710:	df000515 	stw	fp,20(sp)
 800b714:	df000504 	addi	fp,sp,20
 800b718:	e13ffd15 	stw	r4,-12(fp)
 800b71c:	e17ffe15 	stw	r5,-8(fp)
 800b720:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b724:	e0bffd17 	ldw	r2,-12(fp)
 800b728:	10000816 	blt	r2,zero,800b74c <read+0x44>
 800b72c:	01400304 	movi	r5,12
 800b730:	e13ffd17 	ldw	r4,-12(fp)
 800b734:	80082e00 	call	80082e0 <__mulsi3>
 800b738:	1007883a 	mov	r3,r2
 800b73c:	00820074 	movhi	r2,2049
 800b740:	10bdb304 	addi	r2,r2,-2356
 800b744:	1885883a 	add	r2,r3,r2
 800b748:	00000106 	br	800b750 <read+0x48>
 800b74c:	0005883a 	mov	r2,zero
 800b750:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800b754:	e0bffb17 	ldw	r2,-20(fp)
 800b758:	10002226 	beq	r2,zero,800b7e4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800b75c:	e0bffb17 	ldw	r2,-20(fp)
 800b760:	10800217 	ldw	r2,8(r2)
 800b764:	108000cc 	andi	r2,r2,3
 800b768:	10800060 	cmpeqi	r2,r2,1
 800b76c:	1000181e 	bne	r2,zero,800b7d0 <read+0xc8>
        (fd->dev->read))
 800b770:	e0bffb17 	ldw	r2,-20(fp)
 800b774:	10800017 	ldw	r2,0(r2)
 800b778:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800b77c:	10001426 	beq	r2,zero,800b7d0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800b780:	e0bffb17 	ldw	r2,-20(fp)
 800b784:	10800017 	ldw	r2,0(r2)
 800b788:	10800517 	ldw	r2,20(r2)
 800b78c:	e0ffff17 	ldw	r3,-4(fp)
 800b790:	180d883a 	mov	r6,r3
 800b794:	e17ffe17 	ldw	r5,-8(fp)
 800b798:	e13ffb17 	ldw	r4,-20(fp)
 800b79c:	103ee83a 	callr	r2
 800b7a0:	e0bffc15 	stw	r2,-16(fp)
 800b7a4:	e0bffc17 	ldw	r2,-16(fp)
 800b7a8:	1000070e 	bge	r2,zero,800b7c8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800b7ac:	800b6cc0 	call	800b6cc <alt_get_errno>
 800b7b0:	1007883a 	mov	r3,r2
 800b7b4:	e0bffc17 	ldw	r2,-16(fp)
 800b7b8:	0085c83a 	sub	r2,zero,r2
 800b7bc:	18800015 	stw	r2,0(r3)
          return -1;
 800b7c0:	00bfffc4 	movi	r2,-1
 800b7c4:	00000c06 	br	800b7f8 <read+0xf0>
        }
        return rval;
 800b7c8:	e0bffc17 	ldw	r2,-16(fp)
 800b7cc:	00000a06 	br	800b7f8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800b7d0:	800b6cc0 	call	800b6cc <alt_get_errno>
 800b7d4:	1007883a 	mov	r3,r2
 800b7d8:	00800344 	movi	r2,13
 800b7dc:	18800015 	stw	r2,0(r3)
 800b7e0:	00000406 	br	800b7f4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800b7e4:	800b6cc0 	call	800b6cc <alt_get_errno>
 800b7e8:	1007883a 	mov	r3,r2
 800b7ec:	00801444 	movi	r2,81
 800b7f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800b7f4:	00bfffc4 	movi	r2,-1
}
 800b7f8:	e037883a 	mov	sp,fp
 800b7fc:	dfc00117 	ldw	ra,4(sp)
 800b800:	df000017 	ldw	fp,0(sp)
 800b804:	dec00204 	addi	sp,sp,8
 800b808:	f800283a 	ret

0800b80c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800b80c:	defffc04 	addi	sp,sp,-16
 800b810:	dfc00315 	stw	ra,12(sp)
 800b814:	df000215 	stw	fp,8(sp)
 800b818:	dc000115 	stw	r16,4(sp)
 800b81c:	df000204 	addi	fp,sp,8
 800b820:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800b824:	e0bffe17 	ldw	r2,-8(fp)
 800b828:	108000d0 	cmplti	r2,r2,3
 800b82c:	1000111e 	bne	r2,zero,800b874 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800b830:	04020074 	movhi	r16,2049
 800b834:	843db304 	addi	r16,r16,-2356
 800b838:	e0bffe17 	ldw	r2,-8(fp)
 800b83c:	01400304 	movi	r5,12
 800b840:	1009883a 	mov	r4,r2
 800b844:	80082e00 	call	80082e0 <__mulsi3>
 800b848:	8085883a 	add	r2,r16,r2
 800b84c:	10800204 	addi	r2,r2,8
 800b850:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800b854:	04020074 	movhi	r16,2049
 800b858:	843db304 	addi	r16,r16,-2356
 800b85c:	e0bffe17 	ldw	r2,-8(fp)
 800b860:	01400304 	movi	r5,12
 800b864:	1009883a 	mov	r4,r2
 800b868:	80082e00 	call	80082e0 <__mulsi3>
 800b86c:	8085883a 	add	r2,r16,r2
 800b870:	10000015 	stw	zero,0(r2)
  }
}
 800b874:	0001883a 	nop
 800b878:	e6ffff04 	addi	sp,fp,-4
 800b87c:	dfc00217 	ldw	ra,8(sp)
 800b880:	df000117 	ldw	fp,4(sp)
 800b884:	dc000017 	ldw	r16,0(sp)
 800b888:	dec00304 	addi	sp,sp,12
 800b88c:	f800283a 	ret

0800b890 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800b890:	defff904 	addi	sp,sp,-28
 800b894:	df000615 	stw	fp,24(sp)
 800b898:	df000604 	addi	fp,sp,24
 800b89c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b8a0:	0005303a 	rdctl	r2,status
 800b8a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b8a8:	e0fffe17 	ldw	r3,-8(fp)
 800b8ac:	00bfff84 	movi	r2,-2
 800b8b0:	1884703a 	and	r2,r3,r2
 800b8b4:	1001703a 	wrctl	status,r2
  
  return context;
 800b8b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800b8bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800b8c0:	d0a00f17 	ldw	r2,-32708(gp)
 800b8c4:	10c000c4 	addi	r3,r2,3
 800b8c8:	00bfff04 	movi	r2,-4
 800b8cc:	1884703a 	and	r2,r3,r2
 800b8d0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800b8d4:	d0e00f17 	ldw	r3,-32708(gp)
 800b8d8:	e0bfff17 	ldw	r2,-4(fp)
 800b8dc:	1887883a 	add	r3,r3,r2
 800b8e0:	00840034 	movhi	r2,4096
 800b8e4:	10800004 	addi	r2,r2,0
 800b8e8:	10c0062e 	bgeu	r2,r3,800b904 <sbrk+0x74>
 800b8ec:	e0bffb17 	ldw	r2,-20(fp)
 800b8f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b8f4:	e0bffa17 	ldw	r2,-24(fp)
 800b8f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800b8fc:	00bfffc4 	movi	r2,-1
 800b900:	00000b06 	br	800b930 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800b904:	d0a00f17 	ldw	r2,-32708(gp)
 800b908:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800b90c:	d0e00f17 	ldw	r3,-32708(gp)
 800b910:	e0bfff17 	ldw	r2,-4(fp)
 800b914:	1885883a 	add	r2,r3,r2
 800b918:	d0a00f15 	stw	r2,-32708(gp)
 800b91c:	e0bffb17 	ldw	r2,-20(fp)
 800b920:	e0bffc15 	stw	r2,-16(fp)
 800b924:	e0bffc17 	ldw	r2,-16(fp)
 800b928:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800b92c:	e0bffd17 	ldw	r2,-12(fp)
} 
 800b930:	e037883a 	mov	sp,fp
 800b934:	df000017 	ldw	fp,0(sp)
 800b938:	dec00104 	addi	sp,sp,4
 800b93c:	f800283a 	ret

0800b940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b940:	defffe04 	addi	sp,sp,-8
 800b944:	dfc00115 	stw	ra,4(sp)
 800b948:	df000015 	stw	fp,0(sp)
 800b94c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b950:	d0a00d17 	ldw	r2,-32716(gp)
 800b954:	10000326 	beq	r2,zero,800b964 <alt_get_errno+0x24>
 800b958:	d0a00d17 	ldw	r2,-32716(gp)
 800b95c:	103ee83a 	callr	r2
 800b960:	00000106 	br	800b968 <alt_get_errno+0x28>
 800b964:	d0a78d04 	addi	r2,gp,-25036
}
 800b968:	e037883a 	mov	sp,fp
 800b96c:	dfc00117 	ldw	ra,4(sp)
 800b970:	df000017 	ldw	fp,0(sp)
 800b974:	dec00204 	addi	sp,sp,8
 800b978:	f800283a 	ret

0800b97c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800b97c:	defff904 	addi	sp,sp,-28
 800b980:	dfc00615 	stw	ra,24(sp)
 800b984:	df000515 	stw	fp,20(sp)
 800b988:	df000504 	addi	fp,sp,20
 800b98c:	e13ffd15 	stw	r4,-12(fp)
 800b990:	e17ffe15 	stw	r5,-8(fp)
 800b994:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b998:	e0bffd17 	ldw	r2,-12(fp)
 800b99c:	10000816 	blt	r2,zero,800b9c0 <write+0x44>
 800b9a0:	01400304 	movi	r5,12
 800b9a4:	e13ffd17 	ldw	r4,-12(fp)
 800b9a8:	80082e00 	call	80082e0 <__mulsi3>
 800b9ac:	1007883a 	mov	r3,r2
 800b9b0:	00820074 	movhi	r2,2049
 800b9b4:	10bdb304 	addi	r2,r2,-2356
 800b9b8:	1885883a 	add	r2,r3,r2
 800b9bc:	00000106 	br	800b9c4 <write+0x48>
 800b9c0:	0005883a 	mov	r2,zero
 800b9c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800b9c8:	e0bffb17 	ldw	r2,-20(fp)
 800b9cc:	10002126 	beq	r2,zero,800ba54 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800b9d0:	e0bffb17 	ldw	r2,-20(fp)
 800b9d4:	10800217 	ldw	r2,8(r2)
 800b9d8:	108000cc 	andi	r2,r2,3
 800b9dc:	10001826 	beq	r2,zero,800ba40 <write+0xc4>
 800b9e0:	e0bffb17 	ldw	r2,-20(fp)
 800b9e4:	10800017 	ldw	r2,0(r2)
 800b9e8:	10800617 	ldw	r2,24(r2)
 800b9ec:	10001426 	beq	r2,zero,800ba40 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800b9f0:	e0bffb17 	ldw	r2,-20(fp)
 800b9f4:	10800017 	ldw	r2,0(r2)
 800b9f8:	10800617 	ldw	r2,24(r2)
 800b9fc:	e0ffff17 	ldw	r3,-4(fp)
 800ba00:	180d883a 	mov	r6,r3
 800ba04:	e17ffe17 	ldw	r5,-8(fp)
 800ba08:	e13ffb17 	ldw	r4,-20(fp)
 800ba0c:	103ee83a 	callr	r2
 800ba10:	e0bffc15 	stw	r2,-16(fp)
 800ba14:	e0bffc17 	ldw	r2,-16(fp)
 800ba18:	1000070e 	bge	r2,zero,800ba38 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800ba1c:	800b9400 	call	800b940 <alt_get_errno>
 800ba20:	1007883a 	mov	r3,r2
 800ba24:	e0bffc17 	ldw	r2,-16(fp)
 800ba28:	0085c83a 	sub	r2,zero,r2
 800ba2c:	18800015 	stw	r2,0(r3)
        return -1;
 800ba30:	00bfffc4 	movi	r2,-1
 800ba34:	00000c06 	br	800ba68 <write+0xec>
      }
      return rval;
 800ba38:	e0bffc17 	ldw	r2,-16(fp)
 800ba3c:	00000a06 	br	800ba68 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800ba40:	800b9400 	call	800b940 <alt_get_errno>
 800ba44:	1007883a 	mov	r3,r2
 800ba48:	00800344 	movi	r2,13
 800ba4c:	18800015 	stw	r2,0(r3)
 800ba50:	00000406 	br	800ba64 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800ba54:	800b9400 	call	800b940 <alt_get_errno>
 800ba58:	1007883a 	mov	r3,r2
 800ba5c:	00801444 	movi	r2,81
 800ba60:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ba64:	00bfffc4 	movi	r2,-1
}
 800ba68:	e037883a 	mov	sp,fp
 800ba6c:	dfc00117 	ldw	ra,4(sp)
 800ba70:	df000017 	ldw	fp,0(sp)
 800ba74:	dec00204 	addi	sp,sp,8
 800ba78:	f800283a 	ret

0800ba7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800ba7c:	defffd04 	addi	sp,sp,-12
 800ba80:	dfc00215 	stw	ra,8(sp)
 800ba84:	df000115 	stw	fp,4(sp)
 800ba88:	df000104 	addi	fp,sp,4
 800ba8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800ba90:	d1600a04 	addi	r5,gp,-32728
 800ba94:	e13fff17 	ldw	r4,-4(fp)
 800ba98:	800df400 	call	800df40 <alt_dev_llist_insert>
}
 800ba9c:	e037883a 	mov	sp,fp
 800baa0:	dfc00117 	ldw	ra,4(sp)
 800baa4:	df000017 	ldw	fp,0(sp)
 800baa8:	dec00204 	addi	sp,sp,8
 800baac:	f800283a 	ret

0800bab0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800bab0:	defffd04 	addi	sp,sp,-12
 800bab4:	dfc00215 	stw	ra,8(sp)
 800bab8:	df000115 	stw	fp,4(sp)
 800babc:	df000104 	addi	fp,sp,4
 800bac0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 800bac4:	800e6dc0 	call	800e6dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800bac8:	00800044 	movi	r2,1
 800bacc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800bad0:	0001883a 	nop
 800bad4:	e037883a 	mov	sp,fp
 800bad8:	dfc00117 	ldw	ra,4(sp)
 800badc:	df000017 	ldw	fp,0(sp)
 800bae0:	dec00204 	addi	sp,sp,8
 800bae4:	f800283a 	ret

0800bae8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800bae8:	defffe04 	addi	sp,sp,-8
 800baec:	dfc00115 	stw	ra,4(sp)
 800baf0:	df000015 	stw	fp,0(sp)
 800baf4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 800baf8:	01c0fa04 	movi	r7,1000
 800bafc:	01800044 	movi	r6,1
 800bb00:	000b883a 	mov	r5,zero
 800bb04:	01040034 	movhi	r4,4096
 800bb08:	21112804 	addi	r4,r4,17568
 800bb0c:	800d43c0 	call	800d43c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 800bb10:	000d883a 	mov	r6,zero
 800bb14:	000b883a 	mov	r5,zero
 800bb18:	01020074 	movhi	r4,2049
 800bb1c:	213e1d04 	addi	r4,r4,-1932
 800bb20:	800bd2c0 	call	800bd2c <altera_avalon_jtag_uart_init>
 800bb24:	01020074 	movhi	r4,2049
 800bb28:	213e1304 	addi	r4,r4,-1972
 800bb2c:	800ba7c0 	call	800ba7c <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
 800bb30:	018000c4 	movi	r6,3
 800bb34:	000b883a 	mov	r5,zero
 800bb38:	01020074 	movhi	r4,2049
 800bb3c:	21022b04 	addi	r4,r4,2220
 800bb40:	800d31c0 	call	800d31c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
 800bb44:	01800104 	movi	r6,4
 800bb48:	000b883a 	mov	r5,zero
 800bb4c:	01020074 	movhi	r4,2049
 800bb50:	21023704 	addi	r4,r4,2268
 800bb54:	800d31c0 	call	800d31c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 800bb58:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 800bb5c:	01800084 	movi	r6,2
 800bb60:	000b883a 	mov	r5,zero
 800bb64:	01020074 	movhi	r4,2049
 800bb68:	21024d04 	addi	r4,r4,2356
 800bb6c:	800d5c80 	call	800d5c8 <altera_avalon_uart_init>
 800bb70:	01020074 	movhi	r4,2049
 800bb74:	21024304 	addi	r4,r4,2316
 800bb78:	800ba7c0 	call	800ba7c <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
 800bb7c:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 800bb80:	01020074 	movhi	r4,2049
 800bb84:	21027404 	addi	r4,r4,2512
 800bb88:	800ba7c0 	call	800ba7c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 800bb8c:	01020074 	movhi	r4,2049
 800bb90:	21027f04 	addi	r4,r4,2556
 800bb94:	800ba7c0 	call	800ba7c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 800bb98:	01020074 	movhi	r4,2049
 800bb9c:	21028a04 	addi	r4,r4,2600
 800bba0:	800ba7c0 	call	800ba7c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 800bba4:	01020074 	movhi	r4,2049
 800bba8:	21029504 	addi	r4,r4,2644
 800bbac:	800ba7c0 	call	800ba7c <alt_dev_reg>
}
 800bbb0:	0001883a 	nop
 800bbb4:	e037883a 	mov	sp,fp
 800bbb8:	dfc00117 	ldw	ra,4(sp)
 800bbbc:	df000017 	ldw	fp,0(sp)
 800bbc0:	dec00204 	addi	sp,sp,8
 800bbc4:	f800283a 	ret

0800bbc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800bbc8:	defffa04 	addi	sp,sp,-24
 800bbcc:	dfc00515 	stw	ra,20(sp)
 800bbd0:	df000415 	stw	fp,16(sp)
 800bbd4:	df000404 	addi	fp,sp,16
 800bbd8:	e13ffd15 	stw	r4,-12(fp)
 800bbdc:	e17ffe15 	stw	r5,-8(fp)
 800bbe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bbe4:	e0bffd17 	ldw	r2,-12(fp)
 800bbe8:	10800017 	ldw	r2,0(r2)
 800bbec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800bbf0:	e0bffc17 	ldw	r2,-16(fp)
 800bbf4:	10c00a04 	addi	r3,r2,40
 800bbf8:	e0bffd17 	ldw	r2,-12(fp)
 800bbfc:	10800217 	ldw	r2,8(r2)
 800bc00:	100f883a 	mov	r7,r2
 800bc04:	e1bfff17 	ldw	r6,-4(fp)
 800bc08:	e17ffe17 	ldw	r5,-8(fp)
 800bc0c:	1809883a 	mov	r4,r3
 800bc10:	800c1f00 	call	800c1f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800bc14:	e037883a 	mov	sp,fp
 800bc18:	dfc00117 	ldw	ra,4(sp)
 800bc1c:	df000017 	ldw	fp,0(sp)
 800bc20:	dec00204 	addi	sp,sp,8
 800bc24:	f800283a 	ret

0800bc28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800bc28:	defffa04 	addi	sp,sp,-24
 800bc2c:	dfc00515 	stw	ra,20(sp)
 800bc30:	df000415 	stw	fp,16(sp)
 800bc34:	df000404 	addi	fp,sp,16
 800bc38:	e13ffd15 	stw	r4,-12(fp)
 800bc3c:	e17ffe15 	stw	r5,-8(fp)
 800bc40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bc44:	e0bffd17 	ldw	r2,-12(fp)
 800bc48:	10800017 	ldw	r2,0(r2)
 800bc4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800bc50:	e0bffc17 	ldw	r2,-16(fp)
 800bc54:	10c00a04 	addi	r3,r2,40
 800bc58:	e0bffd17 	ldw	r2,-12(fp)
 800bc5c:	10800217 	ldw	r2,8(r2)
 800bc60:	100f883a 	mov	r7,r2
 800bc64:	e1bfff17 	ldw	r6,-4(fp)
 800bc68:	e17ffe17 	ldw	r5,-8(fp)
 800bc6c:	1809883a 	mov	r4,r3
 800bc70:	800c40c0 	call	800c40c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800bc74:	e037883a 	mov	sp,fp
 800bc78:	dfc00117 	ldw	ra,4(sp)
 800bc7c:	df000017 	ldw	fp,0(sp)
 800bc80:	dec00204 	addi	sp,sp,8
 800bc84:	f800283a 	ret

0800bc88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800bc88:	defffc04 	addi	sp,sp,-16
 800bc8c:	dfc00315 	stw	ra,12(sp)
 800bc90:	df000215 	stw	fp,8(sp)
 800bc94:	df000204 	addi	fp,sp,8
 800bc98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bc9c:	e0bfff17 	ldw	r2,-4(fp)
 800bca0:	10800017 	ldw	r2,0(r2)
 800bca4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800bca8:	e0bffe17 	ldw	r2,-8(fp)
 800bcac:	10c00a04 	addi	r3,r2,40
 800bcb0:	e0bfff17 	ldw	r2,-4(fp)
 800bcb4:	10800217 	ldw	r2,8(r2)
 800bcb8:	100b883a 	mov	r5,r2
 800bcbc:	1809883a 	mov	r4,r3
 800bcc0:	800c0980 	call	800c098 <altera_avalon_jtag_uart_close>
}
 800bcc4:	e037883a 	mov	sp,fp
 800bcc8:	dfc00117 	ldw	ra,4(sp)
 800bccc:	df000017 	ldw	fp,0(sp)
 800bcd0:	dec00204 	addi	sp,sp,8
 800bcd4:	f800283a 	ret

0800bcd8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800bcd8:	defffa04 	addi	sp,sp,-24
 800bcdc:	dfc00515 	stw	ra,20(sp)
 800bce0:	df000415 	stw	fp,16(sp)
 800bce4:	df000404 	addi	fp,sp,16
 800bce8:	e13ffd15 	stw	r4,-12(fp)
 800bcec:	e17ffe15 	stw	r5,-8(fp)
 800bcf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800bcf4:	e0bffd17 	ldw	r2,-12(fp)
 800bcf8:	10800017 	ldw	r2,0(r2)
 800bcfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800bd00:	e0bffc17 	ldw	r2,-16(fp)
 800bd04:	10800a04 	addi	r2,r2,40
 800bd08:	e1bfff17 	ldw	r6,-4(fp)
 800bd0c:	e17ffe17 	ldw	r5,-8(fp)
 800bd10:	1009883a 	mov	r4,r2
 800bd14:	800c1000 	call	800c100 <altera_avalon_jtag_uart_ioctl>
}
 800bd18:	e037883a 	mov	sp,fp
 800bd1c:	dfc00117 	ldw	ra,4(sp)
 800bd20:	df000017 	ldw	fp,0(sp)
 800bd24:	dec00204 	addi	sp,sp,8
 800bd28:	f800283a 	ret

0800bd2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800bd2c:	defffa04 	addi	sp,sp,-24
 800bd30:	dfc00515 	stw	ra,20(sp)
 800bd34:	df000415 	stw	fp,16(sp)
 800bd38:	df000404 	addi	fp,sp,16
 800bd3c:	e13ffd15 	stw	r4,-12(fp)
 800bd40:	e17ffe15 	stw	r5,-8(fp)
 800bd44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800bd48:	e0bffd17 	ldw	r2,-12(fp)
 800bd4c:	00c00044 	movi	r3,1
 800bd50:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800bd54:	e0bffd17 	ldw	r2,-12(fp)
 800bd58:	10800017 	ldw	r2,0(r2)
 800bd5c:	10800104 	addi	r2,r2,4
 800bd60:	1007883a 	mov	r3,r2
 800bd64:	e0bffd17 	ldw	r2,-12(fp)
 800bd68:	10800817 	ldw	r2,32(r2)
 800bd6c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800bd70:	e0bffe17 	ldw	r2,-8(fp)
 800bd74:	e0ffff17 	ldw	r3,-4(fp)
 800bd78:	d8000015 	stw	zero,0(sp)
 800bd7c:	e1fffd17 	ldw	r7,-12(fp)
 800bd80:	01820074 	movhi	r6,2049
 800bd84:	31af7b04 	addi	r6,r6,-16916
 800bd88:	180b883a 	mov	r5,r3
 800bd8c:	1009883a 	mov	r4,r2
 800bd90:	800b16c0 	call	800b16c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800bd94:	e0bffd17 	ldw	r2,-12(fp)
 800bd98:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800bd9c:	e0bffd17 	ldw	r2,-12(fp)
 800bda0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800bda4:	d0e79217 	ldw	r3,-25016(gp)
 800bda8:	e1fffd17 	ldw	r7,-12(fp)
 800bdac:	01820074 	movhi	r6,2049
 800bdb0:	31affe04 	addi	r6,r6,-16392
 800bdb4:	180b883a 	mov	r5,r3
 800bdb8:	1009883a 	mov	r4,r2
 800bdbc:	800dd900 	call	800dd90 <alt_alarm_start>
 800bdc0:	1000040e 	bge	r2,zero,800bdd4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800bdc4:	e0fffd17 	ldw	r3,-12(fp)
 800bdc8:	00a00034 	movhi	r2,32768
 800bdcc:	10bfffc4 	addi	r2,r2,-1
 800bdd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800bdd4:	0001883a 	nop
 800bdd8:	e037883a 	mov	sp,fp
 800bddc:	dfc00117 	ldw	ra,4(sp)
 800bde0:	df000017 	ldw	fp,0(sp)
 800bde4:	dec00204 	addi	sp,sp,8
 800bde8:	f800283a 	ret

0800bdec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800bdec:	defff804 	addi	sp,sp,-32
 800bdf0:	df000715 	stw	fp,28(sp)
 800bdf4:	df000704 	addi	fp,sp,28
 800bdf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800bdfc:	e0bfff17 	ldw	r2,-4(fp)
 800be00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800be04:	e0bffb17 	ldw	r2,-20(fp)
 800be08:	10800017 	ldw	r2,0(r2)
 800be0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800be10:	e0bffc17 	ldw	r2,-16(fp)
 800be14:	10800104 	addi	r2,r2,4
 800be18:	10800037 	ldwio	r2,0(r2)
 800be1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800be20:	e0bffd17 	ldw	r2,-12(fp)
 800be24:	1080c00c 	andi	r2,r2,768
 800be28:	10006d26 	beq	r2,zero,800bfe0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800be2c:	e0bffd17 	ldw	r2,-12(fp)
 800be30:	1080400c 	andi	r2,r2,256
 800be34:	10003526 	beq	r2,zero,800bf0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800be38:	00800074 	movhi	r2,1
 800be3c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800be40:	e0bffb17 	ldw	r2,-20(fp)
 800be44:	10800a17 	ldw	r2,40(r2)
 800be48:	10800044 	addi	r2,r2,1
 800be4c:	1081ffcc 	andi	r2,r2,2047
 800be50:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800be54:	e0bffb17 	ldw	r2,-20(fp)
 800be58:	10c00b17 	ldw	r3,44(r2)
 800be5c:	e0bffe17 	ldw	r2,-8(fp)
 800be60:	18801526 	beq	r3,r2,800beb8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800be64:	e0bffc17 	ldw	r2,-16(fp)
 800be68:	10800037 	ldwio	r2,0(r2)
 800be6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800be70:	e0bff917 	ldw	r2,-28(fp)
 800be74:	10a0000c 	andi	r2,r2,32768
 800be78:	10001126 	beq	r2,zero,800bec0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800be7c:	e0bffb17 	ldw	r2,-20(fp)
 800be80:	10800a17 	ldw	r2,40(r2)
 800be84:	e0fff917 	ldw	r3,-28(fp)
 800be88:	1809883a 	mov	r4,r3
 800be8c:	e0fffb17 	ldw	r3,-20(fp)
 800be90:	1885883a 	add	r2,r3,r2
 800be94:	10800e04 	addi	r2,r2,56
 800be98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800be9c:	e0bffb17 	ldw	r2,-20(fp)
 800bea0:	10800a17 	ldw	r2,40(r2)
 800bea4:	10800044 	addi	r2,r2,1
 800bea8:	10c1ffcc 	andi	r3,r2,2047
 800beac:	e0bffb17 	ldw	r2,-20(fp)
 800beb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800beb4:	003fe206 	br	800be40 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800beb8:	0001883a 	nop
 800bebc:	00000106 	br	800bec4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800bec0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800bec4:	e0bff917 	ldw	r2,-28(fp)
 800bec8:	10bfffec 	andhi	r2,r2,65535
 800becc:	10000f26 	beq	r2,zero,800bf0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800bed0:	e0bffb17 	ldw	r2,-20(fp)
 800bed4:	10c00817 	ldw	r3,32(r2)
 800bed8:	00bfff84 	movi	r2,-2
 800bedc:	1886703a 	and	r3,r3,r2
 800bee0:	e0bffb17 	ldw	r2,-20(fp)
 800bee4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800bee8:	e0bffc17 	ldw	r2,-16(fp)
 800beec:	10800104 	addi	r2,r2,4
 800bef0:	1007883a 	mov	r3,r2
 800bef4:	e0bffb17 	ldw	r2,-20(fp)
 800bef8:	10800817 	ldw	r2,32(r2)
 800befc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800bf00:	e0bffc17 	ldw	r2,-16(fp)
 800bf04:	10800104 	addi	r2,r2,4
 800bf08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800bf0c:	e0bffd17 	ldw	r2,-12(fp)
 800bf10:	1080800c 	andi	r2,r2,512
 800bf14:	103fbe26 	beq	r2,zero,800be10 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800bf18:	e0bffd17 	ldw	r2,-12(fp)
 800bf1c:	1004d43a 	srli	r2,r2,16
 800bf20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800bf24:	00001406 	br	800bf78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800bf28:	e0bffc17 	ldw	r2,-16(fp)
 800bf2c:	e0fffb17 	ldw	r3,-20(fp)
 800bf30:	18c00d17 	ldw	r3,52(r3)
 800bf34:	e13ffb17 	ldw	r4,-20(fp)
 800bf38:	20c7883a 	add	r3,r4,r3
 800bf3c:	18c20e04 	addi	r3,r3,2104
 800bf40:	18c00003 	ldbu	r3,0(r3)
 800bf44:	18c03fcc 	andi	r3,r3,255
 800bf48:	18c0201c 	xori	r3,r3,128
 800bf4c:	18ffe004 	addi	r3,r3,-128
 800bf50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800bf54:	e0bffb17 	ldw	r2,-20(fp)
 800bf58:	10800d17 	ldw	r2,52(r2)
 800bf5c:	10800044 	addi	r2,r2,1
 800bf60:	10c1ffcc 	andi	r3,r2,2047
 800bf64:	e0bffb17 	ldw	r2,-20(fp)
 800bf68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800bf6c:	e0bffa17 	ldw	r2,-24(fp)
 800bf70:	10bfffc4 	addi	r2,r2,-1
 800bf74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800bf78:	e0bffa17 	ldw	r2,-24(fp)
 800bf7c:	10000526 	beq	r2,zero,800bf94 <altera_avalon_jtag_uart_irq+0x1a8>
 800bf80:	e0bffb17 	ldw	r2,-20(fp)
 800bf84:	10c00d17 	ldw	r3,52(r2)
 800bf88:	e0bffb17 	ldw	r2,-20(fp)
 800bf8c:	10800c17 	ldw	r2,48(r2)
 800bf90:	18bfe51e 	bne	r3,r2,800bf28 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800bf94:	e0bffa17 	ldw	r2,-24(fp)
 800bf98:	103f9d26 	beq	r2,zero,800be10 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800bf9c:	e0bffb17 	ldw	r2,-20(fp)
 800bfa0:	10c00817 	ldw	r3,32(r2)
 800bfa4:	00bfff44 	movi	r2,-3
 800bfa8:	1886703a 	and	r3,r3,r2
 800bfac:	e0bffb17 	ldw	r2,-20(fp)
 800bfb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800bfb4:	e0bffb17 	ldw	r2,-20(fp)
 800bfb8:	10800017 	ldw	r2,0(r2)
 800bfbc:	10800104 	addi	r2,r2,4
 800bfc0:	1007883a 	mov	r3,r2
 800bfc4:	e0bffb17 	ldw	r2,-20(fp)
 800bfc8:	10800817 	ldw	r2,32(r2)
 800bfcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800bfd0:	e0bffc17 	ldw	r2,-16(fp)
 800bfd4:	10800104 	addi	r2,r2,4
 800bfd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800bfdc:	003f8c06 	br	800be10 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800bfe0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800bfe4:	0001883a 	nop
 800bfe8:	e037883a 	mov	sp,fp
 800bfec:	df000017 	ldw	fp,0(sp)
 800bff0:	dec00104 	addi	sp,sp,4
 800bff4:	f800283a 	ret

0800bff8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800bff8:	defff804 	addi	sp,sp,-32
 800bffc:	df000715 	stw	fp,28(sp)
 800c000:	df000704 	addi	fp,sp,28
 800c004:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c008:	e0bffb17 	ldw	r2,-20(fp)
 800c00c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c010:	e0bff917 	ldw	r2,-28(fp)
 800c014:	10800017 	ldw	r2,0(r2)
 800c018:	10800104 	addi	r2,r2,4
 800c01c:	10800037 	ldwio	r2,0(r2)
 800c020:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c024:	e0bffa17 	ldw	r2,-24(fp)
 800c028:	1081000c 	andi	r2,r2,1024
 800c02c:	10000b26 	beq	r2,zero,800c05c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c030:	e0bff917 	ldw	r2,-28(fp)
 800c034:	10800017 	ldw	r2,0(r2)
 800c038:	10800104 	addi	r2,r2,4
 800c03c:	1007883a 	mov	r3,r2
 800c040:	e0bff917 	ldw	r2,-28(fp)
 800c044:	10800817 	ldw	r2,32(r2)
 800c048:	10810014 	ori	r2,r2,1024
 800c04c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800c050:	e0bff917 	ldw	r2,-28(fp)
 800c054:	10000915 	stw	zero,36(r2)
 800c058:	00000a06 	br	800c084 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c05c:	e0bff917 	ldw	r2,-28(fp)
 800c060:	10c00917 	ldw	r3,36(r2)
 800c064:	00a00034 	movhi	r2,32768
 800c068:	10bfff04 	addi	r2,r2,-4
 800c06c:	10c00536 	bltu	r2,r3,800c084 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800c070:	e0bff917 	ldw	r2,-28(fp)
 800c074:	10800917 	ldw	r2,36(r2)
 800c078:	10c00044 	addi	r3,r2,1
 800c07c:	e0bff917 	ldw	r2,-28(fp)
 800c080:	10c00915 	stw	r3,36(r2)
 800c084:	d0a79217 	ldw	r2,-25016(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c088:	e037883a 	mov	sp,fp
 800c08c:	df000017 	ldw	fp,0(sp)
 800c090:	dec00104 	addi	sp,sp,4
 800c094:	f800283a 	ret

0800c098 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c098:	defffd04 	addi	sp,sp,-12
 800c09c:	df000215 	stw	fp,8(sp)
 800c0a0:	df000204 	addi	fp,sp,8
 800c0a4:	e13ffe15 	stw	r4,-8(fp)
 800c0a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c0ac:	00000506 	br	800c0c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c0b0:	e0bfff17 	ldw	r2,-4(fp)
 800c0b4:	1090000c 	andi	r2,r2,16384
 800c0b8:	10000226 	beq	r2,zero,800c0c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c0bc:	00bffd44 	movi	r2,-11
 800c0c0:	00000b06 	br	800c0f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c0c4:	e0bffe17 	ldw	r2,-8(fp)
 800c0c8:	10c00d17 	ldw	r3,52(r2)
 800c0cc:	e0bffe17 	ldw	r2,-8(fp)
 800c0d0:	10800c17 	ldw	r2,48(r2)
 800c0d4:	18800526 	beq	r3,r2,800c0ec <altera_avalon_jtag_uart_close+0x54>
 800c0d8:	e0bffe17 	ldw	r2,-8(fp)
 800c0dc:	10c00917 	ldw	r3,36(r2)
 800c0e0:	e0bffe17 	ldw	r2,-8(fp)
 800c0e4:	10800117 	ldw	r2,4(r2)
 800c0e8:	18bff136 	bltu	r3,r2,800c0b0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800c0ec:	0005883a 	mov	r2,zero
}
 800c0f0:	e037883a 	mov	sp,fp
 800c0f4:	df000017 	ldw	fp,0(sp)
 800c0f8:	dec00104 	addi	sp,sp,4
 800c0fc:	f800283a 	ret

0800c100 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c100:	defffa04 	addi	sp,sp,-24
 800c104:	df000515 	stw	fp,20(sp)
 800c108:	df000504 	addi	fp,sp,20
 800c10c:	e13ffd15 	stw	r4,-12(fp)
 800c110:	e17ffe15 	stw	r5,-8(fp)
 800c114:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800c118:	00bff9c4 	movi	r2,-25
 800c11c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800c120:	e0bffe17 	ldw	r2,-8(fp)
 800c124:	10da8060 	cmpeqi	r3,r2,27137
 800c128:	1800031e 	bne	r3,zero,800c138 <altera_avalon_jtag_uart_ioctl+0x38>
 800c12c:	109a80a0 	cmpeqi	r2,r2,27138
 800c130:	1000181e 	bne	r2,zero,800c194 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800c134:	00002906 	br	800c1dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800c138:	e0bffd17 	ldw	r2,-12(fp)
 800c13c:	10c00117 	ldw	r3,4(r2)
 800c140:	00a00034 	movhi	r2,32768
 800c144:	10bfffc4 	addi	r2,r2,-1
 800c148:	18802126 	beq	r3,r2,800c1d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800c14c:	e0bfff17 	ldw	r2,-4(fp)
 800c150:	10800017 	ldw	r2,0(r2)
 800c154:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c158:	e0bffc17 	ldw	r2,-16(fp)
 800c15c:	10800090 	cmplti	r2,r2,2
 800c160:	1000061e 	bne	r2,zero,800c17c <altera_avalon_jtag_uart_ioctl+0x7c>
 800c164:	e0fffc17 	ldw	r3,-16(fp)
 800c168:	00a00034 	movhi	r2,32768
 800c16c:	10bfffc4 	addi	r2,r2,-1
 800c170:	18800226 	beq	r3,r2,800c17c <altera_avalon_jtag_uart_ioctl+0x7c>
 800c174:	e0bffc17 	ldw	r2,-16(fp)
 800c178:	00000206 	br	800c184 <altera_avalon_jtag_uart_ioctl+0x84>
 800c17c:	00a00034 	movhi	r2,32768
 800c180:	10bfff84 	addi	r2,r2,-2
 800c184:	e0fffd17 	ldw	r3,-12(fp)
 800c188:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c18c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c190:	00000f06 	br	800c1d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800c194:	e0bffd17 	ldw	r2,-12(fp)
 800c198:	10c00117 	ldw	r3,4(r2)
 800c19c:	00a00034 	movhi	r2,32768
 800c1a0:	10bfffc4 	addi	r2,r2,-1
 800c1a4:	18800c26 	beq	r3,r2,800c1d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c1a8:	e0bffd17 	ldw	r2,-12(fp)
 800c1ac:	10c00917 	ldw	r3,36(r2)
 800c1b0:	e0bffd17 	ldw	r2,-12(fp)
 800c1b4:	10800117 	ldw	r2,4(r2)
 800c1b8:	1885803a 	cmpltu	r2,r3,r2
 800c1bc:	10c03fcc 	andi	r3,r2,255
 800c1c0:	e0bfff17 	ldw	r2,-4(fp)
 800c1c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c1c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c1cc:	00000206 	br	800c1d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800c1d0:	0001883a 	nop
 800c1d4:	00000106 	br	800c1dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800c1d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800c1dc:	e0bffb17 	ldw	r2,-20(fp)
}
 800c1e0:	e037883a 	mov	sp,fp
 800c1e4:	df000017 	ldw	fp,0(sp)
 800c1e8:	dec00104 	addi	sp,sp,4
 800c1ec:	f800283a 	ret

0800c1f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c1f0:	defff304 	addi	sp,sp,-52
 800c1f4:	dfc00c15 	stw	ra,48(sp)
 800c1f8:	df000b15 	stw	fp,44(sp)
 800c1fc:	df000b04 	addi	fp,sp,44
 800c200:	e13ffc15 	stw	r4,-16(fp)
 800c204:	e17ffd15 	stw	r5,-12(fp)
 800c208:	e1bffe15 	stw	r6,-8(fp)
 800c20c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800c210:	e0bffd17 	ldw	r2,-12(fp)
 800c214:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c218:	00004706 	br	800c338 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c21c:	e0bffc17 	ldw	r2,-16(fp)
 800c220:	10800a17 	ldw	r2,40(r2)
 800c224:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800c228:	e0bffc17 	ldw	r2,-16(fp)
 800c22c:	10800b17 	ldw	r2,44(r2)
 800c230:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800c234:	e0fff717 	ldw	r3,-36(fp)
 800c238:	e0bff817 	ldw	r2,-32(fp)
 800c23c:	18800536 	bltu	r3,r2,800c254 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c240:	e0fff717 	ldw	r3,-36(fp)
 800c244:	e0bff817 	ldw	r2,-32(fp)
 800c248:	1885c83a 	sub	r2,r3,r2
 800c24c:	e0bff615 	stw	r2,-40(fp)
 800c250:	00000406 	br	800c264 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c254:	00c20004 	movi	r3,2048
 800c258:	e0bff817 	ldw	r2,-32(fp)
 800c25c:	1885c83a 	sub	r2,r3,r2
 800c260:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c264:	e0bff617 	ldw	r2,-40(fp)
 800c268:	10001e26 	beq	r2,zero,800c2e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c26c:	e0fffe17 	ldw	r3,-8(fp)
 800c270:	e0bff617 	ldw	r2,-40(fp)
 800c274:	1880022e 	bgeu	r3,r2,800c280 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c278:	e0bffe17 	ldw	r2,-8(fp)
 800c27c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c280:	e0bffc17 	ldw	r2,-16(fp)
 800c284:	10c00e04 	addi	r3,r2,56
 800c288:	e0bff817 	ldw	r2,-32(fp)
 800c28c:	1885883a 	add	r2,r3,r2
 800c290:	e1bff617 	ldw	r6,-40(fp)
 800c294:	100b883a 	mov	r5,r2
 800c298:	e13ff517 	ldw	r4,-44(fp)
 800c29c:	80083080 	call	8008308 <memcpy>
      ptr   += n;
 800c2a0:	e0fff517 	ldw	r3,-44(fp)
 800c2a4:	e0bff617 	ldw	r2,-40(fp)
 800c2a8:	1885883a 	add	r2,r3,r2
 800c2ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800c2b0:	e0fffe17 	ldw	r3,-8(fp)
 800c2b4:	e0bff617 	ldw	r2,-40(fp)
 800c2b8:	1885c83a 	sub	r2,r3,r2
 800c2bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c2c0:	e0fff817 	ldw	r3,-32(fp)
 800c2c4:	e0bff617 	ldw	r2,-40(fp)
 800c2c8:	1885883a 	add	r2,r3,r2
 800c2cc:	10c1ffcc 	andi	r3,r2,2047
 800c2d0:	e0bffc17 	ldw	r2,-16(fp)
 800c2d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c2d8:	e0bffe17 	ldw	r2,-8(fp)
 800c2dc:	00bfcf16 	blt	zero,r2,800c21c <altera_avalon_jtag_uart_read+0x2c>
 800c2e0:	00000106 	br	800c2e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800c2e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800c2e8:	e0fff517 	ldw	r3,-44(fp)
 800c2ec:	e0bffd17 	ldw	r2,-12(fp)
 800c2f0:	1880141e 	bne	r3,r2,800c344 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c2f4:	e0bfff17 	ldw	r2,-4(fp)
 800c2f8:	1090000c 	andi	r2,r2,16384
 800c2fc:	1000131e 	bne	r2,zero,800c34c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c300:	0001883a 	nop
 800c304:	e0bffc17 	ldw	r2,-16(fp)
 800c308:	10c00a17 	ldw	r3,40(r2)
 800c30c:	e0bff717 	ldw	r2,-36(fp)
 800c310:	1880051e 	bne	r3,r2,800c328 <altera_avalon_jtag_uart_read+0x138>
 800c314:	e0bffc17 	ldw	r2,-16(fp)
 800c318:	10c00917 	ldw	r3,36(r2)
 800c31c:	e0bffc17 	ldw	r2,-16(fp)
 800c320:	10800117 	ldw	r2,4(r2)
 800c324:	18bff736 	bltu	r3,r2,800c304 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c328:	e0bffc17 	ldw	r2,-16(fp)
 800c32c:	10c00a17 	ldw	r3,40(r2)
 800c330:	e0bff717 	ldw	r2,-36(fp)
 800c334:	18800726 	beq	r3,r2,800c354 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c338:	e0bffe17 	ldw	r2,-8(fp)
 800c33c:	00bfb716 	blt	zero,r2,800c21c <altera_avalon_jtag_uart_read+0x2c>
 800c340:	00000506 	br	800c358 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800c344:	0001883a 	nop
 800c348:	00000306 	br	800c358 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800c34c:	0001883a 	nop
 800c350:	00000106 	br	800c358 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800c354:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800c358:	e0fff517 	ldw	r3,-44(fp)
 800c35c:	e0bffd17 	ldw	r2,-12(fp)
 800c360:	18801826 	beq	r3,r2,800c3c4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c364:	0005303a 	rdctl	r2,status
 800c368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c36c:	e0fffb17 	ldw	r3,-20(fp)
 800c370:	00bfff84 	movi	r2,-2
 800c374:	1884703a 	and	r2,r3,r2
 800c378:	1001703a 	wrctl	status,r2
  
  return context;
 800c37c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800c380:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c384:	e0bffc17 	ldw	r2,-16(fp)
 800c388:	10800817 	ldw	r2,32(r2)
 800c38c:	10c00054 	ori	r3,r2,1
 800c390:	e0bffc17 	ldw	r2,-16(fp)
 800c394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c398:	e0bffc17 	ldw	r2,-16(fp)
 800c39c:	10800017 	ldw	r2,0(r2)
 800c3a0:	10800104 	addi	r2,r2,4
 800c3a4:	1007883a 	mov	r3,r2
 800c3a8:	e0bffc17 	ldw	r2,-16(fp)
 800c3ac:	10800817 	ldw	r2,32(r2)
 800c3b0:	18800035 	stwio	r2,0(r3)
 800c3b4:	e0bffa17 	ldw	r2,-24(fp)
 800c3b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c3bc:	e0bff917 	ldw	r2,-28(fp)
 800c3c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800c3c4:	e0fff517 	ldw	r3,-44(fp)
 800c3c8:	e0bffd17 	ldw	r2,-12(fp)
 800c3cc:	18800426 	beq	r3,r2,800c3e0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800c3d0:	e0fff517 	ldw	r3,-44(fp)
 800c3d4:	e0bffd17 	ldw	r2,-12(fp)
 800c3d8:	1885c83a 	sub	r2,r3,r2
 800c3dc:	00000606 	br	800c3f8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800c3e0:	e0bfff17 	ldw	r2,-4(fp)
 800c3e4:	1090000c 	andi	r2,r2,16384
 800c3e8:	10000226 	beq	r2,zero,800c3f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800c3ec:	00bffd44 	movi	r2,-11
 800c3f0:	00000106 	br	800c3f8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800c3f4:	00bffec4 	movi	r2,-5
}
 800c3f8:	e037883a 	mov	sp,fp
 800c3fc:	dfc00117 	ldw	ra,4(sp)
 800c400:	df000017 	ldw	fp,0(sp)
 800c404:	dec00204 	addi	sp,sp,8
 800c408:	f800283a 	ret

0800c40c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800c40c:	defff304 	addi	sp,sp,-52
 800c410:	dfc00c15 	stw	ra,48(sp)
 800c414:	df000b15 	stw	fp,44(sp)
 800c418:	df000b04 	addi	fp,sp,44
 800c41c:	e13ffc15 	stw	r4,-16(fp)
 800c420:	e17ffd15 	stw	r5,-12(fp)
 800c424:	e1bffe15 	stw	r6,-8(fp)
 800c428:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800c42c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800c430:	e0bffd17 	ldw	r2,-12(fp)
 800c434:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c438:	00003706 	br	800c518 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800c43c:	e0bffc17 	ldw	r2,-16(fp)
 800c440:	10800c17 	ldw	r2,48(r2)
 800c444:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800c448:	e0bffc17 	ldw	r2,-16(fp)
 800c44c:	10800d17 	ldw	r2,52(r2)
 800c450:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800c454:	e0fff917 	ldw	r3,-28(fp)
 800c458:	e0bff517 	ldw	r2,-44(fp)
 800c45c:	1880062e 	bgeu	r3,r2,800c478 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800c460:	e0fff517 	ldw	r3,-44(fp)
 800c464:	e0bff917 	ldw	r2,-28(fp)
 800c468:	1885c83a 	sub	r2,r3,r2
 800c46c:	10bfffc4 	addi	r2,r2,-1
 800c470:	e0bff615 	stw	r2,-40(fp)
 800c474:	00000b06 	br	800c4a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800c478:	e0bff517 	ldw	r2,-44(fp)
 800c47c:	10000526 	beq	r2,zero,800c494 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800c480:	00c20004 	movi	r3,2048
 800c484:	e0bff917 	ldw	r2,-28(fp)
 800c488:	1885c83a 	sub	r2,r3,r2
 800c48c:	e0bff615 	stw	r2,-40(fp)
 800c490:	00000406 	br	800c4a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800c494:	00c1ffc4 	movi	r3,2047
 800c498:	e0bff917 	ldw	r2,-28(fp)
 800c49c:	1885c83a 	sub	r2,r3,r2
 800c4a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c4a4:	e0bff617 	ldw	r2,-40(fp)
 800c4a8:	10001e26 	beq	r2,zero,800c524 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800c4ac:	e0fffe17 	ldw	r3,-8(fp)
 800c4b0:	e0bff617 	ldw	r2,-40(fp)
 800c4b4:	1880022e 	bgeu	r3,r2,800c4c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800c4b8:	e0bffe17 	ldw	r2,-8(fp)
 800c4bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800c4c0:	e0bffc17 	ldw	r2,-16(fp)
 800c4c4:	10c20e04 	addi	r3,r2,2104
 800c4c8:	e0bff917 	ldw	r2,-28(fp)
 800c4cc:	1885883a 	add	r2,r3,r2
 800c4d0:	e1bff617 	ldw	r6,-40(fp)
 800c4d4:	e17ffd17 	ldw	r5,-12(fp)
 800c4d8:	1009883a 	mov	r4,r2
 800c4dc:	80083080 	call	8008308 <memcpy>
      ptr   += n;
 800c4e0:	e0fffd17 	ldw	r3,-12(fp)
 800c4e4:	e0bff617 	ldw	r2,-40(fp)
 800c4e8:	1885883a 	add	r2,r3,r2
 800c4ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800c4f0:	e0fffe17 	ldw	r3,-8(fp)
 800c4f4:	e0bff617 	ldw	r2,-40(fp)
 800c4f8:	1885c83a 	sub	r2,r3,r2
 800c4fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c500:	e0fff917 	ldw	r3,-28(fp)
 800c504:	e0bff617 	ldw	r2,-40(fp)
 800c508:	1885883a 	add	r2,r3,r2
 800c50c:	10c1ffcc 	andi	r3,r2,2047
 800c510:	e0bffc17 	ldw	r2,-16(fp)
 800c514:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c518:	e0bffe17 	ldw	r2,-8(fp)
 800c51c:	00bfc716 	blt	zero,r2,800c43c <altera_avalon_jtag_uart_write+0x30>
 800c520:	00000106 	br	800c528 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800c524:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c528:	0005303a 	rdctl	r2,status
 800c52c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c530:	e0fffb17 	ldw	r3,-20(fp)
 800c534:	00bfff84 	movi	r2,-2
 800c538:	1884703a 	and	r2,r3,r2
 800c53c:	1001703a 	wrctl	status,r2
  
  return context;
 800c540:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800c544:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c548:	e0bffc17 	ldw	r2,-16(fp)
 800c54c:	10800817 	ldw	r2,32(r2)
 800c550:	10c00094 	ori	r3,r2,2
 800c554:	e0bffc17 	ldw	r2,-16(fp)
 800c558:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c55c:	e0bffc17 	ldw	r2,-16(fp)
 800c560:	10800017 	ldw	r2,0(r2)
 800c564:	10800104 	addi	r2,r2,4
 800c568:	1007883a 	mov	r3,r2
 800c56c:	e0bffc17 	ldw	r2,-16(fp)
 800c570:	10800817 	ldw	r2,32(r2)
 800c574:	18800035 	stwio	r2,0(r3)
 800c578:	e0bffa17 	ldw	r2,-24(fp)
 800c57c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c580:	e0bff817 	ldw	r2,-32(fp)
 800c584:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800c588:	e0bffe17 	ldw	r2,-8(fp)
 800c58c:	0080100e 	bge	zero,r2,800c5d0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800c590:	e0bfff17 	ldw	r2,-4(fp)
 800c594:	1090000c 	andi	r2,r2,16384
 800c598:	1000101e 	bne	r2,zero,800c5dc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800c59c:	0001883a 	nop
 800c5a0:	e0bffc17 	ldw	r2,-16(fp)
 800c5a4:	10c00d17 	ldw	r3,52(r2)
 800c5a8:	e0bff517 	ldw	r2,-44(fp)
 800c5ac:	1880051e 	bne	r3,r2,800c5c4 <altera_avalon_jtag_uart_write+0x1b8>
 800c5b0:	e0bffc17 	ldw	r2,-16(fp)
 800c5b4:	10c00917 	ldw	r3,36(r2)
 800c5b8:	e0bffc17 	ldw	r2,-16(fp)
 800c5bc:	10800117 	ldw	r2,4(r2)
 800c5c0:	18bff736 	bltu	r3,r2,800c5a0 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800c5c4:	e0bffc17 	ldw	r2,-16(fp)
 800c5c8:	10800917 	ldw	r2,36(r2)
 800c5cc:	1000051e 	bne	r2,zero,800c5e4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800c5d0:	e0bffe17 	ldw	r2,-8(fp)
 800c5d4:	00bfd016 	blt	zero,r2,800c518 <altera_avalon_jtag_uart_write+0x10c>
 800c5d8:	00000306 	br	800c5e8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800c5dc:	0001883a 	nop
 800c5e0:	00000106 	br	800c5e8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800c5e4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800c5e8:	e0fffd17 	ldw	r3,-12(fp)
 800c5ec:	e0bff717 	ldw	r2,-36(fp)
 800c5f0:	18800426 	beq	r3,r2,800c604 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800c5f4:	e0fffd17 	ldw	r3,-12(fp)
 800c5f8:	e0bff717 	ldw	r2,-36(fp)
 800c5fc:	1885c83a 	sub	r2,r3,r2
 800c600:	00000606 	br	800c61c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800c604:	e0bfff17 	ldw	r2,-4(fp)
 800c608:	1090000c 	andi	r2,r2,16384
 800c60c:	10000226 	beq	r2,zero,800c618 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800c610:	00bffd44 	movi	r2,-11
 800c614:	00000106 	br	800c61c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800c618:	00bffec4 	movi	r2,-5
}
 800c61c:	e037883a 	mov	sp,fp
 800c620:	dfc00117 	ldw	ra,4(sp)
 800c624:	df000017 	ldw	fp,0(sp)
 800c628:	dec00204 	addi	sp,sp,8
 800c62c:	f800283a 	ret

0800c630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c630:	defffe04 	addi	sp,sp,-8
 800c634:	dfc00115 	stw	ra,4(sp)
 800c638:	df000015 	stw	fp,0(sp)
 800c63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c640:	d0a00d17 	ldw	r2,-32716(gp)
 800c644:	10000326 	beq	r2,zero,800c654 <alt_get_errno+0x24>
 800c648:	d0a00d17 	ldw	r2,-32716(gp)
 800c64c:	103ee83a 	callr	r2
 800c650:	00000106 	br	800c658 <alt_get_errno+0x28>
 800c654:	d0a78d04 	addi	r2,gp,-25036
}
 800c658:	e037883a 	mov	sp,fp
 800c65c:	dfc00117 	ldw	ra,4(sp)
 800c660:	df000017 	ldw	fp,0(sp)
 800c664:	dec00204 	addi	sp,sp,8
 800c668:	f800283a 	ret

0800c66c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 800c66c:	defffc04 	addi	sp,sp,-16
 800c670:	df000315 	stw	fp,12(sp)
 800c674:	df000304 	addi	fp,sp,12
 800c678:	e13ffe15 	stw	r4,-8(fp)
 800c67c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 800c680:	e0bffe17 	ldw	r2,-8(fp)
 800c684:	10800317 	ldw	r2,12(r2)
 800c688:	10800037 	ldwio	r2,0(r2)
 800c68c:	1080040c 	andi	r2,r2,16
 800c690:	10000226 	beq	r2,zero,800c69c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 800c694:	00bffc04 	movi	r2,-16
 800c698:	00003906 	br	800c780 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 800c69c:	e0bffe17 	ldw	r2,-8(fp)
 800c6a0:	10800317 	ldw	r2,12(r2)
 800c6a4:	10800404 	addi	r2,r2,16
 800c6a8:	e0fffe17 	ldw	r3,-8(fp)
 800c6ac:	18c00317 	ldw	r3,12(r3)
 800c6b0:	18c00404 	addi	r3,r3,16
 800c6b4:	19000037 	ldwio	r4,0(r3)
 800c6b8:	00fff7c4 	movi	r3,-33
 800c6bc:	20c6703a 	and	r3,r4,r3
 800c6c0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 800c6c4:	e0bffe17 	ldw	r2,-8(fp)
 800c6c8:	10800317 	ldw	r2,12(r2)
 800c6cc:	00c03fc4 	movi	r3,255
 800c6d0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 800c6d4:	e0bffe17 	ldw	r2,-8(fp)
 800c6d8:	10800317 	ldw	r2,12(r2)
 800c6dc:	10800804 	addi	r2,r2,32
 800c6e0:	e0ffff17 	ldw	r3,-4(fp)
 800c6e4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 800c6e8:	e0bffe17 	ldw	r2,-8(fp)
 800c6ec:	10800917 	ldw	r2,36(r2)
 800c6f0:	10001126 	beq	r2,zero,800c738 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800c6f4:	e0bffe17 	ldw	r2,-8(fp)
 800c6f8:	10800317 	ldw	r2,12(r2)
 800c6fc:	10800404 	addi	r2,r2,16
 800c700:	10800037 	ldwio	r2,0(r2)
 800c704:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 800c708:	e0bffe17 	ldw	r2,-8(fp)
 800c70c:	10c00b17 	ldw	r3,44(r2)
 800c710:	e0bffd17 	ldw	r2,-12(fp)
 800c714:	1884b03a 	or	r2,r3,r2
 800c718:	10801814 	ori	r2,r2,96
 800c71c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800c720:	e0bffe17 	ldw	r2,-8(fp)
 800c724:	10800317 	ldw	r2,12(r2)
 800c728:	10800404 	addi	r2,r2,16
 800c72c:	e0fffd17 	ldw	r3,-12(fp)
 800c730:	10c00035 	stwio	r3,0(r2)
 800c734:	00001106 	br	800c77c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800c738:	e0bffe17 	ldw	r2,-8(fp)
 800c73c:	10800317 	ldw	r2,12(r2)
 800c740:	10800404 	addi	r2,r2,16
 800c744:	10800037 	ldwio	r2,0(r2)
 800c748:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 800c74c:	e0bffd17 	ldw	r2,-12(fp)
 800c750:	10801814 	ori	r2,r2,96
 800c754:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 800c758:	e0fffd17 	ldw	r3,-12(fp)
 800c75c:	00bffbc4 	movi	r2,-17
 800c760:	1884703a 	and	r2,r3,r2
 800c764:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800c768:	e0bffe17 	ldw	r2,-8(fp)
 800c76c:	10800317 	ldw	r2,12(r2)
 800c770:	10800404 	addi	r2,r2,16
 800c774:	e0fffd17 	ldw	r3,-12(fp)
 800c778:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 800c77c:	0005883a 	mov	r2,zero
}
 800c780:	e037883a 	mov	sp,fp
 800c784:	df000017 	ldw	fp,0(sp)
 800c788:	dec00104 	addi	sp,sp,4
 800c78c:	f800283a 	ret

0800c790 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 800c790:	defffc04 	addi	sp,sp,-16
 800c794:	df000315 	stw	fp,12(sp)
 800c798:	df000304 	addi	fp,sp,12
 800c79c:	e13ffe15 	stw	r4,-8(fp)
 800c7a0:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 800c7a4:	0001883a 	nop
 800c7a8:	e0bffe17 	ldw	r2,-8(fp)
 800c7ac:	10800317 	ldw	r2,12(r2)
 800c7b0:	10800037 	ldwio	r2,0(r2)
 800c7b4:	1080040c 	andi	r2,r2,16
 800c7b8:	103ffb1e 	bne	r2,zero,800c7a8 <alt_avalon_sgdma_do_sync_transfer+0x18>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 800c7bc:	e0bffe17 	ldw	r2,-8(fp)
 800c7c0:	10800317 	ldw	r2,12(r2)
 800c7c4:	10800404 	addi	r2,r2,16
 800c7c8:	e0fffe17 	ldw	r3,-8(fp)
 800c7cc:	18c00317 	ldw	r3,12(r3)
 800c7d0:	18c00404 	addi	r3,r3,16
 800c7d4:	19000037 	ldwio	r4,0(r3)
 800c7d8:	00fff7c4 	movi	r3,-33
 800c7dc:	20c6703a 	and	r3,r4,r3
 800c7e0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 800c7e4:	e0bffe17 	ldw	r2,-8(fp)
 800c7e8:	10800317 	ldw	r2,12(r2)
 800c7ec:	00c03fc4 	movi	r3,255
 800c7f0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 800c7f4:	e0bffe17 	ldw	r2,-8(fp)
 800c7f8:	10800317 	ldw	r2,12(r2)
 800c7fc:	10800804 	addi	r2,r2,32
 800c800:	e0ffff17 	ldw	r3,-4(fp)
 800c804:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 800c808:	e0bffe17 	ldw	r2,-8(fp)
 800c80c:	10800317 	ldw	r2,12(r2)
 800c810:	10800404 	addi	r2,r2,16
 800c814:	e0fffe17 	ldw	r3,-8(fp)
 800c818:	18c00317 	ldw	r3,12(r3)
 800c81c:	18c00404 	addi	r3,r3,16
 800c820:	18c00037 	ldwio	r3,0(r3)
 800c824:	18c01814 	ori	r3,r3,96
 800c828:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 800c82c:	0001883a 	nop
 800c830:	e0bffe17 	ldw	r2,-8(fp)
 800c834:	10800317 	ldw	r2,12(r2)
 800c838:	10800037 	ldwio	r2,0(r2)
 800c83c:	1080040c 	andi	r2,r2,16
 800c840:	103ffb1e 	bne	r2,zero,800c830 <alt_avalon_sgdma_do_sync_transfer+0xa0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 800c844:	e0bffe17 	ldw	r2,-8(fp)
 800c848:	10800317 	ldw	r2,12(r2)
 800c84c:	10800404 	addi	r2,r2,16
 800c850:	e0fffe17 	ldw	r3,-8(fp)
 800c854:	18c00317 	ldw	r3,12(r3)
 800c858:	18c00404 	addi	r3,r3,16
 800c85c:	19000037 	ldwio	r4,0(r3)
 800c860:	00fff7c4 	movi	r3,-33
 800c864:	20c6703a 	and	r3,r4,r3
 800c868:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 800c86c:	e0bffe17 	ldw	r2,-8(fp)
 800c870:	10800317 	ldw	r2,12(r2)
 800c874:	10800037 	ldwio	r2,0(r2)
 800c878:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 800c87c:	e0bffe17 	ldw	r2,-8(fp)
 800c880:	10800317 	ldw	r2,12(r2)
 800c884:	00c03fc4 	movi	r3,255
 800c888:	10c00035 	stwio	r3,0(r2)

  return status;
 800c88c:	e0bffd03 	ldbu	r2,-12(fp)
}
 800c890:	e037883a 	mov	sp,fp
 800c894:	df000017 	ldw	fp,0(sp)
 800c898:	dec00104 	addi	sp,sp,4
 800c89c:	f800283a 	ret

0800c8a0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 800c8a0:	defff404 	addi	sp,sp,-48
 800c8a4:	dfc00b15 	stw	ra,44(sp)
 800c8a8:	df000a15 	stw	fp,40(sp)
 800c8ac:	df000a04 	addi	fp,sp,40
 800c8b0:	e13ffb15 	stw	r4,-20(fp)
 800c8b4:	e17ffc15 	stw	r5,-16(fp)
 800c8b8:	e1bffd15 	stw	r6,-12(fp)
 800c8bc:	e1fffe15 	stw	r7,-8(fp)
 800c8c0:	e0800217 	ldw	r2,8(fp)
 800c8c4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 800c8c8:	e0bfff0b 	ldhu	r2,-4(fp)
 800c8cc:	d8000415 	stw	zero,16(sp)
 800c8d0:	d8000315 	stw	zero,12(sp)
 800c8d4:	e0c00417 	ldw	r3,16(fp)
 800c8d8:	d8c00215 	stw	r3,8(sp)
 800c8dc:	e0c00317 	ldw	r3,12(fp)
 800c8e0:	d8c00115 	stw	r3,4(sp)
 800c8e4:	d8800015 	stw	r2,0(sp)
 800c8e8:	e1fffe17 	ldw	r7,-8(fp)
 800c8ec:	e1bffd17 	ldw	r6,-12(fp)
 800c8f0:	e17ffc17 	ldw	r5,-16(fp)
 800c8f4:	e13ffb17 	ldw	r4,-20(fp)
 800c8f8:	800c9140 	call	800c914 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 800c8fc:	0001883a 	nop
 800c900:	e037883a 	mov	sp,fp
 800c904:	dfc00117 	ldw	ra,4(sp)
 800c908:	df000017 	ldw	fp,0(sp)
 800c90c:	dec00204 	addi	sp,sp,8
 800c910:	f800283a 	ret

0800c914 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 800c914:	defff204 	addi	sp,sp,-56
 800c918:	dfc00d15 	stw	ra,52(sp)
 800c91c:	df000c15 	stw	fp,48(sp)
 800c920:	df000c04 	addi	fp,sp,48
 800c924:	e13ffb15 	stw	r4,-20(fp)
 800c928:	e17ffc15 	stw	r5,-16(fp)
 800c92c:	e1bffd15 	stw	r6,-12(fp)
 800c930:	e1fffe15 	stw	r7,-8(fp)
 800c934:	e0800217 	ldw	r2,8(fp)
 800c938:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 800c93c:	e0bfff0b 	ldhu	r2,-4(fp)
 800c940:	d8000615 	stw	zero,24(sp)
 800c944:	e0c00617 	ldw	r3,24(fp)
 800c948:	d8c00515 	stw	r3,20(sp)
 800c94c:	e0c00517 	ldw	r3,20(fp)
 800c950:	d8c00415 	stw	r3,16(sp)
 800c954:	e0c00417 	ldw	r3,16(fp)
 800c958:	d8c00315 	stw	r3,12(sp)
 800c95c:	e0c00317 	ldw	r3,12(fp)
 800c960:	d8c00215 	stw	r3,8(sp)
 800c964:	d8000115 	stw	zero,4(sp)
 800c968:	d8800015 	stw	r2,0(sp)
 800c96c:	e1fffe17 	ldw	r7,-8(fp)
 800c970:	e1bffd17 	ldw	r6,-12(fp)
 800c974:	e17ffc17 	ldw	r5,-16(fp)
 800c978:	e13ffb17 	ldw	r4,-20(fp)
 800c97c:	800cea80 	call	800cea8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 800c980:	0001883a 	nop
 800c984:	e037883a 	mov	sp,fp
 800c988:	dfc00117 	ldw	ra,4(sp)
 800c98c:	df000017 	ldw	fp,0(sp)
 800c990:	dec00204 	addi	sp,sp,8
 800c994:	f800283a 	ret

0800c998 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 800c998:	defff804 	addi	sp,sp,-32
 800c99c:	dfc00715 	stw	ra,28(sp)
 800c9a0:	df000615 	stw	fp,24(sp)
 800c9a4:	df000604 	addi	fp,sp,24
 800c9a8:	e13ffc15 	stw	r4,-16(fp)
 800c9ac:	e17ffd15 	stw	r5,-12(fp)
 800c9b0:	e1bffe15 	stw	r6,-8(fp)
 800c9b4:	3805883a 	mov	r2,r7
 800c9b8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 800c9bc:	e0ffff0b 	ldhu	r3,-4(fp)
 800c9c0:	d8000115 	stw	zero,4(sp)
 800c9c4:	e0800217 	ldw	r2,8(fp)
 800c9c8:	d8800015 	stw	r2,0(sp)
 800c9cc:	180f883a 	mov	r7,r3
 800c9d0:	e1bffe17 	ldw	r6,-8(fp)
 800c9d4:	e17ffd17 	ldw	r5,-12(fp)
 800c9d8:	e13ffc17 	ldw	r4,-16(fp)
 800c9dc:	800c9f80 	call	800c9f8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 800c9e0:	0001883a 	nop
 800c9e4:	e037883a 	mov	sp,fp
 800c9e8:	dfc00117 	ldw	ra,4(sp)
 800c9ec:	df000017 	ldw	fp,0(sp)
 800c9f0:	dec00204 	addi	sp,sp,8
 800c9f4:	f800283a 	ret

0800c9f8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 800c9f8:	defff304 	addi	sp,sp,-52
 800c9fc:	dfc00c15 	stw	ra,48(sp)
 800ca00:	df000b15 	stw	fp,44(sp)
 800ca04:	df000b04 	addi	fp,sp,44
 800ca08:	e13ffc15 	stw	r4,-16(fp)
 800ca0c:	e17ffd15 	stw	r5,-12(fp)
 800ca10:	e1bffe15 	stw	r6,-8(fp)
 800ca14:	3805883a 	mov	r2,r7
 800ca18:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 800ca1c:	e0bfff0b 	ldhu	r2,-4(fp)
 800ca20:	d8000615 	stw	zero,24(sp)
 800ca24:	e0c00317 	ldw	r3,12(fp)
 800ca28:	d8c00515 	stw	r3,20(sp)
 800ca2c:	d8000415 	stw	zero,16(sp)
 800ca30:	e0c00217 	ldw	r3,8(fp)
 800ca34:	d8c00315 	stw	r3,12(sp)
 800ca38:	d8000215 	stw	zero,8(sp)
 800ca3c:	d8000115 	stw	zero,4(sp)
 800ca40:	d8800015 	stw	r2,0(sp)
 800ca44:	e1fffe17 	ldw	r7,-8(fp)
 800ca48:	000d883a 	mov	r6,zero
 800ca4c:	e17ffd17 	ldw	r5,-12(fp)
 800ca50:	e13ffc17 	ldw	r4,-16(fp)
 800ca54:	800cea80 	call	800cea8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 800ca58:	0001883a 	nop
 800ca5c:	e037883a 	mov	sp,fp
 800ca60:	dfc00117 	ldw	ra,4(sp)
 800ca64:	df000017 	ldw	fp,0(sp)
 800ca68:	dec00204 	addi	sp,sp,8
 800ca6c:	f800283a 	ret

0800ca70 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 800ca70:	defff404 	addi	sp,sp,-48
 800ca74:	dfc00b15 	stw	ra,44(sp)
 800ca78:	df000a15 	stw	fp,40(sp)
 800ca7c:	df000a04 	addi	fp,sp,40
 800ca80:	e13ffb15 	stw	r4,-20(fp)
 800ca84:	e17ffc15 	stw	r5,-16(fp)
 800ca88:	e1bffd15 	stw	r6,-12(fp)
 800ca8c:	3807883a 	mov	r3,r7
 800ca90:	e0800517 	ldw	r2,20(fp)
 800ca94:	e0fffe0d 	sth	r3,-8(fp)
 800ca98:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 800ca9c:	e0fffe0b 	ldhu	r3,-8(fp)
 800caa0:	e0bfff03 	ldbu	r2,-4(fp)
 800caa4:	d8800415 	stw	r2,16(sp)
 800caa8:	d8000315 	stw	zero,12(sp)
 800caac:	e0800417 	ldw	r2,16(fp)
 800cab0:	d8800215 	stw	r2,8(sp)
 800cab4:	e0800317 	ldw	r2,12(fp)
 800cab8:	d8800115 	stw	r2,4(sp)
 800cabc:	e0800217 	ldw	r2,8(fp)
 800cac0:	d8800015 	stw	r2,0(sp)
 800cac4:	180f883a 	mov	r7,r3
 800cac8:	e1bffd17 	ldw	r6,-12(fp)
 800cacc:	e17ffc17 	ldw	r5,-16(fp)
 800cad0:	e13ffb17 	ldw	r4,-20(fp)
 800cad4:	800caf00 	call	800caf0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 800cad8:	0001883a 	nop
 800cadc:	e037883a 	mov	sp,fp
 800cae0:	dfc00117 	ldw	ra,4(sp)
 800cae4:	df000017 	ldw	fp,0(sp)
 800cae8:	dec00204 	addi	sp,sp,8
 800caec:	f800283a 	ret

0800caf0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 800caf0:	defff204 	addi	sp,sp,-56
 800caf4:	dfc00d15 	stw	ra,52(sp)
 800caf8:	df000c15 	stw	fp,48(sp)
 800cafc:	df000c04 	addi	fp,sp,48
 800cb00:	e13ffb15 	stw	r4,-20(fp)
 800cb04:	e17ffc15 	stw	r5,-16(fp)
 800cb08:	e1bffd15 	stw	r6,-12(fp)
 800cb0c:	3807883a 	mov	r3,r7
 800cb10:	e0800617 	ldw	r2,24(fp)
 800cb14:	e0fffe0d 	sth	r3,-8(fp)
 800cb18:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 800cb1c:	e0bffe0b 	ldhu	r2,-8(fp)
 800cb20:	e0ffff03 	ldbu	r3,-4(fp)
 800cb24:	d8c00615 	stw	r3,24(sp)
 800cb28:	d8000515 	stw	zero,20(sp)
 800cb2c:	e0c00517 	ldw	r3,20(fp)
 800cb30:	d8c00415 	stw	r3,16(sp)
 800cb34:	e0c00317 	ldw	r3,12(fp)
 800cb38:	d8c00315 	stw	r3,12(sp)
 800cb3c:	e0c00217 	ldw	r3,8(fp)
 800cb40:	d8c00215 	stw	r3,8(sp)
 800cb44:	e0c00417 	ldw	r3,16(fp)
 800cb48:	d8c00115 	stw	r3,4(sp)
 800cb4c:	d8800015 	stw	r2,0(sp)
 800cb50:	000f883a 	mov	r7,zero
 800cb54:	e1bffd17 	ldw	r6,-12(fp)
 800cb58:	e17ffc17 	ldw	r5,-16(fp)
 800cb5c:	e13ffb17 	ldw	r4,-20(fp)
 800cb60:	800cea80 	call	800cea8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 800cb64:	0001883a 	nop
 800cb68:	e037883a 	mov	sp,fp
 800cb6c:	dfc00117 	ldw	ra,4(sp)
 800cb70:	df000017 	ldw	fp,0(sp)
 800cb74:	dec00204 	addi	sp,sp,8
 800cb78:	f800283a 	ret

0800cb7c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 800cb7c:	defffb04 	addi	sp,sp,-20
 800cb80:	df000415 	stw	fp,16(sp)
 800cb84:	df000404 	addi	fp,sp,16
 800cb88:	e13ffc15 	stw	r4,-16(fp)
 800cb8c:	e17ffd15 	stw	r5,-12(fp)
 800cb90:	e1bffe15 	stw	r6,-8(fp)
 800cb94:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 800cb98:	e0bffc17 	ldw	r2,-16(fp)
 800cb9c:	e0fffd17 	ldw	r3,-12(fp)
 800cba0:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 800cba4:	e0bffc17 	ldw	r2,-16(fp)
 800cba8:	e0ffff17 	ldw	r3,-4(fp)
 800cbac:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 800cbb0:	e0bffc17 	ldw	r2,-16(fp)
 800cbb4:	e0fffe17 	ldw	r3,-8(fp)
 800cbb8:	10c00b15 	stw	r3,44(r2)
}
 800cbbc:	0001883a 	nop
 800cbc0:	e037883a 	mov	sp,fp
 800cbc4:	df000017 	ldw	fp,0(sp)
 800cbc8:	dec00104 	addi	sp,sp,4
 800cbcc:	f800283a 	ret

0800cbd0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 800cbd0:	defffd04 	addi	sp,sp,-12
 800cbd4:	df000215 	stw	fp,8(sp)
 800cbd8:	df000204 	addi	fp,sp,8
 800cbdc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800cbe0:	e0bfff17 	ldw	r2,-4(fp)
 800cbe4:	10800317 	ldw	r2,12(r2)
 800cbe8:	10800404 	addi	r2,r2,16
 800cbec:	10800037 	ldwio	r2,0(r2)
 800cbf0:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 800cbf4:	e0bffe17 	ldw	r2,-8(fp)
 800cbf8:	10800814 	ori	r2,r2,32
 800cbfc:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800cc00:	e0bfff17 	ldw	r2,-4(fp)
 800cc04:	10800317 	ldw	r2,12(r2)
 800cc08:	10800404 	addi	r2,r2,16
 800cc0c:	e0fffe17 	ldw	r3,-8(fp)
 800cc10:	10c00035 	stwio	r3,0(r2)
}
 800cc14:	0001883a 	nop
 800cc18:	e037883a 	mov	sp,fp
 800cc1c:	df000017 	ldw	fp,0(sp)
 800cc20:	dec00104 	addi	sp,sp,4
 800cc24:	f800283a 	ret

0800cc28 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 800cc28:	defffd04 	addi	sp,sp,-12
 800cc2c:	df000215 	stw	fp,8(sp)
 800cc30:	df000204 	addi	fp,sp,8
 800cc34:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800cc38:	e0bfff17 	ldw	r2,-4(fp)
 800cc3c:	10800317 	ldw	r2,12(r2)
 800cc40:	10800404 	addi	r2,r2,16
 800cc44:	10800037 	ldwio	r2,0(r2)
 800cc48:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 800cc4c:	e0fffe17 	ldw	r3,-8(fp)
 800cc50:	00bff7c4 	movi	r2,-33
 800cc54:	1884703a 	and	r2,r3,r2
 800cc58:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800cc5c:	e0bfff17 	ldw	r2,-4(fp)
 800cc60:	10800317 	ldw	r2,12(r2)
 800cc64:	10800404 	addi	r2,r2,16
 800cc68:	e0fffe17 	ldw	r3,-8(fp)
 800cc6c:	10c00035 	stwio	r3,0(r2)
}
 800cc70:	0001883a 	nop
 800cc74:	e037883a 	mov	sp,fp
 800cc78:	df000017 	ldw	fp,0(sp)
 800cc7c:	dec00104 	addi	sp,sp,4
 800cc80:	f800283a 	ret

0800cc84 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 800cc84:	defffe04 	addi	sp,sp,-8
 800cc88:	df000115 	stw	fp,4(sp)
 800cc8c:	df000104 	addi	fp,sp,4
 800cc90:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 800cc94:	e0bfff17 	ldw	r2,-4(fp)
 800cc98:	10800784 	addi	r2,r2,30
 800cc9c:	10800023 	ldbuio	r2,0(r2)
 800cca0:	10803fcc 	andi	r2,r2,255
 800cca4:	10801fcc 	andi	r2,r2,127
 800cca8:	10000226 	beq	r2,zero,800ccb4 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 800ccac:	00bffec4 	movi	r2,-5
 800ccb0:	00000906 	br	800ccd8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 800ccb4:	e0bfff17 	ldw	r2,-4(fp)
 800ccb8:	108007c4 	addi	r2,r2,31
 800ccbc:	10800023 	ldbuio	r2,0(r2)
 800ccc0:	10803fcc 	andi	r2,r2,255
 800ccc4:	1080200c 	andi	r2,r2,128
 800ccc8:	10000226 	beq	r2,zero,800ccd4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 800cccc:	00bfe244 	movi	r2,-119
 800ccd0:	00000106 	br	800ccd8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 800ccd4:	0005883a 	mov	r2,zero
}
 800ccd8:	e037883a 	mov	sp,fp
 800ccdc:	df000017 	ldw	fp,0(sp)
 800cce0:	dec00104 	addi	sp,sp,4
 800cce4:	f800283a 	ret

0800cce8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 800cce8:	defffc04 	addi	sp,sp,-16
 800ccec:	dfc00315 	stw	ra,12(sp)
 800ccf0:	df000215 	stw	fp,8(sp)
 800ccf4:	df000204 	addi	fp,sp,8
 800ccf8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 800ccfc:	d1601004 	addi	r5,gp,-32704
 800cd00:	e13fff17 	ldw	r4,-4(fp)
 800cd04:	800e0a40 	call	800e0a4 <alt_find_dev>
 800cd08:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 800cd0c:	e0bffe17 	ldw	r2,-8(fp)
 800cd10:	1000041e 	bne	r2,zero,800cd24 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 800cd14:	800c6300 	call	800c630 <alt_get_errno>
 800cd18:	1007883a 	mov	r3,r2
 800cd1c:	008004c4 	movi	r2,19
 800cd20:	18800015 	stw	r2,0(r3)
  }

  return dev;
 800cd24:	e0bffe17 	ldw	r2,-8(fp)
}
 800cd28:	e037883a 	mov	sp,fp
 800cd2c:	dfc00117 	ldw	ra,4(sp)
 800cd30:	df000017 	ldw	fp,0(sp)
 800cd34:	dec00204 	addi	sp,sp,8
 800cd38:	f800283a 	ret

0800cd3c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 800cd3c:	defff104 	addi	sp,sp,-60
 800cd40:	dfc00e15 	stw	ra,56(sp)
 800cd44:	df000d15 	stw	fp,52(sp)
 800cd48:	df000d04 	addi	fp,sp,52
 800cd4c:	e13ffa15 	stw	r4,-24(fp)
 800cd50:	e17ffb15 	stw	r5,-20(fp)
 800cd54:	e1bffc15 	stw	r6,-16(fp)
 800cd58:	e1fffd15 	stw	r7,-12(fp)
 800cd5c:	e0c00217 	ldw	r3,8(fp)
 800cd60:	e0800617 	ldw	r2,24(fp)
 800cd64:	e0fffe0d 	sth	r3,-8(fp)
 800cd68:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 800cd6c:	e0bffe0b 	ldhu	r2,-8(fp)
 800cd70:	e0ffff03 	ldbu	r3,-4(fp)
 800cd74:	d8c00615 	stw	r3,24(sp)
 800cd78:	d8000515 	stw	zero,20(sp)
 800cd7c:	d8000415 	stw	zero,16(sp)
 800cd80:	e0c00517 	ldw	r3,20(fp)
 800cd84:	d8c00315 	stw	r3,12(sp)
 800cd88:	e0c00417 	ldw	r3,16(fp)
 800cd8c:	d8c00215 	stw	r3,8(sp)
 800cd90:	e0c00317 	ldw	r3,12(fp)
 800cd94:	d8c00115 	stw	r3,4(sp)
 800cd98:	d8800015 	stw	r2,0(sp)
 800cd9c:	e1fffd17 	ldw	r7,-12(fp)
 800cda0:	e1bffc17 	ldw	r6,-16(fp)
 800cda4:	e17ffb17 	ldw	r5,-20(fp)
 800cda8:	e13ffa17 	ldw	r4,-24(fp)
 800cdac:	800cea80 	call	800cea8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 800cdb0:	0001883a 	nop
 800cdb4:	e037883a 	mov	sp,fp
 800cdb8:	dfc00117 	ldw	ra,4(sp)
 800cdbc:	df000017 	ldw	fp,0(sp)
 800cdc0:	dec00204 	addi	sp,sp,8
 800cdc4:	f800283a 	ret

0800cdc8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 800cdc8:	defffc04 	addi	sp,sp,-16
 800cdcc:	df000315 	stw	fp,12(sp)
 800cdd0:	df000304 	addi	fp,sp,12
 800cdd4:	e13ffe15 	stw	r4,-8(fp)
 800cdd8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800cddc:	e0bffe17 	ldw	r2,-8(fp)
 800cde0:	10800317 	ldw	r2,12(r2)
 800cde4:	10800404 	addi	r2,r2,16
 800cde8:	10800037 	ldwio	r2,0(r2)
 800cdec:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 800cdf0:	e0fffd17 	ldw	r3,-12(fp)
 800cdf4:	00a00434 	movhi	r2,32784
 800cdf8:	10bfffc4 	addi	r2,r2,-1
 800cdfc:	1884703a 	and	r2,r3,r2
 800ce00:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 800ce04:	e0bfff17 	ldw	r2,-4(fp)
 800ce08:	1004953a 	slli	r2,r2,20
 800ce0c:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 800ce10:	e0bffd17 	ldw	r2,-12(fp)
 800ce14:	1884b03a 	or	r2,r3,r2
 800ce18:	10800134 	orhi	r2,r2,4
 800ce1c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800ce20:	e0bffe17 	ldw	r2,-8(fp)
 800ce24:	10800317 	ldw	r2,12(r2)
 800ce28:	10800404 	addi	r2,r2,16
 800ce2c:	e0fffd17 	ldw	r3,-12(fp)
 800ce30:	10c00035 	stwio	r3,0(r2)
  
  return;
 800ce34:	0001883a 	nop
}
 800ce38:	e037883a 	mov	sp,fp
 800ce3c:	df000017 	ldw	fp,0(sp)
 800ce40:	dec00104 	addi	sp,sp,4
 800ce44:	f800283a 	ret

0800ce48 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 800ce48:	defffd04 	addi	sp,sp,-12
 800ce4c:	df000215 	stw	fp,8(sp)
 800ce50:	df000204 	addi	fp,sp,8
 800ce54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800ce58:	e0bfff17 	ldw	r2,-4(fp)
 800ce5c:	10800317 	ldw	r2,12(r2)
 800ce60:	10800404 	addi	r2,r2,16
 800ce64:	10800037 	ldwio	r2,0(r2)
 800ce68:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 800ce6c:	e0fffe17 	ldw	r3,-8(fp)
 800ce70:	00bfff34 	movhi	r2,65532
 800ce74:	10bfffc4 	addi	r2,r2,-1
 800ce78:	1884703a 	and	r2,r3,r2
 800ce7c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800ce80:	e0bfff17 	ldw	r2,-4(fp)
 800ce84:	10800317 	ldw	r2,12(r2)
 800ce88:	10800404 	addi	r2,r2,16
 800ce8c:	e0fffe17 	ldw	r3,-8(fp)
 800ce90:	10c00035 	stwio	r3,0(r2)
  
  return;
 800ce94:	0001883a 	nop
}
 800ce98:	e037883a 	mov	sp,fp
 800ce9c:	df000017 	ldw	fp,0(sp)
 800cea0:	dec00104 	addi	sp,sp,4
 800cea4:	f800283a 	ret

0800cea8 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 800cea8:	defff804 	addi	sp,sp,-32
 800ceac:	dfc00715 	stw	ra,28(sp)
 800ceb0:	df000615 	stw	fp,24(sp)
 800ceb4:	df000604 	addi	fp,sp,24
 800ceb8:	e13ffa15 	stw	r4,-24(fp)
 800cebc:	e17ffb15 	stw	r5,-20(fp)
 800cec0:	e1bffc15 	stw	r6,-16(fp)
 800cec4:	e1fffd15 	stw	r7,-12(fp)
 800cec8:	e0c00217 	ldw	r3,8(fp)
 800cecc:	e0800817 	ldw	r2,32(fp)
 800ced0:	e0fffe0d 	sth	r3,-8(fp)
 800ced4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 800ced8:	e0bffb17 	ldw	r2,-20(fp)
 800cedc:	108007c4 	addi	r2,r2,31
 800cee0:	e0fffb17 	ldw	r3,-20(fp)
 800cee4:	18c007c3 	ldbu	r3,31(r3)
 800cee8:	19003fcc 	andi	r4,r3,255
 800ceec:	00ffdfc4 	movi	r3,-129
 800cef0:	20c6703a 	and	r3,r4,r3
 800cef4:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 800cef8:	e0bffa17 	ldw	r2,-24(fp)
 800cefc:	e0fffc17 	ldw	r3,-16(fp)
 800cf00:	19403fcc 	andi	r5,r3,255
 800cf04:	10c00003 	ldbu	r3,0(r2)
 800cf08:	1806703a 	and	r3,r3,zero
 800cf0c:	1809883a 	mov	r4,r3
 800cf10:	2807883a 	mov	r3,r5
 800cf14:	20c6b03a 	or	r3,r4,r3
 800cf18:	10c00005 	stb	r3,0(r2)
 800cf1c:	e0fffc17 	ldw	r3,-16(fp)
 800cf20:	1806d23a 	srli	r3,r3,8
 800cf24:	19403fcc 	andi	r5,r3,255
 800cf28:	10c00043 	ldbu	r3,1(r2)
 800cf2c:	1806703a 	and	r3,r3,zero
 800cf30:	1809883a 	mov	r4,r3
 800cf34:	2807883a 	mov	r3,r5
 800cf38:	20c6b03a 	or	r3,r4,r3
 800cf3c:	10c00045 	stb	r3,1(r2)
 800cf40:	e0fffc17 	ldw	r3,-16(fp)
 800cf44:	1806d43a 	srli	r3,r3,16
 800cf48:	19403fcc 	andi	r5,r3,255
 800cf4c:	10c00083 	ldbu	r3,2(r2)
 800cf50:	1806703a 	and	r3,r3,zero
 800cf54:	1809883a 	mov	r4,r3
 800cf58:	2807883a 	mov	r3,r5
 800cf5c:	20c6b03a 	or	r3,r4,r3
 800cf60:	10c00085 	stb	r3,2(r2)
 800cf64:	e0fffc17 	ldw	r3,-16(fp)
 800cf68:	180ad63a 	srli	r5,r3,24
 800cf6c:	10c000c3 	ldbu	r3,3(r2)
 800cf70:	1806703a 	and	r3,r3,zero
 800cf74:	1809883a 	mov	r4,r3
 800cf78:	2807883a 	mov	r3,r5
 800cf7c:	20c6b03a 	or	r3,r4,r3
 800cf80:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 800cf84:	e0bffa17 	ldw	r2,-24(fp)
 800cf88:	e0fffd17 	ldw	r3,-12(fp)
 800cf8c:	19403fcc 	andi	r5,r3,255
 800cf90:	10c00203 	ldbu	r3,8(r2)
 800cf94:	1806703a 	and	r3,r3,zero
 800cf98:	1809883a 	mov	r4,r3
 800cf9c:	2807883a 	mov	r3,r5
 800cfa0:	20c6b03a 	or	r3,r4,r3
 800cfa4:	10c00205 	stb	r3,8(r2)
 800cfa8:	e0fffd17 	ldw	r3,-12(fp)
 800cfac:	1806d23a 	srli	r3,r3,8
 800cfb0:	19403fcc 	andi	r5,r3,255
 800cfb4:	10c00243 	ldbu	r3,9(r2)
 800cfb8:	1806703a 	and	r3,r3,zero
 800cfbc:	1809883a 	mov	r4,r3
 800cfc0:	2807883a 	mov	r3,r5
 800cfc4:	20c6b03a 	or	r3,r4,r3
 800cfc8:	10c00245 	stb	r3,9(r2)
 800cfcc:	e0fffd17 	ldw	r3,-12(fp)
 800cfd0:	1806d43a 	srli	r3,r3,16
 800cfd4:	19403fcc 	andi	r5,r3,255
 800cfd8:	10c00283 	ldbu	r3,10(r2)
 800cfdc:	1806703a 	and	r3,r3,zero
 800cfe0:	1809883a 	mov	r4,r3
 800cfe4:	2807883a 	mov	r3,r5
 800cfe8:	20c6b03a 	or	r3,r4,r3
 800cfec:	10c00285 	stb	r3,10(r2)
 800cff0:	e0fffd17 	ldw	r3,-12(fp)
 800cff4:	180ad63a 	srli	r5,r3,24
 800cff8:	10c002c3 	ldbu	r3,11(r2)
 800cffc:	1806703a 	and	r3,r3,zero
 800d000:	1809883a 	mov	r4,r3
 800d004:	2807883a 	mov	r3,r5
 800d008:	20c6b03a 	or	r3,r4,r3
 800d00c:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 800d010:	e0bffa17 	ldw	r2,-24(fp)
 800d014:	e0fffb17 	ldw	r3,-20(fp)
 800d018:	19403fcc 	andi	r5,r3,255
 800d01c:	10c00403 	ldbu	r3,16(r2)
 800d020:	1806703a 	and	r3,r3,zero
 800d024:	1809883a 	mov	r4,r3
 800d028:	2807883a 	mov	r3,r5
 800d02c:	20c6b03a 	or	r3,r4,r3
 800d030:	10c00405 	stb	r3,16(r2)
 800d034:	e0fffb17 	ldw	r3,-20(fp)
 800d038:	1806d23a 	srli	r3,r3,8
 800d03c:	19403fcc 	andi	r5,r3,255
 800d040:	10c00443 	ldbu	r3,17(r2)
 800d044:	1806703a 	and	r3,r3,zero
 800d048:	1809883a 	mov	r4,r3
 800d04c:	2807883a 	mov	r3,r5
 800d050:	20c6b03a 	or	r3,r4,r3
 800d054:	10c00445 	stb	r3,17(r2)
 800d058:	e0fffb17 	ldw	r3,-20(fp)
 800d05c:	1806d43a 	srli	r3,r3,16
 800d060:	19403fcc 	andi	r5,r3,255
 800d064:	10c00483 	ldbu	r3,18(r2)
 800d068:	1806703a 	and	r3,r3,zero
 800d06c:	1809883a 	mov	r4,r3
 800d070:	2807883a 	mov	r3,r5
 800d074:	20c6b03a 	or	r3,r4,r3
 800d078:	10c00485 	stb	r3,18(r2)
 800d07c:	e0fffb17 	ldw	r3,-20(fp)
 800d080:	180ad63a 	srli	r5,r3,24
 800d084:	10c004c3 	ldbu	r3,19(r2)
 800d088:	1806703a 	and	r3,r3,zero
 800d08c:	1809883a 	mov	r4,r3
 800d090:	2807883a 	mov	r3,r5
 800d094:	20c6b03a 	or	r3,r4,r3
 800d098:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 800d09c:	e0bffa17 	ldw	r2,-24(fp)
 800d0a0:	10c00103 	ldbu	r3,4(r2)
 800d0a4:	1806703a 	and	r3,r3,zero
 800d0a8:	10c00105 	stb	r3,4(r2)
 800d0ac:	10c00143 	ldbu	r3,5(r2)
 800d0b0:	1806703a 	and	r3,r3,zero
 800d0b4:	10c00145 	stb	r3,5(r2)
 800d0b8:	10c00183 	ldbu	r3,6(r2)
 800d0bc:	1806703a 	and	r3,r3,zero
 800d0c0:	10c00185 	stb	r3,6(r2)
 800d0c4:	10c001c3 	ldbu	r3,7(r2)
 800d0c8:	1806703a 	and	r3,r3,zero
 800d0cc:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 800d0d0:	e0bffa17 	ldw	r2,-24(fp)
 800d0d4:	10c00303 	ldbu	r3,12(r2)
 800d0d8:	1806703a 	and	r3,r3,zero
 800d0dc:	10c00305 	stb	r3,12(r2)
 800d0e0:	10c00343 	ldbu	r3,13(r2)
 800d0e4:	1806703a 	and	r3,r3,zero
 800d0e8:	10c00345 	stb	r3,13(r2)
 800d0ec:	10c00383 	ldbu	r3,14(r2)
 800d0f0:	1806703a 	and	r3,r3,zero
 800d0f4:	10c00385 	stb	r3,14(r2)
 800d0f8:	10c003c3 	ldbu	r3,15(r2)
 800d0fc:	1806703a 	and	r3,r3,zero
 800d100:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 800d104:	e0bffa17 	ldw	r2,-24(fp)
 800d108:	10c00503 	ldbu	r3,20(r2)
 800d10c:	1806703a 	and	r3,r3,zero
 800d110:	10c00505 	stb	r3,20(r2)
 800d114:	10c00543 	ldbu	r3,21(r2)
 800d118:	1806703a 	and	r3,r3,zero
 800d11c:	10c00545 	stb	r3,21(r2)
 800d120:	10c00583 	ldbu	r3,22(r2)
 800d124:	1806703a 	and	r3,r3,zero
 800d128:	10c00585 	stb	r3,22(r2)
 800d12c:	10c005c3 	ldbu	r3,23(r2)
 800d130:	1806703a 	and	r3,r3,zero
 800d134:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 800d138:	e0bffa17 	ldw	r2,-24(fp)
 800d13c:	e0fffe17 	ldw	r3,-8(fp)
 800d140:	19403fcc 	andi	r5,r3,255
 800d144:	10c00603 	ldbu	r3,24(r2)
 800d148:	1806703a 	and	r3,r3,zero
 800d14c:	1809883a 	mov	r4,r3
 800d150:	2807883a 	mov	r3,r5
 800d154:	20c6b03a 	or	r3,r4,r3
 800d158:	10c00605 	stb	r3,24(r2)
 800d15c:	e0fffe17 	ldw	r3,-8(fp)
 800d160:	1806d23a 	srli	r3,r3,8
 800d164:	19403fcc 	andi	r5,r3,255
 800d168:	10c00643 	ldbu	r3,25(r2)
 800d16c:	1806703a 	and	r3,r3,zero
 800d170:	1809883a 	mov	r4,r3
 800d174:	2807883a 	mov	r3,r5
 800d178:	20c6b03a 	or	r3,r4,r3
 800d17c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 800d180:	e0bffa17 	ldw	r2,-24(fp)
 800d184:	10c00703 	ldbu	r3,28(r2)
 800d188:	1806703a 	and	r3,r3,zero
 800d18c:	10c00705 	stb	r3,28(r2)
 800d190:	10c00743 	ldbu	r3,29(r2)
 800d194:	1806703a 	and	r3,r3,zero
 800d198:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 800d19c:	e0bffa17 	ldw	r2,-24(fp)
 800d1a0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 800d1a4:	e0800617 	ldw	r2,24(fp)
 800d1a8:	1007883a 	mov	r3,r2
 800d1ac:	e0bffa17 	ldw	r2,-24(fp)
 800d1b0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 800d1b4:	e0800717 	ldw	r2,28(fp)
 800d1b8:	1007883a 	mov	r3,r2
 800d1bc:	e0bffa17 	ldw	r2,-24(fp)
 800d1c0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 800d1c4:	e0800317 	ldw	r2,12(fp)
 800d1c8:	10000226 	beq	r2,zero,800d1d4 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 800d1cc:	00bfe044 	movi	r2,-127
 800d1d0:	00000106 	br	800d1d8 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 800d1d4:	00bfe004 	movi	r2,-128
 800d1d8:	e0c00417 	ldw	r3,16(fp)
 800d1dc:	18000226 	beq	r3,zero,800d1e8 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 800d1e0:	00c00084 	movi	r3,2
 800d1e4:	00000106 	br	800d1ec <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 800d1e8:	0007883a 	mov	r3,zero
 800d1ec:	10c4b03a 	or	r2,r2,r3
 800d1f0:	1007883a 	mov	r3,r2
 800d1f4:	e0800517 	ldw	r2,20(fp)
 800d1f8:	10000226 	beq	r2,zero,800d204 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 800d1fc:	00800104 	movi	r2,4
 800d200:	00000106 	br	800d208 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 800d204:	0005883a 	mov	r2,zero
 800d208:	1884b03a 	or	r2,r3,r2
 800d20c:	1007883a 	mov	r3,r2
 800d210:	e0bfff03 	ldbu	r2,-4(fp)
 800d214:	10000426 	beq	r2,zero,800d228 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 800d218:	e0bfff03 	ldbu	r2,-4(fp)
 800d21c:	108003cc 	andi	r2,r2,15
 800d220:	100490fa 	slli	r2,r2,3
 800d224:	00000106 	br	800d22c <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 800d228:	0005883a 	mov	r2,zero
 800d22c:	1884b03a 	or	r2,r3,r2
 800d230:	1007883a 	mov	r3,r2
 800d234:	e0bffa17 	ldw	r2,-24(fp)
 800d238:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 800d23c:	01400804 	movi	r5,32
 800d240:	e13ffa17 	ldw	r4,-24(fp)
 800d244:	800debc0 	call	800debc <alt_dcache_flush>
}
 800d248:	0001883a 	nop
 800d24c:	e037883a 	mov	sp,fp
 800d250:	dfc00117 	ldw	ra,4(sp)
 800d254:	df000017 	ldw	fp,0(sp)
 800d258:	dec00204 	addi	sp,sp,8
 800d25c:	f800283a 	ret

0800d260 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 800d260:	defff904 	addi	sp,sp,-28
 800d264:	dfc00615 	stw	ra,24(sp)
 800d268:	df000515 	stw	fp,20(sp)
 800d26c:	df000504 	addi	fp,sp,20
 800d270:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 800d274:	e0bfff17 	ldw	r2,-4(fp)
 800d278:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 800d27c:	e0bffb17 	ldw	r2,-20(fp)
 800d280:	10800317 	ldw	r2,12(r2)
 800d284:	10800404 	addi	r2,r2,16
 800d288:	e0fffb17 	ldw	r3,-20(fp)
 800d28c:	18c00317 	ldw	r3,12(r3)
 800d290:	18c00404 	addi	r3,r3,16
 800d294:	18c00037 	ldwio	r3,0(r3)
 800d298:	18e00034 	orhi	r3,r3,32768
 800d29c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 800d2a0:	e0bffb17 	ldw	r2,-20(fp)
 800d2a4:	10800317 	ldw	r2,12(r2)
 800d2a8:	10800404 	addi	r2,r2,16
 800d2ac:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 800d2b0:	e0bffb17 	ldw	r2,-20(fp)
 800d2b4:	10800917 	ldw	r2,36(r2)
 800d2b8:	10001226 	beq	r2,zero,800d304 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d2bc:	0005303a 	rdctl	r2,status
 800d2c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d2c4:	e0fffd17 	ldw	r3,-12(fp)
 800d2c8:	00bfff84 	movi	r2,-2
 800d2cc:	1884703a 	and	r2,r3,r2
 800d2d0:	1001703a 	wrctl	status,r2
  
  return context;
 800d2d4:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 800d2d8:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 800d2dc:	e0bffb17 	ldw	r2,-20(fp)
 800d2e0:	10800917 	ldw	r2,36(r2)
 800d2e4:	e0fffb17 	ldw	r3,-20(fp)
 800d2e8:	18c00a17 	ldw	r3,40(r3)
 800d2ec:	1809883a 	mov	r4,r3
 800d2f0:	103ee83a 	callr	r2
 800d2f4:	e0bffc17 	ldw	r2,-16(fp)
 800d2f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d2fc:	e0bffe17 	ldw	r2,-8(fp)
 800d300:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 800d304:	0001883a 	nop
 800d308:	e037883a 	mov	sp,fp
 800d30c:	dfc00117 	ldw	ra,4(sp)
 800d310:	df000017 	ldw	fp,0(sp)
 800d314:	dec00204 	addi	sp,sp,8
 800d318:	f800283a 	ret

0800d31c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 800d31c:	defffa04 	addi	sp,sp,-24
 800d320:	dfc00515 	stw	ra,20(sp)
 800d324:	df000415 	stw	fp,16(sp)
 800d328:	df000404 	addi	fp,sp,16
 800d32c:	e13ffd15 	stw	r4,-12(fp)
 800d330:	e17ffe15 	stw	r5,-8(fp)
 800d334:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 800d338:	e0bffd17 	ldw	r2,-12(fp)
 800d33c:	10800317 	ldw	r2,12(r2)
 800d340:	10800404 	addi	r2,r2,16
 800d344:	00c00074 	movhi	r3,1
 800d348:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 800d34c:	e0bffd17 	ldw	r2,-12(fp)
 800d350:	10800317 	ldw	r2,12(r2)
 800d354:	10800404 	addi	r2,r2,16
 800d358:	00c00074 	movhi	r3,1
 800d35c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 800d360:	e0bffd17 	ldw	r2,-12(fp)
 800d364:	10800317 	ldw	r2,12(r2)
 800d368:	10800404 	addi	r2,r2,16
 800d36c:	0007883a 	mov	r3,zero
 800d370:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 800d374:	e0bffd17 	ldw	r2,-12(fp)
 800d378:	10800317 	ldw	r2,12(r2)
 800d37c:	00c03fc4 	movi	r3,255
 800d380:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 800d384:	d1601004 	addi	r5,gp,-32704
 800d388:	e13ffd17 	ldw	r4,-12(fp)
 800d38c:	800df400 	call	800df40 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 800d390:	d8000015 	stw	zero,0(sp)
 800d394:	e1fffd17 	ldw	r7,-12(fp)
 800d398:	01820074 	movhi	r6,2049
 800d39c:	31b49804 	addi	r6,r6,-11680
 800d3a0:	e17fff17 	ldw	r5,-4(fp)
 800d3a4:	e13ffe17 	ldw	r4,-8(fp)
 800d3a8:	800b16c0 	call	800b16c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 800d3ac:	0001883a 	nop
 800d3b0:	e037883a 	mov	sp,fp
 800d3b4:	dfc00117 	ldw	ra,4(sp)
 800d3b8:	df000017 	ldw	fp,0(sp)
 800d3bc:	dec00204 	addi	sp,sp,8
 800d3c0:	f800283a 	ret

0800d3c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800d3c4:	defffa04 	addi	sp,sp,-24
 800d3c8:	dfc00515 	stw	ra,20(sp)
 800d3cc:	df000415 	stw	fp,16(sp)
 800d3d0:	df000404 	addi	fp,sp,16
 800d3d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800d3d8:	0007883a 	mov	r3,zero
 800d3dc:	e0bfff17 	ldw	r2,-4(fp)
 800d3e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800d3e4:	e0bfff17 	ldw	r2,-4(fp)
 800d3e8:	10800104 	addi	r2,r2,4
 800d3ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d3f0:	0005303a 	rdctl	r2,status
 800d3f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d3f8:	e0fffd17 	ldw	r3,-12(fp)
 800d3fc:	00bfff84 	movi	r2,-2
 800d400:	1884703a 	and	r2,r3,r2
 800d404:	1001703a 	wrctl	status,r2
  
  return context;
 800d408:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800d40c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800d410:	800e5d40 	call	800e5d4 <alt_tick>
 800d414:	e0bffc17 	ldw	r2,-16(fp)
 800d418:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d41c:	e0bffe17 	ldw	r2,-8(fp)
 800d420:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800d424:	0001883a 	nop
 800d428:	e037883a 	mov	sp,fp
 800d42c:	dfc00117 	ldw	ra,4(sp)
 800d430:	df000017 	ldw	fp,0(sp)
 800d434:	dec00204 	addi	sp,sp,8
 800d438:	f800283a 	ret

0800d43c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800d43c:	defff804 	addi	sp,sp,-32
 800d440:	dfc00715 	stw	ra,28(sp)
 800d444:	df000615 	stw	fp,24(sp)
 800d448:	df000604 	addi	fp,sp,24
 800d44c:	e13ffc15 	stw	r4,-16(fp)
 800d450:	e17ffd15 	stw	r5,-12(fp)
 800d454:	e1bffe15 	stw	r6,-8(fp)
 800d458:	e1ffff15 	stw	r7,-4(fp)
 800d45c:	e0bfff17 	ldw	r2,-4(fp)
 800d460:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800d464:	d0a79217 	ldw	r2,-25016(gp)
 800d468:	1000021e 	bne	r2,zero,800d474 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800d46c:	e0bffb17 	ldw	r2,-20(fp)
 800d470:	d0a79215 	stw	r2,-25016(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800d474:	e0bffc17 	ldw	r2,-16(fp)
 800d478:	10800104 	addi	r2,r2,4
 800d47c:	00c001c4 	movi	r3,7
 800d480:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800d484:	d8000015 	stw	zero,0(sp)
 800d488:	e1fffc17 	ldw	r7,-16(fp)
 800d48c:	01820074 	movhi	r6,2049
 800d490:	31b4f104 	addi	r6,r6,-11324
 800d494:	e17ffe17 	ldw	r5,-8(fp)
 800d498:	e13ffd17 	ldw	r4,-12(fp)
 800d49c:	800b16c0 	call	800b16c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800d4a0:	0001883a 	nop
 800d4a4:	e037883a 	mov	sp,fp
 800d4a8:	dfc00117 	ldw	ra,4(sp)
 800d4ac:	df000017 	ldw	fp,0(sp)
 800d4b0:	dec00204 	addi	sp,sp,8
 800d4b4:	f800283a 	ret

0800d4b8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d4b8:	defffa04 	addi	sp,sp,-24
 800d4bc:	dfc00515 	stw	ra,20(sp)
 800d4c0:	df000415 	stw	fp,16(sp)
 800d4c4:	df000404 	addi	fp,sp,16
 800d4c8:	e13ffd15 	stw	r4,-12(fp)
 800d4cc:	e17ffe15 	stw	r5,-8(fp)
 800d4d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 800d4d4:	e0bffd17 	ldw	r2,-12(fp)
 800d4d8:	10800017 	ldw	r2,0(r2)
 800d4dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 800d4e0:	e0bffc17 	ldw	r2,-16(fp)
 800d4e4:	10c00a04 	addi	r3,r2,40
 800d4e8:	e0bffd17 	ldw	r2,-12(fp)
 800d4ec:	10800217 	ldw	r2,8(r2)
 800d4f0:	100f883a 	mov	r7,r2
 800d4f4:	e1bfff17 	ldw	r6,-4(fp)
 800d4f8:	e17ffe17 	ldw	r5,-8(fp)
 800d4fc:	1809883a 	mov	r4,r3
 800d500:	800d9cc0 	call	800d9cc <altera_avalon_uart_read>
      fd->fd_flags);
}
 800d504:	e037883a 	mov	sp,fp
 800d508:	dfc00117 	ldw	ra,4(sp)
 800d50c:	df000017 	ldw	fp,0(sp)
 800d510:	dec00204 	addi	sp,sp,8
 800d514:	f800283a 	ret

0800d518 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800d518:	defffa04 	addi	sp,sp,-24
 800d51c:	dfc00515 	stw	ra,20(sp)
 800d520:	df000415 	stw	fp,16(sp)
 800d524:	df000404 	addi	fp,sp,16
 800d528:	e13ffd15 	stw	r4,-12(fp)
 800d52c:	e17ffe15 	stw	r5,-8(fp)
 800d530:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 800d534:	e0bffd17 	ldw	r2,-12(fp)
 800d538:	10800017 	ldw	r2,0(r2)
 800d53c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 800d540:	e0bffc17 	ldw	r2,-16(fp)
 800d544:	10c00a04 	addi	r3,r2,40
 800d548:	e0bffd17 	ldw	r2,-12(fp)
 800d54c:	10800217 	ldw	r2,8(r2)
 800d550:	100f883a 	mov	r7,r2
 800d554:	e1bfff17 	ldw	r6,-4(fp)
 800d558:	e17ffe17 	ldw	r5,-8(fp)
 800d55c:	1809883a 	mov	r4,r3
 800d560:	800dbe40 	call	800dbe4 <altera_avalon_uart_write>
      fd->fd_flags);
}
 800d564:	e037883a 	mov	sp,fp
 800d568:	dfc00117 	ldw	ra,4(sp)
 800d56c:	df000017 	ldw	fp,0(sp)
 800d570:	dec00204 	addi	sp,sp,8
 800d574:	f800283a 	ret

0800d578 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 800d578:	defffc04 	addi	sp,sp,-16
 800d57c:	dfc00315 	stw	ra,12(sp)
 800d580:	df000215 	stw	fp,8(sp)
 800d584:	df000204 	addi	fp,sp,8
 800d588:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 800d58c:	e0bfff17 	ldw	r2,-4(fp)
 800d590:	10800017 	ldw	r2,0(r2)
 800d594:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 800d598:	e0bffe17 	ldw	r2,-8(fp)
 800d59c:	10c00a04 	addi	r3,r2,40
 800d5a0:	e0bfff17 	ldw	r2,-4(fp)
 800d5a4:	10800217 	ldw	r2,8(r2)
 800d5a8:	100b883a 	mov	r5,r2
 800d5ac:	1809883a 	mov	r4,r3
 800d5b0:	800d93c0 	call	800d93c <altera_avalon_uart_close>
}
 800d5b4:	e037883a 	mov	sp,fp
 800d5b8:	dfc00117 	ldw	ra,4(sp)
 800d5bc:	df000017 	ldw	fp,0(sp)
 800d5c0:	dec00204 	addi	sp,sp,8
 800d5c4:	f800283a 	ret

0800d5c8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 800d5c8:	defff804 	addi	sp,sp,-32
 800d5cc:	dfc00715 	stw	ra,28(sp)
 800d5d0:	df000615 	stw	fp,24(sp)
 800d5d4:	df000604 	addi	fp,sp,24
 800d5d8:	e13ffd15 	stw	r4,-12(fp)
 800d5dc:	e17ffe15 	stw	r5,-8(fp)
 800d5e0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 800d5e4:	e0bffd17 	ldw	r2,-12(fp)
 800d5e8:	10800017 	ldw	r2,0(r2)
 800d5ec:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800d5f0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 800d5f4:	1000041e 	bne	r2,zero,800d608 <altera_avalon_uart_init+0x40>
 800d5f8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 800d5fc:	1000021e 	bne	r2,zero,800d608 <altera_avalon_uart_init+0x40>
 800d600:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 800d604:	10000226 	beq	r2,zero,800d610 <altera_avalon_uart_init+0x48>
 800d608:	00800044 	movi	r2,1
 800d60c:	00000106 	br	800d614 <altera_avalon_uart_init+0x4c>
 800d610:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 800d614:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 800d618:	e0bffc17 	ldw	r2,-16(fp)
 800d61c:	10000f1e 	bne	r2,zero,800d65c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 800d620:	e0bffd17 	ldw	r2,-12(fp)
 800d624:	00c32004 	movi	r3,3200
 800d628:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 800d62c:	e0bffb17 	ldw	r2,-20(fp)
 800d630:	10800304 	addi	r2,r2,12
 800d634:	e0fffd17 	ldw	r3,-12(fp)
 800d638:	18c00117 	ldw	r3,4(r3)
 800d63c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 800d640:	d8000015 	stw	zero,0(sp)
 800d644:	e1fffd17 	ldw	r7,-12(fp)
 800d648:	01820074 	movhi	r6,2049
 800d64c:	31b59d04 	addi	r6,r6,-10636
 800d650:	e17fff17 	ldw	r5,-4(fp)
 800d654:	e13ffe17 	ldw	r4,-8(fp)
 800d658:	800b16c0 	call	800b16c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 800d65c:	0001883a 	nop
 800d660:	e037883a 	mov	sp,fp
 800d664:	dfc00117 	ldw	ra,4(sp)
 800d668:	df000017 	ldw	fp,0(sp)
 800d66c:	dec00204 	addi	sp,sp,8
 800d670:	f800283a 	ret

0800d674 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 800d674:	defffa04 	addi	sp,sp,-24
 800d678:	dfc00515 	stw	ra,20(sp)
 800d67c:	df000415 	stw	fp,16(sp)
 800d680:	df000404 	addi	fp,sp,16
 800d684:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 800d688:	e0bfff17 	ldw	r2,-4(fp)
 800d68c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 800d690:	e0bffc17 	ldw	r2,-16(fp)
 800d694:	10800017 	ldw	r2,0(r2)
 800d698:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 800d69c:	e0bffd17 	ldw	r2,-12(fp)
 800d6a0:	10800204 	addi	r2,r2,8
 800d6a4:	10800037 	ldwio	r2,0(r2)
 800d6a8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 800d6ac:	e0bffd17 	ldw	r2,-12(fp)
 800d6b0:	10800204 	addi	r2,r2,8
 800d6b4:	0007883a 	mov	r3,zero
 800d6b8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 800d6bc:	e0bffd17 	ldw	r2,-12(fp)
 800d6c0:	10800204 	addi	r2,r2,8
 800d6c4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 800d6c8:	e0bffe17 	ldw	r2,-8(fp)
 800d6cc:	1080200c 	andi	r2,r2,128
 800d6d0:	10000326 	beq	r2,zero,800d6e0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 800d6d4:	e17ffe17 	ldw	r5,-8(fp)
 800d6d8:	e13ffc17 	ldw	r4,-16(fp)
 800d6dc:	800d7100 	call	800d710 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 800d6e0:	e0bffe17 	ldw	r2,-8(fp)
 800d6e4:	1081100c 	andi	r2,r2,1088
 800d6e8:	10000326 	beq	r2,zero,800d6f8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 800d6ec:	e17ffe17 	ldw	r5,-8(fp)
 800d6f0:	e13ffc17 	ldw	r4,-16(fp)
 800d6f4:	800d7f40 	call	800d7f4 <altera_avalon_uart_txirq>
  }
  

}
 800d6f8:	0001883a 	nop
 800d6fc:	e037883a 	mov	sp,fp
 800d700:	dfc00117 	ldw	ra,4(sp)
 800d704:	df000017 	ldw	fp,0(sp)
 800d708:	dec00204 	addi	sp,sp,8
 800d70c:	f800283a 	ret

0800d710 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 800d710:	defffc04 	addi	sp,sp,-16
 800d714:	df000315 	stw	fp,12(sp)
 800d718:	df000304 	addi	fp,sp,12
 800d71c:	e13ffe15 	stw	r4,-8(fp)
 800d720:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 800d724:	e0bfff17 	ldw	r2,-4(fp)
 800d728:	108000cc 	andi	r2,r2,3
 800d72c:	10002c1e 	bne	r2,zero,800d7e0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 800d730:	e0bffe17 	ldw	r2,-8(fp)
 800d734:	10800317 	ldw	r2,12(r2)
 800d738:	e0bffe17 	ldw	r2,-8(fp)
 800d73c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800d740:	e0bffe17 	ldw	r2,-8(fp)
 800d744:	10800317 	ldw	r2,12(r2)
 800d748:	10800044 	addi	r2,r2,1
 800d74c:	10800fcc 	andi	r2,r2,63
 800d750:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 800d754:	e0bffe17 	ldw	r2,-8(fp)
 800d758:	10800317 	ldw	r2,12(r2)
 800d75c:	e0fffe17 	ldw	r3,-8(fp)
 800d760:	18c00017 	ldw	r3,0(r3)
 800d764:	18c00037 	ldwio	r3,0(r3)
 800d768:	1809883a 	mov	r4,r3
 800d76c:	e0fffe17 	ldw	r3,-8(fp)
 800d770:	1885883a 	add	r2,r3,r2
 800d774:	10800704 	addi	r2,r2,28
 800d778:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 800d77c:	e0bffe17 	ldw	r2,-8(fp)
 800d780:	e0fffd17 	ldw	r3,-12(fp)
 800d784:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800d788:	e0bffe17 	ldw	r2,-8(fp)
 800d78c:	10800317 	ldw	r2,12(r2)
 800d790:	10800044 	addi	r2,r2,1
 800d794:	10800fcc 	andi	r2,r2,63
 800d798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 800d79c:	e0bffe17 	ldw	r2,-8(fp)
 800d7a0:	10c00217 	ldw	r3,8(r2)
 800d7a4:	e0bffd17 	ldw	r2,-12(fp)
 800d7a8:	18800e1e 	bne	r3,r2,800d7e4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 800d7ac:	e0bffe17 	ldw	r2,-8(fp)
 800d7b0:	10c00117 	ldw	r3,4(r2)
 800d7b4:	00bfdfc4 	movi	r2,-129
 800d7b8:	1886703a 	and	r3,r3,r2
 800d7bc:	e0bffe17 	ldw	r2,-8(fp)
 800d7c0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 800d7c4:	e0bffe17 	ldw	r2,-8(fp)
 800d7c8:	10800017 	ldw	r2,0(r2)
 800d7cc:	10800304 	addi	r2,r2,12
 800d7d0:	e0fffe17 	ldw	r3,-8(fp)
 800d7d4:	18c00117 	ldw	r3,4(r3)
 800d7d8:	10c00035 	stwio	r3,0(r2)
 800d7dc:	00000106 	br	800d7e4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 800d7e0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 800d7e4:	e037883a 	mov	sp,fp
 800d7e8:	df000017 	ldw	fp,0(sp)
 800d7ec:	dec00104 	addi	sp,sp,4
 800d7f0:	f800283a 	ret

0800d7f4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 800d7f4:	defffb04 	addi	sp,sp,-20
 800d7f8:	df000415 	stw	fp,16(sp)
 800d7fc:	df000404 	addi	fp,sp,16
 800d800:	e13ffc15 	stw	r4,-16(fp)
 800d804:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 800d808:	e0bffc17 	ldw	r2,-16(fp)
 800d80c:	10c00417 	ldw	r3,16(r2)
 800d810:	e0bffc17 	ldw	r2,-16(fp)
 800d814:	10800517 	ldw	r2,20(r2)
 800d818:	18803226 	beq	r3,r2,800d8e4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 800d81c:	e0bffc17 	ldw	r2,-16(fp)
 800d820:	10800617 	ldw	r2,24(r2)
 800d824:	1080008c 	andi	r2,r2,2
 800d828:	10000326 	beq	r2,zero,800d838 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 800d82c:	e0bffd17 	ldw	r2,-12(fp)
 800d830:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 800d834:	10001d26 	beq	r2,zero,800d8ac <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 800d838:	e0bffc17 	ldw	r2,-16(fp)
 800d83c:	10800417 	ldw	r2,16(r2)
 800d840:	e0bffc17 	ldw	r2,-16(fp)
 800d844:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 800d848:	e0bffc17 	ldw	r2,-16(fp)
 800d84c:	10800017 	ldw	r2,0(r2)
 800d850:	10800104 	addi	r2,r2,4
 800d854:	e0fffc17 	ldw	r3,-16(fp)
 800d858:	18c00417 	ldw	r3,16(r3)
 800d85c:	e13ffc17 	ldw	r4,-16(fp)
 800d860:	20c7883a 	add	r3,r4,r3
 800d864:	18c01704 	addi	r3,r3,92
 800d868:	18c00003 	ldbu	r3,0(r3)
 800d86c:	18c03fcc 	andi	r3,r3,255
 800d870:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 800d874:	e0bffc17 	ldw	r2,-16(fp)
 800d878:	10800417 	ldw	r2,16(r2)
 800d87c:	10800044 	addi	r2,r2,1
 800d880:	e0fffc17 	ldw	r3,-16(fp)
 800d884:	18800415 	stw	r2,16(r3)
 800d888:	10c00fcc 	andi	r3,r2,63
 800d88c:	e0bffc17 	ldw	r2,-16(fp)
 800d890:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 800d894:	e0bffc17 	ldw	r2,-16(fp)
 800d898:	10800117 	ldw	r2,4(r2)
 800d89c:	10c01014 	ori	r3,r2,64
 800d8a0:	e0bffc17 	ldw	r2,-16(fp)
 800d8a4:	10c00115 	stw	r3,4(r2)
 800d8a8:	00000e06 	br	800d8e4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 800d8ac:	e0bffc17 	ldw	r2,-16(fp)
 800d8b0:	10800017 	ldw	r2,0(r2)
 800d8b4:	10800204 	addi	r2,r2,8
 800d8b8:	10800037 	ldwio	r2,0(r2)
 800d8bc:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 800d8c0:	e0bffd17 	ldw	r2,-12(fp)
 800d8c4:	1082000c 	andi	r2,r2,2048
 800d8c8:	1000061e 	bne	r2,zero,800d8e4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 800d8cc:	e0bffc17 	ldw	r2,-16(fp)
 800d8d0:	10c00117 	ldw	r3,4(r2)
 800d8d4:	00bfefc4 	movi	r2,-65
 800d8d8:	1886703a 	and	r3,r3,r2
 800d8dc:	e0bffc17 	ldw	r2,-16(fp)
 800d8e0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 800d8e4:	e0bffc17 	ldw	r2,-16(fp)
 800d8e8:	10c00417 	ldw	r3,16(r2)
 800d8ec:	e0bffc17 	ldw	r2,-16(fp)
 800d8f0:	10800517 	ldw	r2,20(r2)
 800d8f4:	1880061e 	bne	r3,r2,800d910 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 800d8f8:	e0bffc17 	ldw	r2,-16(fp)
 800d8fc:	10c00117 	ldw	r3,4(r2)
 800d900:	00beefc4 	movi	r2,-1089
 800d904:	1886703a 	and	r3,r3,r2
 800d908:	e0bffc17 	ldw	r2,-16(fp)
 800d90c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800d910:	e0bffc17 	ldw	r2,-16(fp)
 800d914:	10800017 	ldw	r2,0(r2)
 800d918:	10800304 	addi	r2,r2,12
 800d91c:	e0fffc17 	ldw	r3,-16(fp)
 800d920:	18c00117 	ldw	r3,4(r3)
 800d924:	10c00035 	stwio	r3,0(r2)
}
 800d928:	0001883a 	nop
 800d92c:	e037883a 	mov	sp,fp
 800d930:	df000017 	ldw	fp,0(sp)
 800d934:	dec00104 	addi	sp,sp,4
 800d938:	f800283a 	ret

0800d93c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 800d93c:	defffd04 	addi	sp,sp,-12
 800d940:	df000215 	stw	fp,8(sp)
 800d944:	df000204 	addi	fp,sp,8
 800d948:	e13ffe15 	stw	r4,-8(fp)
 800d94c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 800d950:	00000506 	br	800d968 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800d954:	e0bfff17 	ldw	r2,-4(fp)
 800d958:	1090000c 	andi	r2,r2,16384
 800d95c:	10000226 	beq	r2,zero,800d968 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800d960:	00bffd44 	movi	r2,-11
 800d964:	00000606 	br	800d980 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 800d968:	e0bffe17 	ldw	r2,-8(fp)
 800d96c:	10c00417 	ldw	r3,16(r2)
 800d970:	e0bffe17 	ldw	r2,-8(fp)
 800d974:	10800517 	ldw	r2,20(r2)
 800d978:	18bff61e 	bne	r3,r2,800d954 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800d97c:	0005883a 	mov	r2,zero
}
 800d980:	e037883a 	mov	sp,fp
 800d984:	df000017 	ldw	fp,0(sp)
 800d988:	dec00104 	addi	sp,sp,4
 800d98c:	f800283a 	ret

0800d990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d990:	defffe04 	addi	sp,sp,-8
 800d994:	dfc00115 	stw	ra,4(sp)
 800d998:	df000015 	stw	fp,0(sp)
 800d99c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d9a0:	d0a00d17 	ldw	r2,-32716(gp)
 800d9a4:	10000326 	beq	r2,zero,800d9b4 <alt_get_errno+0x24>
 800d9a8:	d0a00d17 	ldw	r2,-32716(gp)
 800d9ac:	103ee83a 	callr	r2
 800d9b0:	00000106 	br	800d9b8 <alt_get_errno+0x28>
 800d9b4:	d0a78d04 	addi	r2,gp,-25036
}
 800d9b8:	e037883a 	mov	sp,fp
 800d9bc:	dfc00117 	ldw	ra,4(sp)
 800d9c0:	df000017 	ldw	fp,0(sp)
 800d9c4:	dec00204 	addi	sp,sp,8
 800d9c8:	f800283a 	ret

0800d9cc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 800d9cc:	defff204 	addi	sp,sp,-56
 800d9d0:	dfc00d15 	stw	ra,52(sp)
 800d9d4:	df000c15 	stw	fp,48(sp)
 800d9d8:	df000c04 	addi	fp,sp,48
 800d9dc:	e13ffc15 	stw	r4,-16(fp)
 800d9e0:	e17ffd15 	stw	r5,-12(fp)
 800d9e4:	e1bffe15 	stw	r6,-8(fp)
 800d9e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 800d9ec:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 800d9f0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 800d9f4:	e0bfff17 	ldw	r2,-4(fp)
 800d9f8:	1090000c 	andi	r2,r2,16384
 800d9fc:	1005003a 	cmpeq	r2,r2,zero
 800da00:	10803fcc 	andi	r2,r2,255
 800da04:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 800da08:	00001306 	br	800da58 <altera_avalon_uart_read+0x8c>
    {
      count++;
 800da0c:	e0bff517 	ldw	r2,-44(fp)
 800da10:	10800044 	addi	r2,r2,1
 800da14:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 800da18:	e0bffd17 	ldw	r2,-12(fp)
 800da1c:	10c00044 	addi	r3,r2,1
 800da20:	e0fffd15 	stw	r3,-12(fp)
 800da24:	e0fffc17 	ldw	r3,-16(fp)
 800da28:	18c00217 	ldw	r3,8(r3)
 800da2c:	e13ffc17 	ldw	r4,-16(fp)
 800da30:	20c7883a 	add	r3,r4,r3
 800da34:	18c00704 	addi	r3,r3,28
 800da38:	18c00003 	ldbu	r3,0(r3)
 800da3c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 800da40:	e0bffc17 	ldw	r2,-16(fp)
 800da44:	10800217 	ldw	r2,8(r2)
 800da48:	10800044 	addi	r2,r2,1
 800da4c:	10c00fcc 	andi	r3,r2,63
 800da50:	e0bffc17 	ldw	r2,-16(fp)
 800da54:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 800da58:	e0fff517 	ldw	r3,-44(fp)
 800da5c:	e0bffe17 	ldw	r2,-8(fp)
 800da60:	1880050e 	bge	r3,r2,800da78 <altera_avalon_uart_read+0xac>
 800da64:	e0bffc17 	ldw	r2,-16(fp)
 800da68:	10c00217 	ldw	r3,8(r2)
 800da6c:	e0bffc17 	ldw	r2,-16(fp)
 800da70:	10800317 	ldw	r2,12(r2)
 800da74:	18bfe51e 	bne	r3,r2,800da0c <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 800da78:	e0bff517 	ldw	r2,-44(fp)
 800da7c:	1000251e 	bne	r2,zero,800db14 <altera_avalon_uart_read+0x148>
 800da80:	e0bffc17 	ldw	r2,-16(fp)
 800da84:	10c00217 	ldw	r3,8(r2)
 800da88:	e0bffc17 	ldw	r2,-16(fp)
 800da8c:	10800317 	ldw	r2,12(r2)
 800da90:	1880201e 	bne	r3,r2,800db14 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 800da94:	e0bff617 	ldw	r2,-40(fp)
 800da98:	1000071e 	bne	r2,zero,800dab8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 800da9c:	800d9900 	call	800d990 <alt_get_errno>
 800daa0:	1007883a 	mov	r3,r2
 800daa4:	008002c4 	movi	r2,11
 800daa8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 800daac:	00800044 	movi	r2,1
 800dab0:	e0bff405 	stb	r2,-48(fp)
        break;
 800dab4:	00001b06 	br	800db24 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dab8:	0005303a 	rdctl	r2,status
 800dabc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dac0:	e0fff917 	ldw	r3,-28(fp)
 800dac4:	00bfff84 	movi	r2,-2
 800dac8:	1884703a 	and	r2,r3,r2
 800dacc:	1001703a 	wrctl	status,r2
  
  return context;
 800dad0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 800dad4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 800dad8:	e0bffc17 	ldw	r2,-16(fp)
 800dadc:	10800117 	ldw	r2,4(r2)
 800dae0:	10c02014 	ori	r3,r2,128
 800dae4:	e0bffc17 	ldw	r2,-16(fp)
 800dae8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800daec:	e0bffc17 	ldw	r2,-16(fp)
 800daf0:	10800017 	ldw	r2,0(r2)
 800daf4:	10800304 	addi	r2,r2,12
 800daf8:	e0fffc17 	ldw	r3,-16(fp)
 800dafc:	18c00117 	ldw	r3,4(r3)
 800db00:	10c00035 	stwio	r3,0(r2)
 800db04:	e0bff817 	ldw	r2,-32(fp)
 800db08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800db0c:	e0bffa17 	ldw	r2,-24(fp)
 800db10:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 800db14:	e0bff517 	ldw	r2,-44(fp)
 800db18:	1000021e 	bne	r2,zero,800db24 <altera_avalon_uart_read+0x158>
 800db1c:	e0bffe17 	ldw	r2,-8(fp)
 800db20:	103fcd1e 	bne	r2,zero,800da58 <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800db24:	0005303a 	rdctl	r2,status
 800db28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800db2c:	e0fffb17 	ldw	r3,-20(fp)
 800db30:	00bfff84 	movi	r2,-2
 800db34:	1884703a 	and	r2,r3,r2
 800db38:	1001703a 	wrctl	status,r2
  
  return context;
 800db3c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 800db40:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 800db44:	e0bffc17 	ldw	r2,-16(fp)
 800db48:	10800117 	ldw	r2,4(r2)
 800db4c:	10c02014 	ori	r3,r2,128
 800db50:	e0bffc17 	ldw	r2,-16(fp)
 800db54:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800db58:	e0bffc17 	ldw	r2,-16(fp)
 800db5c:	10800017 	ldw	r2,0(r2)
 800db60:	10800304 	addi	r2,r2,12
 800db64:	e0fffc17 	ldw	r3,-16(fp)
 800db68:	18c00117 	ldw	r3,4(r3)
 800db6c:	10c00035 	stwio	r3,0(r2)
 800db70:	e0bff817 	ldw	r2,-32(fp)
 800db74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800db78:	e0bff717 	ldw	r2,-36(fp)
 800db7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 800db80:	e0bff403 	ldbu	r2,-48(fp)
 800db84:	10000226 	beq	r2,zero,800db90 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 800db88:	00bffd44 	movi	r2,-11
 800db8c:	00000106 	br	800db94 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 800db90:	e0bff517 	ldw	r2,-44(fp)
  }
}
 800db94:	e037883a 	mov	sp,fp
 800db98:	dfc00117 	ldw	ra,4(sp)
 800db9c:	df000017 	ldw	fp,0(sp)
 800dba0:	dec00204 	addi	sp,sp,8
 800dba4:	f800283a 	ret

0800dba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dba8:	defffe04 	addi	sp,sp,-8
 800dbac:	dfc00115 	stw	ra,4(sp)
 800dbb0:	df000015 	stw	fp,0(sp)
 800dbb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dbb8:	d0a00d17 	ldw	r2,-32716(gp)
 800dbbc:	10000326 	beq	r2,zero,800dbcc <alt_get_errno+0x24>
 800dbc0:	d0a00d17 	ldw	r2,-32716(gp)
 800dbc4:	103ee83a 	callr	r2
 800dbc8:	00000106 	br	800dbd0 <alt_get_errno+0x28>
 800dbcc:	d0a78d04 	addi	r2,gp,-25036
}
 800dbd0:	e037883a 	mov	sp,fp
 800dbd4:	dfc00117 	ldw	ra,4(sp)
 800dbd8:	df000017 	ldw	fp,0(sp)
 800dbdc:	dec00204 	addi	sp,sp,8
 800dbe0:	f800283a 	ret

0800dbe4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 800dbe4:	defff204 	addi	sp,sp,-56
 800dbe8:	dfc00d15 	stw	ra,52(sp)
 800dbec:	df000c15 	stw	fp,48(sp)
 800dbf0:	df000c04 	addi	fp,sp,48
 800dbf4:	e13ffc15 	stw	r4,-16(fp)
 800dbf8:	e17ffd15 	stw	r5,-12(fp)
 800dbfc:	e1bffe15 	stw	r6,-8(fp)
 800dc00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 800dc04:	e0bffe17 	ldw	r2,-8(fp)
 800dc08:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 800dc0c:	e0bfff17 	ldw	r2,-4(fp)
 800dc10:	1090000c 	andi	r2,r2,16384
 800dc14:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 800dc18:	00003c06 	br	800dd0c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800dc1c:	e0bffc17 	ldw	r2,-16(fp)
 800dc20:	10800517 	ldw	r2,20(r2)
 800dc24:	10800044 	addi	r2,r2,1
 800dc28:	10800fcc 	andi	r2,r2,63
 800dc2c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 800dc30:	e0bffc17 	ldw	r2,-16(fp)
 800dc34:	10c00417 	ldw	r3,16(r2)
 800dc38:	e0bff717 	ldw	r2,-36(fp)
 800dc3c:	1880221e 	bne	r3,r2,800dcc8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 800dc40:	e0bff517 	ldw	r2,-44(fp)
 800dc44:	10000526 	beq	r2,zero,800dc5c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 800dc48:	800dba80 	call	800dba8 <alt_get_errno>
 800dc4c:	1007883a 	mov	r3,r2
 800dc50:	008002c4 	movi	r2,11
 800dc54:	18800015 	stw	r2,0(r3)
        break;
 800dc58:	00002e06 	br	800dd14 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dc5c:	0005303a 	rdctl	r2,status
 800dc60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dc64:	e0fff917 	ldw	r3,-28(fp)
 800dc68:	00bfff84 	movi	r2,-2
 800dc6c:	1884703a 	and	r2,r3,r2
 800dc70:	1001703a 	wrctl	status,r2
  
  return context;
 800dc74:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 800dc78:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 800dc7c:	e0bffc17 	ldw	r2,-16(fp)
 800dc80:	10800117 	ldw	r2,4(r2)
 800dc84:	10c11014 	ori	r3,r2,1088
 800dc88:	e0bffc17 	ldw	r2,-16(fp)
 800dc8c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800dc90:	e0bffc17 	ldw	r2,-16(fp)
 800dc94:	10800017 	ldw	r2,0(r2)
 800dc98:	10800304 	addi	r2,r2,12
 800dc9c:	e0fffc17 	ldw	r3,-16(fp)
 800dca0:	18c00117 	ldw	r3,4(r3)
 800dca4:	10c00035 	stwio	r3,0(r2)
 800dca8:	e0bff817 	ldw	r2,-32(fp)
 800dcac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dcb0:	e0bff617 	ldw	r2,-40(fp)
 800dcb4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 800dcb8:	e0bffc17 	ldw	r2,-16(fp)
 800dcbc:	10c00417 	ldw	r3,16(r2)
 800dcc0:	e0bff717 	ldw	r2,-36(fp)
 800dcc4:	18bffc26 	beq	r3,r2,800dcb8 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 800dcc8:	e0bff417 	ldw	r2,-48(fp)
 800dccc:	10bfffc4 	addi	r2,r2,-1
 800dcd0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 800dcd4:	e0bffc17 	ldw	r2,-16(fp)
 800dcd8:	10c00517 	ldw	r3,20(r2)
 800dcdc:	e0bffd17 	ldw	r2,-12(fp)
 800dce0:	11000044 	addi	r4,r2,1
 800dce4:	e13ffd15 	stw	r4,-12(fp)
 800dce8:	10800003 	ldbu	r2,0(r2)
 800dcec:	1009883a 	mov	r4,r2
 800dcf0:	e0bffc17 	ldw	r2,-16(fp)
 800dcf4:	10c5883a 	add	r2,r2,r3
 800dcf8:	10801704 	addi	r2,r2,92
 800dcfc:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 800dd00:	e0bffc17 	ldw	r2,-16(fp)
 800dd04:	e0fff717 	ldw	r3,-36(fp)
 800dd08:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 800dd0c:	e0bff417 	ldw	r2,-48(fp)
 800dd10:	103fc21e 	bne	r2,zero,800dc1c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dd14:	0005303a 	rdctl	r2,status
 800dd18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dd1c:	e0fffb17 	ldw	r3,-20(fp)
 800dd20:	00bfff84 	movi	r2,-2
 800dd24:	1884703a 	and	r2,r3,r2
 800dd28:	1001703a 	wrctl	status,r2
  
  return context;
 800dd2c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 800dd30:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 800dd34:	e0bffc17 	ldw	r2,-16(fp)
 800dd38:	10800117 	ldw	r2,4(r2)
 800dd3c:	10c11014 	ori	r3,r2,1088
 800dd40:	e0bffc17 	ldw	r2,-16(fp)
 800dd44:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 800dd48:	e0bffc17 	ldw	r2,-16(fp)
 800dd4c:	10800017 	ldw	r2,0(r2)
 800dd50:	10800304 	addi	r2,r2,12
 800dd54:	e0fffc17 	ldw	r3,-16(fp)
 800dd58:	18c00117 	ldw	r3,4(r3)
 800dd5c:	10c00035 	stwio	r3,0(r2)
 800dd60:	e0bff817 	ldw	r2,-32(fp)
 800dd64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dd68:	e0bffa17 	ldw	r2,-24(fp)
 800dd6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 800dd70:	e0fffe17 	ldw	r3,-8(fp)
 800dd74:	e0bff417 	ldw	r2,-48(fp)
 800dd78:	1885c83a 	sub	r2,r3,r2
}
 800dd7c:	e037883a 	mov	sp,fp
 800dd80:	dfc00117 	ldw	ra,4(sp)
 800dd84:	df000017 	ldw	fp,0(sp)
 800dd88:	dec00204 	addi	sp,sp,8
 800dd8c:	f800283a 	ret

0800dd90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800dd90:	defff504 	addi	sp,sp,-44
 800dd94:	df000a15 	stw	fp,40(sp)
 800dd98:	df000a04 	addi	fp,sp,40
 800dd9c:	e13ffc15 	stw	r4,-16(fp)
 800dda0:	e17ffd15 	stw	r5,-12(fp)
 800dda4:	e1bffe15 	stw	r6,-8(fp)
 800dda8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ddac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ddb0:	d0a79217 	ldw	r2,-25016(gp)
  
  if (alt_ticks_per_second ())
 800ddb4:	10003c26 	beq	r2,zero,800dea8 <alt_alarm_start+0x118>
  {
    if (alarm)
 800ddb8:	e0bffc17 	ldw	r2,-16(fp)
 800ddbc:	10003826 	beq	r2,zero,800dea0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800ddc0:	e0bffc17 	ldw	r2,-16(fp)
 800ddc4:	e0fffe17 	ldw	r3,-8(fp)
 800ddc8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ddcc:	e0bffc17 	ldw	r2,-16(fp)
 800ddd0:	e0ffff17 	ldw	r3,-4(fp)
 800ddd4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ddd8:	0005303a 	rdctl	r2,status
 800dddc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dde0:	e0fff917 	ldw	r3,-28(fp)
 800dde4:	00bfff84 	movi	r2,-2
 800dde8:	1884703a 	and	r2,r3,r2
 800ddec:	1001703a 	wrctl	status,r2
  
  return context;
 800ddf0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800ddf4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ddf8:	d0a79317 	ldw	r2,-25012(gp)
      
      current_nticks = alt_nticks();
 800ddfc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800de00:	e0fffd17 	ldw	r3,-12(fp)
 800de04:	e0bff617 	ldw	r2,-40(fp)
 800de08:	1885883a 	add	r2,r3,r2
 800de0c:	10c00044 	addi	r3,r2,1
 800de10:	e0bffc17 	ldw	r2,-16(fp)
 800de14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800de18:	e0bffc17 	ldw	r2,-16(fp)
 800de1c:	10c00217 	ldw	r3,8(r2)
 800de20:	e0bff617 	ldw	r2,-40(fp)
 800de24:	1880042e 	bgeu	r3,r2,800de38 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800de28:	e0bffc17 	ldw	r2,-16(fp)
 800de2c:	00c00044 	movi	r3,1
 800de30:	10c00405 	stb	r3,16(r2)
 800de34:	00000206 	br	800de40 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800de38:	e0bffc17 	ldw	r2,-16(fp)
 800de3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800de40:	e0bffc17 	ldw	r2,-16(fp)
 800de44:	d0e01204 	addi	r3,gp,-32696
 800de48:	e0fffa15 	stw	r3,-24(fp)
 800de4c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800de50:	e0bffb17 	ldw	r2,-20(fp)
 800de54:	e0fffa17 	ldw	r3,-24(fp)
 800de58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800de5c:	e0bffa17 	ldw	r2,-24(fp)
 800de60:	10c00017 	ldw	r3,0(r2)
 800de64:	e0bffb17 	ldw	r2,-20(fp)
 800de68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800de6c:	e0bffa17 	ldw	r2,-24(fp)
 800de70:	10800017 	ldw	r2,0(r2)
 800de74:	e0fffb17 	ldw	r3,-20(fp)
 800de78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800de7c:	e0bffa17 	ldw	r2,-24(fp)
 800de80:	e0fffb17 	ldw	r3,-20(fp)
 800de84:	10c00015 	stw	r3,0(r2)
 800de88:	e0bff817 	ldw	r2,-32(fp)
 800de8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800de90:	e0bff717 	ldw	r2,-36(fp)
 800de94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800de98:	0005883a 	mov	r2,zero
 800de9c:	00000306 	br	800deac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800dea0:	00bffa84 	movi	r2,-22
 800dea4:	00000106 	br	800deac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800dea8:	00bfde84 	movi	r2,-134
  }
}
 800deac:	e037883a 	mov	sp,fp
 800deb0:	df000017 	ldw	fp,0(sp)
 800deb4:	dec00104 	addi	sp,sp,4
 800deb8:	f800283a 	ret

0800debc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 800debc:	defffd04 	addi	sp,sp,-12
 800dec0:	df000215 	stw	fp,8(sp)
 800dec4:	df000204 	addi	fp,sp,8
 800dec8:	e13ffe15 	stw	r4,-8(fp)
 800decc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800ded0:	0001883a 	nop
 800ded4:	e037883a 	mov	sp,fp
 800ded8:	df000017 	ldw	fp,0(sp)
 800dedc:	dec00104 	addi	sp,sp,4
 800dee0:	f800283a 	ret

0800dee4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800dee4:	deffff04 	addi	sp,sp,-4
 800dee8:	df000015 	stw	fp,0(sp)
 800deec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800def0:	0001883a 	nop
 800def4:	e037883a 	mov	sp,fp
 800def8:	df000017 	ldw	fp,0(sp)
 800defc:	dec00104 	addi	sp,sp,4
 800df00:	f800283a 	ret

0800df04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800df04:	defffe04 	addi	sp,sp,-8
 800df08:	dfc00115 	stw	ra,4(sp)
 800df0c:	df000015 	stw	fp,0(sp)
 800df10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800df14:	d0a00d17 	ldw	r2,-32716(gp)
 800df18:	10000326 	beq	r2,zero,800df28 <alt_get_errno+0x24>
 800df1c:	d0a00d17 	ldw	r2,-32716(gp)
 800df20:	103ee83a 	callr	r2
 800df24:	00000106 	br	800df2c <alt_get_errno+0x28>
 800df28:	d0a78d04 	addi	r2,gp,-25036
}
 800df2c:	e037883a 	mov	sp,fp
 800df30:	dfc00117 	ldw	ra,4(sp)
 800df34:	df000017 	ldw	fp,0(sp)
 800df38:	dec00204 	addi	sp,sp,8
 800df3c:	f800283a 	ret

0800df40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800df40:	defffa04 	addi	sp,sp,-24
 800df44:	dfc00515 	stw	ra,20(sp)
 800df48:	df000415 	stw	fp,16(sp)
 800df4c:	df000404 	addi	fp,sp,16
 800df50:	e13ffe15 	stw	r4,-8(fp)
 800df54:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800df58:	e0bffe17 	ldw	r2,-8(fp)
 800df5c:	10000326 	beq	r2,zero,800df6c <alt_dev_llist_insert+0x2c>
 800df60:	e0bffe17 	ldw	r2,-8(fp)
 800df64:	10800217 	ldw	r2,8(r2)
 800df68:	1000061e 	bne	r2,zero,800df84 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800df6c:	800df040 	call	800df04 <alt_get_errno>
 800df70:	1007883a 	mov	r3,r2
 800df74:	00800584 	movi	r2,22
 800df78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800df7c:	00bffa84 	movi	r2,-22
 800df80:	00001306 	br	800dfd0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800df84:	e0bffe17 	ldw	r2,-8(fp)
 800df88:	e0ffff17 	ldw	r3,-4(fp)
 800df8c:	e0fffc15 	stw	r3,-16(fp)
 800df90:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800df94:	e0bffd17 	ldw	r2,-12(fp)
 800df98:	e0fffc17 	ldw	r3,-16(fp)
 800df9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800dfa0:	e0bffc17 	ldw	r2,-16(fp)
 800dfa4:	10c00017 	ldw	r3,0(r2)
 800dfa8:	e0bffd17 	ldw	r2,-12(fp)
 800dfac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800dfb0:	e0bffc17 	ldw	r2,-16(fp)
 800dfb4:	10800017 	ldw	r2,0(r2)
 800dfb8:	e0fffd17 	ldw	r3,-12(fp)
 800dfbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800dfc0:	e0bffc17 	ldw	r2,-16(fp)
 800dfc4:	e0fffd17 	ldw	r3,-12(fp)
 800dfc8:	10c00015 	stw	r3,0(r2)

  return 0;  
 800dfcc:	0005883a 	mov	r2,zero
}
 800dfd0:	e037883a 	mov	sp,fp
 800dfd4:	dfc00117 	ldw	ra,4(sp)
 800dfd8:	df000017 	ldw	fp,0(sp)
 800dfdc:	dec00204 	addi	sp,sp,8
 800dfe0:	f800283a 	ret

0800dfe4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800dfe4:	defffd04 	addi	sp,sp,-12
 800dfe8:	dfc00215 	stw	ra,8(sp)
 800dfec:	df000115 	stw	fp,4(sp)
 800dff0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800dff4:	00820074 	movhi	r2,2049
 800dff8:	10bb1704 	addi	r2,r2,-5028
 800dffc:	e0bfff15 	stw	r2,-4(fp)
 800e000:	00000606 	br	800e01c <_do_ctors+0x38>
        (*ctor) (); 
 800e004:	e0bfff17 	ldw	r2,-4(fp)
 800e008:	10800017 	ldw	r2,0(r2)
 800e00c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e010:	e0bfff17 	ldw	r2,-4(fp)
 800e014:	10bfff04 	addi	r2,r2,-4
 800e018:	e0bfff15 	stw	r2,-4(fp)
 800e01c:	e0ffff17 	ldw	r3,-4(fp)
 800e020:	00820074 	movhi	r2,2049
 800e024:	10bb1804 	addi	r2,r2,-5024
 800e028:	18bff62e 	bgeu	r3,r2,800e004 <_do_ctors+0x20>
        (*ctor) (); 
}
 800e02c:	0001883a 	nop
 800e030:	e037883a 	mov	sp,fp
 800e034:	dfc00117 	ldw	ra,4(sp)
 800e038:	df000017 	ldw	fp,0(sp)
 800e03c:	dec00204 	addi	sp,sp,8
 800e040:	f800283a 	ret

0800e044 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800e044:	defffd04 	addi	sp,sp,-12
 800e048:	dfc00215 	stw	ra,8(sp)
 800e04c:	df000115 	stw	fp,4(sp)
 800e050:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e054:	00820074 	movhi	r2,2049
 800e058:	10bb1704 	addi	r2,r2,-5028
 800e05c:	e0bfff15 	stw	r2,-4(fp)
 800e060:	00000606 	br	800e07c <_do_dtors+0x38>
        (*dtor) (); 
 800e064:	e0bfff17 	ldw	r2,-4(fp)
 800e068:	10800017 	ldw	r2,0(r2)
 800e06c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e070:	e0bfff17 	ldw	r2,-4(fp)
 800e074:	10bfff04 	addi	r2,r2,-4
 800e078:	e0bfff15 	stw	r2,-4(fp)
 800e07c:	e0ffff17 	ldw	r3,-4(fp)
 800e080:	00820074 	movhi	r2,2049
 800e084:	10bb1804 	addi	r2,r2,-5024
 800e088:	18bff62e 	bgeu	r3,r2,800e064 <_do_dtors+0x20>
        (*dtor) (); 
}
 800e08c:	0001883a 	nop
 800e090:	e037883a 	mov	sp,fp
 800e094:	dfc00117 	ldw	ra,4(sp)
 800e098:	df000017 	ldw	fp,0(sp)
 800e09c:	dec00204 	addi	sp,sp,8
 800e0a0:	f800283a 	ret

0800e0a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800e0a4:	defffa04 	addi	sp,sp,-24
 800e0a8:	dfc00515 	stw	ra,20(sp)
 800e0ac:	df000415 	stw	fp,16(sp)
 800e0b0:	df000404 	addi	fp,sp,16
 800e0b4:	e13ffe15 	stw	r4,-8(fp)
 800e0b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800e0bc:	e0bfff17 	ldw	r2,-4(fp)
 800e0c0:	10800017 	ldw	r2,0(r2)
 800e0c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800e0c8:	e13ffe17 	ldw	r4,-8(fp)
 800e0cc:	800864c0 	call	800864c <strlen>
 800e0d0:	10800044 	addi	r2,r2,1
 800e0d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e0d8:	00000d06 	br	800e110 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800e0dc:	e0bffc17 	ldw	r2,-16(fp)
 800e0e0:	10800217 	ldw	r2,8(r2)
 800e0e4:	e0fffd17 	ldw	r3,-12(fp)
 800e0e8:	180d883a 	mov	r6,r3
 800e0ec:	e17ffe17 	ldw	r5,-8(fp)
 800e0f0:	1009883a 	mov	r4,r2
 800e0f4:	800e9180 	call	800e918 <memcmp>
 800e0f8:	1000021e 	bne	r2,zero,800e104 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800e0fc:	e0bffc17 	ldw	r2,-16(fp)
 800e100:	00000706 	br	800e120 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800e104:	e0bffc17 	ldw	r2,-16(fp)
 800e108:	10800017 	ldw	r2,0(r2)
 800e10c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e110:	e0fffc17 	ldw	r3,-16(fp)
 800e114:	e0bfff17 	ldw	r2,-4(fp)
 800e118:	18bff01e 	bne	r3,r2,800e0dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800e11c:	0005883a 	mov	r2,zero
}
 800e120:	e037883a 	mov	sp,fp
 800e124:	dfc00117 	ldw	ra,4(sp)
 800e128:	df000017 	ldw	fp,0(sp)
 800e12c:	dec00204 	addi	sp,sp,8
 800e130:	f800283a 	ret

0800e134 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800e134:	deffff04 	addi	sp,sp,-4
 800e138:	df000015 	stw	fp,0(sp)
 800e13c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800e140:	0001883a 	nop
 800e144:	e037883a 	mov	sp,fp
 800e148:	df000017 	ldw	fp,0(sp)
 800e14c:	dec00104 	addi	sp,sp,4
 800e150:	f800283a 	ret

0800e154 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800e154:	defff804 	addi	sp,sp,-32
 800e158:	dfc00715 	stw	ra,28(sp)
 800e15c:	df000615 	stw	fp,24(sp)
 800e160:	dc000515 	stw	r16,20(sp)
 800e164:	df000604 	addi	fp,sp,24
 800e168:	e13ffb15 	stw	r4,-20(fp)
 800e16c:	e17ffc15 	stw	r5,-16(fp)
 800e170:	e1bffd15 	stw	r6,-12(fp)
 800e174:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800e178:	e1bffe17 	ldw	r6,-8(fp)
 800e17c:	e17ffd17 	ldw	r5,-12(fp)
 800e180:	e13ffc17 	ldw	r4,-16(fp)
 800e184:	800e3dc0 	call	800e3dc <open>
 800e188:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800e18c:	e0bffa17 	ldw	r2,-24(fp)
 800e190:	10002216 	blt	r2,zero,800e21c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800e194:	04020074 	movhi	r16,2049
 800e198:	843db304 	addi	r16,r16,-2356
 800e19c:	e0bffa17 	ldw	r2,-24(fp)
 800e1a0:	01400304 	movi	r5,12
 800e1a4:	1009883a 	mov	r4,r2
 800e1a8:	80082e00 	call	80082e0 <__mulsi3>
 800e1ac:	8085883a 	add	r2,r16,r2
 800e1b0:	10c00017 	ldw	r3,0(r2)
 800e1b4:	e0bffb17 	ldw	r2,-20(fp)
 800e1b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800e1bc:	04020074 	movhi	r16,2049
 800e1c0:	843db304 	addi	r16,r16,-2356
 800e1c4:	e0bffa17 	ldw	r2,-24(fp)
 800e1c8:	01400304 	movi	r5,12
 800e1cc:	1009883a 	mov	r4,r2
 800e1d0:	80082e00 	call	80082e0 <__mulsi3>
 800e1d4:	8085883a 	add	r2,r16,r2
 800e1d8:	10800104 	addi	r2,r2,4
 800e1dc:	10c00017 	ldw	r3,0(r2)
 800e1e0:	e0bffb17 	ldw	r2,-20(fp)
 800e1e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800e1e8:	04020074 	movhi	r16,2049
 800e1ec:	843db304 	addi	r16,r16,-2356
 800e1f0:	e0bffa17 	ldw	r2,-24(fp)
 800e1f4:	01400304 	movi	r5,12
 800e1f8:	1009883a 	mov	r4,r2
 800e1fc:	80082e00 	call	80082e0 <__mulsi3>
 800e200:	8085883a 	add	r2,r16,r2
 800e204:	10800204 	addi	r2,r2,8
 800e208:	10c00017 	ldw	r3,0(r2)
 800e20c:	e0bffb17 	ldw	r2,-20(fp)
 800e210:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800e214:	e13ffa17 	ldw	r4,-24(fp)
 800e218:	800b80c0 	call	800b80c <alt_release_fd>
  }
} 
 800e21c:	0001883a 	nop
 800e220:	e6ffff04 	addi	sp,fp,-4
 800e224:	dfc00217 	ldw	ra,8(sp)
 800e228:	df000117 	ldw	fp,4(sp)
 800e22c:	dc000017 	ldw	r16,0(sp)
 800e230:	dec00304 	addi	sp,sp,12
 800e234:	f800283a 	ret

0800e238 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800e238:	defffb04 	addi	sp,sp,-20
 800e23c:	dfc00415 	stw	ra,16(sp)
 800e240:	df000315 	stw	fp,12(sp)
 800e244:	df000304 	addi	fp,sp,12
 800e248:	e13ffd15 	stw	r4,-12(fp)
 800e24c:	e17ffe15 	stw	r5,-8(fp)
 800e250:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800e254:	01c07fc4 	movi	r7,511
 800e258:	01800044 	movi	r6,1
 800e25c:	e17ffd17 	ldw	r5,-12(fp)
 800e260:	01020074 	movhi	r4,2049
 800e264:	213db604 	addi	r4,r4,-2344
 800e268:	800e1540 	call	800e154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800e26c:	01c07fc4 	movi	r7,511
 800e270:	000d883a 	mov	r6,zero
 800e274:	e17ffe17 	ldw	r5,-8(fp)
 800e278:	01020074 	movhi	r4,2049
 800e27c:	213db304 	addi	r4,r4,-2356
 800e280:	800e1540 	call	800e154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800e284:	01c07fc4 	movi	r7,511
 800e288:	01800044 	movi	r6,1
 800e28c:	e17fff17 	ldw	r5,-4(fp)
 800e290:	01020074 	movhi	r4,2049
 800e294:	213db904 	addi	r4,r4,-2332
 800e298:	800e1540 	call	800e154 <alt_open_fd>
}  
 800e29c:	0001883a 	nop
 800e2a0:	e037883a 	mov	sp,fp
 800e2a4:	dfc00117 	ldw	ra,4(sp)
 800e2a8:	df000017 	ldw	fp,0(sp)
 800e2ac:	dec00204 	addi	sp,sp,8
 800e2b0:	f800283a 	ret

0800e2b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e2b4:	defffe04 	addi	sp,sp,-8
 800e2b8:	dfc00115 	stw	ra,4(sp)
 800e2bc:	df000015 	stw	fp,0(sp)
 800e2c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e2c4:	d0a00d17 	ldw	r2,-32716(gp)
 800e2c8:	10000326 	beq	r2,zero,800e2d8 <alt_get_errno+0x24>
 800e2cc:	d0a00d17 	ldw	r2,-32716(gp)
 800e2d0:	103ee83a 	callr	r2
 800e2d4:	00000106 	br	800e2dc <alt_get_errno+0x28>
 800e2d8:	d0a78d04 	addi	r2,gp,-25036
}
 800e2dc:	e037883a 	mov	sp,fp
 800e2e0:	dfc00117 	ldw	ra,4(sp)
 800e2e4:	df000017 	ldw	fp,0(sp)
 800e2e8:	dec00204 	addi	sp,sp,8
 800e2ec:	f800283a 	ret

0800e2f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800e2f0:	defffb04 	addi	sp,sp,-20
 800e2f4:	dfc00415 	stw	ra,16(sp)
 800e2f8:	df000315 	stw	fp,12(sp)
 800e2fc:	dc000215 	stw	r16,8(sp)
 800e300:	df000304 	addi	fp,sp,12
 800e304:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800e308:	e0bffe17 	ldw	r2,-8(fp)
 800e30c:	10800217 	ldw	r2,8(r2)
 800e310:	10d00034 	orhi	r3,r2,16384
 800e314:	e0bffe17 	ldw	r2,-8(fp)
 800e318:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e31c:	e03ffd15 	stw	zero,-12(fp)
 800e320:	00002306 	br	800e3b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e324:	04020074 	movhi	r16,2049
 800e328:	843db304 	addi	r16,r16,-2356
 800e32c:	e0bffd17 	ldw	r2,-12(fp)
 800e330:	01400304 	movi	r5,12
 800e334:	1009883a 	mov	r4,r2
 800e338:	80082e00 	call	80082e0 <__mulsi3>
 800e33c:	8085883a 	add	r2,r16,r2
 800e340:	10c00017 	ldw	r3,0(r2)
 800e344:	e0bffe17 	ldw	r2,-8(fp)
 800e348:	10800017 	ldw	r2,0(r2)
 800e34c:	1880151e 	bne	r3,r2,800e3a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e350:	04020074 	movhi	r16,2049
 800e354:	843db304 	addi	r16,r16,-2356
 800e358:	e0bffd17 	ldw	r2,-12(fp)
 800e35c:	01400304 	movi	r5,12
 800e360:	1009883a 	mov	r4,r2
 800e364:	80082e00 	call	80082e0 <__mulsi3>
 800e368:	8085883a 	add	r2,r16,r2
 800e36c:	10800204 	addi	r2,r2,8
 800e370:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800e374:	10000b0e 	bge	r2,zero,800e3a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800e378:	01400304 	movi	r5,12
 800e37c:	e13ffd17 	ldw	r4,-12(fp)
 800e380:	80082e00 	call	80082e0 <__mulsi3>
 800e384:	1007883a 	mov	r3,r2
 800e388:	00820074 	movhi	r2,2049
 800e38c:	10bdb304 	addi	r2,r2,-2356
 800e390:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800e394:	e0bffe17 	ldw	r2,-8(fp)
 800e398:	18800226 	beq	r3,r2,800e3a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800e39c:	00bffcc4 	movi	r2,-13
 800e3a0:	00000806 	br	800e3c4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800e3a4:	e0bffd17 	ldw	r2,-12(fp)
 800e3a8:	10800044 	addi	r2,r2,1
 800e3ac:	e0bffd15 	stw	r2,-12(fp)
 800e3b0:	d0a00c17 	ldw	r2,-32720(gp)
 800e3b4:	1007883a 	mov	r3,r2
 800e3b8:	e0bffd17 	ldw	r2,-12(fp)
 800e3bc:	18bfd92e 	bgeu	r3,r2,800e324 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800e3c0:	0005883a 	mov	r2,zero
}
 800e3c4:	e6ffff04 	addi	sp,fp,-4
 800e3c8:	dfc00217 	ldw	ra,8(sp)
 800e3cc:	df000117 	ldw	fp,4(sp)
 800e3d0:	dc000017 	ldw	r16,0(sp)
 800e3d4:	dec00304 	addi	sp,sp,12
 800e3d8:	f800283a 	ret

0800e3dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800e3dc:	defff604 	addi	sp,sp,-40
 800e3e0:	dfc00915 	stw	ra,36(sp)
 800e3e4:	df000815 	stw	fp,32(sp)
 800e3e8:	df000804 	addi	fp,sp,32
 800e3ec:	e13ffd15 	stw	r4,-12(fp)
 800e3f0:	e17ffe15 	stw	r5,-8(fp)
 800e3f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800e3f8:	00bfffc4 	movi	r2,-1
 800e3fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800e400:	00bffb44 	movi	r2,-19
 800e404:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800e408:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800e40c:	d1600a04 	addi	r5,gp,-32728
 800e410:	e13ffd17 	ldw	r4,-12(fp)
 800e414:	800e0a40 	call	800e0a4 <alt_find_dev>
 800e418:	e0bff815 	stw	r2,-32(fp)
 800e41c:	e0bff817 	ldw	r2,-32(fp)
 800e420:	1000051e 	bne	r2,zero,800e438 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800e424:	e13ffd17 	ldw	r4,-12(fp)
 800e428:	800e7000 	call	800e700 <alt_find_file>
 800e42c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800e430:	00800044 	movi	r2,1
 800e434:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800e438:	e0bff817 	ldw	r2,-32(fp)
 800e43c:	10002b26 	beq	r2,zero,800e4ec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800e440:	e13ff817 	ldw	r4,-32(fp)
 800e444:	800e8080 	call	800e808 <alt_get_fd>
 800e448:	e0bff915 	stw	r2,-28(fp)
 800e44c:	e0bff917 	ldw	r2,-28(fp)
 800e450:	1000030e 	bge	r2,zero,800e460 <open+0x84>
    {
      status = index;
 800e454:	e0bff917 	ldw	r2,-28(fp)
 800e458:	e0bffa15 	stw	r2,-24(fp)
 800e45c:	00002506 	br	800e4f4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800e460:	01400304 	movi	r5,12
 800e464:	e13ff917 	ldw	r4,-28(fp)
 800e468:	80082e00 	call	80082e0 <__mulsi3>
 800e46c:	1007883a 	mov	r3,r2
 800e470:	00820074 	movhi	r2,2049
 800e474:	10bdb304 	addi	r2,r2,-2356
 800e478:	1885883a 	add	r2,r3,r2
 800e47c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800e480:	e0fffe17 	ldw	r3,-8(fp)
 800e484:	00900034 	movhi	r2,16384
 800e488:	10bfffc4 	addi	r2,r2,-1
 800e48c:	1886703a 	and	r3,r3,r2
 800e490:	e0bffc17 	ldw	r2,-16(fp)
 800e494:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800e498:	e0bffb17 	ldw	r2,-20(fp)
 800e49c:	1000051e 	bne	r2,zero,800e4b4 <open+0xd8>
 800e4a0:	e13ffc17 	ldw	r4,-16(fp)
 800e4a4:	800e2f00 	call	800e2f0 <alt_file_locked>
 800e4a8:	e0bffa15 	stw	r2,-24(fp)
 800e4ac:	e0bffa17 	ldw	r2,-24(fp)
 800e4b0:	10001016 	blt	r2,zero,800e4f4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800e4b4:	e0bff817 	ldw	r2,-32(fp)
 800e4b8:	10800317 	ldw	r2,12(r2)
 800e4bc:	10000826 	beq	r2,zero,800e4e0 <open+0x104>
 800e4c0:	e0bff817 	ldw	r2,-32(fp)
 800e4c4:	10800317 	ldw	r2,12(r2)
 800e4c8:	e1ffff17 	ldw	r7,-4(fp)
 800e4cc:	e1bffe17 	ldw	r6,-8(fp)
 800e4d0:	e17ffd17 	ldw	r5,-12(fp)
 800e4d4:	e13ffc17 	ldw	r4,-16(fp)
 800e4d8:	103ee83a 	callr	r2
 800e4dc:	00000106 	br	800e4e4 <open+0x108>
 800e4e0:	0005883a 	mov	r2,zero
 800e4e4:	e0bffa15 	stw	r2,-24(fp)
 800e4e8:	00000206 	br	800e4f4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800e4ec:	00bffb44 	movi	r2,-19
 800e4f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800e4f4:	e0bffa17 	ldw	r2,-24(fp)
 800e4f8:	1000090e 	bge	r2,zero,800e520 <open+0x144>
  {
    alt_release_fd (index);  
 800e4fc:	e13ff917 	ldw	r4,-28(fp)
 800e500:	800b80c0 	call	800b80c <alt_release_fd>
    ALT_ERRNO = -status;
 800e504:	800e2b40 	call	800e2b4 <alt_get_errno>
 800e508:	1007883a 	mov	r3,r2
 800e50c:	e0bffa17 	ldw	r2,-24(fp)
 800e510:	0085c83a 	sub	r2,zero,r2
 800e514:	18800015 	stw	r2,0(r3)
    return -1;
 800e518:	00bfffc4 	movi	r2,-1
 800e51c:	00000106 	br	800e524 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800e520:	e0bff917 	ldw	r2,-28(fp)
}
 800e524:	e037883a 	mov	sp,fp
 800e528:	dfc00117 	ldw	ra,4(sp)
 800e52c:	df000017 	ldw	fp,0(sp)
 800e530:	dec00204 	addi	sp,sp,8
 800e534:	f800283a 	ret

0800e538 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800e538:	defffa04 	addi	sp,sp,-24
 800e53c:	df000515 	stw	fp,20(sp)
 800e540:	df000504 	addi	fp,sp,20
 800e544:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e548:	0005303a 	rdctl	r2,status
 800e54c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e550:	e0fffc17 	ldw	r3,-16(fp)
 800e554:	00bfff84 	movi	r2,-2
 800e558:	1884703a 	and	r2,r3,r2
 800e55c:	1001703a 	wrctl	status,r2
  
  return context;
 800e560:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800e564:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800e568:	e0bfff17 	ldw	r2,-4(fp)
 800e56c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800e570:	e0bffd17 	ldw	r2,-12(fp)
 800e574:	10800017 	ldw	r2,0(r2)
 800e578:	e0fffd17 	ldw	r3,-12(fp)
 800e57c:	18c00117 	ldw	r3,4(r3)
 800e580:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800e584:	e0bffd17 	ldw	r2,-12(fp)
 800e588:	10800117 	ldw	r2,4(r2)
 800e58c:	e0fffd17 	ldw	r3,-12(fp)
 800e590:	18c00017 	ldw	r3,0(r3)
 800e594:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800e598:	e0bffd17 	ldw	r2,-12(fp)
 800e59c:	e0fffd17 	ldw	r3,-12(fp)
 800e5a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800e5a4:	e0bffd17 	ldw	r2,-12(fp)
 800e5a8:	e0fffd17 	ldw	r3,-12(fp)
 800e5ac:	10c00015 	stw	r3,0(r2)
 800e5b0:	e0bffb17 	ldw	r2,-20(fp)
 800e5b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e5b8:	e0bffe17 	ldw	r2,-8(fp)
 800e5bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800e5c0:	0001883a 	nop
 800e5c4:	e037883a 	mov	sp,fp
 800e5c8:	df000017 	ldw	fp,0(sp)
 800e5cc:	dec00104 	addi	sp,sp,4
 800e5d0:	f800283a 	ret

0800e5d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800e5d4:	defffb04 	addi	sp,sp,-20
 800e5d8:	dfc00415 	stw	ra,16(sp)
 800e5dc:	df000315 	stw	fp,12(sp)
 800e5e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800e5e4:	d0a01217 	ldw	r2,-32696(gp)
 800e5e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800e5ec:	d0a79317 	ldw	r2,-25012(gp)
 800e5f0:	10800044 	addi	r2,r2,1
 800e5f4:	d0a79315 	stw	r2,-25012(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800e5f8:	00002e06 	br	800e6b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800e5fc:	e0bffd17 	ldw	r2,-12(fp)
 800e600:	10800017 	ldw	r2,0(r2)
 800e604:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800e608:	e0bffd17 	ldw	r2,-12(fp)
 800e60c:	10800403 	ldbu	r2,16(r2)
 800e610:	10803fcc 	andi	r2,r2,255
 800e614:	10000426 	beq	r2,zero,800e628 <alt_tick+0x54>
 800e618:	d0a79317 	ldw	r2,-25012(gp)
 800e61c:	1000021e 	bne	r2,zero,800e628 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800e620:	e0bffd17 	ldw	r2,-12(fp)
 800e624:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800e628:	e0bffd17 	ldw	r2,-12(fp)
 800e62c:	10800217 	ldw	r2,8(r2)
 800e630:	d0e79317 	ldw	r3,-25012(gp)
 800e634:	18801d36 	bltu	r3,r2,800e6ac <alt_tick+0xd8>
 800e638:	e0bffd17 	ldw	r2,-12(fp)
 800e63c:	10800403 	ldbu	r2,16(r2)
 800e640:	10803fcc 	andi	r2,r2,255
 800e644:	1000191e 	bne	r2,zero,800e6ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800e648:	e0bffd17 	ldw	r2,-12(fp)
 800e64c:	10800317 	ldw	r2,12(r2)
 800e650:	e0fffd17 	ldw	r3,-12(fp)
 800e654:	18c00517 	ldw	r3,20(r3)
 800e658:	1809883a 	mov	r4,r3
 800e65c:	103ee83a 	callr	r2
 800e660:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800e664:	e0bfff17 	ldw	r2,-4(fp)
 800e668:	1000031e 	bne	r2,zero,800e678 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800e66c:	e13ffd17 	ldw	r4,-12(fp)
 800e670:	800e5380 	call	800e538 <alt_alarm_stop>
 800e674:	00000d06 	br	800e6ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800e678:	e0bffd17 	ldw	r2,-12(fp)
 800e67c:	10c00217 	ldw	r3,8(r2)
 800e680:	e0bfff17 	ldw	r2,-4(fp)
 800e684:	1887883a 	add	r3,r3,r2
 800e688:	e0bffd17 	ldw	r2,-12(fp)
 800e68c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800e690:	e0bffd17 	ldw	r2,-12(fp)
 800e694:	10c00217 	ldw	r3,8(r2)
 800e698:	d0a79317 	ldw	r2,-25012(gp)
 800e69c:	1880032e 	bgeu	r3,r2,800e6ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800e6a0:	e0bffd17 	ldw	r2,-12(fp)
 800e6a4:	00c00044 	movi	r3,1
 800e6a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800e6ac:	e0bffe17 	ldw	r2,-8(fp)
 800e6b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800e6b4:	e0fffd17 	ldw	r3,-12(fp)
 800e6b8:	d0a01204 	addi	r2,gp,-32696
 800e6bc:	18bfcf1e 	bne	r3,r2,800e5fc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800e6c0:	0001883a 	nop
}
 800e6c4:	0001883a 	nop
 800e6c8:	e037883a 	mov	sp,fp
 800e6cc:	dfc00117 	ldw	ra,4(sp)
 800e6d0:	df000017 	ldw	fp,0(sp)
 800e6d4:	dec00204 	addi	sp,sp,8
 800e6d8:	f800283a 	ret

0800e6dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800e6dc:	deffff04 	addi	sp,sp,-4
 800e6e0:	df000015 	stw	fp,0(sp)
 800e6e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800e6e8:	000170fa 	wrctl	ienable,zero
}
 800e6ec:	0001883a 	nop
 800e6f0:	e037883a 	mov	sp,fp
 800e6f4:	df000017 	ldw	fp,0(sp)
 800e6f8:	dec00104 	addi	sp,sp,4
 800e6fc:	f800283a 	ret

0800e700 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800e700:	defffb04 	addi	sp,sp,-20
 800e704:	dfc00415 	stw	ra,16(sp)
 800e708:	df000315 	stw	fp,12(sp)
 800e70c:	df000304 	addi	fp,sp,12
 800e710:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800e714:	d0a00817 	ldw	r2,-32736(gp)
 800e718:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800e71c:	00003106 	br	800e7e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800e720:	e0bffd17 	ldw	r2,-12(fp)
 800e724:	10800217 	ldw	r2,8(r2)
 800e728:	1009883a 	mov	r4,r2
 800e72c:	800864c0 	call	800864c <strlen>
 800e730:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800e734:	e0bffd17 	ldw	r2,-12(fp)
 800e738:	10c00217 	ldw	r3,8(r2)
 800e73c:	e0bffe17 	ldw	r2,-8(fp)
 800e740:	10bfffc4 	addi	r2,r2,-1
 800e744:	1885883a 	add	r2,r3,r2
 800e748:	10800003 	ldbu	r2,0(r2)
 800e74c:	10803fcc 	andi	r2,r2,255
 800e750:	1080201c 	xori	r2,r2,128
 800e754:	10bfe004 	addi	r2,r2,-128
 800e758:	10800bd8 	cmpnei	r2,r2,47
 800e75c:	1000031e 	bne	r2,zero,800e76c <alt_find_file+0x6c>
    {
      len -= 1;
 800e760:	e0bffe17 	ldw	r2,-8(fp)
 800e764:	10bfffc4 	addi	r2,r2,-1
 800e768:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800e76c:	e0bffe17 	ldw	r2,-8(fp)
 800e770:	e0ffff17 	ldw	r3,-4(fp)
 800e774:	1885883a 	add	r2,r3,r2
 800e778:	10800003 	ldbu	r2,0(r2)
 800e77c:	10803fcc 	andi	r2,r2,255
 800e780:	1080201c 	xori	r2,r2,128
 800e784:	10bfe004 	addi	r2,r2,-128
 800e788:	10800be0 	cmpeqi	r2,r2,47
 800e78c:	1000081e 	bne	r2,zero,800e7b0 <alt_find_file+0xb0>
 800e790:	e0bffe17 	ldw	r2,-8(fp)
 800e794:	e0ffff17 	ldw	r3,-4(fp)
 800e798:	1885883a 	add	r2,r3,r2
 800e79c:	10800003 	ldbu	r2,0(r2)
 800e7a0:	10803fcc 	andi	r2,r2,255
 800e7a4:	1080201c 	xori	r2,r2,128
 800e7a8:	10bfe004 	addi	r2,r2,-128
 800e7ac:	10000a1e 	bne	r2,zero,800e7d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800e7b0:	e0bffd17 	ldw	r2,-12(fp)
 800e7b4:	10800217 	ldw	r2,8(r2)
 800e7b8:	e0fffe17 	ldw	r3,-8(fp)
 800e7bc:	180d883a 	mov	r6,r3
 800e7c0:	e17fff17 	ldw	r5,-4(fp)
 800e7c4:	1009883a 	mov	r4,r2
 800e7c8:	800e9180 	call	800e918 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800e7cc:	1000021e 	bne	r2,zero,800e7d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800e7d0:	e0bffd17 	ldw	r2,-12(fp)
 800e7d4:	00000706 	br	800e7f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800e7d8:	e0bffd17 	ldw	r2,-12(fp)
 800e7dc:	10800017 	ldw	r2,0(r2)
 800e7e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800e7e4:	e0fffd17 	ldw	r3,-12(fp)
 800e7e8:	d0a00804 	addi	r2,gp,-32736
 800e7ec:	18bfcc1e 	bne	r3,r2,800e720 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800e7f0:	0005883a 	mov	r2,zero
}
 800e7f4:	e037883a 	mov	sp,fp
 800e7f8:	dfc00117 	ldw	ra,4(sp)
 800e7fc:	df000017 	ldw	fp,0(sp)
 800e800:	dec00204 	addi	sp,sp,8
 800e804:	f800283a 	ret

0800e808 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800e808:	defffa04 	addi	sp,sp,-24
 800e80c:	dfc00515 	stw	ra,20(sp)
 800e810:	df000415 	stw	fp,16(sp)
 800e814:	dc000315 	stw	r16,12(sp)
 800e818:	df000404 	addi	fp,sp,16
 800e81c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800e820:	00bffa04 	movi	r2,-24
 800e824:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800e828:	e03ffc15 	stw	zero,-16(fp)
 800e82c:	00001d06 	br	800e8a4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800e830:	04020074 	movhi	r16,2049
 800e834:	843db304 	addi	r16,r16,-2356
 800e838:	e0bffc17 	ldw	r2,-16(fp)
 800e83c:	01400304 	movi	r5,12
 800e840:	1009883a 	mov	r4,r2
 800e844:	80082e00 	call	80082e0 <__mulsi3>
 800e848:	8085883a 	add	r2,r16,r2
 800e84c:	10800017 	ldw	r2,0(r2)
 800e850:	1000111e 	bne	r2,zero,800e898 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800e854:	04020074 	movhi	r16,2049
 800e858:	843db304 	addi	r16,r16,-2356
 800e85c:	e0bffc17 	ldw	r2,-16(fp)
 800e860:	01400304 	movi	r5,12
 800e864:	1009883a 	mov	r4,r2
 800e868:	80082e00 	call	80082e0 <__mulsi3>
 800e86c:	8085883a 	add	r2,r16,r2
 800e870:	e0fffe17 	ldw	r3,-8(fp)
 800e874:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800e878:	d0e00c17 	ldw	r3,-32720(gp)
 800e87c:	e0bffc17 	ldw	r2,-16(fp)
 800e880:	1880020e 	bge	r3,r2,800e88c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800e884:	e0bffc17 	ldw	r2,-16(fp)
 800e888:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 800e88c:	e0bffc17 	ldw	r2,-16(fp)
 800e890:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800e894:	00000606 	br	800e8b0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800e898:	e0bffc17 	ldw	r2,-16(fp)
 800e89c:	10800044 	addi	r2,r2,1
 800e8a0:	e0bffc15 	stw	r2,-16(fp)
 800e8a4:	e0bffc17 	ldw	r2,-16(fp)
 800e8a8:	10800810 	cmplti	r2,r2,32
 800e8ac:	103fe01e 	bne	r2,zero,800e830 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800e8b0:	e0bffd17 	ldw	r2,-12(fp)
}
 800e8b4:	e6ffff04 	addi	sp,fp,-4
 800e8b8:	dfc00217 	ldw	ra,8(sp)
 800e8bc:	df000117 	ldw	fp,4(sp)
 800e8c0:	dc000017 	ldw	r16,0(sp)
 800e8c4:	dec00304 	addi	sp,sp,12
 800e8c8:	f800283a 	ret

0800e8cc <atexit>:
 800e8cc:	200b883a 	mov	r5,r4
 800e8d0:	000f883a 	mov	r7,zero
 800e8d4:	000d883a 	mov	r6,zero
 800e8d8:	0009883a 	mov	r4,zero
 800e8dc:	800e9941 	jmpi	800e994 <__register_exitproc>

0800e8e0 <exit>:
 800e8e0:	defffe04 	addi	sp,sp,-8
 800e8e4:	000b883a 	mov	r5,zero
 800e8e8:	dc000015 	stw	r16,0(sp)
 800e8ec:	dfc00115 	stw	ra,4(sp)
 800e8f0:	2021883a 	mov	r16,r4
 800e8f4:	800eaac0 	call	800eaac <__call_exitprocs>
 800e8f8:	00820074 	movhi	r2,2049
 800e8fc:	1082a404 	addi	r2,r2,2704
 800e900:	11000017 	ldw	r4,0(r2)
 800e904:	20800f17 	ldw	r2,60(r4)
 800e908:	10000126 	beq	r2,zero,800e910 <exit+0x30>
 800e90c:	103ee83a 	callr	r2
 800e910:	8009883a 	mov	r4,r16
 800e914:	800ec2c0 	call	800ec2c <_exit>

0800e918 <memcmp>:
 800e918:	01c000c4 	movi	r7,3
 800e91c:	3980192e 	bgeu	r7,r6,800e984 <memcmp+0x6c>
 800e920:	2144b03a 	or	r2,r4,r5
 800e924:	11c4703a 	and	r2,r2,r7
 800e928:	10000f26 	beq	r2,zero,800e968 <memcmp+0x50>
 800e92c:	20800003 	ldbu	r2,0(r4)
 800e930:	28c00003 	ldbu	r3,0(r5)
 800e934:	10c0151e 	bne	r2,r3,800e98c <memcmp+0x74>
 800e938:	31bfff84 	addi	r6,r6,-2
 800e93c:	01ffffc4 	movi	r7,-1
 800e940:	00000406 	br	800e954 <memcmp+0x3c>
 800e944:	20800003 	ldbu	r2,0(r4)
 800e948:	28c00003 	ldbu	r3,0(r5)
 800e94c:	31bfffc4 	addi	r6,r6,-1
 800e950:	10c00e1e 	bne	r2,r3,800e98c <memcmp+0x74>
 800e954:	21000044 	addi	r4,r4,1
 800e958:	29400044 	addi	r5,r5,1
 800e95c:	31fff91e 	bne	r6,r7,800e944 <memcmp+0x2c>
 800e960:	0005883a 	mov	r2,zero
 800e964:	f800283a 	ret
 800e968:	20c00017 	ldw	r3,0(r4)
 800e96c:	28800017 	ldw	r2,0(r5)
 800e970:	18bfee1e 	bne	r3,r2,800e92c <memcmp+0x14>
 800e974:	31bfff04 	addi	r6,r6,-4
 800e978:	21000104 	addi	r4,r4,4
 800e97c:	29400104 	addi	r5,r5,4
 800e980:	39bff936 	bltu	r7,r6,800e968 <memcmp+0x50>
 800e984:	303fe91e 	bne	r6,zero,800e92c <memcmp+0x14>
 800e988:	003ff506 	br	800e960 <memcmp+0x48>
 800e98c:	10c5c83a 	sub	r2,r2,r3
 800e990:	f800283a 	ret

0800e994 <__register_exitproc>:
 800e994:	defffa04 	addi	sp,sp,-24
 800e998:	dc000315 	stw	r16,12(sp)
 800e99c:	04020074 	movhi	r16,2049
 800e9a0:	8402a404 	addi	r16,r16,2704
 800e9a4:	80c00017 	ldw	r3,0(r16)
 800e9a8:	dc400415 	stw	r17,16(sp)
 800e9ac:	dfc00515 	stw	ra,20(sp)
 800e9b0:	18805217 	ldw	r2,328(r3)
 800e9b4:	2023883a 	mov	r17,r4
 800e9b8:	10003726 	beq	r2,zero,800ea98 <__register_exitproc+0x104>
 800e9bc:	10c00117 	ldw	r3,4(r2)
 800e9c0:	010007c4 	movi	r4,31
 800e9c4:	20c00e16 	blt	r4,r3,800ea00 <__register_exitproc+0x6c>
 800e9c8:	1a000044 	addi	r8,r3,1
 800e9cc:	8800221e 	bne	r17,zero,800ea58 <__register_exitproc+0xc4>
 800e9d0:	18c00084 	addi	r3,r3,2
 800e9d4:	18c7883a 	add	r3,r3,r3
 800e9d8:	18c7883a 	add	r3,r3,r3
 800e9dc:	12000115 	stw	r8,4(r2)
 800e9e0:	10c7883a 	add	r3,r2,r3
 800e9e4:	19400015 	stw	r5,0(r3)
 800e9e8:	0005883a 	mov	r2,zero
 800e9ec:	dfc00517 	ldw	ra,20(sp)
 800e9f0:	dc400417 	ldw	r17,16(sp)
 800e9f4:	dc000317 	ldw	r16,12(sp)
 800e9f8:	dec00604 	addi	sp,sp,24
 800e9fc:	f800283a 	ret
 800ea00:	00800034 	movhi	r2,0
 800ea04:	10800004 	addi	r2,r2,0
 800ea08:	10002626 	beq	r2,zero,800eaa4 <__register_exitproc+0x110>
 800ea0c:	01006404 	movi	r4,400
 800ea10:	d9400015 	stw	r5,0(sp)
 800ea14:	d9800115 	stw	r6,4(sp)
 800ea18:	d9c00215 	stw	r7,8(sp)
 800ea1c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800ea20:	d9400017 	ldw	r5,0(sp)
 800ea24:	d9800117 	ldw	r6,4(sp)
 800ea28:	d9c00217 	ldw	r7,8(sp)
 800ea2c:	10001d26 	beq	r2,zero,800eaa4 <__register_exitproc+0x110>
 800ea30:	81000017 	ldw	r4,0(r16)
 800ea34:	10000115 	stw	zero,4(r2)
 800ea38:	02000044 	movi	r8,1
 800ea3c:	22405217 	ldw	r9,328(r4)
 800ea40:	0007883a 	mov	r3,zero
 800ea44:	12400015 	stw	r9,0(r2)
 800ea48:	20805215 	stw	r2,328(r4)
 800ea4c:	10006215 	stw	zero,392(r2)
 800ea50:	10006315 	stw	zero,396(r2)
 800ea54:	883fde26 	beq	r17,zero,800e9d0 <__register_exitproc+0x3c>
 800ea58:	18c9883a 	add	r4,r3,r3
 800ea5c:	2109883a 	add	r4,r4,r4
 800ea60:	1109883a 	add	r4,r2,r4
 800ea64:	21802215 	stw	r6,136(r4)
 800ea68:	01800044 	movi	r6,1
 800ea6c:	12406217 	ldw	r9,392(r2)
 800ea70:	30cc983a 	sll	r6,r6,r3
 800ea74:	4992b03a 	or	r9,r9,r6
 800ea78:	12406215 	stw	r9,392(r2)
 800ea7c:	21c04215 	stw	r7,264(r4)
 800ea80:	01000084 	movi	r4,2
 800ea84:	893fd21e 	bne	r17,r4,800e9d0 <__register_exitproc+0x3c>
 800ea88:	11006317 	ldw	r4,396(r2)
 800ea8c:	218cb03a 	or	r6,r4,r6
 800ea90:	11806315 	stw	r6,396(r2)
 800ea94:	003fce06 	br	800e9d0 <__register_exitproc+0x3c>
 800ea98:	18805304 	addi	r2,r3,332
 800ea9c:	18805215 	stw	r2,328(r3)
 800eaa0:	003fc606 	br	800e9bc <__register_exitproc+0x28>
 800eaa4:	00bfffc4 	movi	r2,-1
 800eaa8:	003fd006 	br	800e9ec <__register_exitproc+0x58>

0800eaac <__call_exitprocs>:
 800eaac:	defff504 	addi	sp,sp,-44
 800eab0:	df000915 	stw	fp,36(sp)
 800eab4:	dd400615 	stw	r21,24(sp)
 800eab8:	dc800315 	stw	r18,12(sp)
 800eabc:	dfc00a15 	stw	ra,40(sp)
 800eac0:	ddc00815 	stw	r23,32(sp)
 800eac4:	dd800715 	stw	r22,28(sp)
 800eac8:	dd000515 	stw	r20,20(sp)
 800eacc:	dcc00415 	stw	r19,16(sp)
 800ead0:	dc400215 	stw	r17,8(sp)
 800ead4:	dc000115 	stw	r16,4(sp)
 800ead8:	d9000015 	stw	r4,0(sp)
 800eadc:	2839883a 	mov	fp,r5
 800eae0:	04800044 	movi	r18,1
 800eae4:	057fffc4 	movi	r21,-1
 800eae8:	00820074 	movhi	r2,2049
 800eaec:	1082a404 	addi	r2,r2,2704
 800eaf0:	12000017 	ldw	r8,0(r2)
 800eaf4:	45005217 	ldw	r20,328(r8)
 800eaf8:	44c05204 	addi	r19,r8,328
 800eafc:	a0001c26 	beq	r20,zero,800eb70 <__call_exitprocs+0xc4>
 800eb00:	a0800117 	ldw	r2,4(r20)
 800eb04:	15ffffc4 	addi	r23,r2,-1
 800eb08:	b8000d16 	blt	r23,zero,800eb40 <__call_exitprocs+0x94>
 800eb0c:	14000044 	addi	r16,r2,1
 800eb10:	8421883a 	add	r16,r16,r16
 800eb14:	8421883a 	add	r16,r16,r16
 800eb18:	84402004 	addi	r17,r16,128
 800eb1c:	a463883a 	add	r17,r20,r17
 800eb20:	a421883a 	add	r16,r20,r16
 800eb24:	e0001e26 	beq	fp,zero,800eba0 <__call_exitprocs+0xf4>
 800eb28:	80804017 	ldw	r2,256(r16)
 800eb2c:	e0801c26 	beq	fp,r2,800eba0 <__call_exitprocs+0xf4>
 800eb30:	bdffffc4 	addi	r23,r23,-1
 800eb34:	843fff04 	addi	r16,r16,-4
 800eb38:	8c7fff04 	addi	r17,r17,-4
 800eb3c:	bd7ff91e 	bne	r23,r21,800eb24 <__call_exitprocs+0x78>
 800eb40:	00800034 	movhi	r2,0
 800eb44:	10800004 	addi	r2,r2,0
 800eb48:	10000926 	beq	r2,zero,800eb70 <__call_exitprocs+0xc4>
 800eb4c:	a0800117 	ldw	r2,4(r20)
 800eb50:	1000301e 	bne	r2,zero,800ec14 <__call_exitprocs+0x168>
 800eb54:	a0800017 	ldw	r2,0(r20)
 800eb58:	10003226 	beq	r2,zero,800ec24 <__call_exitprocs+0x178>
 800eb5c:	a009883a 	mov	r4,r20
 800eb60:	98800015 	stw	r2,0(r19)
 800eb64:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800eb68:	9d000017 	ldw	r20,0(r19)
 800eb6c:	a03fe41e 	bne	r20,zero,800eb00 <__call_exitprocs+0x54>
 800eb70:	dfc00a17 	ldw	ra,40(sp)
 800eb74:	df000917 	ldw	fp,36(sp)
 800eb78:	ddc00817 	ldw	r23,32(sp)
 800eb7c:	dd800717 	ldw	r22,28(sp)
 800eb80:	dd400617 	ldw	r21,24(sp)
 800eb84:	dd000517 	ldw	r20,20(sp)
 800eb88:	dcc00417 	ldw	r19,16(sp)
 800eb8c:	dc800317 	ldw	r18,12(sp)
 800eb90:	dc400217 	ldw	r17,8(sp)
 800eb94:	dc000117 	ldw	r16,4(sp)
 800eb98:	dec00b04 	addi	sp,sp,44
 800eb9c:	f800283a 	ret
 800eba0:	a0800117 	ldw	r2,4(r20)
 800eba4:	80c00017 	ldw	r3,0(r16)
 800eba8:	10bfffc4 	addi	r2,r2,-1
 800ebac:	15c01426 	beq	r2,r23,800ec00 <__call_exitprocs+0x154>
 800ebb0:	80000015 	stw	zero,0(r16)
 800ebb4:	183fde26 	beq	r3,zero,800eb30 <__call_exitprocs+0x84>
 800ebb8:	95c8983a 	sll	r4,r18,r23
 800ebbc:	a0806217 	ldw	r2,392(r20)
 800ebc0:	a5800117 	ldw	r22,4(r20)
 800ebc4:	2084703a 	and	r2,r4,r2
 800ebc8:	10000b26 	beq	r2,zero,800ebf8 <__call_exitprocs+0x14c>
 800ebcc:	a0806317 	ldw	r2,396(r20)
 800ebd0:	2088703a 	and	r4,r4,r2
 800ebd4:	20000c1e 	bne	r4,zero,800ec08 <__call_exitprocs+0x15c>
 800ebd8:	89400017 	ldw	r5,0(r17)
 800ebdc:	d9000017 	ldw	r4,0(sp)
 800ebe0:	183ee83a 	callr	r3
 800ebe4:	a0800117 	ldw	r2,4(r20)
 800ebe8:	15bfbf1e 	bne	r2,r22,800eae8 <__call_exitprocs+0x3c>
 800ebec:	98800017 	ldw	r2,0(r19)
 800ebf0:	153fcf26 	beq	r2,r20,800eb30 <__call_exitprocs+0x84>
 800ebf4:	003fbc06 	br	800eae8 <__call_exitprocs+0x3c>
 800ebf8:	183ee83a 	callr	r3
 800ebfc:	003ff906 	br	800ebe4 <__call_exitprocs+0x138>
 800ec00:	a5c00115 	stw	r23,4(r20)
 800ec04:	003feb06 	br	800ebb4 <__call_exitprocs+0x108>
 800ec08:	89000017 	ldw	r4,0(r17)
 800ec0c:	183ee83a 	callr	r3
 800ec10:	003ff406 	br	800ebe4 <__call_exitprocs+0x138>
 800ec14:	a0800017 	ldw	r2,0(r20)
 800ec18:	a027883a 	mov	r19,r20
 800ec1c:	1029883a 	mov	r20,r2
 800ec20:	003fb606 	br	800eafc <__call_exitprocs+0x50>
 800ec24:	0005883a 	mov	r2,zero
 800ec28:	003ffb06 	br	800ec18 <__call_exitprocs+0x16c>

0800ec2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800ec2c:	defffd04 	addi	sp,sp,-12
 800ec30:	df000215 	stw	fp,8(sp)
 800ec34:	df000204 	addi	fp,sp,8
 800ec38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800ec3c:	0001883a 	nop
 800ec40:	e0bfff17 	ldw	r2,-4(fp)
 800ec44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800ec48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800ec4c:	10000226 	beq	r2,zero,800ec58 <_exit+0x2c>
    ALT_SIM_FAIL();
 800ec50:	002af070 	cmpltui	zero,zero,43969
 800ec54:	00000106 	br	800ec5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800ec58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800ec5c:	003fff06 	br	800ec5c <_exit+0x30>
